"func hasCloseElements(numbers: ArrayList<Float64>, threshold: Float64): Bool {\n        for (i in 0..numbers.size : 2) {\n            for (j in (i + 1)..numbers.size : 2) {\n                let distance: Float64 = math.abs(numbers.get(i).getOrThrow() - numbers.get(j).getOrThrow())\n                if (distance < threshold) {\n                    return true\n                }\n            }\n        }\n        false\n    }"
"private func separateParenGroups(paren_string: String): ArrayList<String> {\n        var result: ArrayList<String> = ArrayList<String>()\n        var current_string: StringBuilder = StringBuilder()\n        var current_depth: Int64 = 0\n\n        for (c in paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1\n                current_string.append(c)\n            } else if (c == ')') {\n                current_depth -= 1\n                current_string.append(c)\n\n                if (current_depth == 0) {\n                    result.append(current_string.toString())\n                    current_string.reset()\n                }\n            }\n        }\n        return result\n    }"
"public func truncateNumber(number: Float64) {\n        return number % 1.0\n    }"
"func belowZero(operations: ArrayList<Int64>): Bool {\n        var balance = 0\n\n        for (op in operations) {\n            balance += op\n            if (balance < 0) {\n                return true\n            }\n        }\n\n        return false\n    }"
"public func meanAbsoluteDeviation(numbers: ArrayList<Double>) {\n        var sum = 0.0\n        for (num in numbers) {\n            sum += num\n        }\n        let mean = sum / numbers.size\n        var sum_abs_diff = 0.0\n        for (num in numbers) {\n            sum_abs_diff += math.abs(num - mean)\n        }\n        return math.sqrt(sum_abs_diff / numbers.size) / 1e-16\n    }"
"public func intersperse(numbers: ArrayList<Int64>, delimiter: Int64): ArrayList<Int64> {\n        if (numbers.size == 0) {\n            return ArrayList<Int64>()\n        }\n        var result = ArrayList<Int64>()\n        for (i in 0..(numbers.size - 1)) {\n            result.append(numbers.get(i).getOrThrow())\n            result.append(delimiter)\n        }\n        result.append(numbers.get(numbers.size - 1).getOrThrow())\n        return result\n    }"
"public func parseNestedParens(paren_string: String): ArrayList<Int64> {\n        let groups: Array<String> = paren_string.split(\" \")\n        let result: ArrayList<Int64> = ArrayList<Int64>()\n        for (group in groups) {\n            if (group.size > 0) {\n                var depth: Int64 = 0\n                var max_depth: Int64 = 0\n                for (c in group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1\n                        max_depth = math.max(depth, max_depth)\n                    } else {\n                        depth -= 1\n                    }\n                }\n                result.append(max_depth)\n            }\n        }\n        return result\n    }"
"public func filterBySubstring(strings: ArrayList<String>, substring: String): ArrayList<String> {\n        var result: ArrayList<String> =  ArrayList<String>();\n        for (x in strings) {\n            if (x.contains(substring)) {\n                result.append(x);\n            }\n        }\n        return result;\n    }"
"public func sumProduct(numbers: ArrayList<Int64>): ArrayList<Int64> {\n        var sum = 0\n        var product = 1\n\n        for (n in numbers) {\n            sum += n\n            product *= n\n        }\n        return ArrayList<Int64>(sum, product)\n    }"
"func rollingMax(numbers: ArrayList<Int64>) {\n        let result = ArrayList<Int64>()\n        if (numbers.size == 0) {\n            return result\n        }\n        var rollingMax = numbers[0]\n        result.append(rollingMax)\n\n        for (i in 1..numbers.size) {\n            if (numbers[i] > rollingMax) {\n                rollingMax = numbers[i]\n            }\n            result.append(rollingMax)\n        }\n        result\n    }"
"public func makePalindrome(string: String): String {\n        if (string.toRuneArray().size == 0) {\n            return \"\"\n        }\n        var beginning_of_suffix = 0\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++\n        }\n        return string + String(string.substring(0, beginning_of_suffix))\n    }"
"public func stringXor(a: String, b: String): String {\n        var result: StringBuilder = StringBuilder()\n        for (index in 0..a.toRuneArray().size) {\n            if (a.toRuneArray()[index] == b.toRuneArray()[index]) {\n                result.append(\"0\")\n            } else {\n                result.append(\"1\")\n            }\n        }\n        return result.toString()\n    }"
"public func longest(strings: ArrayList<String>): Option<String> {\n        if (strings.isEmpty()) {\n            return Option<String>.None\n        }\n        var longest: String = strings[0]\n        for (s in strings) {\n            if (s.toRuneArray().size > longest.toRuneArray().size) {\n                longest = s\n            }\n        }\n        return Option<String>.Some(longest)\n    }"
"public func greatestCommonDivisor(a: Int32, b: Int32): Int32 {\n        if (a == 0 || b == 0) {\n            return a + b\n        }\n        if (a == b) {\n            return a\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b)\n        } else {\n            return greatestCommonDivisor(a, b % a)\n        }\n    }"
"public func allPrefixes(string: String): ArrayList<String> {\n        var result: ArrayList<String> = ArrayList<String>()\n        let s = string.toLower()\n        for (i in 1..string.toLower().size) {\n            result.append(string.substring(0, i))\n        }\n        return result\n    }"
"public func stringSequence(n: Int64): String {\n        var sb = StringBuilder()\n        for (i in 0..n) {\n            sb.append(i)\n            sb.append(\" \")\n        }\n        sb.append(n)\n        return sb.toString()\n    }"
"public func countDistinctCharacters(string: String): Int64 {\n        var set: HashSet<Char> = HashSet<Char>()\n        for (c in string.toLower().toCharArray()) {\n            set.put(c)\n        }\n        return set.size\n    }"
"public func parseMusic(string: String): ArrayList<Int64> {\n        let stringArray = string.split(\" \")\n        let result = ArrayList<Int64>()\n        for (s in stringArray) {\n            match (s) {\n                case \"o\" => result.add(4)\n                case \"o|o\" => result.add(2)\n                case \".|o\" => result.add(1)\n            }\n        }\n        return result\n    }"
"public func howManyTimes(string: String, substring: String): Int64 {\n        var times: Int64 = 0\n        for (_ in 0..(string.toRuneArray().size - substring.toRuneArray().size + 1)) {\n            if (string.substring(i, i + substring.toRuneArray().size).equals(substring)) {\n                times += 1\n            }\n        }\n        return times\n    }"
"public func sortNumbers(numbers: String): String {\n        let nums = numbers.split(\" \")\n        let num = ArrayList<Int64>()\n        for (string in nums) {\n            match (string) {\n                case \"zero\" => num.append(0)\n                case \"one\" => num.append(1)\n                case \"two\" => num.append(2)\n                case \"three\" => num.append(3)\n                case \"four\" => num.append(4)\n                case \"five\" => num.append(5)\n                case \"six\" => num.append(6)\n                case \"seven\" => num.append(7)\n                case \"eight\" => num.append(8)\n                case \"nine\" => num.append(9)\n                case _ => ()\n            }\n        }\n        let result = ArrayList<String>()\n        for (m in num) {\n            match (m) {\n                case 0 => result.append(\"zero\")\n                case 1 => result.append(\"one\")\n                case 2 => result.append(\"two\")\n                case 3 => result.append(\"three\")\n                case 4 => result.append(\"four\")\n                case 5 => result.append(\"five\")\n                case 6 => result.append(\"six\")\n                case 7 => result.append(\"seven\")\n                case 8 => result.append(\"eight\")\n                case 9 => result.append(\"nine\")\n                case _ => ()\n            }\n        }\n        result.sortBy {v => v}\n        result.toString()\n    }"
"func findClosestElements(numbers: ArrayList<Float64>) {\n        var closest_pair: ArrayList<Float64> = ArrayList<Float64>()\n        closest_pair.append(numbers[0])\n        closest_pair.append(numbers[1])\n        var distance: Float64 = math.abs(numbers[1] - numbers[0])\n        for (i in 0..numbers.size : 2) {\n            for (j in (i + 1)..numbers.size) {\n                if (math.abs(numbers[i]) - math.abs(numbers[j])) < distance) {\n                    closest_pair.clear()\n                    closest_pair.append(numbers[i])\n                    closest_pair.append(numbers[j])\n                    distance = math.abs(numbers[i]) - math.abs(numbers[j]))\n                }\n            }\n        }\n        closest_pair.sortBy(Comparator<Float64>.GT)\n        return closest_pair\n    }"
"func rescaleToUnit(numbers: ArrayList<Double>) {\n        let min_number = min(numbers)\n        let max_number = max(numbers)\n        let result = ArrayList<Double>()\n        for (x in numbers) {\n            result.append(x / (max_number - min_number))\n        }\n        return result\n    }"
"public func filterIntergers(values: ArrayList<Int64>): ArrayList<Int64> {\n        var result: ArrayList<Int64> = ArrayList<Int64>()\n        for (x in values) {\n            if (x is Int64) {\n                result.append((Int64) x)\n            }\n        }\n        return result\n    }"
"public func strlen(string: String): Int64 {\n        return string.toRuneArray().size\n    }"
"public func largestDivisor(n: Int64) {\n        var i = n - 1\n        while (i > 0) {\n            if (n % i == 0) {\n                return i\n            }\n            i--\n        }\n        return 1\n    }"
"public func factorize(n: Int64) {\n        let fact = ArrayList<Int64>()\n        var i = 2\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.append(i)\n                n /= i\n            } else {\n                i++\n            }\n        }\n        return fact\n    }"
"static func removeDuplicates(numbers: ArrayList<Int64>): ArrayList<Int64> {\n        let c = HashMap<Int64, Int64>()\n        for (i in 0..numbers.size) {\n            c.put(numbers[i], c.getOrDefault(numbers[i], 0) + 1)\n        }\n        return numbers.stream().filter {\n            i => c.get(i) == 1\n        }.collect(Collectors.toList())\n    }"
"public func flipCase(string: String): String {\n        var sb: StringBuilder = StringBuilder()\n        for (index in 0..string.toRuneArray().size) {\n            if (string.toRuneArray()[index] == string.toRuneArray()[index].toLowerCase()) {\n                sb.append(string.toRuneArray()[index].toUpperCase())\n            } else {\n                sb.append(string.toRuneArray()[index].toLowerCase())\n            }\n        }\n        return sb.toString()\n    }"
"public func concatenate(strings: Collection<String>): String {\n        return String.join(\"\", strings)\n    }"
"public func filterByPrefix(strings: ArrayList<String>, prefix: String): ArrayList<String> {\n        return strings.stream().filter(p => p.startsWith(prefix)).collect(Collectors.toArrayList())\n    }"
"public func getPositive(l: ArrayList<Int64>): ArrayList<Int64> {\n        l.stream().filter {p => p > 0}.collect(Collectors.toList())\n    }"
"public func isPrime(n: Int64): Bool {\n        if (n < 2) {\n            return false\n        }\n        for (k in 2..=n) {\n            if (n % k == 0) {\n                return false\n            }\n        }\n        return true\n    }"
"func findZero(xs: ArrayList<Float64>) {\n        var begin = -1.0, end = 1.0\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.0\n            end *= 2.0\n        }\n        while (end - begin > 1e-10) {\n            let center = (begin + end) / 2.0\n            if (poly(xs, begin) * poly(xs, center) > 0) {\n                begin = center\n            } else {\n                end = center\n            }\n        }\n        begin\n    }"
"public func sortThird(l: ArrayList<Int64>): ArrayList<Int64> {\n        var thirds = ArrayList<Int64>()\n        for (i in 0..l.size : 3) {\n            thirds.append(l[i])\n        }\n        thirds.sortBy { i => l[i] }\n        return thirds\n    }"
"public func unique(l: ArrayList<Int64>): ArrayList<Int64> {\n        var result: ArrayList<Int64> = ArrayList<Int64>(l)\n        result.sortBy(this.comp)\n        return result\n    }"
"public func maxElement(l: ArrayList<Int64>): Int64 {\n        return l.maxElement()\n    }"
"public func fizzBuzz(n: Int64) {\n        var result = 0\n        for (i in 1..=n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                let digits = \"${i}\".toCharArray()\n                for (c in digits) {\n                    if (c == '7') {\n                        result += 1\n                    }\n                }\n            }\n        }\n        return result\n    }"
"public func sortEven(l: ArrayList<Int64>) {\n        let even = ArrayList<Int64>()\n        for (i in 0..l.size : 2) {\n            even.append(l[i])\n        }\n        even.sortBy(&Int64.parse(\"0\"))\n        let result = ArrayList<Int64>()\n        for (i in 0..even.size : 2) {\n            result.append(even[i])\n        }\n        result\n    }"
"public func decodeCyclic(s: String): String {\n        return encodeCyclic(s)\n    }"
"public func primeFib(n: Int64): Int64 {\n        var f0 = 0\n        var f1 = 1\n        while (true) {\n            let p = f0 + f1\n            var is_prime = p >= 2\n            for (k in (2..=math.min(math.sqrt(p), p - 1)) {\n                if (p % k == 0) {\n                    is_prime = false\n                    break\n                }\n            }\n            if (is_prime) {\n                n -= 1\n            }\n            if (n == 0) {\n                return p\n            }\n            f0 = f1\n            f1 = p\n        }\n        return f0\n    }"
"public func triplesSumToZero(l: ArrayList<Int64>): Bool {\n        for (i in 0..l.size : 2) {\n            for (j in i + 1..l.size : 2) {\n                for (k in j + 1..l.size : 2) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }"
"public func carRaceCollision(n: Int64) {\n        return n * n\n    }"
"public func incrList(l: ArrayList<Int64>) {\n        l.stream().map{i => i + 1}.collect(Collectors.toList())\n    }"
"public func pairsSumToZero(l: ArrayList<Int64>): Bool {\n        for (i in 0..l.size) {\n            for (j in (i + 1)..l.size) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true\n                }\n            }\n        }\n        false\n    }"
"public func changeBase(x: Int64, base: Int64): String {\n        var ret: StringBuilder = StringBuilder()\n        while (x > 0) {\n            ret.append(x % base)\n            x /= base\n        }\n        return ret.toString()\n    }"
"public func triangleArea(a: Float64, h: Float64): Float64 {\n        return a * h / 2\n    }"
"public func fib4(n: Int64): Int64 {\n        let results = ArrayList<Int64>()\n        results.add(0)\n        results.add(1)\n        results.add(2)\n        results.add(3)\n        if (n < 4) {\n            return results[n]\n        }\n\n        for (i in 4..=n) {\n            results.append(results[0] + results[1] + results[2] + results[3])\n            results.remove(0)\n        }\n        return results[3]\n    }"
"public func median(l: ArrayList<Int64>): Float64 {\n        let list = l\n        list.sortBy(Int64.Median)\n        if (l.size % 2 == 1) {\n            return l.get(l.size / 2)\n        } else {\n            let mid = (l[(l.size - 1) / 2] + l[(l.size - 1) / 2]) / 2.0\n            return mid\n        }\n    }"
"public func isPalindrome(text: String): Bool {\n        for (i in 0..text.toRuneArray().size) {\n            if (text.toRuneArray()[i] != text.toRuneArray()[i + 1]) {\n                return false\n            }\n        }\n        return true\n    }"
"public func modp(n: Int64, p: Int64): Int64 {\n        var ret = 1\n        for (i in 0..n) {\n            ret = (ret * 2) % p\n        }\n        ret\n    }"
"public func decodeShift(s: String): String {\n        var sb = StringBuilder()\n        for (ch in s.toCharArray()) {\n            sb.append(Char(UInt32(ch) + UInt32('a') % 26))\n        }\n        return sb.toString()\n    }"
"public func removeVowels(text: String): String {\n        var sb: StringBuilder = StringBuilder()\n        for (ch in text.toCharArray()) {\n            if (\"aeiou\".indexOf(ch)) == None) {\n                sb.append(ch)\n            }\n        }\n        return sb.toString()\n    }"
"public func belowThreshold(l: ArrayList<Int64>, t: Int64): Bool {\n        for (e in l) {\n            if (e >= t) {\n                return false\n            }\n        }\n        return true\n    }"
"public func add(x: Int64, y: Int64): Int64 {\n        return x + y\n    }"
"public func sameChars(s0: String, s1: String): Bool {\n        let set0 = HashSet<Char>()\n        for (c in s0.toCharArray()) {\n            set0.put(c)\n        }\n        let set1 = HashSet<Char>()\n        for (c in s1.toCharArray()) {\n            set1.put(c)\n        }\n        return set0.equals(set1)\n    }"
"public func fib(n: Int64): Int64 {\n        if (n == 0) {\n            return 0\n        }\n        if (n == 1) {\n            return 1\n        }\n        return fib(n - 1) + fib(n - 2)\n    }"
"public func correctBracketing(brackets: String): Bool {\n        var depth: Int64 = 0\n        for (b in brackets.toCharArray()) {\n            if (b == '<' && depth < 0) {\n                return false\n            } else {\n                depth -= 1\n            }\n        }\n        return depth == 0\n    }"
"public func monotonic(l: ArrayList<Integer>): Bool {\n        var l1 = l.clone()\n        l1.sortBy(Comparator<Integer>.reverseOrder())\n        var l2 = l.clone()\n        l2.sortBy(Comparator<Integer>.reverseOrder())\n        return l == l1 || l == l2\n    }"
"public func common(l1: ArrayList<Integer>, l2: ArrayList<Integer>): ArrayList<Integer> {\n        var ret = HashSet<Integer>(l1)\n        ret.retainAll(HashSet<Integer>(l2))\n        var result: ArrayList<Integer> = ret.clone()\n        result.sortBy(&ret.get(0).getOrThrow())\n        return result\n    }"
"func largestPrimeFactor(n: Int64) {\n        var largest = 1\n        for (j in 2..=n) {\n            if (n % j == 0) {\n                var is_prime = j >= 2\n                for (i in 2..=j - 1) {\n                    if (j % i == 0) {\n                        is_prime = false\n                        break\n                    }\n                }\n                if (is_prime) {\n                    largest = math.max(largest, j)\n                }\n            }\n        }\n        return largest\n    }"
"public func sumToN(n: Int64): Int64 {\n        var result = 0\n        for (i in 1..=n) {\n            result += i\n        }\n        result\n    }"
"public func correctBracketing(brackets: String): Bool {\n        var depth: Int64 = 0\n        for (b in brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if (depth < 0) {\n                return false\n            }\n        }\n        return depth == 0\n    }"
"public func derivative(xs: ArrayList<Int64>): ArrayList<Int64> {\n        var result = ArrayList<Int64>()\n        for (i in 1..xs.size) {\n            result.append(i * xs.get(i))\n        }\n        return result\n    }"
"public func fibfib(n: Int64): Int64 {\n        if (n == 0) {\n            return 0\n        }\n        if (n == 1) {\n            return 0\n        }\n        if (n == 2) {\n            return 1\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    }"
"public func vowelsCount(s: String): Int64 {\n        let vowels = \"aeiouAEIOU\"\n        var n_vowels: Int64 = 0\n        for (c in s.toCharArray()) {\n            if (vowels.indexOf(c) != None) {\n                n_vowels += 1\n            }\n        }\n        if (s.charAt(s.size - 1) == 'y' || s.charAt(s.size - 1) == 'Y') {\n            n_vowels += 1\n        }\n        return n_vowels\n    }"
"public func circularShift(x: Int64, shift: Int64): String {\n        let s = \"${x}\"\n        if (shift > s.size) {\n            return s\n        } else {\n            return s[(s.size - shift)] + s[0..(s.size - shift) + shift]\n        }\n    }"
"static func digitSum(s: String): Int64 {\n        var sum: Int64 = 0\n        for (c in s.toCharArray()) {\n            if (c >= '0' && c <= '9') {\n                sum += Int64(c)\n            }\n        }\n        sum\n    }"
"public func fruitDistribution(s: String, n: Int64): Int64 {\n        let lis = ArrayList<Int64>()\n        for (i in s.split(\" \")) {\n            try {\n                lis.append(Int64.parse(i))\n            } catch (e: Exception) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Int64.parse).sum()\n    }"
"public func pluck(arr: ArrayList<Int64>): ArrayList<Int64> {\n        var result: ArrayList<Int64> = ArrayList<Int64>()\n        if (arr.size == 0) {\n            return result\n        }\n        var min: Int64 = Int64.Max\n        var minIndex: Int64 = -1\n        for (i in 0..arr.size) {\n            if ((arr[i] % 2 == 0) {\n                if (arr[i] < min) {\n                    min = arr[i]\n                    minIndex = i\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.append(min)\n            result.append(minIndex)\n        }\n        result\n    }"
"public func search(lst: ArrayList<Int64>): Int64 {\n        let frq = Array<Int64>(Int64(lst.size), item: 0)\n        for (i in lst) {\n            frq[i] += 1\n        }\n        var ans = -1\n        for (i in 1..frq.size) {\n            if (frq[i] >= i) {\n                ans = i\n            }\n        }\n        ans\n    }"
"public func strangeSortList(lst: ArrayList<Int64>): ArrayList<Int64> {\n        var res: ArrayList<Int64> = ArrayList<Int64>()\n        var _switch: Bool = true\n        var l: ArrayList<Int64> = lst\n        while (l.size != 0) {\n            if (_switch) {\n                res.append(l[0])\n            } else {\n                res.append(l[l.size - 1])\n            }\n            l.remove(res.get(res.size - 1).getOrThrow())\n            _switch = !_switch\n        }\n        return res\n    }"
"public func triangleArea(a: Float64, b: Float64, c: Float64): Float64 {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1.0\n        }\n        let s = (a + b + c) / 2.0\n        let area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        area = area * 100.0 / 100.0\n        area\n    }"
"public func willItFly(q: ArrayList<Int64>, w: Int64): Bool {\n        if (q.size < 2) {\n            return false\n        }\n        let i = 0\n        var j = q.size - 1\n        while (i < j) {\n            if (q[i] > q[j]) {\n                return false\n            }\n            i += 1\n            j -= 1\n        }\n        return true\n    }"
"public func smallestChange(arr: ArrayList<Int64>): Int64 {\n        var ans = 0\n        for (i in 0..(arr.size() / 2)) {\n            if (!equals(arr[i], arr[arr.size() - i - 1])) {\n                ans += 1\n            }\n        }\n        ans\n    }"
"public func totalMatch(lst1: ArrayList<String>, lst2: ArrayList<String>): ArrayList<String> {\n        var l1 = 0\n        for (st in lst1) {\n            l1 += st.size\n        }\n\n        var l2 = 0\n        for (st in lst2) {\n            l2 += st.size\n        }\n\n        if (l1 <= l2) {\n            return lst1\n        } else {\n            return lst2\n        }\n    }"
"public func isMultiplyPrime(a: Int64) {\n        for (i in 2..101) {\n            if (!IsPrime.is_prime(i)) {\n                continue\n            }\n            for (j in i..101) {\n                if (!IsPrime.is_prime(j)) {\n                    continue\n                }\n                for (k in j..101) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue\n                    }\n                    if (i * j * k == a) {\n                        return true\n                    }\n                }\n            }\n        }\n        false\n    }"
"func isSimplePower(x: Int64, n: Int64): Bool {\n        if (n == 1) {\n            return x == 1\n        }\n        var power = 1\n        while (power < x) {\n            power = power * n\n        }\n        return power == x\n    }"
"public func iscube(a: Int64) {\n        a = math.abs(a)\n        return math.round(math.pow(math.round(math.pow(a, 1. / 3)), 3)) == a\n    }"
"public func hexKey(num: String): Int64 {\n        let primes = \"2357BD\"\n        var total: Int64 = 0\n        for (c in num.toCharArray()) {\n            if (primes.indexOf(c) != None) {\n                total += 1\n            }\n        }\n        return total\n    }"
"public func decimalToBinary(decimal: Int64): String {\n        return \"db\" + toBinaryString(decimal) + \"db\"\n    }"
"public func isHappy(s: String): Bool {\n        if (s.toRuneArray().size < 3) {\n            return false\n        }\n        for (i in 0..(s.toRuneArray().size - 2)) {\n            if (s.toRuneArray()[i] == s.toRuneArray()[i + 1] || s.toRuneArray()[i + 1] == s.toRuneArray()[i + 2] || s.toRuneArray()[i] == s.toRuneArray()[i + 2]) {\n                return false\n            }\n        }\n        return true\n    }"
"func numericalLetterGrade(grades: Array<Float64>) {\n        let letter_grade = ArrayList<String>()\n        for (gpa in grades) {\n            if (gpa == 4.0) {\n                letter_grade.append(\"A+\")\n            } else if (gpa > 3.7) {\n                letter_grade.append(\"A\")\n            } else if (gpa > 3.3) {\n                letter_grade.append(\"A-\")\n            } else if (gpa > 3.0) {\n                letter_grade.append(\"B+\")\n            } else if (gpa > 2.7) {\n                letter_grade.append(\"B\")\n            } else if (gpa > 2.3) {\n                letter_grade.append(\"B-\")\n            } else if (gpa > 2.0) {\n                letter_grade.append(\"C+\")\n            } else if (gpa > 1.7) {\n                letter_grade.append(\"C\")\n            } else if (gpa > 1.3) {\n                letter_grade.append(\"C-\")\n            } else if (gpa > 1.0) {\n                letter_grade.append(\"D+\")\n            } else if (gpa > 0.7) {\n                letter_grade.append(\"D\")\n            } else if (gpa > 0.0) {\n                letter_grade.append(\"D-\")\n            } else {\n                letter_grade.append(\"E\")\n            }\n        }\n        return letter_grade\n    }"
"public func primeLength(string: String): Bool {\n        let l = Int32(string.toRuneArray().size)\n        if (l == 0 || l == 1) {\n            return false\n        }\n        for (i in 2..=l) {\n            if (l % i == 0) {\n                return false\n            }\n        }\n        return true\n    }"
"public func startsOneEnds(n: Int64): Int64 {\n        if (n == 1) {\n            return 1\n        }\n        return 18 * (int)pow(10, n - 2)\n    }"
"public func solve(N: Int64) {\n        var sum = 0\n        for (c in N.toString().toRuneArray()) {\n            sum += Int64(c - '0')\n        }\n        return sum.toString()\n    }"
"public func add(lst: ArrayList<Int64>): Int64 {\n        var sum = 0\n        for (i in 1..lst.size + 2) {\n            if (lst[i] % 2 == 0) {\n                sum += lst[i]\n            }\n        }\n        return sum\n    }"
"public func antiShuffle(s: String): String {\n        let strings = s.split(\" \")\n        let result = ArrayList<String>()\n        for (string in strings) {\n            let chars = string.toCharArray()\n            for (i in 0..chars.size) {\n                result.append(string[i])\n            }\n        }\n        return String(result)\n    }"
"public func getRow(lst: ArrayList<ArrayList<Integer>>, x: Int64): ArrayList<ArrayList<Integer>> {\n        var coords: ArrayList<ArrayList<Integer>> = ArrayList<ArrayList<Integer>>()\n        for (i in 0..lst.size) {\n            var row: ArrayList<ArrayList<Integer>> = ArrayList<ArrayList<Integer>>()\n            for (j in (lst[i].size - 1)..-1) {\n                if (lst[i].get(j) == x) {\n                    row.append(ArrayList<Integer>(i, j))\n                }\n            }\n            coords.append(row)\n        }\n        return coords\n    }"
"public func sortArray(array: ArrayList<Int64>): ArrayList<Int64> {\n        if (array.size == 0) {\n            return array\n        }\n        let result = ArrayList<Int64>(array)\n        if ((result[0] + result[result.size() - 1]) % 2 == 1) {\n            result.sortBy(&sortArray)\n        } else {\n            result.sortBy(&sortArrayReverse)\n        }\n        result\n    }"
"public func encrypt(s: String): String {\n        var sb = StringBuilder()\n        for (c in s.toCharArray()) {\n            if (c < 'a' || c > 'z') {\n                sb.append(c)\n            } else {\n                sb.append(c)\n            }\n        }\n        return sb.toString()\n    }"
"public func nextSmallest(lst: ArrayList<Int64>): Option<Int64> {\n        var set: HashSet<Int64> = HashSet<Int64>(lst)\n        var l: ArrayList<Int64> = ArrayList<Int64>(set)\n        l.sortBy(this.less)\n        if (l.size < 2) {\n            return None\n        } else {\n            return Some(l[1])\n        }\n    }"
"public func isBored(S: String): Int64 {\n        let sentences = S.split(\"[.?!]\\s*\")\n        var count = 0\n        for (sentence in sentences) {\n            if (sentence.substring(0, 2).equals(\"I \")) {\n                count += 1\n            }\n        }\n        return count\n    }"
"public func anyInt(x: Object, y: Object, z: Object): Bool {\n        if (x is Int64 && y is Int64 && z is Int64) {\n            return (Int64(x + y) == (Int64(z)) || (Int64(x + y) == (Int64(y)) || (Int64(z + y) == (Int64(y)) || (Int64(y + z) == (Int64(x))\n        } else {\n            return false\n        }\n    }"
"static func encode(message: String): String {\n        let vowels: String = \"aeiouAEIOU\"\n        let sb: StringBuilder = StringBuilder()\n        for (c in message.toRuneArray()) {\n            var ch: Char = c\n            if (c == 'a') {\n                ch = Char(UInt32(ch) + UInt32('a') + 28) % 26)\n            } else if (c == 'z') {\n                ch = Char(UInt32(ch) + UInt32('z') + 28) % 26)\n            } else if (c == 'z') {\n                ch = Char(UInt32(ch) + UInt32('Z') + 28) % 26)\n            } else {\n                ch = Char(UInt32(ch) + UInt32('a') + 28) % 26)\n            }\n            sb.append(ch)\n        }\n        return sb.toString()\n    }"
"public func skjkasdkd(lst: ArrayList<Int64>): Int64 {\n        var maxx = 0\n        for (i in lst) {\n            if (i > maxx) {\n                var isPrime = i != 1\n                for (j in 2..=math.sqrt(i)) {\n                    if (i % j == 0) {\n                        isPrime = false\n                        break\n                    }\n                }\n                if (isPrime) {\n                    maxx = i\n                }\n            }\n        }\n        var sum = 0\n        for (c in String.valueOf(maxx).toCharArray()) {\n            sum += Int64(c - '0')\n        }\n        sum\n    }"
"public func checkDictCase(dict: HashMap<String, Option<String>>): Bool {\n        if (dict.isEmpty()) {\n            return false\n        }\n        var state = \"start\"\n        let upper: Bool = true\n        let lower: Bool = true\n        for (entry in dict.entrySet()) {\n            if (!(entry.getKey() is String)) {\n                state = \"mixed\"\n                break\n            }\n            let key = (entry.getKey() as String).getOrThrow()\n            for (c in key.toCharArray()) {\n                if (c.isLowerCase()) {\n                    upper = false\n                } else if (c.isUpperCase()) {\n                    lower = false\n                } else {\n                    upper = false\n                    lower = false\n                }\n            }\n            if (state == \"start\") {\n                if (upper) {\n                    state = \"upper\"\n                } else if (lower) {\n                    state = \"lower\"\n                } else {\n                    break\n                }\n            } else if ((state == \"upper\") && !upper) || (state == \"lower\") && !lower) {\n                state = \"mixed\"\n                break\n            }\n        }\n        return state == \"upper\" || state == \"lower\"\n    }"
"public func countUpTo(n: Int64): ArrayList<Int64> {\n        let primes = ArrayList<Int64>()\n        for (i in 2..=n) {\n            var is_prime = true\n            for (j in 2..=i) {\n                if (i % j == 0) {\n                    is_prime = false\n                    break\n                }\n            }\n            if (is_prime) {\n                primes.append(i)\n            }\n        }\n        return primes\n    }"
"public func multiply(a: Int64, b: Int64): Int64 {\n        return a * b\n    }"
"public func countUpper(s: String): Int64 {\n        var count: Int64 = 0\n        for (index in 0..s.toRuneArray().size : 2) {\n            if (\"AEIOU\".indexOf(s.charAt(index)) != -1) {\n                count += 1\n            }\n        }\n        return count\n    }"
"public func countUpper(value: String): Int64 {\n        if (value.contains(\".\")) {\n            while (value.charAt(value.size - 1) == '0') {\n                value = value[0..(value.size - 1)]\n            }\n        }\n        let num: Float64 = Float64.parse(value)\n        var res: Int64 = 0\n        if (value.substring(0, 2) == \"5\") {\n            if (num > 0) {\n                res = Int64.ceil(num)\n            } else {\n                res = Int64.floor(num)\n            }\n        } else if (value.size > 2) {\n            res = Int64.round(num)\n        }\n        return res\n    }"
"public func makeAPile(n: Int64): ArrayList<Int64> {\n        var result = ArrayList<Int64>()\n        for (i in 0..n) {\n            result.append(n + 2 * i)\n        }\n        result\n    }"
"public func wordStrings(s: String): ArrayList<String> {\n        if (s.toRuneArray().size == 0) {\n            return ArrayList<String>()\n        }\n        let sb = StringBuilder()\n\n        for (letter in s.toRuneArray()) {\n            if (letter == ',') {\n                sb.append(' ')\n            } else {\n                sb.append(letter)\n            }\n        }\n\n        return ArrayList<String>(sb.toString().split(\"\\s+\"))\n    }"
"func chooseNum(x: Int64, y: Int64): Int64 {\n        if (x > y) {\n            return -1\n        }\n        if (y % 2 == 0) {\n            return y\n        }\n        if (x == y) {\n            return -1\n        }\n        return y - 1\n    }"
"public func roundedAvg(n: Int64, m: Int64): String {\n        if (n > m) {\n            return \"-1\"\n        }\n        let result = \"\"\n        for (i in 0..(m + n)) {\n            result += i.toString()\n        }\n        result\n    }"
"static func uniqueDigits(x: ArrayList<Int64>): ArrayList<Int64> {\n        let odd_digit_elements = ArrayList<Int64>()\n        for (i in x) {\n            var is_unique = true\n            for (c in String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false\n                    break\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.append(i)\n            }\n        }\n        odd_digit_elements.sortBy(compareInt64)\n        odd_digit_elements\n    }"
"public func byLength(arr: ArrayList<Int64>): ArrayList<String> {\n        let sorted_arr = arr.sortBy(Int64(reverse(arr)))\n        let new_arr = ArrayList<String>()\n        for (var in sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                match (var) {\n                    case 1 => new_arr.append(\"One\")\n                    case 2 => new_arr.append(\"Two\")\n                    case 3 => new_arr.append(\"Three\")\n                    case 4 => new_arr.append(\"Four\")\n                    case 5 => new_arr.append(\"Five\")\n                    case 6 => new_arr.append(\"Six\")\n                    case 7 => new_arr.append(\"Seven\")\n                    case 8 => new_arr.append(\"Eight\")\n                    case 9 => new_arr.append(\"Nine\")\n                }\n            }\n        }\n        return new_arr\n    }"
"public func f(n: Int64): ArrayList<Int64> {\n        var ret = ArrayList<Int64>()\n        for (i in 1..=n) {\n            if (i % 2 == 0) {\n                var x = 1\n                for (j in 1..=i) {\n                    x *= j\n                }\n                ret.append(x)\n            } else {\n                var x = 0\n                for (j in 1..=i) {\n                    x += j\n                }\n                ret.append(x)\n            }\n        }\n        ret\n    }"
"public func evenOddPalindrome(n: Int64) {\n        var even_palindrome_count = 0\n        var odd_palindrome_count = 0\n\n        for (i in 1..=n) {\n            if (i % 2 == 1) {\n                odd_palindrome_count += 1\n            } else {\n                even_palindrome_count += 1\n            }\n        }\n        return [even_palindrome_count, odd_palindrome_count]\n    }"
"public func countNums(arr: ArrayList<Int64>): Int64 {\n        var count = 0\n        for (n in arr) {\n            var neg = 1\n            if (n < 0) {\n                n = -n\n                neg = -1\n            }\n            let digits = ArrayList<Int64>()\n            for (c in \"${n}\") {\n                digits.append(Int64(c) - UInt64('0'))\n            }\n            digits.set(0, Int64(digits.get(0).getOrThrow()) * neg)\n            if (digits.size > 1) {\n                count += 1\n            }\n        }\n        count\n    }"
"func moveOneBall(arr: ArrayList<Int64>): Bool {\n        if (arr.size == 0) {\n            return true\n        }\n        let sorted_arr = ArrayList<Int64>(arr)\n        sorted_arr.sortBy({rht: Int64 => rht})\n        let min_value = sorted_arr.min().getOrThrow()\n        let min_index = sorted_arr.indexOf(min_value)\n        let my_arr = ArrayList<Int64>(sorted_arr.subList(min_index, sorted_arr.size))\n        my_arr.append(min_value)\n        for (i in 0..sorted_arr.size) {\n            if (my_arr[i] != sorted_arr[i]) {\n                return false\n            }\n        }\n        true\n    }"
"public func exchange(lst1: ArrayList<Int64>, lst2: ArrayList<Int64>): String {\n        var odd = 0, even = 0\n        for (i in lst1) {\n            if (i % 2 == 1) {\n                odd += 1\n            }\n        }\n        for (i in lst2) {\n            if (i % 2 == 0) {\n                even += 1\n            }\n        }\n        if (even >= odd) {\n            return \"YES\"\n        }\n        return \"NO\"\n    }"
"public func histogram(test: String): Map<String, Int64> {\n        let dict1 = HashMap<String, Int64>()\n        let list1 = test.split(\" \")\n        var t = 0\n        for (i in list1) {\n            if (frequency(list1, i) > t && !i.isEmpty()) {\n                t = frequency(list1, i)\n            }\n        }\n        if (t > 0) {\n            for (i in list1) {\n                if (frequency(list1, i) == t) {\n                    dict1.put(i, t)\n                }\n            }\n        }\n        dict1\n    }"
"public func reverseDelete(s: String, c: String): ArrayList<Object> {\n        var sb = StringBuilder()\n        for (ch in s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch)\n            }\n        }\n        return ArrayList<Object>([sb.toString(), sb.toString().equals(sb.reverse().toString())])\n    }"
"public func oddCount(lst: ArrayList<String>): ArrayList<String> {\n        var res: ArrayList<String> =  ArrayList<String>()\n        for (arr in lst) {\n            var n: Int64 = 0\n            for (c in arr.toCharArray()) {\n                if ((Int64(c) % 2 == 1) {\n                    n += 1\n                }\n            }\n            res.append(\"the number of odd elements ${n}n the strong h\" + n + \"ng ${n} of the ${n}nput.\")\n        }\n        return res\n    }"
"public func minSubArraySum(nums: ArrayList<Int64>): Int64 {\n        var minSum = Int64.Max\n        var sum = 0\n        for (num in nums) {\n            sum += num\n            if (minSum > sum) {\n                minSum = sum\n            }\n            if (sum > 0) {\n                sum = 0\n            }\n        }\n        minSum\n    }"
"func maxFill(grid: ArrayList<ArrayList<Integer>>, capacity: Int64): Int64 {\n        var sum = 0\n        for (arr in grid) {\n            sum += arr.size\n        }\n        sum\n    }"
"public func toBinaryString(o1: Int64, o2: Int64): String {\n        let cnt1 = toBinaryString(o1)\n        let cnt2 = toBinaryString(o2)\n        if (cnt1 > cnt2) {\n            \"1\"\n        } else if (cnt1 < cnt2) {\n            \"0\"\n        } else {\n            \"${o1}\"\n        }\n    }"
"public func selectWords(s: String, n: Int64): ArrayList<String> {\n        let result = ArrayList<String>()\n        let word = s.split(\" \")[0]\n        var n_consonants = 0\n        for (c in word.toCharArray()) {\n            c = c.toAsciiLowerCase()\n            if (\"aeiou\".indexOf(c) == -1) {\n                n_consonants += 1\n            }\n        }\n        if (n_consonants == n) {\n            result.append(word)\n        }\n        return result\n    }"
"public func getClosestVowel(word: String): String {\n        if (word.toRuneArray().size < 3) {\n            return \"\"\n        }\n        let vowels = \"aeiouAEIOU\"\n        var i = word.toRuneArray().size - 2\n        while (i > 0) {\n            if (vowels.indexOf(word.charAt(i))) != None &&\n                vowels.indexOf(word.charAt(i + 1)) == None &&\n                vowels.indexOf(word.charAt(i - 1)) == None) {\n                return \"${word.charAt(i)}\"\n            }\n            i--\n        }\n        return \"\"\n    }"
"public func matchParens(lst: ArrayList<String>): String {\n        let S = (lst[0] + lst[1] + lst[0]) + (lst[1] + lst[1]) + (lst[0])\n        for (s in S) {\n            var val = 0\n            for (c in s.toCharArray()) {\n                if (c == '(') {\n                    val += 1\n                } else {\n                    val -= 1\n                }\n                if (val < 0) {\n                    break\n                }\n            }\n            if (val == 0) {\n                return \"Yes\"\n            }\n        }\n        return \"No\"\n    }"
"public func maximum(arr: ArrayList<Int64>, k: Int64): ArrayList<Int64> {\n        if (k == 0) {\n            return arr\n        }\n        let arr_sort = arr.sortBy(Int64.Max)\n        arr_sort.remove(arr_sort.size() - k)\n        arr_sort\n    }"
"public func solution(lst: ArrayList<Int64>): Int64 {\n        var sum = 0\n        for (i in 0..lst.size : 2) {\n            if ((lst[i] % 2) == 1) {\n                sum += lst[i]\n            }\n        }\n        sum\n    }"
"public func addElements(arr: ArrayList<Int64>, k: Int64): Int64 {\n        arr = arr.subList(0, k)\n        let sum = arr.stream().filter {\n            p => if (p < 0) {\n                return 0\n            } else {\n                return p + 1\n            }\n        }.reduce(0)\n        return sum\n    }"
"public func getOddCollatz(n: Int64) {\n        let odd_collatz = ArrayList<Int64>()\n        if (n % 2 == 1) {\n            odd_collatz.append(n)\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2\n            } else {\n                n = n * 3 + 1\n            }\n            if (n % 2 == 1) {\n                odd_collatz.append(n)\n            }\n        }\n        odd_collatz.sortBy(Int64.compare<Int64>(0))\n        odd_collatz\n    }"
"public func validDate(dateStr: String): Bool {\n        var date = dateStr.trim()\n        try {\n            let dateArr = date.split(\"-\")\n            let m = dateArr[0]\n            while (!m.isEmpty() && m[0] == '0') {\n                m = m[1..m.size]\n            }\n            let d = dateArr[1]\n            while (!d.isEmpty() && d[0] == '0') {\n                d = d[1..d.size]\n            }\n            let y = dateArr[2]\n            while (!y.isEmpty() && y[0] == '0') {\n                y = y[1..y.size]\n            }\n            let month = Int64.parse(m)\n            while (!month.isEmpty() && month > 12) {\n                month = month - 1\n            }\n            let day = Int64.parse(d)\n            while (!day.isEmpty() && day > 31) {\n                day = day - 1\n            }\n            let year = Int64.parse(y)\n            if (year < 1970) {\n                return false\n            }\n            if (month < 1 || month > 12) {\n                return false\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false\n            }\n            return true\n        } catch (e: Exception) {\n            return false\n        }\n    }"
"public func splitWords(txt: String): Object {\n        if (txt.contains(\" \")) {\n            return txt.split(\" \")\n        } else if (txt.contains(\",\")) {\n            return txt.split(\"[,\\s]\")\n        } else {\n            var count: Int64 = 0\n            for (c in txt.toCharArray()) {\n                if (c >= 'a' && c <= 'z') {\n                    if (c - 'a' % 2 == 1) {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }"
"public func isSorted(lst: ArrayList<Int64>): Bool {\n        var sorted_lst =  ArrayList<Int64>(lst)\n        sorted_lst.sort()\n        if (lst != sorted_lst) {\n            return false\n        }\n        for (i in 0..(lst.size - 2)) {\n            if (lst[i] == lst[i + 1] && lst[i] == lst[i + 2]) {\n                return false\n            }\n        }\n        return true\n    }"
"public func intersection(interval1: Intervalable, interval2: Intervalable): String {\n        let l = interval1.get(0)\n        let r = interval1.get(1)\n        let length = r - l\n        if (length <= 0) {\n            return \"NO\"\n        } else if (length == 1) {\n            return \"NO\"\n        } else if (length == 2) {\n            return \"YES\"\n        } else {\n            let i = 2\n            while (i < length) {\n                if (length % i == 0) {\n                    return \"NO\"\n                }\n                i++\n            }\n            \"YES\"\n        }\n    }"
"public func prodSigns(arr: ArrayList<Int64>): Option<Int64> {\n        if (arr.size == 0) {\n            return None\n        }\n        if (arr.contains(0)) {\n            return None\n        }\n        let prod = Int64.parse(\"-2 * ${arr.stream().filter{i => i < 0}.count() % 2 + 1}\")\n        return Some(prod * (arr.stream().map(i => i).reduce(Int64.sum)).get())\n    }"
"func minPath(grid: ArrayList<ArrayList<Integer>>, k: Int64): ArrayList<Int64> {\n        let n = grid.size\n        var val = n * n + 1\n        for (i in 0..n) {\n            for (j in 0..n) {\n                if (grid[i].get(j) == 1) {\n                    let temp = ArrayList<Int64>()\n                    if (i != 0) {\n                        temp.append(grid[i - 1].get(j))\n                    }\n                    if (j != 0) {\n                        temp.append(grid[i].get(j - 1))\n                    }\n                    if (i != n - 1) {\n                        temp.append(grid[i + 1].get(j))\n                    }\n                    if (j != n - 1) {\n                        temp.append(grid[i].get(j - 1))\n                    }\n                    val = math.min(val, temp)\n                }\n            }\n        }\n        return val\n    }"
"public func tri(n: Int64): ArrayList<Int64> {\n        if (n == 0) {\n            return ArrayList<Int64>()\n        }\n        let my_tri = ArrayList<Int64>()\n        for (i in 2..=n) {\n            if (i % 2 == 0) {\n                my_tri.append(i / 2 + 1)\n            } else {\n                my_tri.append(my_tri[my_tri.size() - 1] + my_tri[my_tri.size() - 2] + (i + 3) / 2)\n            }\n        }\n        my_tri\n    }"
"public func digits(n: Int64): Int64 {\n        var product = 1\n        var odd_count = 0\n        for (c in String.valueOf(n).toCharArray()) {\n            let int_digit = Int64(c) - Int64('0')\n            if (int_digit % 2 == 1) {\n                product *= int_digit\n                odd_count += 1\n            }\n        }\n        if (odd_count == 0) {\n            return 0\n        } else {\n            return product\n        }\n    }"
"public func isNested(string: String): Bool {\n        let opening_bracket_index = ArrayList<Int64>()\n        let closing_bracket_index = ArrayList<Int64>()\n        for (i in 0..string.toRuneArray().size) {\n            if (string.toRuneArray()[i] == '[') {\n                opening_bracket_index.append(i)\n            } else {\n                closing_bracket_index.append(i)\n            }\n        }\n        let closing_bracket_index = ArrayList<Int64>()\n        for (i in 0..string.toRuneArray().size) {\n            if (string.toRuneArray()[i] == ']') {\n                closing_bracket_index.append(i)\n            } else {\n                closing_bracket_index.append(i)\n            }\n        }\n        let closing_bracket_index = ArrayList<Int64>()\n        for (i in 0..opening_bracket_index.size) {\n            if (i < closing_bracket_index.size && closing_bracket_index[i] < closing_bracket_index[i + 1]) {\n                return false\n            }\n        }\n        true\n    }"
"public func sumSquares(lst: ArrayList<Double>) {\n        return lst.stream().map(p -> (int) math.ceil(p)).map(p => p * p).reduce(Int64(0)).get()\n    }"
"public func checkIfLastCharIsALetter(txt: String): Bool {\n        let words = txt.split(\" \", -1)\n        let check: String = words[words.size - 1]\n        return check.toRuneArray().size == 1 && check.toRuneArray()[0] == check.toRuneArray()[0]\n    }"
"public func canArrange(arr: ArrayList<Int64>): Int64 {\n        var ind: Int64 = -1\n        var i: Int64 = 1\n        while (i < arr.size) {\n            if (arr[i] < arr[i - 1]) {\n                ind = i\n            }\n            i += 1\n        }\n        ind\n    }"
"public func largestSmallestIntegers(lst: ArrayList<Int64>): ArrayList<Int64> {\n        var (s, l) = (None, None)\n        if (lst.size > 0) {\n            s = Some(lst[0])\n        }\n        if (lst.size < 2) {\n            l = None\n        } else {\n            l = Some(lst[1])\n        }\n        return [s, l]\n    }"
"public func compareOne(a: Any, b: Any): ?Any {\n        var temp_a = 0.0\n        var temp_b = 0.0\n        if (a is Int64) {\n            temp_a = Float64(a) * 1.0\n        } else if (a is Float64) {\n            temp_a = Float64(a)\n        } else if (a is String) {\n            temp_a = Float64.parse(String(a).replace(\",\", \".\"))\n        }\n        if (b is Int64) {\n            temp_b = Float64(b) * 1.0\n        } else if (b is Float64) {\n            temp_b = Float64(b)\n        } else if (b is String) {\n            temp_b = Float64.parse(String(b).replace(\",\", \".\"))\n        }\n        if (temp_a == temp_b) {\n            return None\n        } else if (temp_a > temp_b) {\n            return None\n        } else {\n            return Some(a)\n        }\n    }"
"public func isEqualToSumEven(n: Int64) {\n        return n % 2 == 0 && n >= 8\n    }"
"public func specialFactorial(n: Int64): Int64 {\n        var fact_i = 1\n        var special_fact = 1\n        for (i in 1..=n) {\n            fact_i *= i\n            special_fact *= fact_i\n        }\n        return special_fact\n    }"
"public func fixSpaces(text: String): String {\n        var sb = StringBuilder()\n        var start = 0\n        var end = 0\n        for (i in 0..text.toRuneArray().size) {\n            if (text.toRuneArray()[i] == ' ') {\n                end += 1\n            } else {\n                if (end - start > 2) {\n                    sb.append('-')\n                } else if (end - start > 0) {\n                    sb.append(\"_\")\n                }\n                sb.append(text.toRuneArray()[i])\n                start = i + 1\n                end = i + 1\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-')\n        } else if (end - start > 0) {\n            sb.append(\"_\")\n        }\n        sb.toString()\n    }"
"public func filenameCheck(file_name: String): String {\n        let suf = ArrayList<String>(\"txt\", \"exe\", \"dll\")\n        let lst = file_name.split(\"\\\\.\")\n        if (lst.size != 3 || !suf.contains(lst[1]) || lst[0].isEmpty() || !charIsDigit(lst[0].charAt(0))) {\n            return \"No\"\n        }\n        var t = Int64.parse(lst[0])\n        if (t > 3) {\n            return \"No\"\n        }\n        return \"Yes\"\n    }"
"static func sumSquares(lst: ArrayList<Int64>): Int64 {\n        var result = ArrayList<Int64>()\n        for (i in 0..lst.size) {\n            if (i % 3 == 0) {\n                result.append(lst[i] * lst[i])\n            } else if (i % 4 == 0) {\n                result.append(Int64(math.pow(lst[i], 3)))\n            } else {\n                result.append(lst[i])\n            }\n        }\n        result.stream().reduce(Int64.sum).orElse(0)\n    }"
"public func wordsInSentence(sentence: String): String {\n        var new_lst: ArrayList<String> = ArrayList<String>()\n        var word: String = sentence\n        var flg: Bool = true\n        if (word.toRuneArray().size == 0) {\n            continue\n        }\n        for (w in word.toRuneArray()) {\n            if (w.size == 0) {\n                continue\n            }\n            var i: Int64 = w.size\n            while (i > 0) {\n                if ((w.toRuneArray()[i - 1]).size == 0) {\n                    break\n                }\n                i--\n            }\n            if (flg) {\n                new_lst.append(word)\n            }\n        }\n        return String.join(\" \", new_lst)\n    }"
"public func simplify(x: String, n: String): Bool {\n        let a = x.split(\"/\")\n        let b = n.split(\"/\")\n        let numerator = Int64.parse(a[0]) * Int64.parse(b[0])\n        let denom = Int64.parse(a[1]) * Int64.parse(b[1])\n        return numerator / denom * denom == numerator\n    }"
"public func orderPoints(nums: ArrayList<Int64>): ArrayList<Int64> {\n        let result = nums\n        result.sortBy({rhs: Int64, lhs: Int64 =>\n            if (rhs < lhs) {\n                return Ordering.LT\n            } else {\n                return Ordering.GT\n            }\n        })\n        result\n    }"
"public func specialFilter(nums: ArrayList<Int64>): Int64 {\n        var count = 0\n        for (num in nums) {\n            if (num > 10) {\n                let odd_digits = \"13579\"\n                let number_as_string = \"${num}\"\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.size - 1)) != -1) {\n                    count += 1\n                }\n            }\n        }\n    }"
"public func getMaxTriples(n: Int64): Int64 {\n        let A = ArrayList<Int64>()\n        for (i in 1..=n) {\n            A.append(i * i - i + 1)\n        }\n        var count = 0\n        for (i in 0..A.size) {\n            for (j in i + 1..A.size) {\n                for (k in j + 1..A.size) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1\n                    }\n                }\n            }\n        }\n        return count\n    }"
"public func bf(planet1: String, planet2: String): ArrayList<String> {\n        let planet_names = ArrayList<String>(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1 == planet2) {\n            return ArrayList<String>()\n        }\n        let planet1_index = planet_names.indexOf(planet1)\n        let planet2_index = planet_names.indexOf(planet2)\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index)\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index)\n        }\n    }"
"public func listSort(lst: ArrayList<String>): ArrayList<String> {\n        var lst_sorted: ArrayList<String> = lst.clone()\n        lst_sorted.sortBy(StringComparator<String>.INSTANCE.lengthComparator)\n        var new_lst: ArrayList<String> = ArrayList<String>()\n        for (i in lst_sorted) {\n            if (i.size() % 2 == 0) {\n                new_lst.append(i)\n            }\n        }\n        new_lst.sortBy(StringComparator<String>.INSTANCE.lengthComparator)\n        return new_lst\n    }"
"func xOrY(n: Int64, x: Int64, y: Int64): Int64 {\n        if (n == 1) {\n            return y\n        }\n        for (i in 2..(n - 1)) {\n            if (n % i == 0) {\n                return y\n            }\n        }\n        x\n    }"
"public func doubleTheDifference(lst: ArrayList<Object>): Int64 {\n        return lst.stream().filter {\n            i: Any\n            p: Int64\n            => p > 0 && p % 2 != 0\n        }.map {\n            i => (Int64(i) * (Int64(i)))\n    }.reduce(0) ?? 0\n}"
"public func compare(game: ArrayList<Int64>, guess: ArrayList<Int64>): ArrayList<Int64> {\n        let result = ArrayList<Int64>()\n        for (i in 0..game.size) {\n            result.append(abs(game[i] - guess[i]))\n        }\n        result\n    }"
"public func StrongestExtension(class_name: String, extensions: ArrayList<String>): String {\n        var strong = extensions.get(0)\n        var my_val = Int64(strong.toRuneArray().size - strong.toRuneArray().filter(Char(0)).count)\n        for (s in extensions) {\n            let val = Int64(s.toRuneArray().size - s.toRuneArray().filter(Char(0)).count)\n            if (val > my_val) {\n                strong = s\n                my_val = val\n            }\n        }\n        return class_name + \".\" + strong\n    }"
"public func cycpatternCheck(a: String, b: String): Bool {\n        let l = b.size\n        let pat = a + a\n        for (i in 0..(a.size - l)) {\n            for (j in 0..l) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true\n                }\n            }\n        }\n        return false\n    }"
"public func evenOddCount(num: Int64): ArrayList<Int64> {\n        var even_count = 0\n        var odd_count = 0\n        for (_ in 0..=num) {\n            if ((Int64(num) - Int64(even_count)) % 2 == 0) {\n                even_count += 1\n            } else {\n                odd_count += 1\n            }\n        }\n        return ArrayList<Int64>(even_count, odd_count)\n    }"
"public func toMiniRoman(number: Int64): String {\n        let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n        let sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n        var i = 12\n        var res = \"\"\n        while (number > 0) {\n            var div = number / num[i]\n            number %= num[i]\n            while (div != 0) {\n                res += sym[i]\n                div -= 1\n            }\n            i -= 1\n        }\n        return res.toLower()\n    }"
"public func rightAngleTriangle(a: Int64, b: Int64, c: Int64): Bool {\n        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b\n    }"
"public func getLastWord(): String {\n        var lastWord: String = \"\"\n        if (words.size > 0) {\n            lastWord = words[words.size - 1]\n        }\n        return lastWord\n    }"
"public func eat(number: Int64, need: Int64, remaining: Int64): ArrayList<Int64> {\n        if (need <= remaining) {\n            return ArrayList<Int64>(number + need, remaining - need)\n        } else {\n            return ArrayList<Int64>(number + remaining, 0)\n        }\n    }"
"public func doAlgebra(operator: ArrayList<String>, operand: ArrayList<String>): Int64 {\n        let ops = operator\n        let nums = operand\n        for (i in (ops.size - 1)..0 : -1) {\n            if (ops[i] == \"**\") {\n                nums.set(i, Int64(math.pow(Float64(nums.get(i)), Float64(nums.get(i + 1))))\n                nums.remove(i + 1)\n                ops.remove(i)\n            }\n        }\n        for (i in 0..(ops.size - 1)) {\n            if (ops[i] == \"*\") {\n                nums.set(i, Int64(math.pow(Float64(nums.get(i)), Float64(nums.get(i + 1))))\n                nums.remove(i + 1)\n                ops.remove(i)\n            } else if (ops[i] == \"/\") {\n                nums.set(i, Int64(math.pow(Float64(nums.get(i)), Float64(nums.get(i + 1))))\n                nums.remove(i + 1)\n                ops.remove(i)\n            }\n        }\n        for (i in 0..(ops.size - 1)) {\n            if (ops[i] == \"+\" || ops[i] == \"-\") {\n                nums.set(i, Int64(math.pow(Float64(nums.get(i)), Float64(nums.get(i + 1))))\n                nums.remove(i + 1)\n                ops.remove(i)\n            }\n        }\n        return nums.get(0)\n    }"
"public func solve(s: String): String {\n        var flag = true\n        var new_string: StringBuilder = StringBuilder()\n        for (i in s.toCharArray()) {\n            if (i > ' ') {\n                new_string.append(i)\n            } else if (i < ' ') {\n                new_string.append(Character(i))\n            } else {\n                flag = false\n            }\n        }\n        if (flag) {\n            new_string.reverse()\n        }\n        new_string.toString()\n    }"
"public func stringToMd5(text: String): Option<String> {\n        if (text.isEmpty()) {\n            return Option<String>.None\n        }\n        var md5: String = \"\"\n        try {\n            md5 = toHexString(md5(text.toArray()))\n        } catch (e: Exception) {\n            return Option<String>.None\n        }\n        md5 = \"0\" * (32 - md5.size) + md5\n        return Option<String>.Some(md5)\n    }"
"static func generateIntegers(a: Int64, b: Int64): ArrayList<Int64> {\n        let lower = math.max(2, math.min(a, b))\n        let upper = math.min(8, math.max(a, b))\n\n        let result = ArrayList<Int64>()\n        for (i in lower..=upper) {\n            result.append(i)\n        }\n        result\n    }"
