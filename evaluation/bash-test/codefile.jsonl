"public func hasCloseElements(numbers: ArrayList<Float64>, threshold: Float64): Bool {\n    for (i in 0..numbers.size) {\n        for (j in (i + 1)..numbers.size) {\n            let distance = math.abs(numbers[i] - numbers[j])\n            if (distance < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n"
"public func separateParenGroups(paren_string: String): ArrayList<String> {\n    let result = ArrayList<String>()\n    var current_string = StringBuilder()\n    var current_depth = 0\n\n    for (c in paren_string.toRuneArray()) {\n        if (c == '(') {\n            current_depth += 1\n            current_string.append(c)\n        } else if (c == ')') {\n            current_depth -= 1\n            current_string.append(c)\n\n            if (current_depth == 0) {\n                result.append(current_string.toString())\n                current_string.clear()\n            }\n        }\n    }\n    return result\n}\n"
"public func truncateNumber(number: Float64): Float64 {\n    return number % 1.0\n}\n"
"func belowZero(operations: ArrayList<Int64>): Bool {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n"
"public func meanAbsoluteDeviation(numbers: ArrayList<Float64>): Float64 {\n    var sum: Float64 = 0.0\n    for (num in numbers) {\n        sum += num\n    }\n    let mean = sum / Float64(numbers.size)\n    var sum_abs_diff: Float64 = 0.0\n    for (num in numbers) {\n        sum_abs_diff += math.abs(num - mean)\n    }\n    return sum_abs_diff / Float64(numbers.size)\n}\n"
"public func intersperse(numbers: ArrayList<Int64>, delimiter: Int64): ArrayList<Int64> {\n    if (numbers.size == 0) {\n        return ArrayList<Int64>()\n    }\n    var result = ArrayList<Int64>()\n    for (i in 0..(numbers.size - 1)) {\n        result.append(numbers[i])\n        result.append(delimiter)\n    }\n\n    result.append(numbers[numbers.size - 1])\n\n    return result\n}\n"
"public func parseNestedParens(paren_string: String): ArrayList<Int64> {\n    let groups = paren_string.split(\" \")\n    let result = ArrayList<Int64>()\n    for (group in groups) {\n        if (group.size > 0) {\n            var depth = 0\n            var max_depth = 0\n            for (c in group.toRuneArray()) {\n                if (c == '(') {\n                    depth += 1\n                    max_depth = math.max(depth, max_depth)\n                } else {\n                    depth -= 1\n                }\n            }\n            result.append(max_depth)\n        }\n    }\n    return result\n}\n"
"public func filterBySubstring(strings: ArrayList<String>, substring: String): ArrayList<String> {\n    var result: ArrayList<String> = ArrayList<String>()\n    for (x in strings) {\n        if (x.contains(substring)) {\n            result.append(x)\n        }\n    }\n    return result\n}\n"
"public func sumProduct(numbers: ArrayList<Int64>): ArrayList<Int64> {\n    var sum: Int64 = 0\n    var product: Int64 = 1\n\n    for (n in numbers) {\n        sum += n\n        product *= n\n    }\n    return ArrayList<Int64>([sum, product])\n}\n"
"public func rollingMax(numbers: ArrayList<Int64>): ArrayList<Int64> {\n    let result = ArrayList<Int64>()\n    if (numbers.size == 0) {\n        return result\n    }\n    var rollingMax = numbers[0]\n    result.append(rollingMax)\n\n    for (i in 1..numbers.size) {\n        if (numbers[i] > rollingMax) {\n            rollingMax = numbers[i]\n        }\n        result.append(rollingMax)\n    }\n\n    return result\n}\n"
"public func isPalindrome(str: String): Bool {\n    var i = 0\n    var j = str.size - 1\n    while (i < j) {\n        if (str[i]!= str[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n"
"public func stringXor(a: String, b: String): String {\n    let result = StringBuilder()\n    for (i in 0..a.size) {\n        if (a[i] == b[i]) {\n            result.append(\"0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n    return result.toString()\n}\n"
"public func longest(strings: ArrayList<String>): Option<String> {\n    if (strings.size == 0) {\n        return Option<String>.None\n    }\n    var longest: String = strings.get(0).getOrThrow()\n    for (s in strings) {\n        if (s.size > longest.size) {\n            longest = s\n        }\n    }\n    return Option<String>.Some(longest)\n}\n"
"public func greatestCommonDivisor(a: Int64, b: Int64): Int64 {\n    if (a == 0 || b == 0) {\n        return a + b\n    }\n    if (a == b) {\n        return a\n    }\n    if (a > b) {\n        return greatestCommonDivisor(a % b, b)\n    } else {\n        return greatestCommonDivisor(a, b % a)\n    }\n}\n"
"public func allPrefixes(string: String): ArrayList<String> {\n    var result: ArrayList<String> = ArrayList<String>()\n    for (i in 1..=string.size) {\n        result.append(string[0..i])\n    }\n    return result\n}\n"
"public func stringSequence(n: Int64): String {\n    let sb = StringBuilder()\n    for (i in 0..n) {\n        sb.append(i)\n        sb.append(\" \")\n    }\n    sb.append(n)\n    return sb.toString()\n}"
"public func countDistinctCharacters(string: String): Int64 {\n    let set = HashSet<Char>()\n    for (c in string.toAsciiLower().toRuneArray()) {\n        set.put(c)\n    }\n    return set.size\n}\n"
"public func parseMusic(string: String): ArrayList<Int64> {\n    let notes = string.split(\" \")\n    var result = ArrayList<Int64>()\n    for (s in notes) {\n        match (s) {\n            case \"o\" => result.append(4)\n            case \"o|\" => result.append(2)\n            case \".|\" => result.append(1)\n            case _ => ()\n        }\n    }\n    return result\n}\n"
"public func howManyTimes(string: String, substring: String): Int64 {\n    var times: Int64 = 0\n    for (i in 0..(string.size - substring.size + 1)) {\n        if (string[i..(i + substring.size)] == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n"
"public func sortNumbers(numbers: String): String {\n    let nums = numbers.split(\" \")\n    let num = ArrayList<Int64>()\n    for (string in nums) {\n        match (string) {\n            case \"zero\" => num.append(0)\n            case \"one\" => num.append(1)\n            case \"two\" => num.append(2)\n            case \"three\" => num.append(3)\n            case \"four\" => num.append(4)\n            case \"five\" => num.append(5)\n            case \"six\" => num.append(6)\n            case \"seven\" => num.append(7)\n            case \"eight\" => num.append(8)\n            case \"nine\" => num.append(9)\n            case _ => ()\n        }\n    }\n    num.sortBy({ a: Int64, b: Int64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    let result = ArrayList<String>()\n    for (m in num) {\n        match (m) {\n            case 0 => result.append(\"zero\")\n            case 1 => result.append(\"one\")\n            case 2 => result.append(\"two\")\n            case 3 => result.append(\"three\")\n            case 4 => result.append(\"four\")\n            case 5 => result.append(\"five\")\n            case 6 => result.append(\"six\")\n            case 7 => result.append(\"seven\")\n            case 8 => result.append(\"eight\")\n            case 9 => result.append(\"nine\")\n            case _ => ()\n        }\n    }\n    return result.joinToString(\" \")\n}\n"
"public func findClosestElements(numbers: ArrayList<Float64>): ArrayList<Float64> {\n    var closest_pair: ArrayList<Float64> = ArrayList<Float64>()\n    closest_pair.append(numbers[0])\n    closest_pair.append(numbers[1])\n    var distance: Float64 = math.abs(numbers[1] - numbers[0])\n    for (i in 0..numbers.size) {\n        for (j in i + 1..numbers.size) {\n            if (math.abs(numbers[i] - numbers[j]) < distance) {\n                closest_pair.clear()\n                closest_pair.append(numbers[i])\n                closest_pair.append(numbers[j])\n                distance = math.abs(numbers[i] - numbers[j])\n            }\n        }\n    }\n    closest_pair.sortBy({ a: Float64, b: Float64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    return closest_pair\n}\n"
"public func rescaleToUnit(numbers: ArrayList<Float64>): ArrayList<Float64> {\n    let min_number = min(numbers)\n    let max_number = max(numbers)\n    let result = ArrayList<Float64>()\n    for (x in numbers) {\n        result.append((x - min_number) / (max_number - min_number))\n    }\n    return result\n}\n"
"public func filterIntergers(values: ArrayList<Any>): ArrayList<Int64> {\n    let result = ArrayList<Int64>()\n    for (x in values) {\n        if (x is Int64) {\n            result.append(x as Int64)\n        }\n    }\n    return result\n}"
"public func strlen(string: String): Int32 {\n    return Int32(string.size)\n}"
"func largestDivisor(n: Int64): Int64 {\n    for (i in (n - 1)..=0 : -1) {\n        if (n % i == 0) {\n            return i\n        }\n    }\n    return 1\n}\n"
"public func factorize(n: Int64): ArrayList<Int64> {\n    var fact: ArrayList<Int64> = ArrayList<Int64>()\n    var i = 2\n    while (n > 1) {\n        if (n % i == 0) {\n            fact.append(i)\n            n /= i\n        } else {\n            i++\n        }\n    }\n    return fact\n}\n"
"public func removeDuplicates(numbers: ArrayList<Int64>): ArrayList<Int64> {\n    var c = HashMap<Int64, Int64>()\n    for (i in numbers) {\n        if (c.contains(i)) {\n            c[i] = c[i] + 1\n        } else {\n            c[i] = 1\n        }\n    }\n    var result = ArrayList<Int64>()\n    for (i in numbers) {\n        if (c[i] == 1) {\n            result.append(i)\n        }\n    }\n    return result\n}\n"
"public func flipCase(string: String): String {\n    let sb = StringBuilder()\n    for (i in 0..string.size) {\n        if (string[i].isAsciiLower()) {\n            sb.append(string[i].toAsciiUpper())\n        } else {\n            sb.append(string[i].toAsciiLower())\n        }\n    }\n    return sb.toString()\n}\n"
"public func concatenate(strings: ArrayList<String>): String {\n    var result: String = \"\"\n    for (str in strings) {\n        result += str\n    }\n    return result\n}\n"
"public func filterByPrefix(strings: ArrayList<String>, prefix: String): ArrayList<String> {\n    var result: ArrayList<String> = ArrayList<String>()\n    for (str in strings) {\n        if (str.startsWith(prefix)) {\n            result.append(str)\n        }\n    }\n    return result\n}\n"
"public func getPositive(l: ArrayList<Int64>): ArrayList<Int64> {\n    var positiveList = ArrayList<Int64>()\n    for (i in 0..l.size) {\n        if (l[i] > 0) {\n            positiveList.append(l[i])\n        }\n    }\n    return positiveList\n}\n"
"func isPrime(n: Int64): Bool {\n    if (n < 2) {\n        return false\n    }\n    for (k in 2..n) {\n        if (n % k == 0) {\n            return false\n        }\n    }\n    return true\n}\n"
"public func poly(xs: ArrayList<Float64>, x: Float64): Float64 {\n    var result: Float64 = 0.0\n    for (i in 0..xs.size) {\n        result += xs[i] * pow(x, Float64(i))\n    }\n    return result\n}\n\npublic func findZero(xs: ArrayList<Float64>): Float64 {\n    var begin: Float64 = -1.0\n    var end: Float64 = 1.0\n    while (poly(xs, begin) * poly(xs, end) > 0.0) {\n        begin *= 2.0\n        end *= 2.0\n    }\n    while (end - begin > 1e-10) {\n        let center = (begin + end) / 2.0\n        if (poly(xs, begin) * poly(xs, center) > 0.0) {\n            begin = center\n        } else {\n            end = center\n        }\n    }\n    return begin\n}\n"
"public func sortThird(l: ArrayList<Int64>): ArrayList<Int64> {\n    var thirds = ArrayList<Int64>()\n    for (i in 0..l.size : 3) {\n        thirds.append(l[i])\n    }\n    thirds.sortBy({a: Int64, b: Int64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    var result = l\n    for (i in 0..l.size : 3) {\n        result[i] = thirds[i / 3]\n    }\n    return result\n}\n"
"public func unique(l: ArrayList<Int64>): ArrayList<Int64> {\n    let result = ArrayList<Int64>(HashSet<Int64>(l))\n    result.sortBy({a: Int64, b: Int64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    return result\n}\n"
"public func maxElement(l: ArrayList<Int64>): Int64 {\n    return l.max()?? 0\n}\n"
"func fizzBuzz(n: Int64): Int64 {\n    var result = 0\n    for (i in 1..n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            let digits = i.toString().toRuneArray()\n            for (c in digits) {\n                if (c == '7') {\n                    result += 1\n                }\n            }\n        }\n    }\n    return result\n}\n"
"public func sortEven(l: ArrayList<Int64>): ArrayList<Int64> {\n    var even: ArrayList<Int64> = ArrayList<Int64>()\n    for (i in 0..l.size : 2) {\n        even.append(l[i])\n    }\n    even.sortBy({a: Int64, b: Int64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    var result: ArrayList<Int64> = l\n    for (i in 0..l.size : 2) {\n        result[i] = even[i / 2]\n    }\n    return result\n}\n"
"public func decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}"
"func primeFib(n: Int64): Int64 {\n    var f0: Int64 = 0\n    var f1: Int64 = 1\n    while (true) {\n        let p = f0 + f1\n        var is_prime = p >= 2\n        for (k in 2..(math.min(math.sqrt(Float64(p)) + 1, Float64(p - 1)))) {\n            if (p % k == 0) {\n                is_prime = false\n                break\n            }\n        }\n        if (is_prime) {\n            n -= 1\n        }\n        if (n == 0) {\n            return p\n        }\n        f0 = f1\n        f1 = p\n    }\n}\n"
"public func triplesSumToZero(l: ArrayList<Int64>): Bool {\n    for (i in 0..l.size) {\n        for (j in i + 1..l.size) {\n            for (k in j + 1..l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n"
"func carRaceCollision(n: Int64): Int64 {\n    return n * n\n}\n"
"public func incrList(l: ArrayList<Int64>): ArrayList<Int64> {\n    var newList = ArrayList<Int64>()\n    for (i in 0..l.size) {\n        newList.append(l[i] + 1)\n    }\n    return newList\n}\n"
"public func pairsSumToZero(l: ArrayList<Int64>): Bool {\n    for (i in 0..l.size) {\n        for (j in i + 1..l.size) {\n            if (l[i] + l[j] == 0) {\n                return true\n            }\n        }\n    }\n    return false\n}\n"
"public func changeBase(x: Int64, base: Int64): String {\n    var ret: StringBuilder = StringBuilder()\n    var x1 = x\n    while (x1 > 0) {\n        ret.append(x1 % base)\n        x1 /= base\n    }\n    return ret.toString().toRuneArray().reverse().toString()\n}\n"
"public func triangleArea(a: Float64, h: Float64): Float64 {\n    return a * h / 2.0\n}\n"
"public func fib4(n: Int64): Int64 {\n    var results = ArrayList<Int64>()\n    results.append(0)\n    results.append(0)\n    results.append(2)\n    results.append(0)\n    if (n < 4) {\n        return results[n]\n    }\n\n    for (i in 4..=n) {\n        results.append(results[0] + results[1] + results[2] + results[3])\n        results.remove(0)\n    }\n    return results[3]\n}\n"
"public func median(l: ArrayList<Int64>): Float64 {\n    var list: ArrayList<Int64> = l\n    list.sortBy({ rht: Int64, lht: Int64 =>\n        if (rht < lht) {\n            return Ordering.LT\n        }\n        if (rht > lht) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    if (list.size % 2 == 1) {\n        return Float64(list[list.size / 2])\n    } else {\n        return Float64((list[list.size / 2 - 1] + list[list.size / 2])) / 2.0\n    }\n}\n"
"public func isPalindrome(text: String): Bool {\n    for (i in 0..text.size) {\n        if (text[i]!= text[text.size - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}\n"
"func modp(n: Int64, p: Int64): Int64 {\n    var ret: Int64 = 1\n    for (i in 0..n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n"
"public func decodeShift(s: String): String {\n    let sb = StringBuilder()\n    for (ch in s.toRuneArray()) {\n        sb.append(Char(UInt32('a') + ((UInt32(ch) + 21 - UInt32('a')) % 26)))\n    }\n    return sb.toString()\n}"
"public func removeVowels(text: String): String {\n    let sb = StringBuilder()\n    for (ch in text.toAsciiLower().toRuneArray()) {\n        if (\"aeiou\".indexOf(ch) == -1) {\n            sb.append(ch)\n        }\n    }\n    return sb.toString()\n}\n"
"public func belowThreshold(l: ArrayList<Int64>, t: Int64): Bool {\n    for (e in l) {\n        if (e >= t) {\n            return false\n        }\n    }\n    return true\n}\n"
"public func add(x: Int64, y: Int64): Int64 {\n    return x + y\n}"
"public func sameChars(s0: String, s1: String): Bool {\n    let set0 = HashSet<Char>()\n    for (c in s0.toRuneArray()) {\n        set0.put(c)\n    }\n    let set1 = HashSet<Char>()\n    for (c in s1.toRuneArray()) {\n        set1.put(c)\n    }\n    return set0 == set1\n}\n"
"func fib(n: Int64): Int64 {\n    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n"
"public func correctBracketing(brackets: String): Bool {\n    var depth = 0\n    for (b in brackets.toRuneArray()) {\n        if (b == '<') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n"
"public func monotonic(l: ArrayList<Int64>): Bool {\n    var l1 = l\n    var l2 = l\n    l1.sortBy({x: Int64 => x})\n    l2.sortBy({x: Int64 => -x})\n    return l == l1 || l == l2\n}\n"
"public func common(l1: ArrayList<Int64>, l2: ArrayList<Int64>): ArrayList<Int64> {\n    let ret = HashSet<Int64>(l1)\n    ret.retainAll(l2)\n    let result = ArrayList<Int64>(ret)\n    result.sortBy({x: Int64, y: Int64 =>\n        if (x < y) {\n            return Ordering.LT\n        }\n        if (x > y) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    return result\n}\n"
"func largestPrimeFactor(n: Int64): Int64 {\n    var largest: Int64 = 1\n    for (j in 2..=n) {\n        if (n % j == 0) {\n            var is_prime: Bool = j >= 2\n            for (i in 2..(j - 1)) {\n                if (j % i == 0) {\n                    is_prime = false\n                    break\n                }\n            }\n            if (is_prime) {\n                largest = math.max(largest, j)\n            }\n        }\n    }\n    return largest\n}\n"
"func sumToN(n: Int64): Int64 {\n    var result: Int64 = 0\n    for (i in 1..=n) {\n        result += i\n    }\n    return result\n}\n"
"public func correctBracketing(brackets: String): Bool {\n    var depth = 0\n    for (b in brackets.toRuneArray()) {\n        if (b == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n"
"public func derivative(xs: ArrayList<Int64>): ArrayList<Int64> {\n    let result = ArrayList<Int64>()\n    for (i in 1..xs.size) {\n        result.append(i * xs[i])\n    }\n    return result\n}\n"
"func fibfib(n: Int64): Int64 {\n    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return 0\n    }\n    if (n == 2) {\n        return 1\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n"
"public func vowelsCount(s: String): Int64 {\n    let vowels = \"aeiouAEIOU\"\n    var n_vowels = 0\n    for (c in s.toRuneArray()) {\n        if (vowels.contains(String(c))) {\n            n_vowels += 1\n        }\n    }\n    if (s.toRuneArray().last == 'y' || s.toRuneArray().last == 'Y') {\n        n_vowels += 1\n    }\n    return n_vowels\n}\n"
"public func circularShift(x: Int64, shift: Int64): String {\n    let s = x.toString()\n    if (shift > s.size) {\n        return String(s.toRuneArray().reversed())\n    } else {\n        return s[s.size - shift..] + s[0..s.size - shift]\n    }\n}\n"
"func digitSum(s: String): Int64 {\n    var sum = 0\n    for (c in s.toRuneArray()) {\n        if (UInt32(c) >= UInt32('A') && UInt32(c) <= UInt32('Z')) {\n            sum += Int64(UInt32(c))\n        }\n    }\n    return sum\n}\n"
"public func fruitDistribution(s: String, n: Int64): Int64 {\n    let lis = ArrayList<Int64>()\n    for (i in s.split(\" \")) {\n        try {\n            lis.append(Int64.parse(i))\n        } catch (ignored: Exception) {\n\n        }\n    }\n    return n - lis.sum()\n}\n"
"public func pluck(arr: ArrayList<Int64>): ArrayList<Int64> {\n    var result: ArrayList<Int64> = ArrayList<Int64>()\n    if (arr.size == 0) {\n        return result\n    }\n    var min: Int64 = Int64.Max\n    var minIndex: Int64 = -1\n    for (i in 0..arr.size) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n                min = arr[i]\n                minIndex = i\n            }\n        }\n    }\n    if (minIndex!= -1) {\n        result.append(min)\n        result.append(minIndex)\n    }\n    return result\n}\n"
"public func search(lst: ArrayList<Int64>): Int64 {\n    var frq = Array<Int64>(Int64(math.max(lst)) + 1, item: 0)\n    for (i in lst) {\n        frq[i] += 1\n    }\n    var ans = -1\n    for (i in 1..frq.size) {\n        if (frq[i] >= i) {\n            ans = i\n        }\n    }\n    return ans\n}\n"
"public func strangeSortList(lst: ArrayList<Int64>): ArrayList<Int64> {\n    var res: ArrayList<Int64> = ArrayList<Int64>()\n    var _switch: Bool = true\n    var l: ArrayList<Int64> = ArrayList<Int64>(lst)\n    while (l.size!= 0) {\n        if (_switch) {\n            res.append(l.min().getOrThrow())\n        } else {\n            res.append(l.max().getOrThrow())\n        }\n        l.remove(res.get(res.size - 1).getOrThrow())\n        _switch =!_switch\n    }\n    return res\n}\n"
"public func triangleArea(a: Float64, b: Float64, c: Float64): Float64 {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1.0\n    }\n    let s = (a + b + c) / 2.0\n    let area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return (math.round(area * 100.0)) / 100.0\n}\n"
"public func willItFly(q: ArrayList<Int64>, w: Int64): Bool {\n    if (q.sum() > w) {\n        return false\n    }\n    var i = 0\n    var j = q.size - 1\n    while (i < j) {\n        if (q[i]!= q[j]) {\n            return false\n        }\n        i += 1\n        j -= 1\n    }\n    return true\n}\n"
"func smallestChange(arr: ArrayList<Int64>): Int64 {\n    var ans: Int64 = 0\n    for (i in 0..(arr.size / 2)) {\n        if (arr[i]!= arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n"
"public func totalMatch(lst1: ArrayList<String>, lst2: ArrayList<String>): ArrayList<String> {\n    var l1: Int64 = 0\n    for (st in lst1) {\n        l1 += Int64(st.size)\n    }\n\n    var l2: Int64 = 0\n    for (st in lst2) {\n        l2 += Int64(st.size)\n    }\n\n    if (l1 <= l2) {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n"
"func isMultiplyPrime(a: Int64): Bool {\n    for (i in 2..101) {\n        if (!isPrime(i)) {\n            continue\n        }\n        for (j in i..101) {\n            if (!isPrime(j)) {\n                continue\n            }\n            for (k in j..101) {\n                if (!isPrime(k)) {\n                    continue\n                }\n                if (i * j * k == a) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n"
"func isSimplePower(x: Int64, n: Int64): Bool {\n    if (n == 1) {\n        return x == 1\n    }\n    var power = 1\n    while (power < x) {\n        power = power * n\n    }\n    return power == x\n}\n"
"func isCube(a: Int64): Bool {\n    let aAbs = math.abs(a)\n    return math.round(math.pow(math.round(math.pow(aAbs, 1.0 / 3.0)), 3.0)) == aAbs\n}\n"
"func hexKey(num: String): Int64 {\n    let primes = \"2357BD\"\n    var total = 0\n    for (c in num.toRuneArray()) {\n        if (primes.contains(String(c))) {\n            total += 1\n        }\n    }\n    return total\n}\n"
"public func decimalToBinary(decimal: Int64): String {\n    return \"db\" + decimal.toString(2) + \"db\"\n}"
"func isHappy(s: String): Bool {\n    if (s.size < 3) {\n        return false\n    }\n\n    for (i in 0..s.size - 2) {\n        if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n"
"public func numericalLetterGrade(grades: ArrayList<Float64>): ArrayList<String> {\n    var letter_grade: ArrayList<String> = ArrayList<String>()\n    for (gpa in grades) {\n        if (gpa == 4.0) {\n            letter_grade.append(\"A+\")\n        } else if (gpa > 3.7) {\n            letter_grade.append(\"A\")\n        } else if (gpa > 3.3) {\n            letter_grade.append(\"A-\")\n        } else if (gpa > 3.0) {\n            letter_grade.append(\"B+\")\n        } else if (gpa > 2.7) {\n            letter_grade.append(\"B\")\n        } else if (gpa > 2.3) {\n            letter_grade.append(\"B-\")\n        } else if (gpa > 2.0) {\n            letter_grade.append(\"C+\")\n        } else if (gpa > 1.7) {\n            letter_grade.append(\"C\")\n        } else if (gpa > 1.3) {\n            letter_grade.append(\"C-\")\n        } else if (gpa > 1.0) {\n            letter_grade.append(\"D+\")\n        } else if (gpa > 0.7) {\n            letter_grade.append(\"D\")\n        } else if (gpa > 0.0) {\n            letter_grade.append(\"D-\")\n        } else {\n            letter_grade.append(\"E\")\n        }\n    }\n    return letter_grade\n}"
"public func primeLength(string: String): Bool {\n    let l = string.size\n    if (l == 0 || l == 1) {\n        return false\n    }\n    for (i in 2..l) {\n        if (l % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n"
"func startsOneEnds(n: Int64): Int64 {\n    if (n == 1) {\n        return 1\n    }\n    18 * pow(10, n - 2)\n}\n"
"func solve(N: Int64): String {\n    var sum = 0\n    for (c in N.toString()) {\n        sum += Int64(UInt32(c) - UInt32('0'))\n    }\n    return sum.toString(2)\n}\n"
"public func add(lst: ArrayList<Int64>): Int64 {\n    var sum: Int64 = 0\n    for (i in 1..lst.size : 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n"
"public func antiShuffle(s: String): String {\n    let strings = s.split(\" \")\n    let result = ArrayList<String>()\n    for (string in strings) {\n        let chars = string.toRuneArray()\n        chars.sort()\n        result.append(String(chars))\n    }\n    return result.joinToString(\" \")\n}\n"
"public func getRow(lst: ArrayList<ArrayList<Int64>>, x: Int64): ArrayList<ArrayList<Int64>> {\n    let coords = ArrayList<ArrayList<Int64>>()\n    for (i in 0..lst.size) {\n        let row = ArrayList<ArrayList<Int64>>()\n        for (j in (lst.get(i).size - 1)..-1) {\n            if (lst.get(i).get(j) == x) {\n                row.append(ArrayList<Int64>([i, j]))\n            }\n        }\n        coords.appendAll(row)\n    }\n    return coords\n}\n"
"public func sortArray(array: ArrayList<Int64>): ArrayList<Int64> {\n    if (array.size == 0) {\n        return array\n    }\n    var result = array\n    if ((result[0] + result[result.size - 1]) % 2 == 1) {\n        result.sortBy({ a: Int64, b: Int64 =>\n            if (a < b) {\n                return Ordering.LT\n            }\n            if (a > b) {\n                return Ordering.GT\n            }\n            return Ordering.EQ\n        })\n    } else {\n        result.sortBy({ a: Int64, b: Int64 =>\n            if (a < b) {\n                return Ordering.GT\n            }\n            if (a > b) {\n                return Ordering.LT\n            }\n            return Ordering.EQ\n        })\n    }\n    return result\n}\n"
"public func encrypt(s: String): String {\n    let sb = StringBuilder()\n    for (c in s.toRuneArray()) {\n        if (c >= 'a' && c <= 'z') {\n            sb.append(Char(UInt32('a') + (UInt32(c) - UInt32('a') + 2 * 2) % 26))\n        } else {\n            sb.append(c)\n        }\n    }\n    return sb.toString()\n}\n"
"public func nextSmallest(lst: ArrayList<Int64>): Option<Int64> {\n    let set = HashSet<Int64>(lst)\n    let l = ArrayList<Int64>(set)\n    l.sortBy({a: Int64, b: Int64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    if (l.size < 2) {\n        return Option<Int64>.None\n    } else {\n        return Option<Int64>.Some(l[1])\n    }\n}\n"
"func isBored(S: String): Int64 {\n    let sentences = S.split(separator: \"[.?!]\\s*\")\n    var count = 0\n    for (sentence in sentences) {\n        if (sentence.substring(0, 2) == \"I \") {\n            count += 1\n        }\n    }\n    return count\n}\n"
"public func anyInt(x: Any, y: Any, z: Any): Bool {\n    if (let (xi, yi, zi) = (x as Int64, y as Int64, z as Int64)) {\n        return xi + yi == zi || xi + zi == yi || yi + zi == xi\n    }\n    return false\n}\n"
"public func encode(message: String): String {\n    let vowels = \"aeiouAEIOU\"\n    let sb = StringBuilder()\n    for (c in message.toAsciiLower().toRuneArray()) {\n        var ch = c\n        if (UInt32(ch) >= UInt32('a') && UInt32(ch) <= UInt32('z')) {\n            ch = UInt32(UInt32('a') + ((UInt32(ch) - UInt32('a') + 28) % 26))\n        } else if (UInt32(ch) >= UInt32('A') && UInt32(ch) <= UInt32('Z')) {\n            ch = UInt32(UInt32('A') + ((UInt32(ch) - UInt32('A') + 28) % 26))\n        }\n        sb.append(Char(ch))\n    }\n    return sb.toString()\n}\n"
"func skjkasdkd(lst: ArrayList<Int64>): Int64 {\n    var maxx = 0\n    for (i in lst) {\n        if (i > maxx) {\n            var isPrime = i!= 1\n            for (j in 2..Int64(math.sqrt(Float64(i)))) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) {\n                maxx = i\n            }\n        }\n    }\n    var sum = 0\n    for (c in maxx.toString()) {\n        sum += Int64(UInt32(c) - UInt32('0'))\n    }\n    return sum\n}\n"
"public func checkDictCase(dict: HashMap<String, Any>): Bool {\n    if (dict.isEmpty()) {\n        return false\n    }\n    var state = \"start\"\n    for ((key, value) in dict) {\n        if (!(key is String)) {\n            state = \"mixed\"\n            break\n        }\n        var is_upper = true\n        var is_lower = true\n        for (c in key.toRuneArray()) {\n            if (UInt32(c) >= UInt32('A') && UInt32(c) <= UInt32('Z')) {\n                is_upper = false\n            } else if (UInt32(c) >= UInt32('a') && UInt32(c) <= UInt32('z')) {\n                is_lower = false\n            } else {\n                is_upper = false\n                is_lower = false\n            }\n        }\n        if (state == \"start\") {\n            if (is_upper) {\n                state = \"upper\"\n            } else if (is_lower) {\n                state = \"lower\"\n            } else {\n                break\n            }\n        } else if ((state == \"upper\" &&!is_upper) || (state == \"lower\" &&!is_lower)) {\n            state = \"mixed\"\n            break\n        }\n    }\n    return state == \"upper\" || state == \"lower\"\n}\n"
"public func countUpTo(n: Int64): ArrayList<Int64> {\n    let primes = ArrayList<Int64>()\n    for (i in 2..n) {\n        var is_prime = true\n        for (j in 2..i) {\n            if (i % j == 0) {\n                is_prime = false\n                break\n            }\n        }\n        if (is_prime) {\n            primes.append(i)\n        }\n    }\n    return primes\n}\n"
"func multiply(a: Int64, b: Int64): Int64 {\n    return math.abs(a % 10) * math.abs(b % 10)\n}\n"
" func countUpper(s: String): Int64 {\n    var count = 0\n    for (i in 0..s.size : 2) {\n        if (\"AEIOU\".contains(s[i])) {\n            count += 1\n        }\n    }\n    return count\n}\n"
"func countUpper(value: String): Int64 {\n    if (value.contains(\".\")) {\n        while (value.toRuneArray().last() == '0') {\n            value = value[..value.size - 1]\n        }\n    }\n    let num = Float64.parse(value)\n    var res = 0\n    if (value[Int64(math.max(value.size - 2, 0))..value.size] == \".5\") {\n        if (num > 0) {\n            res = Int64(math.ceil(num))\n        } else {\n            res = Int64(math.floor(num))\n        }\n    } else if(value.size > 0) {\n        res = Int64(math.round(num))\n    }\n    return res\n}\n"
"public func makeAPile(n: Int64): ArrayList<Int64> {\n    var result = ArrayList<Int64>()\n    for (i in 0..n) {\n        result.append(n + 2 * i)\n    }\n    return result\n}\n"
"public func wordStrings(s: String): ArrayList<String> {\n    if (s.size == 0) {\n        return ArrayList<String>()\n    }\n    let sb = StringBuilder()\n\n    for (letter in s.toRuneArray()) {\n        if (letter == ',') {\n            sb.append(' ')\n        } else {\n            sb.append(letter)\n        }\n    }\n\n    return ArrayList<String>(sb.toString().split(\" \"))\n}\n"
"func chooseNum(x: Int64, y: Int64): Int64 {\n    if (x > y) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    if (x == y) {\n        return -1\n    }\n    return y - 1\n}\n"
"public func roundedAvg(n: Int64, m: Int64): String {\n    if (n > m) {\n        return \"-1\"\n    }\n    return \"${Int64(math.round((Float64(m + n) / 2.0)))}\"\n}\n"
"public func uniqueDigits(x: ArrayList<Int64>): ArrayList<Int64> {\n    let odd_digit_elements = ArrayList<Int64>()\n    for (i in x) {\n        var is_unique = true\n        for (c in i.toString().toRuneArray()) {\n            if ((Int64(UInt32(c)) - Int64('0')) % 2 == 0) {\n                is_unique = false\n                break\n            }\n        }\n        if (is_unique) {\n            odd_digit_elements.append(i)\n        }\n    }\n    odd_digit_elements.sortBy({a: Int64, b: Int64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    return odd_digit_elements\n}\n"
"public func byLength(arr: ArrayList<Int64>): ArrayList<String> {\n    let sorted_arr = arr.sorted(by: >)\n    let new_arr = ArrayList<String>()\n    for (var in sorted_arr) {\n        if (var >= 1 && var <= 9) {\n            match (var) {\n                case 1 => new_arr.append(\"One\")\n                case 2 => new_arr.append(\"Two\")\n                case 3 => new_arr.append(\"Three\")\n                case 4 => new_arr.append(\"Four\")\n                case 5 => new_arr.append(\"Five\")\n                case 6 => new_arr.append(\"Six\")\n                case 7 => new_arr.append(\"Seven\")\n                case 8 => new_arr.append(\"Eight\")\n                case 9 => new_arr.append(\"Nine\")\n                case _ => ()\n            }\n        }\n    }\n    return new_arr\n}\n"
"public func f(n: Int64): ArrayList<Int64> {\n    var ret: ArrayList<Int64> = ArrayList<Int64>()\n    for (i in 1..=n) {\n        if (i % 2 == 0) {\n            var x: Int64 = 1\n            for (j in 1..=i) {\n                x *= j\n            }\n            ret.append(x)\n        } else {\n            var x: Int64 = 0\n            for (j in 1..=i) {\n                x += j\n            }\n            ret.append(x)\n        }\n    }\n    return ret\n}\n"
"public func evenOddPalindrome(n: Int64): ArrayList<Int64> {\n    var even_palindrome_count: Int64 = 0\n    var odd_palindrome_count: Int64 = 0\n\n    for (i in 1..=n) {\n        if (i.toString() == i.toString().toRuneArray().reversed().toString()) {\n            if (i % 2 == 1) {\n                odd_palindrome_count += 1\n            } else {\n                even_palindrome_count += 1\n            }\n        }\n    }\n    return ArrayList<Int64>([even_palindrome_count, odd_palindrome_count])\n}\n"
"func countNums(arr: ArrayList<Int64>): Int64 {\n    var count = 0\n    for (n in arr) {\n        var neg = 1\n        if (n < 0) {\n            n = -n\n            neg = -1\n        }\n        var digits = ArrayList<Int64>()\n        for (digit in n.toString().toRuneArray()) {\n            digits.append(Int64(UInt32(digit) - UInt32('0')))\n        }\n        digits[0] = digits[0] * neg\n        if (digits.reduce(0, {x, y => x + y}) > 0) {\n            count += 1\n        }\n    }\n    return count\n}\n"
"func moveOneBall(arr: ArrayList<Int64>): Bool {\n    if (arr.size == 0) {\n        return true\n    }\n    let sorted_arr = arr.sorted()\n    let min_value = arr.min()?? 0\n    let min_index = arr.indexOf(min_value)?? 0\n    let my_arr = arr[min_index..] + arr[0..min_index]\n    for (i in 0..arr.size) {\n        if (my_arr[i]!= sorted_arr[i]) {\n            return false\n        }\n    }\n    return true\n}\n"
"func exchange(lst1: ArrayList<Int64>, lst2: ArrayList<Int64>): String {\n    var odd = 0\n    var even = 0\n    for (i in lst1) {\n        if (i % 2 == 1) {\n            odd += 1\n        }\n    }\n    for (i in lst2) {\n        if (i % 2 == 0) {\n            even += 1\n        }\n    }\n    if (even >= odd) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n"
"public func histogram(test: String): HashMap<String, Int64> {\n    let dict1 = HashMap<String, Int64>()\n    let list1 = test.split(\" \")\n    var t = 0\n    for (i in list1) {\n        if (list1.filter({$0 == i}).size > t &&!i.isEmpty()) {\n            t = list1.filter({$0 == i}).size\n        }\n    }\n    if (t > 0) {\n        for (i in list1) {\n            if (list1.filter({$0 == i}).size == t) {\n                dict1.put(i, t)\n            }\n        }\n    }\n    return dict1\n}\n"
"public func reverseDelete(s: String, c: String): ArrayList<Any> {\n    let sb = StringBuilder()\n    for (ch in s.toRuneArray()) {\n        if (c.indexOf(ch) == -1) {\n            sb.append(ch)\n        }\n    }\n    return ArrayList<Any>([sb.toString(), sb.toString() == sb.toString().toRuneArray().toString().toRuneArray().toString().toRuneArray().toString()])\n}\n"
"public func oddCount(lst: ArrayList<String>): ArrayList<String> {\n    var res: ArrayList<String> = ArrayList<String>()\n    for (arr in lst) {\n        var n: Int64 = 0\n        for (d in arr.toRuneArray()) {\n            if ((Int64(UInt32(d)) - Int64('0')) % 2 == 1) {\n                n += 1\n            }\n        }\n        res.append(\"the number of odd elements \" + n.toString() + \" in the str\" + n.toString() + \"th \" + n.toString() + \" of the \" + n.toString() + \" input.\")\n    }\n    return res\n}\n"
"func minSubArraySum(nums: ArrayList<Int64>): Int64 {\n    var minSum = Int64.Max\n    var sum = 0\n    for (num in nums) {\n        sum += num\n        if (minSum > sum) {\n            minSum = sum\n        }\n        if (sum > 0) {\n            sum = 0\n        }\n    }\n    return minSum\n}\n"
"func maxFill(grid: ArrayList<ArrayList<Int64>>, capacity: Int64): Int64 {\n    var sum: Int64 = 0\n    for (arr in grid) {\n        sum += ceil((Float64(arr.sum()) / Float64(capacity)))\n    }\n    return sum\n}\n"
"public func sortArrayByOnesCount(arr: ArrayList<Int64>): ArrayList<Int64> {\n    var sorted_arr: ArrayList<Int64> = arr\n    sorted_arr.sortBy({ (o1: Int64, o2: Int64): Bool =>\n        let cnt1 = Int64(math.log2(math.abs(Float64(o1))))\n        let cnt2 = Int64(math.log2(math.abs(Float64(o2))))\n        if (cnt1 > cnt2) {\n            return true\n        } else if (cnt1 < cnt2) {\n            return false\n        } else {\n            return o1 < o2\n        }\n    })\n    return sorted_arr\n}"
"public func selectWords(s: String, n: Int64): ArrayList<String> {\n    let result = ArrayList<String>()\n    let words = s.split(\" \")\n    for (word in words) {\n        var n_consonants = 0\n        for (c in word.toAsciiLower().toRuneArray()) {\n            if (\"aeiou\".indexOf(c) == -1) {\n                n_consonants += 1\n            }\n        }\n        if (n_consonants == n) {\n            result.append(word)\n        }\n    }\n    return result\n}\n"
"public func getClosestVowel(word: String): String {\n    if (word.size < 3) {\n        return \"\"\n    }\n\n    let vowels = \"aeiouAEIOU\"\n    for (i in (word.size - 2)..=0 : -1) {\n        if (vowels.contains(word[i])) &&!vowels.contains(word[i + 1]) &&!vowels.contains(word[i - 1])) {\n            return word[i].toString()\n        }\n    }\n    return \"\"\n}\n"
"public func matchParens(lst: ArrayList<String>): String {\n    let S = ArrayList<String>([lst[0] + lst[1], lst[1] + lst[0]])\n    for (s in S) {\n        var val = 0\n        for (i in s.toRuneArray()) {\n            if (i == '(') {\n                val += 1\n            } else {\n                val -= 1\n            }\n            if (val < 0) {\n                break\n            }\n        }\n        if (val == 0) {\n            return \"Yes\"\n        }\n    }\n    return \"No\"\n}\n"
"public func maximum(arr: ArrayList<Int64>, k: Int64): ArrayList<Int64> {\n    if (k == 0) {\n        return ArrayList<Int64>()\n    }\n    var arr_sort = arr\n    arr_sort.sortBy({ rht: Int64, lht: Int64 =>\n        if (rht < lht) {\n            return Ordering.GT\n        }\n        if (rht > lht) {\n            return Ordering.LT\n        }\n        return Ordering.EQ\n    }, stable: true)\n    return arr_sort[arr_sort.size - k..arr_sort.size]\n}\n"
"func solution(lst: ArrayList<Int64>): Int64 {\n    var sum: Int64 = 0\n    for (i in 0..lst.size : 2) {\n        if ((lst[i] % 2) == 1) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n"
"func addElements(arr: ArrayList<Int64>, k: Int64): Int64 {\n    var sum: Int64 = 0\n    for (i in 0..k) {\n        if (String(math.abs(arr[i])).size <= 2) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n"
"public func getOddCollatz(n: Int64): ArrayList<Int64> {\n    var odd_collatz: ArrayList<Int64> = ArrayList<Int64>()\n    if (n % 2 == 1) {\n        odd_collatz.append(n)\n    }\n    var num = n\n    while (num > 1) {\n        if (num % 2 == 0) {\n            num = num / 2\n        } else {\n            num = num * 3 + 1\n        }\n        if (num % 2 == 1) {\n            odd_collatz.append(num)\n        }\n    }\n    odd_collatz.sortBy({a: Int64, b: Int64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    return odd_collatz\n}\n"
"public func validDate(date: String): Bool {\n    try {\n        let dates = date.split(\"-\")\n        let m = dates[0]\n        while (!m.isEmpty() && m.charAt(0) == '0') {\n            m = m[1..m.size]\n        }\n        let d = dates[1]\n        while (!d.isEmpty() && d.charAt(0) == '0') {\n            d = d[1..d.size]\n        }\n        let y = dates[2]\n        while (!y.isEmpty() && y.charAt(0) == '0') {\n            y = y[1..y.size]\n        }\n        let month = Int64.parse(m)\n        let day = Int64.parse(d)\n        let year = Int64.parse(y)\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false\n        }\n        if (month == 2 && (day < 1 || day > 29)) {\n            return false\n        }\n        return true\n    } catch (e: Exception) {\n        return false\n    }\n}"
"public func splitWords(txt: String): ArrayList<String> {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \").toArrayList()\n    } else if (txt.contains(\",\" )) {\n        return txt.split(\"[,\\s]\").toArrayList()\n    } else {\n        var count = 0\n        for (c in txt.toRuneArray()) {\n            if (UInt32(c) >= UInt32('a') && UInt32(c) <= UInt32('z')) {\n                if ((UInt32(c) - UInt32('a')) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        return ArrayList<String>([count])\n    }\n}"
"public func isSorted(lst: ArrayList<Int64>): Bool {\n    let sorted_lst = ArrayList<Int64>(lst)\n    sorted_lst.sortBy({a: Int64, b: Int64 =>\n        if (a < b) {\n            return Ordering.LT\n        }\n        if (a > b) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    if (!lst.equals(sorted_lst)) {\n        return false\n    }\n    for (i in 0..lst.size - 2) {\n        if (lst[i] == lst[i + 1] && lst[i] == lst[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n"
"func intersection(interval1: ArrayList<Int64>, interval2: ArrayList<Int64>): String {\n    let l = math.max(interval1[0], interval2[0])\n    let r = math.min(interval1[1], interval2[1])\n    let length = r - l\n    if (length <= 0) {\n        return \"NO\"\n    }\n    if (length == 1) {\n        return \"NO\"\n    }\n    if (length == 2) {\n        return \"YES\"\n    }\n    for (i in 2..length) {\n        if (length % i == 0) {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n"
"public func prodSigns(arr: ArrayList<Int64>): Option<Int64> {\n    if (arr.size == 0) {\n        return Option<Int64>.None\n    }\n    if (arr.contains(0)) {\n        return Option<Int64>.Some(0)\n    }\n    var prod: Int64 = -2 * (Int64(arr.filter({ p: Int64 => p < 0}).size % 2) + 1)\n    return Option<Int64>.Some(prod * (arr.map({ p: Int64 => math.abs(p)}).reduce({ (a: Int64, b: Int64) => a + b})))\n}\n"
"public func minPath(grid: ArrayList<ArrayList<Int64>>, k: Int64): ArrayList<Int64> {\n    let n = grid.size\n    var val = n * n + 1\n    for (i in 0..n) {\n        for (j in 0..n) {\n            if (grid[i][j] == 1) {\n                var temp = ArrayList<Int64>()\n                if (i!= 0) {\n                    temp.append(grid[i - 1][j])\n                }\n                if (j!= 0) {\n                    temp.append(grid[i][j - 1])\n                }\n                if (i!= n - 1) {\n                    temp.append(grid[i + 1][j])\n                }\n                if (j!= n - 1) {\n                    temp.append(grid[i][j + 1])\n                }\n                val = min(temp)\n            }\n        }\n    }\n    var ans = ArrayList<Int64>()\n    for (i in 0..k) {\n        if (i % 2 == 0) {\n            ans.append(1)\n        } else {\n            ans.append(val)\n        }\n    }\n    return ans\n}\n"
"func tri(n: Int64): ArrayList<Int64> {\n    if (n == 0) {\n        return ArrayList<Int64>([1])\n    }\n    var my_tri: ArrayList<Int64> = ArrayList<Int64>([1, 3])\n    for (i in 2..=n) {\n        if (i % 2 == 0) {\n            my_tri.append(i / 2 + 1)\n        } else {\n            my_tri.append(my_tri[my_tri.size - 1] + my_tri[my_tri.size - 2] + (i + 3) / 2)\n        }\n    }\n    return my_tri\n}\n"
"func digits(n: Int64): Int64 {\n    var product: Int64 = 1\n    var odd_count: Int64 = 0\n    for (digit in n.toString().toRuneArray()) {\n        let int_digit = Int64(UInt32(digit) - UInt32('0'))\n        if (int_digit % 2 == 1) {\n            product *= int_digit\n            odd_count += 1\n        }\n    }\n    if (odd_count == 0) {\n        return 0\n    } else {\n        return product\n    }\n}\n"
"func isNested(string: String): Bool {\n    var opening_bracket_index = ArrayList<Int64>()\n    var closing_bracket_index = ArrayList<Int64>()\n    for (i in 0..string.size) {\n        if (string[i] == '[') {\n            opening_bracket_index.append(i)\n        } else {\n            closing_bracket_index.append(i)\n        }\n    }\n    closing_bracket_index.reverse()\n    var i = 0\n    let l = closing_bracket_index.size\n    for (idx in opening_bracket_index) {\n        if (i < l && idx < closing_bracket_index[i]) {\n            i += 1\n        }\n    }\n    return i >= 2\n}\n"
"func sumSquares(lst: ArrayList<Float64>): Int64 {\n    return lst.map { p => math.ceil(p) }.map { p => Int64(p * p) }.reduce { a, b => a + b }\n}\n"
"public func checkIfLastCharIsALetter(txt: String): Bool {\n    let words = txt.split(\" \")\n    let check = words[words.size - 1]\n    return check.size == 1 && check.toRuneArray()[0].isAsciiLetter()\n}\n"
"public func canArrange(arr: ArrayList<Int64>): Int64 {\n    var ind: Int64 = -1\n    var i: Int64 = 1\n    while (i < arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            ind = i\n        }\n        i += 1\n    }\n    return ind\n}\n"
"public func largestSmallestIntegers(lst: ArrayList<Int64>): ArrayList<Option<Int64>> {\n    let smallest = lst.filter({ p -> p < 0})\n    let largest = lst.filter({ p -> p > 0})\n    var s: Option<Int64> = Option<Int64>.None\n    if (smallest.size > 0) {\n        s = largest.max()\n    }\n    var l: Option<Int64> = Option<Int64>.None\n    if (largest.size > 0) {\n        l = smallest.min()\n    }\n    return ArrayList<Option<Int64>>([s, l])\n}\n"
"public func compareOne(a: Any, b: Any): Option<Any> {\n    var temp_a: Float64 = 0.0\n    var temp_b: Float64 = 0.0\n    if (a is Int64) {\n        temp_a = Float64(a) * 1.0\n    } else if (a is Float64) {\n        temp_a = Float64(a)\n    } else if (a is String) {\n        temp_a = Float64.parse((a as String).replace(\",\", \".\"))\n    }\n    if (b is Int64) {\n        temp_b = Float64(b) * 1.0\n    } else if (b is Float64) {\n        temp_b = Float64(b)\n    } else if (b is String) {\n        temp_b = Float64.parse((b as String).replace(\",\", \".\"))\n    }\n    if (temp_a == temp_b) {\n        return Option<Any>.None\n    } else if (temp_a > temp_b) {\n        return Option<Any>.Some(a)\n    } else {\n        return Option<Any>.Some(b)\n    }\n}"
"func isEqualToSumEven(n: Int64): Bool {\n    return n % 2 == 0 && n >= 8\n}\n"
"public func specialFactorial(n: Int64): Int64 {\n    var fact_i: Int64 = 1\n    var special_fact: Int64 = 1\n    for (i in 1..=n) {\n        fact_i *= i\n        special_fact *= fact_i\n    }\n    return special_fact\n}\n"
"public func fixSpaces(text: String): String {\n    var sb: StringBuilder = StringBuilder()\n    var start: Int64 = 0\n    var end: Int64 = 0\n    for (i in 0..text.size) {\n        if (text[i] =='') {\n            end += 1\n        } else {\n            if (end - start > 2) {\n                sb.append('-')\n            } else if (end - start > 0) {\n                sb.append(text[start..end])\n            }\n            sb.append(text[i])\n            start = i + 1\n            end = i + 1\n        }\n    }\n    if (end - start > 2) {\n        sb.append('-')\n    } else if (end - start > 0) {\n        sb.append(text[start..end])\n    }\n    return sb.toString()\n}\n"
"public func filenameCheck(file_name: String): String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = file_name.split(\".\")\n    if (lst.size!= 2 ||!suf.contains(lst[1]) || lst[0].isEmpty() ||!lst[0].toAsciiLower().toRuneArray().first().isAsciiLower()) {\n        return \"No\"\n    }\n    let t = lst[0].toAsciiLower().toRuneArray().filter({x => x.isAsciiDigit()}).size\n    if (t > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n"
"public func sumSquares(lst: ArrayList<Int64>): Int64 {\n    var result: ArrayList<Int64> = ArrayList<Int64>()\n    for (i in 0..lst.size) {\n        if (i % 3 == 0) {\n            result.append(lst[i] * lst[i])\n        } else if (i % 4 == 0) {\n            result.append(Int64(math.pow(Float64(lst[i]), 3.0)))\n        } else {\n            result.append(lst[i])\n        }\n    }\n    return result.reduce({x, y => x + y})?? 0\n}\n"
"public func wordsInSentence(sentence: String): String {\n    let new_lst: ArrayList<String> = ArrayList<String>()\n    for (word in sentence.split(\" \")) {\n        var flg: Bool = true\n        if (word.size == 1) {\n            continue\n        }\n        for (i in 2..word.size) {\n            if (word.size % i == 0) {\n                flg = false\n                break\n            }\n        }\n        if (flg) {\n            new_lst.append(word)\n        }\n    }\n    return new_lst.joinToString(separator: \" \")\n}\n"
"func simplify(x: String, n: String): Bool {\n    let a = x.split(\"/\")\n    let b = n.split(\"/\")\n    let numerator = Int64.parse(a[0]) * Int64.parse(b[0])\n    let denominator = Int64.parse(a[1]) * Int64.parse(b[1])\n    return numerator / denominator * denominator == numerator\n}\n"
"public func orderByPoints(nums: ArrayList<Int64>): ArrayList<Int64> {\n    var result: ArrayList<Int64> = nums\n    result.sortBy({ o1: Int64, o2: Int64 =>\n        var sum1: Int64 = 0\n        var sum2: Int64 = 0\n        for (i in 0..o1.toString().size) {\n            if (i!= 0 || o1 >= 0) {\n                sum1 += Int64(UInt32(o1.toString().toRuneArray()[i])) - Int64(UInt32('0'))\n                if (i == 1 && o1 < 0) {\n                    sum1 = -sum1\n                }\n            }\n        }\n        for (i in 0..o2.toString().size) {\n            if (i!= 0 || o2 >= 0) {\n                sum2 += Int64(UInt32(o2.toString().toRuneArray()[i])) - Int64(UInt32('0'))\n                if (i == 1 && o2 < 0) {\n                    sum2 = -sum2\n                }\n            }\n        }\n        if (sum1 < sum2) {\n            return Ordering.LT\n        }\n        if (sum1 > sum2) {\n            return Ordering.GT\n        }\n        return Ordering.EQ\n    })\n    return result\n}\n"
"func specialFilter(nums: ArrayList<Int64>): Int64 {\n    var count: Int64 = 0\n    for (num in nums) {\n        if (num > 10) {\n            let odd_digits = \"13579\"\n            let number_as_string = num.toString()\n            if (odd_digits.contains(number_as_string.charAt(0).toString()) && odd_digits.contains(number_as_string.charAt(number_as_string.size - 1).toString())) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n"
"func getMaxTriples(n: Int64): Int64 {\n    let A = ArrayList<Int64>()\n    for (i in 1..=n) {\n        A.append(i * i - i + 1)\n    }\n    var count = 0\n    for (i in 0..A.size) {\n        for (j in (i + 1)..A.size) {\n            for (k in (j + 1)..A.size) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n"
"public func bf(planet1: String, planet2: String): ArrayList<String> {\n    let planet_names = ArrayList<String>([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"])\n    if (!planet_names.contains(planet1) ||!planet_names.contains(planet2) || planet1 == planet2) {\n        return ArrayList<String>()\n    }\n    let planet1_index = planet_names.indexOf(planet1).getOrThrow()\n    let planet2_index = planet_names.indexOf(planet2).getOrThrow()\n    if (planet1_index < planet2_index) {\n        return ArrayList<String>(planet_names[planet1_index + 1..planet2_index])\n    } else {\n        return ArrayList<String>(planet_names[planet2_index + 1..planet1_index])\n    }\n}\n"
"public func listSort(lst: ArrayList<String>): ArrayList<String> {\n    var lst_sorted: ArrayList<String> = ArrayList<String>(lst)\n    lst_sorted.sortBy({ s: String => s.size })\n    var new_lst: ArrayList<String> = ArrayList<String>()\n    for (i in lst_sorted) {\n        if (i.size % 2 == 0) {\n            new_lst.append(i)\n        }\n    }\n    new_lst.sortBy({ s: String => s.size })\n    return new_lst\n}\n"
"public func xOrY(n: Int64, x: Int64, y: Int64): Int64 {\n    if (n == 1) {\n        return y\n    }\n    for (i in 2..n) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n"
"public func doubleTheDifference(lst: ArrayList<Any>): Int64 {\n    return lst.stream().filter({\n        case Some(v: Int64) => v > 0 && v % 2!= 0\n        case _ => false\n    }).map({\n        case Some(v: Int64) => v * v\n        case _ => 0\n    }).reduce({\n        case Some(a: Int64) => a\n        case None => 0\n    })\n}\n"
"public func compare(game: ArrayList<Int64>, guess: ArrayList<Int64>): ArrayList<Int64> {\n    var result = ArrayList<Int64>()\n    for (i in 0..game.size) {\n        result.append(math.abs(game[i] - guess[i]))\n    }\n    return result\n}\n"
"public func StrongestExtension(class_name: String, extensions: ArrayList<String>): String {\n    var strong: String = extensions.get(0).getOrThrow()\n    var my_val: Int64 = (strong.toRuneArray().filter({ c => c >= 'A' && c <= 'Z' }).size - strong.toRuneArray().filter({ c => c >= 'a' && c <= 'z' }).size)\n    for (s in extensions) {\n        var val: Int64 = (s.toRuneArray().filter({ c => c >= 'A' && c <= 'Z' }).size - s.toRuneArray().filter({ c => c >= 'a' && c <= 'z' }).size)\n        if (val > my_val) {\n            strong = s\n            my_val = val\n        }\n    }\n    return class_name + \".\" + strong\n}\n"
"public func cycpatternCheck(a: String, b: String): Bool {\n    let l = b.size\n    let pat = b + b\n    for (i in 0..a.size - l + 1) {\n        for (j in 0..l + 1) {\n            if (a[i..i + l] == pat[j..j + l]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n"
"public func evenOddCount(num: Int64): ArrayList<Int64> {\n    var even_count: Int64 = 0\n    var odd_count: Int64 = 0\n    for (i in (num.toString()).toRuneArray()) {\n        if ((Int64(UInt32(i)) - Int64('0')) % 2 == 0) {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return ArrayList<Int64>([even_count, odd_count])\n}\n"
"public func intToMiniRoman(number: Int64): String {\n    let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    let sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    var i = 12\n    var res = \"\"\n    while (number > 0) {\n        let div = number / num[i]\n        number %= num[i]\n        while (div!= 0) {\n            res += sym[i]\n            div -= 1\n        }\n        i -= 1\n    }\n    return res.toAsciiLower()\n}\n"
"func rightAngleTriangle(a: Int64, b: Int64, c: Int64): Bool {\n    return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b\n}\n"
"public func findMaxUniqueChars(words: ArrayList<String>): String {\n    var words_sort: ArrayList<String> = ArrayList<String>(words)\n    words_sort.sortBy({ o1: String, o2: String =>\n        if (o1.size > o2.size) {\n            return Ordering.GT\n        } else if (o1.size < o2.size) {\n            return Ordering.LT\n        } else {\n            return o1.compare(o2)\n        }\n    })\n    return words_sort.get(words_sort.size - 1).getOrThrow()\n}\n"
"public func eat(number: Int64, need: Int64, remaining: Int64): ArrayList<Int64> {\n    if (need <= remaining) {\n        return ArrayList<Int64>([number + need, remaining - need])\n    } else {\n        return ArrayList<Int64>([number + remaining, 0])\n    }\n}\n"
"public func doAlgebra(operator: ArrayList<String>, operand: ArrayList<Int64>): Int64 {\n    var ops = operator\n    var nums = operand\n    for (i in (ops.size - 1)..=0 : -1) {\n        if (ops[i] == \"**\") {\n            nums[i] = Int64(math.round(math.pow(Float64(nums[i]), Float64(nums[i + 1]))))\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n    }\n    for (i in 0..ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i--\n        } else if (ops[i] == \"/\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i--\n        }\n    }\n    for (i in 0..ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i--\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i--\n        }\n    }\n    return nums[0]\n}\n"
"func solve(s: String): String {\n    var flag: Bool = true\n    var new_string: StringBuilder = StringBuilder()\n    for (i in s.toRuneArray()) {\n        if (UInt32(i) >= UInt32('A') && UInt32(i) <= UInt32('Z')) {\n            new_string.append(Char(UInt32(i) + 32))\n            flag = false\n        } else if (UInt32(i) >= UInt32('a') && UInt32(i) <= UInt32('z')) {\n            new_string.append(Char(UInt32(i) - 32))\n            flag = false\n        } else {\n            new_string.append(i)\n        }\n    }\n    if (flag) {\n        new_string.reverse()\n    }\n    return new_string.toString()\n}\n"
"public func stringToMd5(text: String): Option<String> {\n    if (text.isEmpty()) {\n        return Option<String>.None\n    }\n\n    let md5: String = md5Digest(text)\n    return Option<String>.Some(md5)\n}"
"public func generateIntegers(a: Int64, b: Int64): ArrayList<Int64> {\n    let lower = math.max(2, math.min(a, b))\n    let upper = math.min(8, math.max(a, b))\n\n    let result = ArrayList<Int64>()\n    for (i in lower..=upper : 2) {\n        result.append(i)\n    }\n    return result\n}\n"
