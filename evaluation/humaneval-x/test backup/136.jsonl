main() {
    let correct = ArrayList<Bool>(
            largestSmallestintegers(ArrayList<Int32>(2, 4, 1, 3, 5, 7))==ArrayList<Option<Int32>>(None, Some(1)),
            largestSmallestintegers(ArrayList<Int32>(2, 4, 1, 3, 5, 7, 0))==ArrayList<Option<Int32>>(None, Some(1)),
            largestSmallestintegers(ArrayList<Int32>(1, 3, 2, 4, 5, 6, -2))==ArrayList<Option<Int32>>(Some(-2), Some(1)),
            largestSmallestintegers(ArrayList<Int32>(4, 5, 3, 6, 2, 7, -7))==ArrayList<Option<Int32>>(Some(-7), Some(2)),
            largestSmallestintegers(ArrayList<Int32>(7, 3, 8, 4, 9, 2, 5, -9))==ArrayList<Option<Int32>>(Some(-9), Some(2)),
            largestSmallestintegers(ArrayList<Int32>())==ArrayList<Option<Int32>>(None, None),
            largestSmallestintegers(ArrayList<Int32>(0))==ArrayList<Option<Int32>>(None, None),
            largestSmallestintegers(ArrayList<Int32>(-1, -3, -5, -6))==ArrayList<Option<Int32>>(Some(-1), None),
            largestSmallestintegers(ArrayList<Int32>(-1, -3, -5, -6, 0))==ArrayList<Option<Int32>>(Some(-1), None),
            largestSmallestintegers(ArrayList<Int32>(-6, -4, -4, -3, 1))==ArrayList<Option<Int32>>(Some(-3), Some(1)),
            largestSmallestintegers(ArrayList<Int32>(-6, -4, -4, -3, -100, 1))==ArrayList<Option<Int32>>(Some(-3), Some(1))
    );
    if (correct.contains(false)) {
        throw new AssertionError();
    }
}