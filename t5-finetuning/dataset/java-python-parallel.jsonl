{"java": "static int validPosition ( int arr [ ] , int N , int K ) { int count = 0 , sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( ( arr [ i ] + K ) > ( sum - arr [ i ] ) ) count ++ ; } return count ; }", "python": "def validPosition ( arr , N , K ) :\n    count = 0 ; sum = 0 ;\n    for i in range ( N ) :\n        sum += arr [ i ] ;\n    for i in range ( N ) :\n        if ( ( arr [ i ] + K ) > ( sum - arr [ i ] ) ) :\n            count += 1 ;\n    return count ;\n"}
{"java": "static int maxResult ( int n , int a , int b , int c ) { int maxVal = 0 ; for ( int i = 0 ; i <= n ; i += a ) for ( int j = 0 ; j <= n - i ; j += b ) { float z = ( n - ( i + j ) ) / c ; if ( Math . floor ( z ) == Math . ceil ( z ) ) { int x = i / a ; int y = j / b ; maxVal = Math . max ( maxVal , x + y + ( int ) z ) ; } } return maxVal ; }", "python": "def maxResult ( n , a , b , c ) :\n    maxVal = 0 ;\n    for i in range ( 0 , n + 1 , a ) :\n        for j in range ( 0 , n - i + 1 , b ) :\n            z = ( n - ( i + j ) ) / c ;\n            if ( floor ( z ) == ceil ( z ) ) :\n                x = i // a ;\n                y = j // b ;\n                maxVal = max ( maxVal , x + y + int ( z ) ) ;\n    return maxVal ;\n"}
{"java": "static int maxLen ( int [ ] arr , int n ) { int min_val = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; int freq = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min_val ) freq ++ ; } return freq ; }", "python": "def maxLen ( arr , n ) :\n    min_val = min ( arr ) ;\n    freq = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] == min_val ) :\n            freq += 1 ;\n    return freq ;\n"}
{"java": "static String allBitsSetInTheGivenRange ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; int new_num = n & num ; if ( new_num == 0 ) return \" Yes \" ; return \" No \" ; }", "python": "def allBitsSetInTheGivenRange ( n , l , r ) :\n    num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 )\n    new_num = n & num\n    if ( new_num == 0 ) :\n        return \" Yes \"\n    return \" No \"\n"}
{"java": "static String allBitsSetInTheGivenRange ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; int new_num = n & num ; if ( num == new_num ) return \" Yes \" ; return \" No \" ; }", "python": "def allBitsSetInTheGivenRange ( n , l , r ) :\n    num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 )\n    new_num = n & num\n    if ( num == new_num ) :\n        return \" Yes \"\n    return \" No \"\n"}
{"java": "static int countKdivPairs ( int A [ ] , int n , int K ) { int [ ] freq = new int [ K ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int rem = A [ i ] % K ; if ( rem != 0 ) ans += freq [ K - rem ] ; else ans += freq [ 0 ] ; freq [ rem ] ++ ; } return ans ; }", "python": "def countKdivPairs ( A , n , K ) :\n    freq = [ 0 for i in range ( K ) ]\n    ans = 0\n    for i in range ( n ) :\n        rem = A [ i ] % K\n        if ( rem != 0 ) :\n            ans += freq [ K - rem ]\n        else :\n            ans += freq [ 0 ]\n        freq [ rem ] += 1\n    return ans\n"}
{"java": "static boolean isSpiltPossible ( int n , int a [ ] ) { int sum = 0 , c1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( a [ i ] == 1 ) { c1 ++ ; } } if ( sum % 2 != 0 ) return false ; if ( ( sum / 2 ) % 2 == 0 ) return true ; if ( c1 > 0 ) return true ; else return false ; }", "python": "def isSpiltPossible ( n , a ) :\n    Sum = 0\n    c1 = 0\n    for i in range ( n ) :\n        Sum += a [ i ]\n        if ( a [ i ] == 1 ) :\n            c1 += 1\n    if ( Sum % 2 ) :\n        return False\n    if ( ( Sum // 2 ) % 2 == 0 ) :\n        return True\n    if ( c1 > 0 ) :\n        return True\n    else :\n        return False\n"}
{"java": "static boolean findParity ( int x ) { int y = x ^ ( x >> 1 ) ; y = y ^ ( y >> 2 ) ; y = y ^ ( y >> 4 ) ; y = y ^ ( y >> 8 ) ; y = y ^ ( y >> 16 ) ; if ( ( y & 1 ) > 0 ) return true ; return false ; }", "python": "def findParity ( x ) :\n    y = x ^ ( x >> 1 ) ;\n    y = y ^ ( y >> 2 ) ;\n    y = y ^ ( y >> 4 ) ;\n    y = y ^ ( y >> 8 ) ;\n    y = y ^ ( y >> 16 ) ;\n    if ( y & 1 ) :\n        return 1 ;\n    return 0 ;\n"}
{"java": "static Vector missing_elements ( Vector vec ) { Vector mis = new Vector ( ) ; for ( int i = 0 ; i < vec . size ( ) ; i ++ ) { int temp = Math . abs ( ( int ) vec . get ( i ) ) - 1 ; if ( ( int ) vec . get ( temp ) > 0 ) vec . set ( temp , - ( int ) vec . get ( temp ) ) ; else vec . set ( temp , vec . get ( temp ) ) ; } for ( int i = 0 ; i < vec . size ( ) ; i ++ ) { if ( ( int ) vec . get ( i ) > 0 ) mis . add ( i + 1 ) ; } return mis ; }", "python": "def missing_elements ( vec ) :\n    mis = [ ]\n    for i in range ( len ( vec ) ) :\n        temp = abs ( vec [ i ] ) - 1\n        if vec [ temp ] > 0 :\n            vec [ temp ] = - vec [ temp ]\n    for i in range ( len ( vec ) ) :\n        if ( vec [ i ] > 0 ) :\n            mis . append ( i + 1 )\n    return mis\n"}
{"java": "static void reverseWords ( String str ) { Stack < Character > st = new Stack < Character > ( ) ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { if ( str . charAt ( i ) != ' \u2581 ' ) st . push ( str . charAt ( i ) ) ; else { while ( st . empty ( ) == false ) { System . out . print ( st . pop ( ) ) ; } System . out . print ( \" \u2581 \" ) ; } } while ( st . empty ( ) == false ) { System . out . print ( st . pop ( ) ) ; } }", "python": "def reverserWords ( string ) :\n    st = list ( )\n    for i in range ( len ( string ) ) :\n        if string [ i ] != \" \u2581 \" :\n            st . append ( string [ i ] )\n        else :\n            while len ( st ) > 0 :\n                print ( st [ - 1 ] , end = \" \" )\n                st . pop ( )\n            print ( end = \" \u2581 \" )\n    while len ( st ) > 0 :\n        print ( st [ - 1 ] , end = \" \" )\n        st . pop ( )\n"}
{"java": "public static int CalcScore ( String dk ) { int [ ] score = { 0 , 11 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 10 , 10 , 10 } ; int max = 0 ; int min = 0 ; String [ ] plh = new String [ 5 ] ; ArrayList < Integer > ph = new ArrayList < Integer > ( ) ; int cntAce = 0 ; plh = dk . split ( \" \u2581 \" ) ; for ( String s : plh ) { ph . add ( Integer . parseInt ( s ) ) ; if ( Integer . parseInt ( s ) == 1 ) { ++ cntAce ; } } for ( int cd : ph ) { max += score [ cd ] ; if ( cd == 1 ) { min += 1 ; } else { min += score [ cd ] ; } } int tmp = min ; for ( int i = 0 ; i < cntAce ; i ++ ) { tmp += 10 ; if ( tmp > 21 ) { break ; } else { min = tmp ; } } if ( max > 21 ) max = 0 ; if ( min > 21 ) min = 0 ; return Math . max ( max , min ) ; }", "python": "def point ( lst ) :\n    counter = Counter ( lst )\n    acc = 0\n    for i in range ( 2 , 10 ) :\n        acc += i * counter [ i ]\n    for i in range ( 10 , 14 ) :\n        acc += 10 * counter [ i ]\n    one_num = counter [ 1 ]\n    for i in range ( one_num + 1 ) :\n        if i + ( one_num - i ) * 11 + acc <= 21 :\n            acc += i + ( one_num - i ) * 11\n            break\n    else :\n        acc += one_num\n    if acc > 21 :\n        return 0\n    else :\n        return acc\n"}
{"java": "static void printOrder ( int [ ] arr , int n , int k ) { int len1 = k , len2 = n - k ; int [ ] arr1 = new int [ k ] ; int [ ] arr2 = new int [ n - k ] ; for ( int i = 0 ; i < k ; i ++ ) arr1 [ i ] = arr [ i ] ; for ( int i = k ; i < n ; i ++ ) arr2 [ i - k ] = arr [ i ] ; Arrays . sort ( arr1 , 0 , k ) ; Arrays . sort ( arr2 , k , n - k ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < k ) arr [ i ] = arr1 [ i ] ; else { arr [ i ] = arr2 [ len2 - 1 ] ; len2 -- ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" \u2581 \" ) ; } }", "python": "def printOrder ( arr , n , k ) :\n    len1 = k\n    len2 = n - k\n    arr1 = [ 0 ] * k\n    arr2 = [ 0 ] * ( n - k )\n    for i in range ( k ) :\n        arr1 [ i ] = arr [ i ]\n    for i in range ( k , n ) :\n        arr2 [ i - k ] = arr [ i ]\n    arr1 . sort ( )\n    arr2 . sort ( )\n    for i in range ( n ) :\n        if ( i < k ) :\n            arr [ i ] = arr1 [ i ]\n        else :\n            arr [ i ] = arr2 [ len2 - 1 ]\n            len2 -= 1\n    for i in range ( n ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "private static String normalize ( String s ) { s = s . toUpperCase ( ) ; s = s . replace ( ' O ' , '0' ) ; s = s . replace ( ' L ' , '1' ) ; s = s . replace ( ' I ' , '1' ) ; return s ; }", "python": "def hashing ( string ) :\n    return string . lower ( ) . replace ( ' o ' , '0' ) . replace ( ' l ' , '1' ) . replace ( ' i ' , '1' )\n"}
{"java": "static int findSubsequence ( int arr [ ] , int n ) { int len = 1 ; int tmp ; int i , j , d ; int dp [ ] = new int [ 10 ] ; int cnt [ ] = new int [ 10 ] ; int locMax ; tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; locMax = 1 ; Arrays . fill ( cnt , 0 ) ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( d = 0 ; d <= 9 ; d ++ ) { if ( cnt [ d ] == 1 ) { dp [ d ] ++ ; locMax = Math . max ( locMax , dp [ d ] ) ; } } for ( d = 0 ; d <= 9 ; d ++ ) { if ( cnt [ d ] == 1 ) { dp [ d ] = locMax ; } } len = Math . max ( len , locMax ) ; } return len ; }", "python": "def findSubsequence ( arr , n ) :\n    length = 1 ;\n    dp = [ 0 ] * 10 ;\n    tmp = arr [ 0 ] ;\n    while ( tmp > 0 ) :\n        dp [ tmp % 10 ] = 1 ;\n        tmp //= 10 ;\n    for i in range ( 1 , n ) :\n        tmp = arr [ i ] ;\n        locMax = 1 ;\n        cnt = [ 0 ] * 10\n        while ( tmp > 0 ) :\n            cnt [ tmp % 10 ] = 1 ;\n            tmp //= 10 ;\n        for d in range ( 10 ) :\n            if ( cnt [ d ] ) :\n                dp [ d ] += 1 ;\n                locMax = max ( locMax , dp [ d ] ) ;\n        for d in range ( 10 ) :\n            if ( cnt [ d ] ) :\n                dp [ d ] = locMax ;\n        length = max ( length , locMax ) ;\n    return length ;\n"}
{"java": "static boolean isOrthogonal ( int [ ] [ ] a , int m , int n ) { if ( m != n ) return false ; int [ ] [ ] trans = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) trans [ i ] [ j ] = a [ j ] [ i ] ; int [ ] [ ] prod = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int sum = 0 ; for ( int k = 0 ; k < n ; k ++ ) { sum = sum + ( a [ i ] [ k ] * a [ j ] [ k ] ) ; } prod [ i ] [ j ] = sum ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i != j && prod [ i ] [ j ] != 0 ) return false ; if ( i == j && prod [ i ] [ j ] != 1 ) return false ; } } return true ; }", "python": "def isOrthogonal ( a , m , n ) :\n    if ( m != n ) :\n        return False\n    trans = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            trans [ i ] [ j ] = a [ j ] [ i ]\n    prod = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            sum = 0\n            for k in range ( 0 , n ) :\n                sum = sum + ( a [ i ] [ k ] * a [ j ] [ k ] )\n            prod [ i ] [ j ] = sum\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i != j and prod [ i ] [ j ] != 0 ) :\n                return False\n            if ( i == j and prod [ i ] [ j ] != 1 ) :\n                return False\n    return True\n"}
{"java": "static int Distinct_Prime_factors ( Vector < Integer > a ) { HashSet < Integer > m = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { int sq = ( int ) Math . sqrt ( a . get ( i ) ) ; for ( int j = 2 ; j <= sq ; j ++ ) { if ( a . get ( i ) % j == 0 ) { m . add ( j ) ; while ( a . get ( i ) % j == 0 ) { a . set ( i , a . get ( i ) / j ) ; } } } if ( a . get ( i ) > 1 ) { m . add ( a . get ( i ) ) ; } } return m . size ( ) ; }", "python": "def Distinct_Prime_factors ( a ) :\n    m = [ ]\n    for i in range ( len ( a ) ) :\n        sq = int ( math . sqrt ( a [ i ] ) )\n        for j in range ( 2 , sq + 1 ) :\n            if ( a [ i ] % j == 0 ) :\n                m . append ( j )\n                while ( a [ i ] % j == 0 ) :\n                    a [ i ] //= j\n        if ( a [ i ] > 2 ) :\n            m . append ( a [ i ] )\n    return len ( m )\n"}
{"java": "static int findSum ( int [ ] arr , int n , int k ) { int ans = arr [ n - k - 1 ] - arr [ 0 ] ; for ( int i = 1 ; i <= k ; i ++ ) { ans = Math . min ( arr [ n - 1 - ( k - i ) ] - arr [ i ] , ans ) ; } return ans ; }", "python": "def findSum ( arr , n , k ) :\n    ans = arr [ n - k - 1 ] - arr [ 0 ] ;\n    for i in range ( 1 , k + 1 ) :\n        ans = min ( arr [ n - 1 - ( k - i ) ] - arr [ i ] , ans ) ;\n    return ans ;\n"}
{"java": "static Vector < Integer > solve ( int X , Vector < Integer > A ) { int min = Integer . MAX_VALUE ; int ind = - 1 ; for ( int i = 0 ; i < A . size ( ) ; i ++ ) { if ( A . get ( i ) < min ) { min = A . get ( i ) ; ind = i ; } } int maxIndChosen = X / min ; Vector < Integer > ans = new Vector < > ( ) ; if ( maxIndChosen == 0 ) { return ans ; } for ( int i = 0 ; i < maxIndChosen ; i ++ ) { ans . add ( ind ) ; } int temp = maxIndChosen ; int sum = maxIndChosen * A . get ( ind ) ; for ( int i = 0 ; i < ind ; i ++ ) { if ( sum - X == 0 || temp == 0 ) break ; while ( ( sum - A . get ( ind ) + A . get ( i ) ) <= X && temp != 0 ) { ans . remove ( 0 ) ; ans . add ( i ) ; temp -- ; sum += ( A . get ( i ) - A . get ( ind ) ) ; } } Collections . sort ( ans ) ; return ans ; }", "python": "def solve ( X , A ) :\n    minimum = sys . maxsize ;\n    ind = - 1 ;\n    for i in range ( len ( A ) ) :\n        if ( A [ i ] < minimum ) :\n            minimum = A [ i ] ;\n            ind = i ;\n    maxIndChosen = X // minimum ;\n    ans = [ ] ;\n    if ( maxIndChosen == 0 ) :\n        return ans ;\n    for i in range ( maxIndChosen ) :\n        ans . append ( ind ) ;\n    temp = maxIndChosen ;\n    sum = maxIndChosen * A [ ind ] ;\n    for i in range ( ind ) :\n        if ( sum - X == 0 or temp == 0 ) :\n            break ;\n        while ( ( sum - A [ ind ] + A [ i ] ) <= X and temp != 0 ) :\n            del ( ans [ 0 ] ) ;\n            ans . append ( i ) ;\n            temp -= 1 ;\n            sum += ( A [ i ] - A [ ind ] ) ;\n    ans . sort ( ) ;\n    return ans ;\n"}
{"java": "static void hut_pattern ( int n ) { int i , j , t ; if ( n % 2 == 0 ) { n ++ ; } for ( i = 0 ; i <= n - n / 3 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { t = 2 * n / 5 ; if ( t % 2 != 0 ) { t -- ; } if ( i == n / 5 || i == n - n / 3 || ( j == n - 1 && i >= n / 5 ) || ( j >= n / 5 && j < n - n / 5 && i == 0 ) || ( j == 0 && i >= n / 5 ) || ( j == t && i > n / 5 ) || ( i <= n / 5 && ( i + j == n / 5 || j - i == n / 5 ) ) || ( j - i == n - n / 5 ) ) { System . out . print ( \" * \" ) ; } else if ( i == n / 5 + n / 7 && ( j >= n / 7 && j <= t - n / 7 ) ) { System . out . print ( \" _ \" ) ; } else if ( i >= n / 5 + n / 7 && ( j == n / 7 || j == t - n / 7 ) ) { System . out . print ( \" | \" ) ; } else { System . out . print ( \" \u2581 \" ) ; } } System . out . print ( \" \\n \" ) ; } }", "python": "def hut_pattern ( n ) :\n    if n % 2 == 0 :\n        n = n + 1\n    for i in range ( 0 , n - n // 3 + 1 , 1 ) :\n        for j in range ( 0 , n , 1 ) :\n            t = 2 * n / 5\n            if t % 2 != 0 :\n                t = t - 1\n            if ( ( i == n / 5 ) or ( i == n - n / 3 ) or ( j == n - 1 and i >= n / 5 ) or ( j >= n / 5 and j < n - n / 5 and i == 0 ) or ( j == 0 and i >= n / 5 ) or ( j == t and i > n / 5 ) or ( i <= n / 5 and ( i + j == n / 5 or j - i == n / 5 ) ) or ( j - i == n - n / 5 ) ) :\n                print ( \" * \" , end = \" \u2581 \" )\n            elif ( ( i == n // 5 + n // 7 ) and ( j >= n // 7 and j <= t - n // 7 ) ) :\n                print ( \" _ \" , end = \" \u2581 \" )\n            elif ( ( i >= n // 5 + n // 7 ) and ( j == n // 7 or j == t - n // 7 ) ) :\n                print ( \" | \" , end = \" \u2581 \" )\n            else :\n                print ( \" \u2581 \" , end = \" \u2581 \" )\n        print ( \" \\n \" ) ;\n"}
{"java": "static int run_tasks ( Queue < Integer > A , Queue < Integer > B ) { int total_time = 0 ; while ( ! A . isEmpty ( ) ) { int x = A . peek ( ) ; int y = B . peek ( ) ; if ( x == y ) { A . remove ( ) ; B . remove ( ) ; total_time ++ ; } else { A . remove ( ) ; A . add ( x ) ; total_time += 2 ; } } return total_time ; }", "python": "def run_tasks ( A , B ) :\n    total_time = 0\n    while ( len ( A ) > 0 ) :\n        x = A . popleft ( )\n        y = B . popleft ( )\n        if ( x == y ) :\n            total_time += 1\n        else :\n            B . appendleft ( y )\n            A . append ( x )\n            total_time += 2\n    return total_time\n"}
{"java": "static int countPairs ( int A1 [ ] , int A2 [ ] , int n1 , int n2 , int K ) { int res = 0 ; Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n1 ; ++ i ) { if ( m . containsKey ( A1 [ i ] ) ) m . put ( A1 [ i ] , m . get ( A1 [ i ] ) + 1 ) ; else m . put ( A1 [ i ] , 1 ) ; } for ( int i = 0 ; i < n2 ; ++ i ) { int temp = K - A2 [ i ] ; if ( m . containsKey ( temp ) && m . get ( temp ) != 0 ) { res ++ ; m . put ( temp , m . get ( A1 [ i ] ) - 1 ) ; } } return res ; }", "python": "def countPairs ( A1 , A2 , n1 , n2 , K ) :\n    res = 0\n    m = dict ( )\n    for i in range ( 0 , n1 ) :\n        if A1 [ i ] not in m . keys ( ) :\n            m [ A1 [ i ] ] = 1\n        else :\n            m [ A1 [ i ] ] = m [ A1 [ i ] ] + 1\n    for i in range ( 0 , n2 ) :\n        temp = K - A2 [ i ]\n        if temp in m . keys ( ) :\n            res = res + 1\n            m [ temp ] = m [ temp ] - 1\n    return res\n"}
{"java": "public static int calculate ( int ar [ ] , int size ) { int count = 0 ; for ( int i = 0 ; i < size ; i ++ ) if ( ar [ i ] % 2 == 0 && ar [ i ] != 0 && ar [ i ] != 2 ) count ++ ; return count ; }", "python": "def calculate ( array , size ) :\n    count = 0\n    for i in range ( size ) :\n        if ( array [ i ] % 2 == 0 and array [ i ] != 0 and array [ i ] != 2 ) :\n            count += 1\n    return count\n"}
{"java": "static int find_sub ( String s , int k ) { int len = s . length ( ) ; int lp = 0 , rp = 0 ; int ans = 0 ; int [ ] hash_char = new int [ 26 ] ; for ( ; rp < len ; rp ++ ) { hash_char [ s . charAt ( rp ) - ' a ' ] ++ ; while ( hash_char [ s . charAt ( rp ) - ' a ' ] > k ) { hash_char [ s . charAt ( lp ) - ' a ' ] -- ; lp ++ ; } ans += rp - lp + 1 ; } return ans ; }", "python": "def find_sub ( s , k ) :\n    Len = len ( s )\n    lp , rp = 0 , 0\n    ans = 0\n    hash_char = [ 0 for i in range ( 256 ) ]\n    for rp in range ( Len ) :\n        hash_char [ ord ( s [ rp ] ) ] += 1\n        while ( hash_char [ ord ( s [ rp ] ) ] > k ) :\n            hash_char [ ord ( s [ lp ] ) ] -= 1\n            lp += 1\n        ans += rp - lp + 1\n    return ans\n"}
{"java": "static void printSeries ( int N ) { int ith_term = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ith_term = i % 2 == 0 ? 2 * i * i + 1 : 2 * i * i - 1 ; System . out . print ( ith_term + \" , \u2581 \" ) ; } }", "python": "def printSeries ( N ) :\n    ith_term = 0 ;\n    for i in range ( 1 , N + 1 ) :\n        ith_term = 0 ;\n        if ( i % 2 == 0 ) :\n            ith_term = 2 * i * i + 1 ;\n        else :\n            ith_term = 2 * i * i - 1 ;\n        print ( ith_term , end = \" , \u2581 \" ) ;\n"}
{"java": "static void pyramid ( int n ) { int i , j , num , gap ; for ( i = n ; i >= 1 ; i -- ) { for ( gap = n - 1 ; gap >= i ; gap -- ) { System . out . print ( \" \u2581 \" ) ; System . out . print ( \" \u2581 \" ) ; } num = ' A ' ; for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( ( char ) num ++ + \" \u2581 \" ) ; } for ( j = i - 1 ; j >= 0 ; j -- ) { System . out . print ( ( char ) -- num + \" \u2581 \" ) ; } System . out . println ( \" \" ) ; } }", "python": "def pyramid ( n ) :\n    for i in range ( n , 0 , - 1 ) :\n        for gap in range ( n - 1 , i - 1 , - 1 ) :\n            print ( \" \u2581 \" , end = ' ' )\n            print ( \" \u2581 \" , end = ' ' )\n        num = ord ( ' A ' )\n        for j in range ( 1 , i + 1 ) :\n            print ( chr ( num ) , end = ' \u2581 ' )\n            num += 1\n        for j in range ( i - 1 , - 1 , - 1 ) :\n            num -= 1\n            print ( chr ( num ) , end = ' \u2581 ' )\n        print ( \" \\n \" , end = ' ' )\n"}
{"java": "static void gridStr ( String str ) { int l = str . length ( ) ; int k = 0 , row , column ; row = ( int ) Math . floor ( Math . sqrt ( l ) ) ; column = ( int ) Math . ceil ( Math . sqrt ( l ) ) ; if ( row * column < l ) { row = column ; } char s [ ] [ ] = new char [ row ] [ column ] ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( k < str . length ( ) ) s [ i ] [ j ] = str . charAt ( k ) ; k ++ ; } } for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( s [ i ] [ j ] == 0 ) { break ; } System . out . print ( s [ i ] [ j ] ) ; } System . out . println ( \" \" ) ; } }", "python": "def gridStr ( string ) :\n    l = len ( string )\n    k = 0\n    row = floor ( sqrt ( l ) )\n    column = ceil ( sqrt ( l ) )\n    if ( row * column < l ) :\n        row = column\n    s = [ [ 0 for j in range ( column ) ] for i in range ( row ) ]\n    for i in range ( row ) :\n        for j in range ( column ) :\n            if k >= l :\n                s [ i ] [ j ] = \" \u2581 \"\n                k += 1\n            else :\n                s [ i ] [ j ] = string [ k ]\n                k += 1\n    for i in range ( row ) :\n        for j in range ( column ) :\n            if s [ i ] [ j ] == \" \u2581 \" :\n                break\n            print ( s [ i ] [ j ] , end = \" \" )\n        print ( )\n"}
{"java": "static int count ( int n ) { int x = ( n / 3 ) - 1 ; if ( n % 3 > 0 ) { x ++ ; } return ( 4 * x + 4 * n ) ; }", "python": "def count ( n ) :\n    x = ( n // 3 ) - 1 ;\n    if ( n % 3 > 0 ) :\n        x += 1 ;\n    return ( 4 * x + 4 * n ) ;\n"}
{"java": "static boolean Survives ( int n ) { for ( int i = 2 ; ; i ++ ) { if ( i > n ) return true ; if ( n % i == 0 ) return false ; n -= n / i ; } }", "python": "def Survives ( n ) :\n    i = 2\n    while ( True ) :\n        if ( i > n ) :\n            return True ;\n        if ( n % i == 0 ) :\n            return False ;\n        n -= n // i ;\n        i += 1\n"}
{"java": "static void findNextWord ( char [ ] s , int m ) { m += 97 ; int n = s . length ; int i = s . length - 1 ; s [ i ] ++ ; while ( i >= 0 && i <= n - 1 ) { if ( s [ i ] >= m ) { s [ i ] = ' a ' ; s [ -- i ] ++ ; } else if ( s [ i ] == s [ i - 1 ] || s [ i ] == s [ i - 2 ] ) { s [ i ] ++ ; } else { i ++ ; } } if ( i <= - 1 ) { System . out . println ( \" - 1\" ) ; } else { System . out . println ( s ) ; } }", "python": "def findNextWord ( s , m ) :\n    m += 97\n    n = len ( s )\n    i = len ( s ) - 1\n    s [ i ] = chr ( ord ( s [ i ] ) + 1 )\n    while i >= 0 and i <= n - 1 :\n        if ord ( s [ i ] ) >= m :\n            s [ i ] = ' a '\n            i -= 1\n            s [ i ] = chr ( ord ( s [ i ] ) + 1 )\n        elif s [ i ] == s [ i - 1 ] or s [ i ] == s [ i - 2 ] :\n            s [ i ] = chr ( ord ( s [ i ] ) + 1 )\n        else :\n            i += 1\n    if i <= - 1 :\n        print ( \" - 1\" )\n    else :\n        print ( ' ' . join ( s ) )\n"}
{"java": "static int digroot ( int n ) { int root = 0 ; while ( n > 0 || root > 9 ) { if ( n == 0 ) { n = root ; root = 0 ; } root += n % 10 ; n /= 10 ; } return root ; }", "python": "def digitalRoot ( num ) :\n    if ( num == \"0\" ) :\n        return 0\n    ans = 0\n    for i in range ( 0 , len ( num ) ) :\n        ans = ( ans + int ( num [ i ] ) ) % 9\n    if ( ans == 0 ) :\n        return 9\n    else :\n        return ans % 9\n"}
{"java": "static long computeXOR ( int n ) { int x = n & 3 ; switch ( x ) { case 0 : return n ; case 1 : return 1 ; case 2 : return n + 1 ; case 3 : return 0 ; } return 0 ; }", "python": "def computeXOR ( n ) :\n    switch = { 0 : n , 1 : 1 , 2 : n + 1 , 3 : 0 , }\n    return switch . get ( n & 3 , \" \" )\n"}
{"java": "static int lehmann ( int n , int t ) { Random rand = new Random ( ) ; int a = rand . nextInt ( n - 3 ) + 2 ; float e = ( n - 1 ) / 2 ; while ( t > 0 ) { int result = ( ( int ) ( Math . pow ( a , e ) ) ) % n ; if ( ( result % n ) == 1 || ( result % n ) == ( n - 1 ) ) { a = rand . nextInt ( n - 3 ) + 2 ; t -= 1 ; } else return - 1 ; } return 1 ; }", "python": "def lehmann ( n , t ) :\n    a = random . randint ( 2 , n - 1 )\n    e = ( n - 1 ) / 2\n    while ( t > 0 ) :\n        result = ( ( int ) ( a ** e ) ) % n\n        if ( ( result % n ) == 1 or ( result % n ) == ( n - 1 ) ) :\n            a = random . randint ( 2 , n - 1 )\n            t -= 1\n        else :\n            return - 1\n    return 1\n"}
{"java": "static boolean check ( int a [ ] , int n ) { if ( n % 2 == 1 ) return false ; for ( int i = 0 ; i < n / 2 ; i ++ ) { if ( a [ i ] != a [ i + ( n / 2 ) ] ) return false ; } return true ; }", "python": "def check ( a , n ) :\n    if n % 2 == 1 :\n        return False\n    for i in range ( n // 2 ) :\n        if a [ i ] != a [ i + ( n // 2 ) ] :\n            return False\n    return True\n"}
{"java": "static void printPermutation ( int n , int k ) { for ( int i = 1 ; i <= n ; i ++ ) { int x = 2 * i - 1 ; int y = 2 * i ; if ( i <= k ) System . out . print ( y + \" \u2581 \" + x + \" \u2581 \" ) ; else System . out . print ( x + \" \u2581 \" + y + \" \u2581 \" ) ; } }", "python": "def printPermutation ( n , k ) :\n    for i in range ( 1 , n + 1 ) :\n        x = 2 * i - 1 ;\n        y = 2 * i ;\n        if ( i <= k ) :\n            print ( y , x , end = \" \u2581 \" ) ;\n        else :\n            print ( x , y , end = \" \u2581 \" ) ;\n"}
{"java": "static void countOddRotations ( int n ) { int odd_count = 0 , even_count = 0 ; do { int digit = n % 10 ; if ( digit % 2 == 1 ) odd_count ++ ; else even_count ++ ; n = n / 10 ; } while ( n != 0 ) ; System . out . println ( \" Odd \u2581 = \u2581 \" + odd_count ) ; System . out . println ( \" Even \u2581 = \u2581 \" + even_count ) ; }", "python": "def countOddRotations ( n ) :\n    odd_count = 0 ; even_count = 0\n    while n != 0 :\n        digit = n % 10\n        if digit % 2 == 0 :\n            odd_count += 1\n        else :\n            even_count += 1\n        n = n // 10\n    print ( \" Odd \u2581 = \" , odd_count )\n    print ( \" Even \u2581 = \" , even_count )\n"}
{"java": "static void diagonalsMinMax ( int [ ] [ ] mat ) { int n = mat . length ; if ( n == 0 ) return ; int principalMin = mat [ 0 ] [ 0 ] , principalMax = mat [ 0 ] [ 0 ] ; int secondaryMin = mat [ n - 1 ] [ 0 ] , secondaryMax = mat [ n - 1 ] [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( mat [ i ] [ i ] < principalMin ) { principalMin = mat [ i ] [ i ] ; } if ( mat [ i ] [ i ] > principalMax ) { principalMax = mat [ i ] [ i ] ; } if ( mat [ n - 1 - i ] [ i ] < secondaryMin ) { secondaryMin = mat [ n - 1 - i ] [ i ] ; } if ( mat [ n - 1 - i ] [ i ] > secondaryMax ) { secondaryMax = mat [ n - 1 - i ] [ i ] ; } } System . out . println ( \" Principal \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \u2581 \" + principalMin ) ; System . out . println ( \" Principal \u2581 Diagonal \u2581 Greatest \u2581 Element \u2581 : \u2581 \" + principalMax ) ; System . out . println ( \" Secondary \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \" + secondaryMin ) ; System . out . println ( \" Secondary \u2581 Diagonal \u2581 Greatest \u2581 Element : \u2581 \" + secondaryMax ) ; }", "python": "def diagonalsMinMax ( mat ) :\n    if ( n == 0 ) :\n        return\n    principalMin = mat [ 0 ] [ 0 ]\n    principalMax = mat [ 0 ] [ 0 ]\n    secondaryMin = mat [ n - 1 ] [ 0 ]\n    secondaryMax = mat [ n - 1 ] [ 0 ]\n    for i in range ( n ) :\n        if ( mat [ i ] [ i ] < principalMin ) :\n            principalMin = mat [ i ] [ i ]\n        if ( mat [ i ] [ i ] > principalMax ) :\n            principalMax = mat [ i ] [ i ]\n        if ( mat [ n - 1 - i ] [ i ] < secondaryMin ) :\n            secondaryMin = mat [ n - 1 - i ] [ i ]\n        if ( mat [ n - 1 - i ] [ i ] > secondaryMax ) :\n            secondaryMax = mat [ n - 1 - i ] [ i ]\n    print ( \" Principal \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \" , principalMin )\n    print ( \" Principal \u2581 Diagonal \u2581 Greatest \u2581 Element \u2581 : \u2581 \" , principalMax )\n    print ( \" Secondary \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \" , secondaryMin )\n    print ( \" Secondary \u2581 Diagonal \u2581 Greatest \u2581 Element : \u2581 \" , secondaryMax )\n"}
{"java": "static void diagonalsMinMax ( int [ ] [ ] mat ) { int n = mat . length ; if ( n == 0 ) return ; int principalMin = mat [ 0 ] [ 0 ] , principalMax = mat [ 0 ] [ 0 ] ; int secondaryMin = mat [ n - 1 ] [ 0 ] , secondaryMax = mat [ n - 1 ] [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( i == j ) { if ( mat [ i ] [ j ] < principalMin ) { principalMin = mat [ i ] [ j ] ; } if ( mat [ i ] [ j ] > principalMax ) { principalMax = mat [ i ] [ j ] ; } } if ( ( i + j ) == ( n - 1 ) ) { if ( mat [ i ] [ j ] < secondaryMin ) { secondaryMin = mat [ i ] [ j ] ; } if ( mat [ i ] [ j ] > secondaryMax ) { secondaryMax = mat [ i ] [ j ] ; } } } } System . out . println ( \" Principal \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \u2581 \" + principalMin ) ; System . out . println ( \" Principal \u2581 Diagonal \u2581 Greatest \u2581 Element \u2581 : \u2581 \" + principalMax ) ; System . out . println ( \" Secondary \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \" + secondaryMin ) ; System . out . println ( \" Secondary \u2581 Diagonal \u2581 Greatest \u2581 Element : \u2581 \" + secondaryMax ) ; }", "python": "def diagonalsMinMax ( mat ) :\n    n = len ( mat )\n    if ( n == 0 ) :\n        return\n    principalMin = mat [ 0 ] [ 0 ]\n    principalMax = mat [ 0 ] [ 0 ]\n    secondaryMin = mat [ n - 1 ] [ 0 ]\n    secondaryMax = mat [ n - 1 ] [ 0 ]\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( i == j ) :\n                if ( mat [ i ] [ j ] < principalMin ) :\n                    principalMin = mat [ i ] [ j ]\n                if ( mat [ i ] [ j ] > principalMax ) :\n                    principalMax = mat [ i ] [ j ]\n            if ( ( i + j ) == ( n - 1 ) ) :\n                if ( mat [ i ] [ j ] < secondaryMin ) :\n                    secondaryMin = mat [ i ] [ j ]\n                if ( mat [ i ] [ j ] > secondaryMax ) :\n                    secondaryMax = mat [ i ] [ j ]\n    print ( \" Principal \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \" , principalMin )\n    print ( \" Principal \u2581 Diagonal \u2581 Greatest \u2581 Element \u2581 : \u2581 \" , principalMax )\n    print ( \" Secondary \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \" , secondaryMin )\n    print ( \" Secondary \u2581 Diagonal \u2581 Greatest \u2581 Element : \u2581 \" , secondaryMax )\n"}
{"java": "static int minSteps ( int i , int j , int arr [ ] [ ] ) { if ( i == n - 1 && j == n - 1 ) { return 0 ; } if ( i > n - 1 || j > n - 1 ) { return 9999999 ; } if ( v [ i ] [ j ] == 1 ) { return dp [ i ] [ j ] ; } v [ i ] [ j ] = 1 ; dp [ i ] [ j ] = 1 + Math . min ( minSteps ( i + arr [ i ] [ j ] , j , arr ) , minSteps ( i , j + arr [ i ] [ j ] , arr ) ) ; return dp [ i ] [ j ] ; }", "python": "def minSteps ( i , j , arr ) :\n    if ( i == n - 1 and j == n - 1 ) :\n        return 0 ;\n    if ( i > n - 1 or j > n - 1 ) :\n        return 9999999 ;\n    if ( v [ i ] [ j ] ) :\n        return dp [ i ] [ j ] ;\n    v [ i ] [ j ] = 1 ;\n    dp [ i ] [ j ] = 1 + min ( minSteps ( i + arr [ i ] [ j ] , j , arr ) , minSteps ( i , j + arr [ i ] [ j ] , arr ) ) ;\n    return dp [ i ] [ j ] ;\n"}
{"java": "static int findSubstrings ( String s , int k ) { int ans = 0 ; int cnt [ ] = new int [ 26 ] ; int i , j , n = s . length ( ) ; for ( i = 0 ; i < n ; i ++ ) { Arrays . fill ( cnt , 0 ) ; for ( j = i ; j < n ; j ++ ) { cnt [ s . charAt ( j ) - ' a ' ] ++ ; if ( cnt [ s . charAt ( j ) - ' a ' ] <= k ) { ans ++ ; } else { break ; } } } return ans ; }", "python": "def findSubstrings ( s , k ) :\n    ans = 0\n    n = len ( s )\n    for i in range ( n ) :\n        cnt = [ 0 ] * 26\n        for j in range ( i , n ) :\n            cnt [ ord ( s [ j ] ) - ord ( ' a ' ) ] += 1\n            if ( cnt [ ord ( s [ j ] ) - ord ( ' a ' ) ] <= k ) :\n                ans += 1\n            else :\n                break\n    return ans\n"}
{"java": "public static void SubString ( String str , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) System . out . println ( str . substring ( i , j ) ) ; }", "python": "def subString ( s , n ) :\n    for i in range ( n ) :\n        for len in range ( i + 1 , n + 1 ) :\n            print ( s [ i : len ] ) ;\n"}
{"java": "static String getSubSeq ( String s , int n ) { String res = \" \" ; int cr = 0 ; while ( cr < n ) { char mx = s . charAt ( cr ) ; for ( int i = cr + 1 ; i < n ; i ++ ) { mx = ( char ) Math . max ( mx , s . charAt ( i ) ) ; } int lst = cr ; for ( int i = cr ; i < n ; i ++ ) { if ( s . charAt ( i ) == mx ) { res += s . charAt ( i ) ; lst = i ; } } cr = lst + 1 ; } return res ; }", "python": "def getSubSeq ( s , n ) :\n    res = \" \"\n    cr = 0\n    while ( cr < n ) :\n        mx = s [ cr ]\n        for i in range ( cr + 1 , n ) :\n            mx = max ( mx , s [ i ] )\n        lst = cr\n        for i in range ( cr , n ) :\n            if ( s [ i ] == mx ) :\n                res += s [ i ]\n                lst = i\n        cr = lst + 1\n    return res\n"}
{"java": "public static void solve ( int x ) { int c = 0 ; for ( int i = 0 ; i <= 31 ; i ++ ) { if ( ( x & ( 1 << i ) ) != 0 ) c ++ ; } System . out . printf ( \" % d \\n \" , 1 << c ) ; }", "python": "def math_mag ( ) :\n    t = int ( input ( ) )\n    numbers = [ ]\n    for i in range ( t ) :\n        numbers . append ( int ( input ( ) ) )\n    for a in numbers :\n        if a == 0 :\n            print ( 1 )\n        elif a == 1 or a == 2 :\n            print ( 2 )\n        else :\n            a = bin ( a )\n            y = 0\n            for s in a :\n                if s == '1' :\n                    y += 1\n            print ( 2 ** y )\n"}
{"java": "static boolean isDefeat ( String s1 , String s2 , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( ( s1 . charAt ( i ) == '0' && s2 . charAt ( i ) == '1' ) || ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '0' ) ) continue ; else if ( ( s1 . charAt ( i ) == '0' && s2 . charAt ( i ) == ' Z ' ) || ( s1 . charAt ( i ) == ' Z ' && s2 . charAt ( i ) == '0' ) ) continue ; else { return true ; } } return false ; }", "python": "def isDefeat ( s1 , s2 , n ) :\n    for i in range ( n ) :\n        if ( ( s1 [ i ] == '0' and s2 [ i ] == '1' ) or ( s1 [ i ] == '1' and s2 [ i ] == '0' ) ) :\n            continue\n        elif ( ( s1 [ i ] == '0' and s2 [ i ] == ' Z ' ) or ( s1 [ i ] == ' Z ' and s2 [ i ] == '0' ) ) :\n            continue\n        else :\n            return True\n    return False\n"}
{"java": "static double sum ( double a , double b , double c , double d , double x ) { double ans = ( x * ( a + b ) * ( c - d ) ) / ( ( a * d ) - ( b * c ) ) ; return ans ; }", "python": "def sum ( a , b , c , d , x ) :\n    ans = ( ( x * ( a + b ) * ( c - d ) ) / ( ( a * d ) - ( b * c ) ) ) ;\n    return ans ;\n"}
{"java": "static float cube ( float h , float r ) { if ( h < 0 && r < 0 ) return - 1 ; float a = ( h * r * ( float ) Math . sqrt ( 2 ) ) / ( h + ( float ) Math . sqrt ( 2 ) * r ) ; return a ; }", "python": "def cubeSide ( h , r ) :\n    if ( h < 0 and r < 0 ) :\n        return - 1\n    a = ( ( h * r * math . sqrt ( 2 ) ) / ( h + math . sqrt ( 2 ) * r ) )\n    return a\n"}
{"java": "static void KPrimeDivisors ( int N , int K ) { int maximum_split = 0 ; while ( N % 2 == 0 ) { maximum_split ++ ; N /= 2 ; } for ( int i = 3 ; i * i <= N ; i = i + 2 ) { while ( N % i == 0 ) { N = N / i ; maximum_split ++ ; } } if ( N > 2 ) maximum_split ++ ; if ( maximum_split < K ) { System . out . println ( \" No \" ) ; return ; } System . out . println ( \" Yes \" ) ; }", "python": "def KPrimeDivisors ( n , k ) :\n    maximum_split = 0\n    while n % 2 == 0 :\n        maximum_split += 1\n        n = n // 2\n    for i in range ( 3 , mt . ceil ( mt . sqrt ( n ) ) , 2 ) :\n        while n % i == 0 :\n            n = n / i ;\n            maximum_split += 1\n    if n > 2 :\n        maximum_split += 1\n    if maximum_split < k :\n        print ( \" No \" )\n        return\n    print ( \" Yes \" )\n"}
{"java": "static int minReplacement ( String s , int len ) { int ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( i % 2 == 0 && s . charAt ( i ) == '1' ) ans ++ ; if ( i % 2 == 1 && s . charAt ( i ) == '0' ) ans ++ ; } return Math . min ( ans , len - ans ) ; }", "python": "def minReplacement ( s , length ) :\n    ans = 0\n    for i in range ( 0 , length ) :\n        if i % 2 == 0 and s [ i ] == '1' :\n            ans += 1\n        if i % 2 == 1 and s [ i ] == '0' :\n            ans += 1\n    return min ( ans , length - ans )\n"}
{"java": "public static int minChanges ( String str ) { int n = str . length ( ) ; if ( n > MAX_CHAR ) return - 1 ; int dist_count = 0 ; int count [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) count [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( count [ str . charAt ( i ) - ' a ' ] == 0 ) dist_count ++ ; count [ str . charAt ( i ) - ' a ' ] ++ ; } return ( n - dist_count ) ; }", "python": "def minChanges ( str ) :\n    n = len ( str )\n    if ( n > MAX_CHAR [ 0 ] ) :\n        return - 1\n    dist_count = 0\n    count = [ 0 ] * MAX_CHAR [ 0 ]\n    for i in range ( n ) :\n        if ( count [ ord ( str [ i ] ) - ord ( ' a ' ) ] == 0 ) :\n            dist_count += 1\n        count [ ( ord ( str [ i ] ) - ord ( ' a ' ) ) ] += 1\n    return ( n - dist_count )\n"}
{"java": "static void printTwoSetBitNums ( int n ) { int x = 1 ; while ( n > 0 ) { int y = 0 ; while ( y < x ) { System . out . print ( ( ( 1 << x ) + ( 1 << y ) ) + \" \u2581 \" ) ; n -- ; if ( n == 0 ) return ; y ++ ; } x ++ ; } }", "python": "def printTwoSetBitNums ( n ) :\n    x = 1\n    while ( n > 0 ) :\n        y = 0\n        while ( y < x ) :\n            print ( ( 1 << x ) + ( 1 << y ) , end = \" \u2581 \" )\n            n -= 1\n            if ( n == 0 ) :\n                return\n            y += 1\n        x += 1\n"}
{"java": "static long powerNumbers ( int n ) { HashSet < Long > v = new HashSet < Long > ( ) ; for ( long i = 2 ; i * i * i <= n ; i ++ ) { long j = i * i ; while ( j * i <= n ) { j *= i ; long s = ( long ) Math . sqrt ( j ) ; if ( s * s != j ) v . add ( j ) ; } } return v . size ( ) + ( long ) Math . sqrt ( n ) ; }", "python": "def powerNumbers ( n ) :\n    v = [ ]\n    for i in range ( 2 , int ( math . pow ( n , 1.0 / 3.0 ) ) + 1 ) :\n        j = i * i\n        while ( j * i <= n ) :\n            j = j * i\n            s = int ( math . sqrt ( j ) )\n            if ( s * s != j ) :\n                v . append ( j )\n    v . sort ( )\n    v = list ( dict . fromkeys ( v ) )\n    return len ( v ) + int ( math . sqrt ( n ) )\n"}
{"java": "static int product ( int x , int y ) { if ( x < y ) return product ( y , x ) ; else if ( y != 0 ) return ( x + product ( x , y - 1 ) ) ; else return 0 ; }", "python": "def product ( x , y ) :\n    if x < y :\n        return product ( y , x )\n    elif y != 0 :\n        return ( x + product ( x , y - 1 ) )\n    else :\n        return 0\n"}
{"java": "static void nthprimedigitsnumber ( long n ) { long len = 1 ; long prev_count = 0 ; while ( true ) { long curr_count = ( long ) ( prev_count + pow ( 4 , len ) ) ; if ( prev_count < n && curr_count >= n ) break ; len ++ ; prev_count = curr_count ; } for ( int i = 1 ; i <= len ; i ++ ) { for ( long j = 1 ; j <= 4 ; j ++ ) { if ( prev_count + pow ( 4 , len - i ) < n ) prev_count += pow ( 4 , len - i ) ; else { if ( j == 1 ) System . out . print ( \"2\" ) ; else if ( j == 2 ) System . out . print ( \"3\" ) ; else if ( j == 3 ) System . out . print ( \"5\" ) ; else if ( j == 4 ) System . out . print ( \"7\" ) ; break ; } } } System . out . println ( ) ; }", "python": "def nthprimedigitsnumber ( n ) :\n    len = 1 ;\n    prev_count = 0 ;\n    while ( 1 ) :\n        curr_count = ( prev_count + math . pow ( 4 , len ) ) ;\n        if ( prev_count < n and curr_count >= n ) :\n            break ;\n        len += 1 ;\n        prev_count = curr_count ;\n    for i in range ( 1 , len + 1 ) :\n        for j in range ( 1 , 5 ) :\n            if ( prev_count + pow ( 4 , len - i ) < n ) :\n                prev_count += pow ( 4 , len - i ) ;\n            else :\n                if ( j == 1 ) :\n                    print ( \"2\" , end = \" \" ) ;\n                elif ( j == 2 ) :\n                    print ( \"3\" , end = \" \" ) ;\n                elif ( j == 3 ) :\n                    print ( \"5\" , end = \" \" ) ;\n                elif ( j == 4 ) :\n                    print ( \"7\" , end = \" \" ) ;\n                break ;\n    print ( ) ;\n"}
{"java": "static int decideWinner ( int [ ] a , int n ) { int count0 = 0 ; int count1 = 0 ; int count2 = 0 ; int count3 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 4 == 0 ) count0 ++ ; else if ( a [ i ] % 4 == 1 ) count1 ++ ; else if ( a [ i ] % 4 == 2 ) count2 ++ ; else if ( a [ i ] % 4 == 3 ) count3 ++ ; } if ( count0 % 2 == 0 && count1 % 2 == 0 && count2 % 2 == 0 && count3 == 0 ) return 1 ; else return 2 ; }", "python": "def decideWinner ( a , n ) :\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if ( a [ i ] % 4 == 0 ) :\n            count0 += 1\n        elif ( a [ i ] % 4 == 1 ) :\n            count1 += 1\n        elif ( a [ i ] % 4 == 2 ) :\n            count2 += 1\n        elif ( a [ i ] % 4 == 3 ) :\n            count3 += 1\n    if ( count0 % 2 == 0 and count1 % 2 == 0 and count2 % 2 == 0 and count3 == 0 ) :\n        return 1\n    else :\n        return 2\n"}
{"java": "public static int lenOfLongIncSubArr ( int arr [ ] , int n ) { int max = 1 , len = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) len ++ ; else { if ( max < len ) max = len ; len = 1 ; } } if ( max < len ) max = len ; return max ; }", "python": "def lenOfLongIncSubArr ( arr , n ) :\n    m = 1\n    l = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            l = l + 1\n        else :\n            if ( m < l ) :\n                m = l\n            l = 1\n    if ( m < l ) :\n        m = l\n    return m\n"}
{"java": "static int count ( int n ) { return ( int ) ( - 1 + Math . sqrt ( 1 + 8 * n ) ) / 2 ; }", "python": "def count ( n ) :\n    return ( - 1 + sqrt ( 1 + 8 * n ) ) // 2 ;\n"}
{"java": "static String solve ( int n , char x , char y ) { int length = ( int ) Math . ceil ( Math . log ( n + 2 ) / Math . log ( 2 ) ) - 1 ; int rank = n - ( 1 << length ) + 1 ; String left = \" \" , right = \" \" ; for ( int i = length - 1 ; i >= 0 ; i -- ) { int mask = ( 1 << i ) ; int bit = mask & rank ; if ( bit > 0 ) { left += y ; right += y ; } else { left += x ; right += x ; } } StringBuilder sb = new StringBuilder ( right ) ; sb . reverse ( ) ; right = sb . toString ( ) ; String res = left + right ; return res ; }", "python": "def solve ( n , x , y ) :\n    length = ceil ( log2 ( n + 2 ) ) - 1 ;\n    rank = n - ( 1 << length ) + 1 ;\n    left = \" \" ; right = \" \" ;\n    for i in range ( length - 1 , - 1 , - 1 ) :\n        mask = ( 1 << i ) ;\n        bit = ( mask & rank ) ;\n        if ( bit ) :\n            left += y ;\n            right += y ;\n        else :\n            left += x ;\n            right += x ;\n    right = right [ : : - 1 ] ;\n    res = left + right ;\n    return res ;\n"}
{"java": "static int subsetSum ( int arr [ ] , int n , int i , int sum , int count ) { if ( i == n ) { if ( sum == 0 ) { count ++ ; } return count ; } count = subsetSum ( arr , n , i + 1 , sum - arr [ i ] , count ) ; count = subsetSum ( arr , n , i + 1 , sum , count ) ; return count ; }", "python": "def subsetSum ( arr , n , i , sum , count ) :\n    if ( i == n ) :\n        if ( sum == 0 ) :\n            count += 1\n        return count\n    count = subsetSum ( arr , n , i + 1 , sum - arr [ i ] , count )\n    count = subsetSum ( arr , n , i + 1 , sum , count )\n    return count\n"}
{"java": "static void findValues ( int a , int b ) { if ( ( a - b ) % 2 == 1 ) { System . out . println ( \" - 1\" ) ; return ; } System . out . println ( ( ( a - b ) / 2 ) + \" \u2581 \" + ( ( a + b ) / 2 ) ) ; }", "python": "def findValues ( a , b ) :\n    if ( ( a - b ) % 2 == 1 ) :\n        print ( \" - 1\" ) ;\n        return ;\n    print ( ( a - b ) // 2 , ( a + b ) // 2 ) ;\n"}
{"java": "static int center_hexadecagonal_num ( int n ) { return 8 * n * n - 8 * n + 1 ; }", "python": "def center_hexadecagonal_num ( n ) :\n    return 8 * n * n - 8 * n + 1\n"}
{"java": "static void printCombinations ( int a [ ] , int n , int m ) { for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { int sum = 0 ; int num = 1 << ( n - 1 ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & num ) > 0 ) sum += a [ j ] ; else sum += ( - 1 * a [ j ] ) ; num = num >> 1 ; } if ( sum % m == 0 ) { num = 1 << ( n - 1 ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & num ) > 0 ) System . out . print ( \" + \" + a [ j ] + \" \u2581 \" ) ; else System . out . print ( \" - \" + a [ j ] + \" \u2581 \" ) ; num = num >> 1 ; } System . out . println ( ) ; } } }", "python": "def printCombinations ( a , n , m ) :\n    for i in range ( 0 , ( 1 << n ) ) :\n        sum = 0\n        num = 1 << ( n - 1 )\n        for j in range ( 0 , n ) :\n            if ( ( i & num ) > 0 ) :\n                sum += a [ j ]\n            else :\n                sum += ( - 1 * a [ j ] )\n            num = num >> 1\n        if ( sum % m == 0 ) :\n            num = 1 << ( n - 1 )\n            for j in range ( 0 , n ) :\n                if ( ( i & num ) > 0 ) :\n                    print ( \" + \" , a [ j ] , end = \" \u2581 \" , sep = \" \" )\n                else :\n                    print ( \" - \" , a [ j ] , end = \" \u2581 \" , sep = \" \" )\n                num = num >> 1\n            print ( \" \" )\n"}
{"java": "static int seriesFunc ( int n ) { int sumSquare = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; int sumNatural = ( n * ( n + 1 ) / 2 ) ; return ( sumSquare + sumNatural + 1 ) ; }", "python": "def seriesFunc ( n ) :\n    sumSquare = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6\n    sumNatural = ( n * ( n + 1 ) / 2 )\n    return ( sumSquare + sumNatural + 1 )\n"}
{"java": "private static BigInteger calc ( int n , BigInteger [ ] array ) { BigInteger res = BigInteger . ZERO ; java . util . Arrays . sort ( array , java . util . Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { res = res . add ( array [ 1 + i * 2 ] ) ; } return res ; }", "python": "def gcd ( a , b ) : return fractions . gcd ( a , b )\ndef lcm ( a , b ) : return ( a * b ) // fractions . gcd ( a , b )\ndef iin ( ) : return int ( input ( ) )\ndef isn ( ) : return input ( ) . split ( )\ndef imn ( ) : return map ( int , input ( ) . split ( ) )\ndef iln ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef iln_s ( ) : return sorted ( iln ( ) )\ndef iln_r ( ) : return sorted ( iln ( ) , reverse = True )\ndef join ( l , s = ' ' ) : return s . join ( l )\ndef perm ( l , n ) : return itertools . permutations ( l , n )\ndef perm_count ( n , r ) : return math . factorial ( n ) // math . factorial ( n - r )\ndef comb ( l , n ) : return itertools . combinations ( l , n )\ndef comb_count ( n , r ) : return math . factorial ( n ) // ( math . factorial ( n - r ) * math . factorial ( r ) )\nN = iin ( )\na = iln_r ( )\nans = 0\nfor i in range ( 0 , N ) :\n    ans += a [ ( i * 2 ) + 1 ]\n"}
{"java": "static int maxSumLCM ( int n ) { int max_sum = 0 ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { max_sum += i ; if ( n / i != i ) max_sum += ( n / i ) ; } } return max_sum ; }", "python": "def maxSumLCM ( n ) :\n    max_sum = 0\n    i = 1\n    while ( i * i <= n ) :\n        if ( n % i == 0 ) :\n            max_sum = max_sum + i\n            if ( n // i != i ) :\n                max_sum = max_sum + ( n // i )\n        i = i + 1\n    return max_sum\n"}
{"java": "static boolean findGreater ( int x , int y ) { if ( x > y ) { return false ; } else { return true ; } }", "python": "def findGreater ( x , y ) :\n    if ( x > y ) :\n        return False ;\n    else :\n        return True ;\n"}
{"java": "static int solve ( int n , int m , int obstacles , double range [ ] ) { double val = Math . min ( n , m ) ; Arrays . sort ( range ) ; int c = 1 ; for ( int i = obstacles - 1 ; i >= 0 ; i -- ) { range [ i ] = 2 * range [ i ] ; val -= range [ i ] ; if ( val <= 0 ) { return c ; } else { c ++ ; } } if ( val > 0 ) { return - 1 ; } return 0 ; }", "python": "def solve ( n , m , obstacles , rangee ) :\n    val = min ( n , m )\n    rangee = sorted ( rangee )\n    c = 1\n    for i in range ( obstacles - 1 , - 1 , - 1 ) :\n        rangee [ i ] = 2 * rangee [ i ]\n        val -= rangee [ i ]\n        if ( val <= 0 ) :\n            return c\n        else :\n            c += 1\n    if ( val > 0 ) :\n        return - 1\n"}
{"java": "static void sieve ( ) { position [ 0 ] = - 1 ; position [ 1 ] = - 1 ; int pos = 0 ; for ( int i = 2 ; i <= limit ; i ++ ) { if ( position [ i ] == 0 ) { position [ i ] = ++ pos ; for ( int j = i * 2 ; j <= limit ; j += i ) position [ j ] = - 1 ; } } }", "python": "def sieve ( ) :\n    position [ 0 ] = - 1\n    position [ 1 ] = - 1\n    pos = 0\n    for i in range ( 2 , limit + 1 ) :\n        if ( position [ i ] == 0 ) :\n            pos += 1\n            position [ i ] = pos\n            for j in range ( i * 2 , limit + 1 , i ) :\n                position [ j ] = - 1\n"}
{"java": "public static int CountSpecialPalindrome ( String str ) { int n = str . length ( ) ; int result = 0 ; int [ ] sameChar = new int [ n ] ; for ( int v = 0 ; v < n ; v ++ ) sameChar [ v ] = 0 ; int i = 0 ; while ( i < n ) { int sameCharCount = 1 ; int j = i + 1 ; while ( j < n && str . charAt ( i ) == str . charAt ( j ) ) { sameCharCount ++ ; j ++ ; } result += ( sameCharCount * ( sameCharCount + 1 ) / 2 ) ; sameChar [ i ] = sameCharCount ; i = j ; } for ( int j = 1 ; j < n ; j ++ ) { if ( str . charAt ( j ) == str . charAt ( j - 1 ) ) sameChar [ j ] = sameChar [ j - 1 ] ; if ( j > 0 && j < ( n - 1 ) && ( str . charAt ( j - 1 ) == str . charAt ( j + 1 ) && str . charAt ( j ) != str . charAt ( j - 1 ) ) ) result += Math . min ( sameChar [ j - 1 ] , sameChar [ j + 1 ] ) ; } return result - n ; }", "python": "def CountSpecialPalindrome ( str ) :\n    n = len ( str ) ;\n    result = 0 ;\n    sameChar = [ 0 ] * n ;\n    i = 0 ;\n    while ( i < n ) :\n        sameCharCount = 1 ;\n        j = i + 1 ;\n        while ( j < n ) :\n            if ( str [ i ] != str [ j ] ) :\n                break ;\n            sameCharCount += 1 ;\n            j += 1 ;\n        result += int ( sameCharCount * ( sameCharCount + 1 ) / 2 ) ;\n        sameChar [ i ] = sameCharCount ;\n        i = j ;\n    for j in range ( 1 , n ) :\n        if ( str [ j ] == str [ j - 1 ] ) :\n            sameChar [ j ] = sameChar [ j - 1 ] ;\n        if ( j > 0 and j < ( n - 1 ) and ( str [ j - 1 ] == str [ j + 1 ] and str [ j ] != str [ j - 1 ] ) ) :\n            result += ( sameChar [ j - 1 ] if ( sameChar [ j - 1 ] < sameChar [ j + 1 ] ) else sameChar [ j + 1 ] ) ;\n    return result - n ;\n"}
{"java": "static boolean check ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == 1 ) return true ; return false ; }", "python": "def check ( a , n ) :\n    for i in range ( n ) :\n        if ( a [ i ] ) :\n            return True\n    return False\n"}
{"java": "static void findNumbers ( int n , int b ) { double even = 0 , odd = 0 ; if ( b % 2 == 0 ) { even = Math . pow ( b , n ) - 2 ; odd = Math . pow ( b , n ) - 1 ; } else { even = Math . pow ( b , n ) - 1 ; odd = Math . pow ( b , n ) - 2 ; } System . out . println ( \" Even \u2581 Number \u2581 = \u2581 \" + ( int ) even ) ; System . out . print ( \" Odd \u2581 Number \u2581 = \u2581 \" + ( int ) odd ) ; }", "python": "def findNumbers ( n , b ) :\n    even = 0 ;\n    odd = 0 ;\n    if ( b % 2 == 0 ) :\n        even = pow ( b , n ) - 2 ;\n        odd = pow ( b , n ) - 1 ;\n    else :\n        even = pow ( b , n ) - 1 ;\n        odd = pow ( b , n ) - 2 ;\n    print ( \" Even \u2581 Number \u2581 = \u2581 \" , int ( even ) ) ;\n    print ( \" Odd \u2581 Number \u2581 = \u2581 \" , int ( odd ) ) ;\n"}
{"java": "static int center_octadecagon_num ( int n ) { return 9 * n * n - 9 * n + 1 ; }", "python": "def center_octadecagon_num ( n ) :\n    return ( 9 * n * n - 9 * n + 1 )\n"}
{"java": "static int percent ( int a , int b ) { float result = 0 ; result = ( ( b - a ) * 100 ) / a ; return ( int ) result ; }", "python": "def percent ( a , b ) :\n    result = int ( ( ( b - a ) * 100 ) / a )\n    return result\n"}
{"java": "static float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; }", "python": "def AvgofSquareN ( n ) :\n    return ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;\n"}
{"java": "static int maxLength ( String s , int n ) { int ans = Integer . MIN_VALUE ; Vector < Integer > A = new Vector < Integer > ( ) ; Vector < Integer > L = new Vector < Integer > ( ) ; Vector < Integer > R = new Vector < Integer > ( ) ; int [ ] freq = new int [ n + 5 ] ; for ( int i = 0 ; i < 26 ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) - ' a ' == i ) count ++ ; freq [ j ] = count ; } for ( int j = 1 ; j < n ; j ++ ) { L . add ( ( 2 * freq [ j - 1 ] ) - j ) ; R . add ( ( 2 * freq [ j ] ) - j ) ; } int max_len = Integer . MIN_VALUE ; int min_val = Integer . MAX_VALUE ; for ( int j = 0 ; j < L . size ( ) ; j ++ ) { min_val = Math . min ( min_val , L . get ( j ) ) ; A . add ( min_val ) ; int l = 0 , r = j ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; if ( A . get ( mid ) <= R . get ( j ) ) { max_len = Math . max ( max_len , j - mid + 1 ) ; r = mid - 1 ; } else { l = mid + 1 ; } } } ans = Math . max ( ans , max_len ) ; A . clear ( ) ; R . clear ( ) ; L . clear ( ) ; } return ans ; }", "python": "def maxLength ( s , n ) :\n    ans = - ( sys . maxsize + 1 ) ;\n    A , L , R = [ ] , [ ] , [ ] ;\n    freq = [ 0 ] * ( n + 5 ) ;\n    for i in range ( 26 ) :\n        count = 0 ;\n        for j in range ( n ) :\n            if ( ord ( s [ j ] ) - ord ( ' a ' ) == i ) :\n                count += 1 ;\n            freq [ j ] = count ;\n        for j in range ( n ) :\n            L . append ( ( 2 * freq [ j - 1 ] ) - j ) ;\n            R . append ( ( 2 * freq [ j ] ) - j ) ;\n        max_len = - ( sys . maxsize + 1 ) ;\n        min_val = sys . maxsize ;\n        for j in range ( n ) :\n            min_val = min ( min_val , L [ j ] ) ;\n            A . append ( min_val ) ;\n            l = 0 ; r = j ;\n            while ( l <= r ) :\n                mid = ( l + r ) >> 1 ;\n                if ( A [ mid ] <= R [ j ] ) :\n                    max_len = max ( max_len , j - mid + 1 ) ;\n                    r = mid - 1 ;\n                else :\n                    l = mid + 1 ;\n        ans = max ( ans , max_len ) ;\n        A . clear ( ) ;\n        R . clear ( ) ;\n        L . clear ( ) ;\n    return ans ;\n"}
{"java": "static int ksmallest ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= k ) k ++ ; else break ; } return k ; }", "python": "def ksmallest ( arr , n , k ) :\n    for i in range ( n ) :\n        if ( arr [ i ] <= k ) :\n            k = k + 1 ;\n        else :\n            break ;\n    return k ;\n"}
{"java": "static int PrimeCharacters ( String s ) { boolean prime [ ] = new boolean [ max_val + 1 ] ; for ( int i = 0 ; i <= max_val ; i ++ ) prime [ i ] = true ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) { if ( prime [ ( int ) ( s . charAt ( i ) ) ] ) count ++ ; } return count ; }", "python": "def PrimeCharacters ( s ) :\n    prime = [ True ] * ( max_val + 1 )\n    prime [ 0 ] = False\n    prime [ 1 ] = False\n    for p in range ( 2 , int ( sqrt ( max_val ) ) + 1 ) :\n        if ( prime [ p ] == True ) :\n            for i in range ( 2 * p , max_val + 1 , p ) :\n                prime [ i ] = False\n    count = 0\n    for i in range ( len ( s ) ) :\n        if ( prime [ ord ( s [ i ] ) ] ) :\n            count += 1\n    return count\n"}
{"java": "static int getChicks ( int n ) { int chicks = ( int ) Math . pow ( 3 , n - 1 ) ; return chicks ; }", "python": "def getChicks ( n ) :\n    chicks = pow ( 3 , n - 1 )\n    return chicks\n"}
{"java": "static void findNormal ( int A , int x , int y ) { int dif = A - x * 2 ; if ( y == ( 2 * x - x * x ) ) { if ( dif < 0 ) System . out . print ( ( 0 - dif ) + \" y \u2581 = \u2581 \" + \" x \" + ( ( 0 - x ) + ( y * dif ) ) ) ; else if ( dif > 0 ) System . out . print ( dif + \" y \u2581 = \u2581 \" + \" - x + \" + ( x + dif * y ) ) ; else System . out . print ( \" x \u2581 = \u2581 \" + x ) ; } else System . out . println ( \" Not \u2581 possible \" ) ; }", "python": "def findNormal ( A , x , y ) :\n    dif = A - x * 2\n    if ( y == ( 2 * x - x * x ) ) :\n        if ( dif < 0 ) :\n            print ( 0 - dif , \" y \u2581 = \" , \" x \" , ( 0 - x ) + ( y * dif ) )\n        elif ( dif > 0 ) :\n            print ( dif , \" y \u2581 = \" , \" - \u2581 x \u2581 + \" , x + dif * y )\n        else :\n            print ( \" x \u2581 = \" , x )\n    else :\n        print ( \" Not \u2581 possible \" )\n"}
{"java": "static double rec ( int pos , int st ) { if ( pos == N ) return 1 ; if ( memo [ pos ] [ st ] != - 1 ) return memo [ pos ] [ st ] ; double ret = 0 ; for ( int i = 0 ; i < M ; ++ i ) { if ( ( st & ( 1 << i ) ) != 0 ) continue ; double prob = 0 ; int nst = st + ( 1 << i ) ; double np = 1 ; for ( int j = pos ; j < N ; ++ j ) { prob += np * ( 1 - P [ i ] [ j ] ) * rec ( j , nst ) ; np *= P [ i ] [ j ] ; } prob += np * rec ( N , nst ) ; ret = Math . max ( ret , prob ) ; } memo [ pos ] [ st ] = ret ; return ret ; }", "python": "def solve ( ) :\n    readline = sys . stdin . buffer . readline\n    write = sys . stdout . buffer . write\n    M , N = map ( int , readline ( ) . split ( ) )\n    P = [ list ( map ( float , readline ( ) . split ( ) ) ) + [ 0 ] for i in range ( M ) ]\n    M2 = ( 1 << M )\n    dp = [ [ 0 ] * ( N + 1 ) for i in range ( M2 ) ]\n    dp [ 0 ] [ N ] = 1\n    for state in range ( 1 , M2 ) :\n        dps = dp [ state ]\n        for k in range ( M ) :\n            if state & ( 1 << k ) == 0 :\n                continue\n            pk = P [ k ]\n            dpk = dp [ state ^ ( 1 << k ) ]\n            s = 0\n            for i in range ( N , - 1 , - 1 ) :\n                s += dpk [ i ] * ( 1 - pk [ i ] )\n                dps [ i ] = max ( dps [ i ] , s )\n                s *= pk [ i - 1 ]\n    write ( b \" % . 16f \\n \" % dp [ M2 - 1 ] [ 0 ] )\n"}
{"java": "static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . cbrt ( n ) ; n -= ( largest * largest * largest ) ; steps ++ ; } return steps ; }", "python": "def countSteps ( n ) :\n    steps = 0\n    while ( n ) :\n        largest = floor ( n ** ( 1 / 3 ) )\n        n -= ( largest * largest * largest )\n        steps += 1\n    return steps\n"}
{"java": "static int gcd ( int x , int y ) { if ( y == 0 ) { return x ; } else { return gcd ( y , x % y ) ; } }", "python": "def sdk ( a , b ) :\n    if a < b :\n        a , b = b , a\n    if a % b == 0 :\n        return b\n    else :\n        return sdk ( b , a % b )\n"}
{"java": "static int findTerm ( int n ) { if ( n == 1 ) return n ; else { int term = 7 ; for ( int i = 2 ; i <= n ; i ++ ) term = term * 2 + ( i - 1 ) ; return term ; } }", "python": "def findTerm ( n ) :\n    if n == 1 :\n        return n\n    else :\n        term = 7\n        for i in range ( 2 , n + 1 ) :\n            term = term * 2 + ( i - 1 ) ;\n    return term ;\n"}
{"java": "private static boolean search ( int indexS , int indexT , boolean right ) { if ( s . charAt ( indexS ) != t . charAt ( indexT ) ) { return false ; } if ( indexT + 1 == t . length ( ) ) { return true ; } if ( right && indexS + 1 < s . length ( ) ) { if ( search ( indexS + 1 , indexT + 1 , true ) ) { return true ; } } if ( indexS > 0 ) { if ( search ( indexS - 1 , indexT + 1 , false ) ) { return true ; } } return false ; }", "python": "def fun ( s , t ) :\n    first = t [ 0 ]\n    l = [ ]\n    for j in range ( len ( s ) ) :\n        if first == s [ j ] :\n            l . append ( j )\n    if len ( l ) == 0 :\n        return \" NO \"\n    for j in range ( len ( l ) ) :\n        for i in range ( len ( t ) ) :\n            first_index = l [ j ]\n            ans = \" \"\n            pointer = 0\n            var = i\n            while var > pointer and first_index < len ( s ) and pointer < len ( t ) :\n                if t [ pointer ] == s [ first_index ] :\n                    ans += t [ pointer ]\n                    pointer += 1\n                    first_index += 1\n                else :\n                    first_index -= 2\n                    break\n            if first_index == len ( s ) :\n                first_index -= 2\n            while pointer < len ( t ) and first_index > - 1 :\n                if t [ pointer ] == s [ first_index ] :\n                    ans += t [ pointer ]\n                    first_index -= 1\n                    pointer += 1\n                else :\n                    break\n            if ans == t :\n                return \" YES \"\n    return \" NO \"\n"}
{"java": "static int countSubArrayProductLessThanK ( ArrayList < Integer > a , long k ) { int n = a . size ( ) ; long p = 1 ; int res = 0 ; for ( int start = 0 , end = 0 ; end < n ; end ++ ) { p *= a . get ( end ) ; while ( start < end && p >= k ) p /= a . get ( start ++ ) ; if ( p < k ) { int len = end - start + 1 ; res += len ; } } return res ; }", "python": "def countSubArrayProductLessThanK ( a , k ) :\n    n = len ( a )\n    p = 1\n    res = 0\n    start = 0\n    end = 0\n    while ( end < n ) :\n        p *= a [ end ]\n        while ( start < end and p >= k ) :\n            p = int ( p // a [ start ] )\n            start += 1\n        if ( p < k ) :\n            l = end - start + 1\n            res += l\n        end += 1\n    return res\n"}
{"java": "static void printPFsInPairs ( int n ) { for ( int i = 1 ; i * i <= n ; i ++ ) if ( n % i == 0 ) System . out . println ( i + \" * \" + n / i ) ; }", "python": "def printPFsInPairs ( n ) :\n    for i in range ( 1 , int ( pow ( n , 1 / 2 ) ) + 1 ) :\n        if n % i == 0 :\n            print ( str ( i ) + \" * \" + str ( int ( n / i ) ) )\n"}
{"java": "static int maxPeople ( int p ) { int tmp = 0 , count = 0 ; for ( int i = 1 ; i * i <= p ; i ++ ) { tmp = tmp + ( i * i ) ; if ( tmp <= p ) count ++ ; else break ; } return count ; }", "python": "def maxPeople ( p ) :\n    tmp = 0 ; count = 0 ;\n    for i in range ( 1 , int ( sqrt ( p ) ) + 1 ) :\n        tmp = tmp + ( i * i ) ;\n        if ( tmp <= p ) :\n            count += 1 ;\n        else :\n            break ;\n    return count ;\n"}
{"java": "static void towerOfHanoi ( int n , char from_rod , char to_rod , char aux_rod1 , char aux_rod2 ) { if ( n == 0 ) return ; if ( n == 1 ) { System . out . println ( \" Move \u2581 disk \u2581 \" + n + \" \u2581 from \u2581 rod \u2581 \" + from_rod + \" \u2581 to \u2581 rod \u2581 \" + to_rod ) ; return ; } towerOfHanoi ( n - 2 , from_rod , aux_rod1 , aux_rod2 , to_rod ) ; System . out . println ( \" Move \u2581 disk \u2581 \" + ( n - 1 ) + \" \u2581 from \u2581 rod \u2581 \" + from_rod + \" \u2581 to \u2581 rod \u2581 \" + aux_rod2 ) ; System . out . println ( \" Move \u2581 disk \u2581 \" + n + \" \u2581 from \u2581 rod \u2581 \" + from_rod + \" \u2581 to \u2581 rod \u2581 \" + to_rod ) ; System . out . println ( \" Move \u2581 disk \u2581 \" + ( n - 1 ) + \" \u2581 from \u2581 rod \u2581 \" + aux_rod2 + \" \u2581 to \u2581 rod \u2581 \" + to_rod ) ; towerOfHanoi ( n - 2 , aux_rod1 , to_rod , from_rod , aux_rod2 ) ; }", "python": "def towerOfHanoi ( n , from_rod , to_rod , aux_rod1 , aux_rod2 ) :\n    if ( n == 0 ) :\n        return\n    if ( n == 1 ) :\n        print ( \" Move \u2581 disk \" , n , \" from \u2581 rod \" , from_rod , \" c \u2581 to \u2581 rod \" , to_rod )\n        return\n    towerOfHanoi ( n - 2 , from_rod , aux_rod1 , aux_rod2 , to_rod )\n    print ( \" Move \u2581 disk \" , n - 1 , \" from \u2581 rod \" , from_rod , \" c \u2581 to \u2581 rod \" , aux_rod2 )\n    print ( \" Move \u2581 disk \" , n , \" from \u2581 rod \" , from_rod , \" c \u2581 to \u2581 rod \" , to_rod )\n    print ( \" Move \u2581 disk \" , n - 1 , \" from \u2581 rod \" , aux_rod2 , \" c \u2581 to \u2581 rod \" , to_rod )\n    towerOfHanoi ( n - 2 , aux_rod1 , to_rod , from_rod , aux_rod2 )\n"}
{"java": "static int getOccurence ( int n , int d ) { int result = 0 ; int itr = d ; while ( itr <= n ) { if ( itr % 10 == d ) result ++ ; if ( itr != 0 && itr / 10 == d ) { result ++ ; itr ++ ; } else if ( itr / 10 == d - 1 ) itr = itr + ( 10 - d ) ; else itr = itr + 10 ; } return result ; }", "python": "def getOccurence ( n , d ) :\n    result = 0 ;\n    itr = d ;\n    while ( itr <= n ) :\n        if ( itr % 10 == d ) :\n            result += 1 ;\n        if ( itr != 0 and math . floor ( itr / 10 ) == d ) :\n            result += 1 ;\n            itr += 1 ;\n        elif ( math . floor ( itr / 10 ) == d - 1 ) :\n            itr = itr + ( 10 - d ) ;\n        else :\n            itr = itr + 10 ;\n    return result ;\n"}
{"java": "static int findMissingPositive ( int arr [ ] , int n ) { int m = 1 ; HashSet < Integer > x = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m < arr [ i ] ) { x . add ( arr [ i ] ) ; } else if ( m == arr [ i ] ) { m = m + 1 ; while ( x . contains ( m ) ) { x . remove ( m ) ; m = m + 1 ; } } } return m ; }", "python": "def findMissingPositive ( arr , n ) :\n    m = 1\n    x = [ ]\n    for i in range ( n ) :\n        if ( m < arr [ i ] ) :\n            x . append ( arr [ i ] )\n        elif ( m == arr [ i ] ) :\n            m = m + 1\n            while ( x . count ( m ) ) :\n                x . remove ( m )\n                m = m + 1\n    return m\n"}
{"java": "static int ways ( int n ) { int first = 2 ; int second = 3 ; int res = 0 ; for ( int i = 3 ; i <= n ; i ++ ) { res = first + second ; first = second ; second = res ; } return res ; }", "python": "def ways ( n ) :\n    first = 2 ;\n    second = 3 ;\n    res = 0 ;\n    for i in range ( 3 , n + 1 ) :\n        res = first + second ;\n        first = second ;\n        second = res ;\n    return res ;\n"}
{"java": "static int calculateAreaSum ( int l , int b ) { int size = 1 ; int maxSize = Math . min ( l , b ) ; int totalArea = 0 ; for ( int i = 1 ; i <= maxSize ; i ++ ) { int totalSquares = ( l - size + 1 ) * ( b - size + 1 ) ; int area = totalSquares * size * size ; totalArea += area ; size ++ ; } return totalArea ; }", "python": "def calculateAreaSum ( l , b ) :\n    size = 1\n    maxSize = min ( l , b )\n    totalArea = 0\n    for i in range ( 1 , maxSize + 1 ) :\n        totalSquares = ( ( l - size + 1 ) * ( b - size + 1 ) )\n        area = ( totalSquares * size * size )\n        totalArea += area\n        size += 1\n    return totalArea\n"}
{"java": "static float InscribedCircleArea ( float n , float a ) { if ( a < 0 && n < 0 ) return - 1 ; float r = a / ( float ) ( 2 * Math . tan ( ( 180 / n ) * 3.14159 / 180 ) ) ; float Area = ( float ) ( 3.14 ) * ( r ) * ( r ) ; return Area ; }", "python": "def InscribedCircleArea ( n , a ) :\n    if ( a < 0 and n < 0 ) :\n        return - 1\n    r = a / ( 2 * tan ( ( 180 / n ) * 3.14159 / 180 ) ) ;\n    Area = 3.14 * r * r\n    return Area\n"}
{"java": "static int ack ( int m , int n ) { if ( m == 0 ) { return n + 1 ; } else if ( ( m > 0 ) && ( n == 0 ) ) { return ack ( m - 1 , 1 ) ; } else if ( ( m > 0 ) && ( n > 0 ) ) { return ack ( m - 1 , ack ( m , n - 1 ) ) ; } else return n + 1 ; }", "python": "def A ( m , n , s = \" % \u2581 s \" ) :\n    print ( s % ( \" A ( % \u2581 d , \u2581 % \u2581 d ) \" % ( m , n ) ) )\n    if m == 0 :\n        return n + 1\n    if n == 0 :\n        return A ( m - 1 , 1 , s )\n    n2 = A ( m , n - 1 , s % ( \" A ( % \u2581 d , \u2581 % % \u2581 s ) \" % ( m - 1 ) ) )\n    return A ( m - 1 , n2 , s )\n"}
{"java": "static int count ( int N ) { int a = 0 ; a = ( N * ( N + 1 ) ) / 2 ; return a ; }", "python": "def count ( N ) :\n    a = 0 ;\n    a = ( N * ( N + 1 ) ) / 2 ;\n    return int ( a ) ;\n"}
{"java": "static int countIterations ( int arr [ ] , int n ) { boolean oneFound = false ; int res = 0 ; for ( int i = 0 ; i < n ; ) { if ( arr [ i ] == 1 ) oneFound = true ; while ( i < n && arr [ i ] == 1 ) i ++ ; int count_zero = 0 ; while ( i < n && arr [ i ] == 0 ) { count_zero ++ ; i ++ ; } if ( oneFound == false && i == n ) return - 1 ; int curr_count ; if ( i < n && oneFound == true ) { if ( ( count_zero & 1 ) == 0 ) curr_count = count_zero / 2 ; else curr_count = ( count_zero + 1 ) / 2 ; count_zero = 0 ; } else { curr_count = count_zero ; count_zero = 0 ; } res = Math . max ( res , curr_count ) ; } return res ; }", "python": "def countIterations ( arr , n ) :\n    oneFound = False ;\n    res = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        if ( arr [ i ] == 1 ) :\n            oneFound = True ;\n        while ( i < n and arr [ i ] == 1 ) :\n            i += 1 ;\n        count_zero = 0 ;\n        while ( i < n and arr [ i ] == 0 ) :\n            count_zero += 1 ;\n            i += 1 ;\n        if ( oneFound == False and i == n ) :\n            return - 1 ;\n        curr_count = 0 ;\n        if ( i < n and oneFound == True ) :\n            if ( ( count_zero & 1 ) == 0 ) :\n                curr_count = count_zero // 2 ;\n            else :\n                curr_count = ( count_zero + 1 ) // 2 ;\n            count_zero = 0 ;\n        else :\n            curr_count = count_zero ;\n            count_zero = 0 ;\n        res = max ( res , curr_count ) ;\n    return res ;\n"}
{"java": "static int longestSubArray ( int arr [ ] , int n ) { boolean isZeroPresent = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { isZeroPresent = true ; break ; } } if ( isZeroPresent ) return n ; return 0 ; }", "python": "def longestSubArray ( arr , n ) :\n    isZeroPresent = False\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            isZeroPresent = True\n            break\n    if ( isZeroPresent ) :\n        return n\n    return 0\n"}
{"java": "static void manipulateString ( String str ) { char [ ] str1 = str . toCharArray ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { int asc = str1 [ i ] ; int rem = asc - ( 26 - ( str1 [ i ] - 97 ) ) ; int m = rem % 26 ; str1 [ i ] = ( char ) ( m + ' a ' ) ; } String str2 = String . valueOf ( str1 ) ; System . out . println ( str2 ) ; }", "python": "def manipulateString ( str ) :\n    for i in range ( len ( str ) ) :\n        asc = ord ( str [ i ] )\n        rem = asc - ( 26 - ( ord ( str [ i ] ) - ord ( ' a ' ) ) )\n        m = rem % 26\n        str [ i ] = chr ( m + ord ( ' a ' ) )\n    print ( ' ' . join ( str ) )\n"}
{"java": "static void solve ( ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int b1 = 0 ; int b2 = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( k <= i - 1 ) { b2 = i ; b1 = k ; break ; } k -= i - 1 ; } StringBuilder a = new StringBuilder ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i == b1 || i == b2 ) a . append ( ' b ' ) ; else a . append ( ' a ' ) ; } System . out . println ( a . reverse ( ) ) ; }", "python": "def go ( n , k ) :\n    i = 1\n    i2 = 0\n    while k >= i :\n        i2 += 1\n        i += i2\n    i -= i2\n    k -= i\n    print ( \" a \" * ( n - i2 - 1 ) + \" b \" + \" a \" * ( n - ( n - i2 - 1 ) - k - 2 ) + \" b \" + \" a \" * ( k ) )\n"}
{"java": "static double solve ( int s ) { double area = ( 1.732 * Math . pow ( s , 2 ) ) / 8 ; return area ; }", "python": "def solve ( s ) :\n    area = ( 1.732 * s ** 2 ) / 8\n    return area\n"}
{"java": "static void nDigitPerfectSquares ( int n ) { int smallest = ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n - 1 ) ) ) , 2 ) ; System . out . print ( smallest + \" \u2581 \" ) ; int largest = ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n ) ) ) - 1 , 2 ) ; System . out . print ( largest ) ; }", "python": "def nDigitPerfectSquares ( n ) :\n    print ( pow ( math . ceil ( math . sqrt ( pow ( 10 , n - 1 ) ) ) , 2 ) , end = \" \u2581 \" ) ;\n    print ( pow ( math . ceil ( math . sqrt ( pow ( 10 , n ) ) ) - 1 , 2 ) ) ;\n"}
{"java": "static int maxOfSegmentMins ( int [ ] a , int n , int k ) { if ( k == 1 ) { Arrays . sort ( a ) ; return a [ 0 ] ; } if ( k == 2 ) return Math . max ( a [ 0 ] , a [ n - 1 ] ) ; return a [ n - 1 ] ; }", "python": "def maxOfSegmentMins ( a , n , k ) :\n    if k == 1 :\n        return min ( a )\n    if k == 2 :\n        return max ( a [ 0 ] , a [ n - 1 ] )\n    return max ( a )\n"}
{"java": "static String printBinary ( double num ) { if ( num >= 1 || num <= 0 ) return \" ERROR \" ; StringBuilder binary = new StringBuilder ( ) ; double frac = 0.5 ; binary . append ( \" . \" ) ; while ( num > 0 ) { if ( binary . length ( ) >= 32 ) return \" ERROR \" ; if ( num >= frac ) { binary . append ( 1 ) ; num -= frac ; } else binary . append ( 0 ) ; frac /= 2 ; } return binary . toString ( ) ; }", "python": "def toBinary ( n ) :\n    if ( n >= 1 or n <= 0 ) :\n        return \" ERROR \" ;\n    frac = 0.5 ;\n    answer = \" . \" ;\n    while ( n > 0 ) :\n        if ( len ( answer ) >= 32 ) :\n            return \" ERROR \" ;\n        if ( n >= frac ) :\n            answer += \"1\" ;\n            n = n - frac ;\n        else :\n            answer += \"0\" ;\n        frac = ( frac / 2 ) ;\n    return answer ;\n"}
{"java": "static String printBinary ( double num ) { if ( num >= 1 || num <= 0 ) return \" ERROR \" ; StringBuilder binary = new StringBuilder ( ) ; binary . append ( \" . \" ) ; while ( num > 0 ) { if ( binary . length ( ) >= 32 ) return \" ERROR \" ; double r = num * 2 ; if ( r >= 1 ) { binary . append ( 1 ) ; num = r - 1 ; } else { binary . append ( 0 ) ; num = r ; } } return binary . toString ( ) ; }", "python": "def toBinary ( n ) :\n    if ( n >= 1 or n <= 0 ) :\n        return \" ERROR \"\n    answer = \" \"\n    frac = 0.5\n    answer = answer + \" . \"\n    while ( n > 0 ) :\n        if ( len ( answer ) >= 32 ) :\n            return \" ERROR \"\n        b = n * 2\n        if ( b >= 1 ) :\n            answer = answer + \"1\"\n            n = b - 1\n        else :\n            answer = answer + \"0\"\n            n = b\n    return answer\n"}
{"java": "static void printUnique ( int l , int r ) { for ( int i = l ; i <= r ; i ++ ) { int num = i ; boolean visited [ ] = new boolean [ 10 ] ; while ( num != 0 ) { if ( visited [ num % 10 ] ) break ; visited [ num % 10 ] = true ; num = num / 10 ; } if ( num == 0 ) System . out . print ( i + \" \u2581 \" ) ; } }", "python": "def printUnique ( l , r ) :\n    for i in range ( l , r + 1 ) :\n        num = i ;\n        visited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;\n        while ( num ) :\n            if visited [ num % 10 ] == 1 :\n                break ;\n            visited [ num % 10 ] = 1 ;\n            num = ( int ) ( num / 10 ) ;\n        if num == 0 :\n            print ( i , end = \" \u2581 \" ) ;\n"}
{"java": "static int countsubarray ( int array [ ] , int n , int k ) { int count = 0 ; int i , j , mul ; for ( i = 0 ; i < n ; i ++ ) { if ( array [ i ] <= k ) count ++ ; mul = array [ i ] ; for ( j = i + 1 ; j < n ; j ++ ) { mul = mul * array [ j ] ; if ( mul <= k ) count ++ ; else break ; } } return count ; }", "python": "def countsubarray ( array , n , k ) :\n    count = 0\n    for i in range ( 0 , n ) :\n        if array [ i ] <= k :\n            count += 1\n        mul = array [ i ]\n        for j in range ( i + 1 , n ) :\n            mul = mul * array [ j ]\n            if mul <= k :\n                count += 1\n            else :\n                break\n    return count\n"}
{"java": "public static int solve ( int n ) { int ans = ( n * n / 4 ) ; return ans ; }", "python": "def solve ( n ) :\n    ans = ( n * n // 4 )\n    return ans\n"}
{"java": "static int make_permutation ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += Math . abs ( i + 1 - arr [ i ] ) ; return ans ; }", "python": "def make_permutation ( arr , n ) :\n    arr . sort ( ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        ans += abs ( i + 1 - arr [ i ] ) ;\n    return ans ;\n"}
{"java": "static void findAandB ( double N ) { double val = N * N - 4.0 * N ; if ( val < 0 ) { System . out . println ( \" NO \" ) ; return ; } double a = ( N + Math . sqrt ( val ) ) / 2.0 ; double b = ( N - Math . sqrt ( val ) ) / 2.0 ; System . out . println ( \" a \u2581 = \u2581 \" + a ) ; System . out . println ( \" b \u2581 = \u2581 \" + b ) ; }", "python": "def findAandB ( N ) :\n    val = N * N - 4.0 * N\n    if ( val < 0 ) :\n        print ( \" NO \" )\n        return\n    a = ( N + sqrt ( val ) ) / 2.0\n    b = ( N - sqrt ( val ) ) / 2.0\n    print ( \" a \u2581 = \" , ' { 0 : . 6 } ' . format ( a ) )\n    print ( \" b \u2581 = \" , ' { 0 : . 6 } ' . format ( b ) )\n"}
{"java": "public static int getMinCost ( Integer arr [ ] , int n ) { int min_ele = Collections . min ( Arrays . asList ( arr ) ) ; return min_ele * ( n - 1 ) ; }", "python": "def getMinCost ( arr , n ) :\n    min_ele = min ( arr )\n    return min_ele * ( n - 1 )\n"}
{"java": "static int minAbsDiff ( int n ) { int left = ( int ) Math . pow ( 2 , ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ) ; int right = left * 2 ; return Math . min ( ( n - left ) , ( right - n ) ) ; }", "python": "def minAbsDiff ( n ) :\n    left = pow ( 2 , floor ( log2 ( n ) ) )\n    right = left * 2\n    return min ( ( n - left ) , ( right - n ) )\n"}
{"java": "private static int maxDistance ( int [ ] array ) { int max1 = Integer . MIN_VALUE ; int min1 = Integer . MAX_VALUE ; int max2 = Integer . MIN_VALUE ; int min2 = Integer . MAX_VALUE ; for ( int i = 0 ; i < array . length ; i ++ ) { max1 = Math . max ( max1 , array [ i ] + i ) ; min1 = Math . min ( min1 , array [ i ] + i ) ; max2 = Math . max ( max2 , array [ i ] - i ) ; min2 = Math . min ( min2 , array [ i ] - i ) ; } return Math . max ( max1 - min1 , max2 - min2 ) ; }", "python": "def maxDistance ( array ) :\n    max1 = - 2147483648\n    min1 = + 2147483647\n    max2 = - 2147483648\n    min2 = + 2147483647\n    for i in range ( len ( array ) ) :\n        max1 = max ( max1 , array [ i ] + i )\n        min1 = min ( min1 , array [ i ] + i )\n        max2 = max ( max2 , array [ i ] - i )\n        min2 = min ( min2 , array [ i ] - i )\n    return max ( max1 - min1 , max2 - min2 )\n"}
{"java": "static int check ( int n , int m ) { if ( m % n == 0 ) { System . out . print ( \" YES \" ) ; } else { System . out . print ( \" NO \" ) ; } return 0 ; }", "python": "def check ( n , m ) :\n    if ( m % n == 0 ) :\n        print ( \" YES \" )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static void sortPerfectSquare ( int arr [ ] , int n ) { int a ; float b ; Vector < Integer > v1 = new Vector < Integer > ( ) ; Vector < Integer > v2 = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { b = ( float ) Math . sqrt ( arr [ i ] ) ; a = ( int ) b ; if ( a == b ) { v1 . add ( i ) ; v2 . add ( arr [ i ] ) ; } } Collections . sort ( v2 ) ; int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( v1 . get ( j ) == i ) { arr [ i ] = v2 . get ( j ) ; j ++ ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def sortPerfectSquare ( arr , n ) :\n    v1 = [ ]\n    v2 = [ ]\n    for i in range ( n ) :\n        b = sqrt ( arr [ i ] )\n        a = int ( b )\n        if a == b :\n            v1 . append ( i )\n            v2 . append ( arr [ i ] )\n    v2 . sort ( )\n    j = 0\n    for i in range ( n ) :\n        if v1 [ j ] == i :\n            arr [ i ] = v2 [ j ]\n            j += 1\n    for i in range ( n ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static void generateNumbers ( int factor [ ] , int n , int k ) { int next [ ] = new int [ k ] ; int output = 0 ; for ( int i = 0 ; i < n ; ) { int toincrement = 0 ; for ( int j = 0 ; j < k ; j ++ ) if ( next [ j ] < next [ toincrement ] ) toincrement = j ; if ( output != next [ toincrement ] ) { output = next [ toincrement ] ; System . out . print ( next [ toincrement ] + \" \u2581 \" ) ; i ++ ; } next [ toincrement ] += factor [ toincrement ] ; } }", "python": "def generateNumbers ( factor , n , k ) :\n    next = [ 0 ] * k ;\n    output = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        toincrement = 0 ;\n        for j in range ( k ) :\n            if ( next [ j ] < next [ toincrement ] ) :\n                toincrement = j ;\n        if ( output != next [ toincrement ] ) :\n            output = next [ toincrement ] ;\n            print ( next [ toincrement ] , end = \" \u2581 \" ) ;\n            i += 1 ;\n        next [ toincrement ] += factor [ toincrement ] ;\n"}
{"java": "static boolean pointsAreOnSameSideOfLine ( int a , int b , int c , int x1 , int y1 , int x2 , int y2 ) { int fx1 ; int fx2 ; fx1 = a * x1 + b * y1 - c ; fx2 = a * x2 + b * y2 - c ; if ( ( fx1 * fx2 ) > 0 ) return true ; return false ; }", "python": "def pointsAreOnSameSideOfLine ( a , b , c , x1 , y1 , x2 , y2 ) :\n    fx1 = 0\n    fx2 = 0\n    fx1 = a * x1 + b * y1 - c\n    fx2 = a * x2 + b * y2 - c\n    if ( ( fx1 * fx2 ) > 0 ) :\n        return True\n    return False\n"}
{"java": "public static void solve ( ) { int n = scn . nextInt ( ) ; char [ ] ch = scn . next ( ) . toCharArray ( ) ; boolean [ ] bool = new boolean [ n ] ; List < Integer > r = new ArrayList < > ( ) , l = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ch [ i ] == ' L ' ) l . add ( i ) ; else if ( ch [ i ] == ' R ' ) r . add ( i ) ; } int res = 0 ; outer : for ( int right : r ) { for ( int left : l ) { if ( bool [ left ] ) continue ; if ( left > right ) { int d = left - right ; if ( d % 2 == 0 ) res ++ ; int i1 = right , i2 = left ; while ( i1 <= i2 ) { bool [ i1 ] = true ; bool [ i2 ] = true ; i1 ++ ; i2 -- ; } continue outer ; } } } for ( int right : r ) { if ( bool [ right ] ) continue ; int i1 = right ; while ( i1 < n ) { bool [ i1 ] = true ; i1 ++ ; } } for ( int left : l ) { if ( bool [ left ] ) continue ; int i1 = left ; while ( i1 >= 0 ) { bool [ i1 ] = true ; i1 -- ; } } for ( int i = 0 ; i < n ; i ++ ) if ( ! bool [ i ] ) res ++ ; sb . append ( res ) ; }", "python": "def knocked ( left , right , s , n , idx ) :\n    if left == - 1 and right == n :\n        return False\n    if left == - 1 :\n        return s [ right ] == ' L '\n    if right == n :\n        return s [ left ] == ' R '\n    if s [ left ] == ' R ' and s [ right ] == ' L ' :\n        if ( right - left ) % 2 == 0 and right - ( right - left ) // 2 == idx :\n            return False\n        else :\n            return True\n    elif s [ left ] == ' R ' or s [ right ] == ' L ' :\n        return True\n    else :\n        return False\n"}
{"java": "static int countSolutions ( int a ) { int count = 0 ; for ( int i = 0 ; i <= a ; i ++ ) { if ( a == ( i + ( a ^ i ) ) ) count ++ ; } return count ; }", "python": "def countSolutions ( a ) :\n    count = 0\n    for i in range ( a + 1 ) :\n        if ( a == ( i + ( a ^ i ) ) ) :\n            count += 1\n    return count\n"}
{"java": "static int maxAND ( int L , int R ) { if ( L == R ) return L ; else if ( ( R - L ) == 1 ) return ( R & L ) ; else { if ( ( ( R - 1 ) & R ) > ( ( R - 2 ) & ( R - 1 ) ) ) return ( ( R - 1 ) & R ) ; else return ( ( R - 2 ) & ( R - 1 ) ) ; } }", "python": "def maxAND ( L , R ) :\n    if ( L == R ) :\n        return L ;\n    elif ( ( R - L ) == 1 ) :\n        return ( R & L ) ;\n    else :\n        if ( ( ( R - 1 ) & R ) > ( ( R - 2 ) & ( R - 1 ) ) ) :\n            return ( ( R - 1 ) & R ) ;\n        else :\n            return ( ( R - 2 ) & ( R - 1 ) ) ;\n"}
{"java": "static int findSmallest ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < n ; j ++ ) if ( a [ j ] % a [ i ] >= 1 ) break ; if ( j == n ) return a [ i ] ; } return - 1 ; }", "python": "def findSmallest ( a , n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( ( a [ j ] % a [ i ] ) >= 1 ) :\n                break\n        if ( j == n - 1 ) :\n            return a [ i ]\n    return - 1\n"}
{"java": "static void findSet ( int arr [ ] , int n , int k , int m ) { Vector < Integer > [ ] remainder_set = new Vector [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { remainder_set [ i ] = new Vector < Integer > ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int rem = arr [ i ] % k ; remainder_set [ rem ] . add ( arr [ i ] ) ; } for ( int i = 0 ; i < k ; i ++ ) { if ( remainder_set [ i ] . size ( ) >= m ) { System . out . println ( \" Yes \" ) ; for ( int j = 0 ; j < m ; j ++ ) System . out . print ( remainder_set [ i ] . get ( j ) + \" \u2581 \" ) ; return ; } } System . out . print ( \" No \" ) ; }", "python": "def findSet ( arr , k , m ) :\n    arr_size = len ( arr ) ;\n    remainder_set = [ 0 ] * k ;\n    for i in range ( k ) :\n        remainder_set [ i ] = [ ] ;\n    for i in range ( arr_size ) :\n        rem = arr [ i ] % k ;\n        remainder_set [ rem ] . append ( arr [ i ] ) ;\n    for i in range ( k ) :\n        if ( len ( remainder_set [ i ] ) >= m ) :\n            print ( \" Yes \" ) ;\n            for j in range ( m ) :\n                print ( remainder_set [ i ] [ j ] , end = \" \" ) ;\n                print ( \" \u2581 \" , end = \" \" ) ;\n            return ;\n    print ( \" No \" ) ;\n"}
{"java": "static double sum ( int n ) { if ( n == 0 ) return 1 ; double ans = 1 / ( double ) Math . pow ( 3 , n ) + sum ( n - 1 ) ; return ans ; }", "python": "def sum ( n ) :\n    if n == 0 :\n        return 1\n    return 1 / pow ( 3 , n ) + sum ( n - 1 )\n"}
{"java": "static int submatrixXor ( int [ ] [ ] arr ) { int n = 3 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int top_left = ( i + 1 ) * ( j + 1 ) ; int bottom_right = ( n - i ) * ( n - j ) ; if ( ( top_left % 2 == 1 ) && ( bottom_right % 2 == 1 ) ) ans = ( ans ^ arr [ i ] [ j ] ) ; } } return ans ; }", "python": "def submatrixXor ( arr , n ) :\n    ans = 0\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            top_left = ( i + 1 ) * ( j + 1 )\n            bottom_right = ( n - i ) * ( n - j )\n            if ( top_left % 2 == 1 and bottom_right % 2 == 1 ) :\n                ans = ( ans ^ arr [ i ] [ j ] )\n    return ans\n"}
{"java": "static int xorEqualsOrCount ( int N ) { int count = 0 ; int bit ; while ( N > 0 ) { bit = N % 2 ; if ( bit == 0 ) count ++ ; N = N / 2 ; } return ( int ) Math . pow ( 2 , count ) ; }", "python": "def xorEqualsOrCount ( N ) :\n    count = 0\n    while ( N > 0 ) :\n        bit = N % 2\n        if bit == 0 :\n            count += 1\n        N //= 2\n    return int ( pow ( 2 , count ) )\n"}
{"java": "static boolean isUnique ( int [ ] a , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; sum += n - 1 ; return ( sum == k ) ; }", "python": "def isUnique ( a , n , k ) :\n    sum = 0\n    for i in range ( 0 , n , 1 ) :\n        sum += a [ i ]\n    sum += n - 1\n    return ( sum == k )\n"}
{"java": "static boolean check ( char s [ ] ) { int l = s . length ; Arrays . sort ( s ) ; for ( int i = 1 ; i < l ; i ++ ) { if ( s [ i ] - s [ i - 1 ] != 1 ) return false ; } return true ; }", "python": "def check ( s ) :\n    l = len ( s )\n    s = ' ' . join ( sorted ( s ) )\n    for i in range ( 1 , l ) :\n        if ord ( s [ i ] ) - ord ( s [ i - 1 ] ) != 1 :\n            return False\n    return True\n"}
{"java": "static boolean onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( ( n - 1 ) & ( n - 2 ) ) == 0 ) ; }", "python": "def onlyFirstAndLastAreSet ( n ) :\n    if ( n == 1 ) :\n        return True\n    if ( n == 2 ) :\n        return False\n    return ( ( ( n - 1 ) & ( n - 2 ) ) == 0 )\n"}
{"java": "public static int findOccurrences ( String str1 , String substr1 ) { int n = str1 . length ( ) ; char [ ] str = str1 . toCharArray ( ) ; char [ ] substr = substr1 . toCharArray ( ) ; int [ ] preLeft = new int [ n ] ; int [ ] preRight = new int [ n ] ; if ( str [ 0 ] == substr [ 0 ] ) preLeft [ 0 ] ++ ; for ( int i = 1 ; i < n ; i ++ ) { if ( str [ i ] == substr [ 0 ] ) preLeft [ i ] = preLeft [ i - 1 ] + 1 ; else preLeft [ i ] = preLeft [ i - 1 ] ; } if ( str [ n - 1 ] == substr [ 2 ] ) preRight [ n - 1 ] ++ ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( str [ i ] == substr [ 2 ] ) preRight [ i ] = preRight [ i + 1 ] + 1 ; else preRight [ i ] = preRight [ i + 1 ] ; } int counter = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( str [ i ] == str [ 1 ] ) { int total = preLeft [ i - 1 ] * preRight [ i + 1 ] ; counter += total ; } } return counter ; }", "python": "def findOccurrences ( str1 , substr ) :\n    n = len ( str1 )\n    preLeft = [ 0 for i in range ( n ) ]\n    preRight = [ 0 for i in range ( n ) ]\n    if ( str1 [ 0 ] == substr [ 0 ] ) :\n        preLeft [ 0 ] += 1\n    for i in range ( 1 , n ) :\n        if ( str1 [ i ] == substr [ 0 ] ) :\n            preLeft [ i ] = preLeft [ i - 1 ] + 1\n        else :\n            preLeft [ i ] = preLeft [ i - 1 ]\n    if ( str1 [ n - 1 ] == substr [ 2 ] ) :\n        preRight [ n - 1 ] += 1\n    i = n - 2\n    while ( i >= 0 ) :\n        if ( str1 [ i ] == substr [ 2 ] ) :\n            preRight [ i ] = preRight [ i + 1 ] + 1\n        else :\n            preRight [ i ] = preRight [ i + 1 ]\n        i -= 1\n    counter = 0\n    for i in range ( 1 , n - 1 ) :\n        if ( str1 [ i ] == str1 [ 1 ] ) :\n            total = preLeft [ i - 1 ] * preRight [ i + 1 ]\n            counter += total\n    return counter\n"}
{"java": "static void CountSegments ( int N , int a [ ] ) { int frequency [ ] = new int [ 10001 ] ; int c = 0 ; for ( int i = 0 ; i < N ; i ++ ) { frequency [ a [ i ] ] ++ ; } for ( int i = 0 ; i <= 10000 ; i ++ ) c = Math . max ( c , frequency [ i ] ) ; System . out . println ( c ) ; }", "python": "def CountSegments ( N , a ) :\n    frequency = [ 0 ] * 10001\n    c = 0\n    for i in range ( N ) :\n        frequency [ a [ i ] ] += 1\n    for i in range ( 10001 ) :\n        c = max ( c , frequency [ i ] )\n    print ( c )\n"}
{"java": "static int maxPartition ( String s ) { int n = s . length ( ) , P = 0 ; String current = \" \" , previous = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { current += s . charAt ( i ) ; if ( ! current . equals ( previous ) ) { previous = current ; current = \" \" ; P ++ ; } } return P ; }", "python": "def maxPartition ( s ) :\n    n = len ( s )\n    P = 0\n    current = \" \"\n    previous = \" \"\n    for i in range ( n ) :\n        current += s [ i ]\n        if ( current != previous ) :\n            previous = current\n            current = \" \"\n            P += 1\n    return P\n"}
{"java": "static long solve ( int [ ] t , int [ ] d , int K ) { int [ ] sortedIndices = IntStream . range ( 0 , t . length ) . boxed ( ) . sorted ( ( i1 , i2 ) -> - Integer . compare ( d [ i1 ] , d [ i2 ] ) ) . mapToInt ( x -> x ) . toArray ( ) ; Set < Integer > kinds = new HashSet < > ( ) ; long dSum = 0 ; Stack < Integer > extraDs = new Stack < > ( ) ; for ( int i = 0 ; i < K ; ++ i ) { int index = sortedIndices [ i ] ; dSum += d [ index ] ; if ( kinds . contains ( t [ index ] ) ) { extraDs . push ( d [ index ] ) ; } else { kinds . add ( t [ index ] ) ; } } long result = dSum + ( long ) kinds . size ( ) * kinds . size ( ) ; for ( int i = K ; i < sortedIndices . length ; ++ i ) { int index = sortedIndices [ i ] ; if ( ! extraDs . empty ( ) && ! kinds . contains ( t [ index ] ) ) { dSum += d [ index ] - extraDs . pop ( ) ; kinds . add ( t [ index ] ) ; result = Math . max ( result , dSum + ( long ) kinds . size ( ) * kinds . size ( ) ) ; } } return result ; }", "python": "def \u89e3 ( ) :\n    input = sys . stdin . readline\n    N , K = [ int ( _ ) for _ in input ( ) . split ( ) ]\n    aP = sorted ( [ [ int ( _ ) for _ in input ( ) . split ( ) ] for _ in range ( N ) ] , key = lambda x : x [ 1 ] , reverse = True )\n    dS = set ( )\n    aPK = aP [ : K ]\n    for t , d in aPK :\n        dS . add ( t )\n    dSall = dS . copy ( )\n    for t , d in aP [ K : ] :\n        dSall . add ( t )\n    iSall = len ( dSall )\n    iSum = sum ( x [ 1 ] for x in aPK )\n    i\u7a2e\u985e = len ( dS )\n    iTotal = iSum + i\u7a2e\u985e ** 2\n    if iSall == len ( dS ) :\n        print ( iTotal )\n        exit ( )\n    else :\n        dPK = { }\n        for t , d in aPK :\n            if t in dPK :\n                dPK [ t ] . append ( d )\n            else :\n                dPK [ t ] = [ d ]\n        vT = set ( )\n        j = K - 1\n        for nt , nd in aP [ K : ] :\n            if i\u7a2e\u985e == iSall :\n                break\n            if nt not in dS :\n                for i in range ( j , - 1 , - 1 ) :\n                    t , d = aPK [ i ]\n                    if t not in vT :\n                        dPK [ t ] . sort ( )\n                        vT . add ( t )\n                    aT = dPK [ t ]\n                    if 1 < len ( aT ) :\n                        iNewTotal = iSum - d + nd + ( i\u7a2e\u985e + 1 ) ** 2\n                        if iTotal < iNewTotal :\n                            iTotal = iNewTotal\n                        del dPK [ t ] [ 0 ]\n                        dPK [ nt ] = [ nd ]\n                        aPK [ i ] = [ nt , nd ]\n                        i\u7a2e\u985e += 1\n                        iSum = iSum - d + nd\n                        dS . add ( nt )\n                        break\n                j = i - 1\n        print ( iTotal )\n"}
{"java": "static int elementCount ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 ) { int count = 0 ; HashSet < Integer > hash = new HashSet < > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { hash . add ( arr2 [ i ] ) ; } for ( int i = 0 ; i < n1 ; i ++ ) { for ( int j = 1 ; j * j <= arr1 [ i ] ; j ++ ) { if ( arr1 [ i ] % j == 0 ) { if ( ( hash . contains ( j ) && j != ( int ) hash . toArray ( ) [ hash . size ( ) - 1 ] ) || ( hash . contains ( arr1 [ i ] / j ) && ( arr1 [ i ] / j ) != ( int ) hash . toArray ( ) [ hash . size ( ) - 1 ] ) ) { count ++ ; break ; } } } } return count ; }", "python": "def elementCount ( arr1 , arr2 ) :\n    count = 0\n    hash = frozenset ( arr2 )\n    for x in arr1 :\n        for j in range ( 1 , int ( sqrt ( x ) ) + 1 ) :\n            if x % j == 0 :\n                if ( j in hash or x / j in hash ) :\n                    count += 1\n                    break\n    return count\n"}
{"java": "static int findNum ( int N , int K ) { int rem = N % K ; if ( rem == 0 ) return N ; else return N - rem ; }", "python": "def findNum ( N , K ) :\n    rem = N % K\n    if ( rem == 0 ) :\n        return N\n    else :\n        return N - rem\n"}
{"java": "static void isHalfReducible ( int arr [ ] , int n , int m ) { int frequencyHash [ ] = new int [ m + 1 ] ; int i ; for ( i = 0 ; i < frequencyHash . length ; i ++ ) frequencyHash [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { frequencyHash [ arr [ i ] % ( m + 1 ) ] ++ ; } for ( i = 0 ; i <= m ; i ++ ) { if ( frequencyHash [ i ] >= n / 2 ) break ; } if ( i <= m ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; }", "python": "def isHalfReducible ( arr , n , m ) :\n    frequencyHash = [ 0 ] * ( m + 1 ) ;\n    i = 0 ;\n    while ( i < n ) :\n        frequencyHash [ ( arr [ i ] % ( m + 1 ) ) ] += 1 ;\n        i += 1 ;\n    i = 0 ;\n    while ( i <= m ) :\n        if ( frequencyHash [ i ] >= ( n / 2 ) ) :\n            break ;\n        i += 1 ;\n    if ( i <= m ) :\n        print ( \" Yes \" ) ;\n    else :\n        print ( \" No \" ) ;\n"}
{"java": "static float successiveChange ( int arr [ ] , int N ) { float var1 , var2 , result = 0 ; var1 = arr [ 0 ] ; var2 = arr [ 1 ] ; result = var1 + var2 + ( ( var1 * var2 ) / 100 ) ; for ( int i = 2 ; i < N ; i ++ ) result = result + arr [ i ] + ( ( result * arr [ i ] ) / 100 ) ; return result ; }", "python": "def successiveChange ( arr , N ) :\n    result = 0 ;\n    var1 = arr [ 0 ] ;\n    var2 = arr [ 1 ] ;\n    result = float ( var1 + var2 + ( float ( var1 * var2 ) / 100 ) ) ;\n    for i in range ( 2 , N ) :\n        result = ( result + arr [ i ] + ( float ( result * arr [ i ] ) / 100 ) ) ;\n    return result ;\n"}
{"java": "static int answer ( int [ ] arr , int [ ] [ ] ranges , int reversals , int index ) { for ( int i = reversals - 1 ; i >= 0 ; i -- ) { int left = ranges [ i ] [ 0 ] , right = ranges [ i ] [ 1 ] ; if ( left <= index && right >= index ) index = right + left - index ; } return arr [ index ] ; }", "python": "def answer ( arr , ranges , reversals , index ) :\n    i = reversals - 1\n    while ( i >= 0 ) :\n        left = ranges [ i ] [ 0 ]\n        right = ranges [ i ] [ 1 ]\n        if ( left <= index and right >= index ) :\n            index = right + left - index\n        i -= 1\n    return arr [ index ]\n"}
{"java": "private static void read ( ) { try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { for ( int i = 0 ; i < READ_COUNT ; i ++ ) { strList . add ( br . readLine ( ) ) ; } } catch ( IOException e ) { } }", "python": "def Div ( i ) :\n    if i == 1 or i == 2 or i == 3 or i == 5 or i == 6 :\n        return False\n    elif i == 4 or i == 7 :\n        return True\n    else :\n        if Div ( i - 4 ) or Div ( i - 7 ) :\n            return True\n        else :\n            return False\n"}
{"java": "static void solve ( InputStream is , PrintStream os ) { Scanner sc = new Scanner ( is ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] r = new int [ h ] ; int [ ] c = new int [ w ] ; int [ ] [ ] matrix = new int [ h ] [ w ] ; for ( int y = 0 ; y < h ; y ++ ) { for ( int x = 0 ; x < w ; x ++ ) { if ( ( r [ y ] < w - a ) && ( c [ x ] < h - b ) ) { matrix [ y ] [ x ] = 1 ; r [ y ] ++ ; c [ x ] ++ ; } } } for ( int i = 0 ; i < h ; i ++ ) { if ( r [ i ] != a && r [ i ] != w - a ) { os . println ( \" No \" ) ; return ; } } for ( int i = 0 ; i < w ; i ++ ) { if ( c [ i ] != b && c [ i ] != h - b ) { os . println ( \" No \" ) ; return ; } } for ( int y = 0 ; y < h ; y ++ ) { StringBuilder s = new StringBuilder ( ) ; for ( int x = 0 ; x < w ; x ++ ) { s . append ( matrix [ y ] [ x ] ) ; } os . println ( s ) ; } }", "python": "def input ( ) : return sys . stdin . readline ( ) . rstrip ( )\ndef ii ( ) : return int ( input ( ) )\ndef mi ( ) : return map ( int , input ( ) . split ( ) )\ndef li ( ) : return list ( mi ( ) )\ndef main ( ) :\n    h , w , a , b = mi ( )\n    g = np . zeros ( ( h , w ) , dtype = int )\n    g [ : b , : a ] = 1\n    g [ b : , a : ] = 1\n    for i in range ( h ) :\n        print ( * g [ i ] , sep = ' ' )\n"}
{"java": "static void printOriginalMatrix ( int a [ ] , int b [ ] , int [ ] [ ] mat ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) System . out . print ( Math . min ( a [ i ] , b [ j ] ) + \" \u2581 \" ) ; else System . out . print ( \"0\" + \" \u2581 \" ) ; } System . out . println ( ) ; } }", "python": "def printOriginalMatrix ( a , b , mat ) :\n    for i in range ( N ) :\n        for j in range ( M ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                print ( min ( a [ i ] , b [ j ] ) , end = \" \u2581 \" ) ;\n            else :\n                print ( 0 , end = \" \u2581 \" ) ;\n        print ( )\n"}
{"java": "public static boolean judgeSquareSum ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) { int count = 0 ; if ( n % i == 0 ) { while ( n % i == 0 ) { count ++ ; n /= i ; } if ( i % 4 == 3 && count % 2 != 0 ) return false ; } } return n % 4 != 3 ; }", "python": "def judgeSquareSum ( n ) :\n    i = 2 ;\n    while ( i * i <= n ) :\n        count = 0 ;\n        if ( n % i == 0 ) :\n            while ( n % i == 0 ) :\n                count += 1 ;\n                n = int ( n / i ) ;\n            if ( i % 4 == 3 and count % 2 != 0 ) :\n                return False ;\n        i += 1 ;\n    return n % 4 != 3 ;\n"}
{"java": "static Pair < Double , Double > findFoot ( double a , double b , double c , double x1 , double y1 ) { double temp = - 1 * ( a * x1 + b * y1 + c ) / ( a * a + b * b ) ; double x = temp * a + x1 ; double y = temp * b + y1 ; return new Pair ( x , y ) ; }", "python": "def findFoot ( a , b , c , x1 , y1 ) :\n    temp = ( - 1 * ( a * x1 + b * y1 + c ) // ( a * a + b * b ) )\n    x = temp * a + x1\n    y = temp * b + y1\n    return ( x , y )\n"}
{"java": "static int getCount ( String a , String b ) { if ( b . length ( ) % a . length ( ) != 0 ) return - 1 ; int count = b . length ( ) / a . length ( ) ; String str = \" \" ; for ( int i = 0 ; i < count ; i ++ ) { str = str + a ; } if ( str . equals ( b ) ) return count ; return - 1 ; }", "python": "def getCount ( a , b ) :\n    if ( len ( b ) % len ( a ) != 0 ) :\n        return - 1 ;\n    count = int ( len ( b ) / len ( a ) )\n    a = a * count\n    if ( a == b ) :\n        return count\n    return - 1 ;\n"}
{"java": "static void findTriangle ( long S ) { long X1 = 0 , Y1 = 0 ; long X2 = MAX , Y2 = 1 ; long X3 = ( MAX - S % MAX ) % MAX ; long Y3 = ( S + X3 ) / MAX ; System . out . println ( \" ( \" + X1 + \" , \u2581 \" + Y1 + \" ) \" ) ; System . out . println ( \" ( \" + X2 + \" , \u2581 \" + Y2 + \" ) \" ) ; System . out . println ( \" ( \" + X3 + \" , \u2581 \" + Y3 + \" ) \" ) ; }", "python": "def findTriangle ( S ) :\n    X1 = 0 ; Y1 = 0 ;\n    X2 = MAX ; Y2 = 1 ;\n    X3 = ( MAX - S % MAX ) % MAX ;\n    Y3 = ( S + X3 ) / MAX ;\n    print ( \" ( \" , X1 , \" , \" , Y1 , \" ) \" ) ;\n    print ( \" ( \" , X2 , \" , \" , Y2 , \" ) \" ) ;\n    print ( \" ( \" , X3 , \" , \" , Y3 , \" ) \" ) ;\n"}
{"java": "static String tidyNum ( String str1 , int len ) { char [ ] str = str1 . toCharArray ( ) ; for ( int i = len - 2 ; i >= 0 ; i -- ) { if ( str [ i ] > str [ i + 1 ] ) { str [ i ] -- ; for ( int j = i + 1 ; j < len ; j ++ ) str [ j ] = '9' ; } } return String . valueOf ( str ) ; }", "python": "def tidyNum ( str , len ) :\n    for i in range ( len - 2 , - 1 , - 1 ) :\n        if ( str [ i ] > str [ i + 1 ] ) :\n            str [ i ] -= 1\n            for j in range ( i + 1 , len ) :\n                str [ j ] = 9\n    return str\n"}
{"java": "static long findMinValue ( long arr [ ] , int n ) { Arrays . sort ( arr ) ; double val = 0 ; for ( int i = 0 ; i < n ; i ++ ) { val += ( double ) ( Math . log ( ( double ) ( arr [ i ] ) ) ) ; } long left = arr [ 0 ] , right = arr [ n - 1 ] ; long ans = 0 ; while ( left <= right ) { long mid = ( left + right ) / 2 ; double temp = ( double ) n * ( double ) ( Math . log ( ( double ) ( mid ) ) ) ; if ( val < temp ) { ans = mid ; right = mid - 1 ; } else { left = mid + 1 ; } } return ans ; }", "python": "def findMinValue ( arr , n ) :\n    arr . sort ( )\n    val = 0\n    for i in range ( n ) :\n        val += ( math . log ( arr [ i ] ) )\n    left = arr [ 0 ]\n    right = arr [ n - 1 ] + 1\n    while ( left <= right ) :\n        mid = ( left + right ) // 2\n        temp = n * ( math . log ( mid ) )\n        if ( val < temp ) :\n            ans = mid\n            right = mid - 1\n        else :\n            left = mid + 1\n    return ans\n"}
{"java": "static String largestSubStr ( String s ) { while ( s . length ( ) != 0 && s . charAt ( s . length ( ) - 1 ) == '1' ) s = s . substring ( 0 , s . length ( ) - 1 ) ; if ( s . length ( ) == 0 ) return \" - 1\" ; else return s ; }", "python": "def largestSubStr ( s ) :\n    while ( len ( s ) and s [ len ( s ) - 1 ] == '1' ) :\n        s = s [ : len ( s ) - 1 ] ;\n    if ( len ( s ) == 0 ) :\n        return \" - 1\" ;\n    else :\n        return s ;\n"}
{"java": "static int MinRemove ( int [ ] a , int n , int k ) { int [ ] cnt = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) cnt [ 0 ] ++ ; else if ( cnt [ a [ i ] - 1 ] > 0 ) { cnt [ a [ i ] - 1 ] -- ; cnt [ a [ i ] ] ++ ; } } return n - ( k * cnt [ k - 1 ] ) ; }", "python": "def MinRemove ( a , n , k ) :\n    cnt = [ 0 ] * k\n    for i in range ( n ) :\n        if ( a [ i ] == 0 ) :\n            cnt [ 0 ] += 1 ;\n        elif ( cnt [ a [ i ] - 1 ] > 0 ) :\n            cnt [ a [ i ] - 1 ] -= 1 ;\n            cnt [ a [ i ] ] += 1 ;\n    return n - ( k * cnt [ k - 1 ] ) ;\n"}
{"java": "static void D_Pattern ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( j == 1 || ( ( i == 0 || i == n - 1 ) && ( j > 1 && j < n - 2 ) ) || ( j == n - 2 && i != 0 && i != n - 1 ) ) System . out . print ( \" * \" ) ; else System . out . print ( \" \u2581 \" ) ; } System . out . println ( ) ; } }", "python": "def D_Pattern ( string , n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( j == 1 or ( ( i == 0 or i == n - 1 ) and ( j > 1 and j < n - 2 ) ) or ( j == n - 2 and i != 0 and i != n - 1 ) ) :\n                string = string + \" * \"\n            else :\n                string = string + \" \u2581 \"\n        string = string + \" \\n \"\n    return ( string ) ;\n"}
{"java": "static double getMaxMedian ( int [ ] arr , int n , int k ) { int size = n + k ; Arrays . sort ( arr ) ; if ( size % 2 == 0 ) { double median = ( double ) ( arr [ ( size / 2 ) - 1 ] + arr [ size / 2 ] ) / 2 ; return median ; } double median1 = arr [ size / 2 ] ; return median1 ; }", "python": "def getMaxMedian ( arr , n , k ) :\n    size = n + k\n    arr . sort ( reverse = False )\n    if ( size % 2 == 0 ) :\n        median = ( arr [ int ( size / 2 ) - 1 ] + arr [ int ( size / 2 ) ] ) / 2\n        return median\n    median = arr [ int ( size / 2 ) ]\n    return median\n"}
{"java": "static int maxArea ( float perimeter ) { int length = ( int ) Math . ceil ( perimeter / 4 ) ; int breadth = ( int ) Math . floor ( perimeter / 4 ) ; return length * breadth ; }", "python": "def maxArea ( perimeter ) :\n    length = int ( ceil ( perimeter / 4 ) )\n    breadth = int ( floor ( perimeter / 4 ) )\n    return length * breadth\n"}
{"java": "static void removeSpecialCharacter ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) < ' A ' || s . charAt ( i ) > ' Z ' && s . charAt ( i ) < ' a ' || s . charAt ( i ) > ' z ' ) { s = s . substring ( 0 , i ) + s . substring ( i + 1 ) ; i -- ; } } System . out . print ( s ) ; }", "python": "def removeSpecialCharacter ( s ) :\n    i = 0\n    while i < len ( s ) :\n        if ( ord ( s [ i ] ) < ord ( ' A ' ) or ord ( s [ i ] ) > ord ( ' Z ' ) and ord ( s [ i ] ) < ord ( ' a ' ) or ord ( s [ i ] ) > ord ( ' z ' ) ) :\n            del s [ i ]\n            i -= 1\n        i += 1\n    print ( \" \" . join ( s ) )\n"}
{"java": "static void generateArr ( int [ ] arr , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] & arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev & arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev & arr [ n - 1 ] ; }", "python": "def generateArr ( arr , n ) :\n    if ( n == 1 ) :\n        print ( arr [ 0 ] ) ;\n        return ;\n    barr = [ 0 ] * n ;\n    barr [ 0 ] = arr [ 0 ] & arr [ 1 ] ;\n    barr [ n - 1 ] = arr [ n - 1 ] & arr [ n - 2 ] ;\n    for i in range ( 1 , n - 1 ) :\n        barr [ i ] = arr [ i - 1 ] & arr [ i + 1 ] ;\n    for i in range ( n ) :\n        print ( barr [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "static void farthest_min ( int [ ] a , int n ) { int [ ] suffix_min = new int [ n ] ; suffix_min [ n - 1 ] = a [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { suffix_min [ i ] = Math . min ( suffix_min [ i + 1 ] , a [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { int low = i + 1 , high = n - 1 , ans = - 1 ; while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( suffix_min [ mid ] < a [ i ] ) { ans = mid ; low = mid + 1 ; } else high = mid - 1 ; } System . out . print ( ans + \" \u2581 \" ) ; } }", "python": "def farthest_min ( a , n ) :\n    suffix_min = [ 0 for i in range ( n ) ]\n    suffix_min [ n - 1 ] = a [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        suffix_min [ i ] = min ( suffix_min [ i + 1 ] , a [ i ] )\n    for i in range ( n ) :\n        low = i + 1\n        high = n - 1\n        ans = - 1\n        while ( low <= high ) :\n            mid = ( low + high ) // 2\n            if ( suffix_min [ mid ] < a [ i ] ) :\n                ans = mid\n                low = mid + 1\n            else :\n                high = mid - 1\n        print ( ans , end = \" \u2581 \" )\n"}
{"java": "static int MinStep ( int a [ ] , int n ) { int positive = 0 , negative = 0 , zero = 0 ; int step = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { zero ++ ; } else if ( a [ i ] < 0 ) { negative ++ ; step = step + ( - 1 - a [ i ] ) ; } else { positive ++ ; step = step + ( a [ i ] - 1 ) ; } } if ( negative % 2 == 0 ) { step = step + zero ; } else { if ( zero > 0 ) { step = step + zero ; } else { step = step + 2 ; } } return step ; }", "python": "def MinStep ( a , n ) :\n    positive = 0 ;\n    negative = 0 ;\n    zero = 0 ;\n    step = 0 ;\n    for i in range ( n ) :\n        if ( a [ i ] == 0 ) :\n            zero += 1 ;\n        elif ( a [ i ] < 0 ) :\n            negative += 1 ;\n            step = step + ( - 1 - a [ i ] ) ;\n        else :\n            positive += 1 ;\n            step = step + ( a [ i ] - 1 ) ;\n    if ( negative % 2 == 0 ) :\n        step = step + zero ;\n    else :\n        if ( zero > 0 ) :\n            step = step + zero ;\n        else :\n            step = step + 2 ;\n    return step ;\n"}
{"java": "static boolean checkSubarraySum ( int [ ] arr , int n , int k , int sum ) { int curr_sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) curr_sum += arr [ i ] ; if ( curr_sum == sum ) return true ; for ( int j = k ; j < n ; j ++ ) { curr_sum = curr_sum + arr [ j ] - arr [ j - k ] ; if ( curr_sum == sum ) return true ; } return false ; }", "python": "def checkSubarraySum ( arr , n , k , sumV ) :\n    curr_sum = 0\n    for i in range ( 0 , k ) :\n        curr_sum += arr [ i ]\n    if ( curr_sum == sumV ) :\n        return true\n    for j in range ( k , n ) :\n        curr_sum = ( curr_sum + arr [ j ] - arr [ j - k ] )\n        if ( curr_sum == sumV ) :\n            return True\n    return False\n"}
{"java": "static void maxLengthArr ( int x , int y ) { boolean [ ] ex = new boolean [ ( 1 << x ) ] ; ex [ 0 ] = true ; Vector < Integer > pre = new Vector < Integer > ( ) ; pre . add ( 0 ) ; for ( int i = 1 ; i < ( 1 << x ) ; i ++ ) { if ( ex [ i ^ y ] ) continue ; pre . add ( i ) ; ex [ i ] = true ; } if ( pre . size ( ) == 1 ) { System . out . print ( \" - 1\" ) ; return ; } for ( int i = 1 ; i < pre . size ( ) ; i ++ ) System . out . print ( ( pre . get ( i ) ^ pre . get ( i - 1 ) ) + \" \u2581 \" ) ; }", "python": "def maxLengthArr ( x , y ) :\n    ex = [ 0 ] * ( 1 << x ) ;\n    ex [ 0 ] = 1 ;\n    pre = [ 0 ] ;\n    for i in range ( 1 , ( 1 << x ) ) :\n        if ( ex [ i ^ y ] ) :\n            continue ;\n        pre . append ( i ) ;\n        ex [ i ] = 1 ;\n    if ( len ( pre ) == 1 ) :\n        print ( \" - 1\" , end = \" \" ) ;\n        return ;\n    for i in range ( 1 , len ( pre ) ) :\n        print ( pre [ i ] ^ pre [ i - 1 ] , end = \" \u2581 \" ) ;\n"}
{"java": "static int findNthEvenDigitNumber ( int n ) { if ( n == 1 ) { return 0 ; } Vector < Integer > v = new Vector < > ( ) ; n = n - 1 ; while ( n > 0 ) { v . add ( n % 5 ) ; n = n / 5 ; } int result = 0 ; for ( int i = v . size ( ) - 1 ; i >= 0 ; i -- ) { result = result * 10 ; result = result + v . get ( i ) ; } return 2 * result ; }", "python": "def findNthEvenDigitNumber ( n ) :\n    if ( n == 1 ) :\n        return 0\n    v = [ ]\n    n = n - 1\n    while ( n > 0 ) :\n        v . append ( n % 5 )\n        n = n // 5\n    result = 0\n    for i in range ( len ( v ) - 1 , - 1 , - 1 ) :\n        result = result * 10\n        result = result + v [ i ]\n    return 2 * result\n"}
{"java": "static boolean areSetBitsIncreasing ( int n ) { int prev_count = Integer . MAX_VALUE ; while ( n > 0 ) { while ( n > 0 && n % 2 == 0 ) n = n / 2 ; int curr_count = 1 ; while ( n > 0 && n % 2 == 1 ) { n = n / 2 ; curr_count ++ ; } if ( curr_count >= prev_count ) return false ; prev_count = curr_count ; } return true ; }", "python": "def areSetBitsIncreasing ( n ) :\n    prev_count = sys . maxsize\n    while ( n > 0 ) :\n        while ( n > 0 and n % 2 == 0 ) :\n            n = int ( n / 2 )\n        curr_count = 1\n        while ( n > 0 and n % 2 == 1 ) :\n            n = n / 2\n            curr_count += 1\n        if ( curr_count >= prev_count ) :\n            return False\n        prev_count = curr_count\n    return True\n"}
{"java": "public static int Prim ( ) { int sum = 0 ; int u , min , i , j ; int [ ] d = new int [ 100 ] ; int [ ] p = new int [ 100 ] ; int [ ] color = new int [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { d [ i ] = Integer . MAX_VALUE ; p [ i ] = - 1 ; color [ i ] = WHITE ; } d [ 0 ] = 0 ; while ( true ) { min = Integer . MAX_VALUE ; u = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( min > d [ i ] && color [ i ] != BLACK ) { u = i ; min = d [ i ] ; } } if ( u == - 1 ) break ; color [ u ] = BLACK ; for ( j = 0 ; j < n ; j ++ ) { if ( color [ j ] != BLACK && mat [ u ] [ j ] != Integer . MAX_VALUE ) { if ( d [ j ] > mat [ u ] [ j ] ) { d [ j ] = mat [ u ] [ j ] ; p [ j ] = u ; } } } } for ( i = 0 ; i < n ; i ++ ) if ( p [ i ] != - 1 ) sum += mat [ i ] [ p [ i ] ] ; return sum ; }", "python": "def prim ( ) :\n    global M , d , p , color\n    d [ 0 ] = 0\n    while ( 1 ) :\n        minv , u = INF , - 1\n        for i in range ( n ) :\n            if minv > d [ i ] and color [ i ] != BLACK :\n                u = i\n                minv = d [ i ]\n        if u == - 1 :\n            break\n        color [ u ] = BLACK\n        for v in range ( n ) :\n            if color [ v ] != BLACK and M [ u ] [ v ] != INF :\n                if d [ v ] > M [ u ] [ v ] :\n                    d [ v ] , p [ v ] , color [ v ] = M [ u ] [ v ] , u , GRAY\n    return sum ( [ M [ i ] [ p [ i ] ] for i in range ( n ) if p [ i ] != - 1 ] )\n"}
{"java": "static int closestMultiple ( int n , int x ) { if ( x > n ) return x ; n = n + x / 2 ; n = n - ( n % x ) ; return n ; }", "python": "def closestMultiple ( n , x ) :\n    if x > n :\n        return x ;\n    z = ( int ) ( x / 2 ) ;\n    n = n + z ;\n    n = n - ( n % x ) ;\n    return n ;\n"}
{"java": "static void solve ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; if ( k == 1 && arr [ n - 2 ] != arr [ n - 1 ] ) { System . out . println ( arr [ n - 1 ] ) ; return ; } int count = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] == arr [ i + 1 ] ) count ++ ; else count = 1 ; if ( count == k && ( i == 0 || ( arr [ i - 1 ] != arr [ i ] ) ) ) { System . out . println ( arr [ i ] ) ; return ; } } System . out . println ( \" No \u2581 such \u2581 element \" ) ; }", "python": "def solve ( arr , n , k ) :\n    arr . sort ( )\n    if ( k == 1 and arr [ n - 2 ] != arr [ n - 1 ] ) :\n        print ( arr [ n - 1 ] )\n        return\n    count = 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] == arr [ i + 1 ] ) :\n            count += 1\n        else :\n            count = 1\n        if ( count == k and ( i == 0 or ( arr [ i - 1 ] != arr [ i ] ) ) ) :\n            print ( arr [ i ] )\n            return\n    print ( \" No \u2581 such \u2581 element \" )\n"}
{"java": "static int sumOfTheSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int k = 2 ; for ( int j = 1 ; j <= i ; j ++ ) { sum += k ; k += 2 ; } } return sum ; }", "python": "def sumOfTheSeries ( n ) :\n    sum = 0\n    for i in range ( 0 , n + 1 ) :\n        k = 2\n        for j in range ( 1 , i + 1 ) :\n            sum = sum + k ;\n            k = k + 2\n    return sum ;\n"}
{"java": "static int sumOfTheSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int k = 1 ; for ( int j = 1 ; j <= i ; j ++ ) { sum += k ; k += 2 ; } } return sum ; }", "python": "def sumOfTheSeries ( n ) :\n    sum = 0\n    for i in range ( 1 , n + 1 ) :\n        k = 1\n        for j in range ( 1 , i + 1 ) :\n            sum += k\n            k += 2\n    return sum\n"}
{"java": "static int find_maxm ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int ans = 0 ; for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) { int value = x . getKey ( ) ; int freq = x . getValue ( ) ; if ( value == freq ) { ans = Math . max ( ans , value ) ; } } return ans ; }", "python": "def find_maxm ( arr , n ) :\n    mpp = { }\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] in mpp ) :\n            mpp . update ( { arr [ i ] : mpp [ arr [ i ] ] + 1 } )\n        else :\n            mpp [ arr [ i ] ] = 1\n    ans = 0\n    for value , freq in mpp . items ( ) :\n        if ( value == freq ) :\n            ans = max ( ans , value )\n    return ans\n"}
{"java": "public static int getMaxLength ( int arr [ ] ) { int l = arr . length ; int i = 0 , maxlen = 0 ; while ( i < l ) { int j = i ; while ( i + 1 < l && ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) == 1 || Math . abs ( arr [ i ] - arr [ i + 1 ] ) == 0 ) ) { i ++ ; } int currLen = i - j + 1 ; if ( maxlen < currLen ) maxlen = currLen ; if ( j == i ) i ++ ; } maxlen = ( maxlen == 1 ) ? 0 : maxlen ; return maxlen ; }", "python": "def getMaxLength ( arr , n ) :\n    l = n ;\n    i = 0 ; maxlen = 0 ;\n    while ( i < l ) :\n        j = i ;\n        while ( i + 1 < l and ( abs ( arr [ i ] - arr [ i + 1 ] ) == 1 or abs ( arr [ i ] - arr [ i + 1 ] ) == 0 ) ) :\n            i += 1 ;\n        currLen = i - j + 1 ;\n        if ( maxlen < currLen ) :\n            maxlen = currLen ;\n        if ( j == i ) :\n            i += 1 ;\n    return maxlen ;\n"}
{"java": "static int countPairs ( int [ ] a , int n ) { TreeMap < Integer , Integer > map = new TreeMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { map . put ( a [ i ] , 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( a [ i ] ) < 1 ) continue ; int cur = 1 ; while ( cur <= a [ i ] ) cur <<= 1 ; if ( map . containsKey ( cur - a [ i ] ) ) { if ( cur - a [ i ] == a [ i ] && map . get ( a [ i ] ) == 1 ) continue ; count ++ ; map . put ( cur - a [ i ] , map . get ( cur - a [ i ] ) - 1 ) ; map . put ( a [ i ] , map . get ( a [ i ] ) - 1 ) ; } } return count ; }", "python": "def countPairs ( a , n ) :\n    mp = dict . fromkeys ( a , 0 )\n    for i in range ( n ) :\n        mp [ a [ i ] ] += 1\n    a . sort ( reverse = True )\n    count = 0\n    for i in range ( n ) :\n        if ( mp [ a [ i ] ] < 1 ) :\n            continue\n        cur = 1\n        while ( cur <= a [ i ] ) :\n            cur = cur << 1\n        if ( cur - a [ i ] in mp . keys ( ) ) :\n            if ( cur - a [ i ] == a [ i ] and mp [ a [ i ] ] == 1 ) :\n                continue\n            count += 1\n            mp [ cur - a [ i ] ] -= 1\n            mp [ a [ i ] ] -= 1\n    return count\n"}
{"java": "static int toggle ( int n ) { int temp = 1 ; while ( temp <= n ) { n = n ^ temp ; temp = temp << 1 ; } return n ; }", "python": "def toggle ( n ) :\n    temp = 1\n    while ( temp <= n ) :\n        n = n ^ temp\n        temp = temp << 1\n    return n\n"}
{"java": "static int minChanges ( int [ ] A , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 2 ; ++ i ) { if ( ( i - 1 >= 0 ) && A [ i - 1 ] == 1 && A [ i + 1 ] == 1 && A [ i ] == 0 ) { A [ i + 1 ] = 0 ; cnt ++ ; } } return cnt ; }", "python": "def minChanges ( A , n ) :\n    cnt = 0\n    for i in range ( n - 2 ) :\n        if ( ( i - 1 >= 0 ) and A [ i - 1 ] == 1 and A [ i + 1 ] == 1 and A [ i ] == 0 ) :\n            A [ i + 1 ] = 0\n            cnt = cnt + 1\n    return cnt\n"}
{"java": "static double Convert ( double radian ) { double pi = 3.14159 ; return ( radian * ( 180 / pi ) ) ; }", "python": "def Convert ( radian ) :\n    pi = 3.14159\n    degree = radian * ( 180 / pi )\n    return degree\n"}
{"java": "static double edgeDisjoint ( int n ) { double result = 0 ; result = Math . floor ( n / 2 ) ; return result ; }", "python": "def edgeDisjoint ( n ) :\n    result = 0\n    result = math . floor ( n / 2 )\n    return result\n"}
{"java": "static float sumOfAP ( float a , float d , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + a ; a = a + d ; } return sum ; }", "python": "def sumOfAP ( a , d , n ) :\n    sum = 0\n    i = 0\n    while i < n :\n        sum = sum + a\n        a = a + d\n        i = i + 1\n    return sum\n"}
{"java": "static int makeOdd ( int n ) { if ( n % 2 != 0 ) return 1 ; int ans = 1 ; while ( n % 2 == 0 ) { n /= 2 ; ans *= 2 ; } return ans ; }", "python": "def makeOdd ( n ) :\n    if ( n % 2 != 0 ) :\n        return 1 ;\n    resul = 1 ;\n    while ( n % 2 == 0 ) :\n        n = n / 2 ;\n        resul = resul * 2 ;\n    return resul ;\n"}
{"java": "public static void countWays ( int a [ ] , int n ) { int i , j ; long suff [ ] = new long [ n ] ; if ( a [ n - 1 ] == 2 ) suff [ n - 1 ] = 1 ; for ( i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] == 2 ) suff [ i ] = suff [ i + 1 ] + 1 ; else suff [ i ] = suff [ i + 1 ] ; } long ss = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) ss += suff [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] == 1 && a [ j ] == 1 && suff [ j ] >= 2 ) { ss += ( suff [ j ] ) * ( suff [ j ] - 1 ) / 2 ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] == 1 && a [ j ] == 1 && ( suff [ i ] - suff [ j ] ) >= 1 && suff [ j ] >= 1 ) { ss += ( suff [ i ] - suff [ j ] ) * suff [ j ] ; } } } System . out . println ( ss ) ; }", "python": "def countWays ( a , n ) :\n    suff = [ 0 ] * n\n    if ( a [ n - 1 ] == 2 ) :\n        suff [ n - 1 ] = 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( a [ i ] == 2 ) :\n            suff [ i ] = suff [ i + 1 ] + 1\n        else :\n            suff [ i ] = suff [ i + 1 ]\n    ss = 0\n    for i in range ( n ) :\n        if ( a [ i ] == 1 ) :\n            ss += suff [ i ]\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( a [ i ] == 1 and a [ j ] == 1 and suff [ j ] >= 2 ) :\n                ss += ( suff [ j ] ) * ( suff [ j ] - 1 ) // 2\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( a [ i ] == 1 and a [ j ] == 1 and ( suff [ i ] - suff [ j ] ) >= 1 and suff [ j ] >= 1 ) :\n                ss += ( suff [ i ] - suff [ j ] ) * suff [ j ]\n    print ( ss )\n"}
{"java": "static int Square ( int row , int column , int moves ) { int a = 0 , b = 0 , c = 0 , d = 0 , total = 0 ; a = row - moves ; b = row + moves ; c = column - moves ; d = column + moves ; if ( a < 1 ) a = 1 ; if ( c < 1 ) c = 1 ; if ( b > 8 ) b = 8 ; if ( d > 8 ) d = 8 ; total = ( b - a + 1 ) * ( d - c + 1 ) - 1 ; return total ; }", "python": "def Square ( row , column , moves ) :\n    a = 0 ; b = 0 ; c = 0 ;\n    d = 0 ; total = 0 ;\n    a = row - moves ;\n    b = row + moves ;\n    c = column - moves ;\n    d = column + moves ;\n    if ( a < 1 ) :\n        a = 1 ;\n    if ( c < 1 ) :\n        c = 1 ;\n    if ( b > 8 ) :\n        b = 8 ;\n    if ( d > 8 ) :\n        d = 8 ;\n    total = ( b - a + 1 ) * ( d - c + 1 ) - 1 ;\n    return total ;\n"}
{"java": "static void printIndex ( String str , String s ) { boolean flag = false ; for ( int i = 0 ; i < str . length ( ) - s . length ( ) + 1 ; i ++ ) { if ( str . substring ( i , i + s . length ( ) ) . equals ( s ) ) { System . out . print ( i + \" \u2581 \" ) ; flag = true ; } } if ( flag == false ) { System . out . println ( \" NONE \" ) ; } }", "python": "def printIndex ( str , s ) :\n    flag = False ;\n    for i in range ( len ( str ) ) :\n        if ( str [ i : i + len ( s ) ] == s ) :\n            print ( i , end = \" \u2581 \" ) ;\n            flag = True ;\n    if ( flag == False ) :\n        print ( \" NONE \" ) ;\n"}
{"java": "static int findNumber ( int n ) { n -- ; int i = 1 ; while ( n >= 0 ) { n -= i ; ++ i ; } return ( n + i ) ; }", "python": "def findNumber ( n ) :\n    n -= 1\n    i = 1\n    while n >= 0 :\n        n -= i\n        i += 1\n    return ( n + i )\n"}
{"java": "static String findSmallest ( char [ ] s ) { int len = s . length ; int [ ] loccur = new int [ 26 ] ; Arrays . fill ( loccur , - 1 ) ; for ( int i = len - 1 ; i >= 0 ; -- i ) { int chI = s [ i ] - ' a ' ; if ( loccur [ chI ] == - 1 ) { loccur [ chI ] = i ; } } char [ ] sorted_s = s ; Arrays . sort ( sorted_s ) ; for ( int i = 0 ; i < len ; ++ i ) { if ( s [ i ] != sorted_s [ i ] ) { int chI = sorted_s [ i ] - ' a ' ; int last_occ = loccur [ chI ] ; char temp = s [ last_occ ] ; s [ last_occ ] = s [ i ] ; s [ i ] = temp ; break ; } } return String . valueOf ( s ) ; }", "python": "def findSmallest ( s ) :\n    length = len ( s ) ;\n    loccur = [ - 1 ] * 26 ;\n    for i in range ( length - 1 , - 1 , - 1 ) :\n        chI = ord ( s [ i ] ) - ord ( ' a ' ) ;\n        if ( loccur [ chI ] == - 1 ) :\n            loccur [ chI ] = i ;\n    sorted_s = s ;\n    sorted_s . sort ( ) ;\n    for i in range ( length ) :\n        if ( s [ i ] != sorted_s [ i ] ) :\n            chI = ord ( sorted_s [ i ] ) - ord ( ' a ' ) ;\n            last_occ = loccur [ chI ] ;\n            s [ i ] , s [ last_occ ] = s [ last_occ ] , s [ i ]\n            break ;\n    return \" \" . join ( s ) ;\n"}
{"java": "static int rangesum ( int n , int l , int r ) { int [ ] arr = new int [ n ] ; int c = 1 , i = 0 ; while ( c <= n ) { arr [ i ++ ] = c ; c += 2 ; } c = 2 ; while ( c <= n ) { arr [ i ++ ] = c ; c += 2 ; } int sum = 0 ; for ( i = l - 1 ; i < r ; i ++ ) { sum += arr [ i ] ; } return sum ; }", "python": "def rangesum ( n , l , r ) :\n    arr = [ 0 ] * n ;\n    c = 1 ; i = 0 ;\n    while ( c <= n ) :\n        arr [ i ] = c ;\n        i += 1 ;\n        c += 2 ;\n    c = 2 ;\n    while ( c <= n ) :\n        arr [ i ] = c ;\n        i += 1 ;\n        c += 2 ;\n    sum = 0 ;\n    for i in range ( l - 1 , r , 1 ) :\n        sum += arr [ i ] ;\n    return sum ;\n"}
{"java": "static int getHCF ( int x , int y ) { int minimum = Math . min ( x , y ) ; if ( x % minimum == 0 && y % minimum == 0 ) return minimum ; for ( int i = minimum / 2 ; i >= 2 ; i -- ) { if ( x % i == 0 && y % i == 0 ) return i ; } return 1 ; }", "python": "def getHCF ( x , y ) :\n    minimum = min ( x , y )\n    if ( x % minimum == 0 and y % minimum == 0 ) :\n        return minimum\n    for i in range ( minimum // 2 , 1 , - 1 ) :\n        if ( x % i == 0 and y % i == 0 ) :\n            return i\n    return 1\n"}
{"java": "static int findNthNumber ( int A , int B , int N ) { int sum = 0 ; for ( int i = 2 ; i < N ; i ++ ) { sum = A + B ; A = B ; B = sum ; } return sum ; }", "python": "def findNthNumber ( A , B , N ) :\n    sum = 0\n    for i in range ( 2 , N ) :\n        sum = A + B\n        A = B\n        B = sum\n    return sum\n"}
{"java": "public static void start ( ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) , b = sc . nextInt ( ) ; System . out . println ( ( int ) Math . ceil ( ( a + b ) / 2.0 ) ) ; }", "python": "def main ( ) :\n    a , b = map ( int , input ( ) . split ( ) )\n    print ( int ( ( a + b + 1 ) / 2 ) )\n"}
{"java": "public static int findOccurrences ( String str1 , String substr1 ) { int counter = 0 ; char [ ] str = str1 . toCharArray ( ) ; char [ ] substr = substr1 . toCharArray ( ) ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str [ i ] == substr [ 0 ] ) { for ( int j = i + 1 ; j < str1 . length ( ) ; j ++ ) { if ( str [ j ] == substr [ 1 ] ) { for ( int k = j + 1 ; k < str1 . length ( ) ; k ++ ) { if ( str [ k ] == substr [ 2 ] ) counter ++ ; } } } } } return counter ; }", "python": "def findOccurrences ( str , substr ) :\n    counter = 0\n    for i in range ( 0 , len ( str ) ) :\n        if ( str [ i ] == substr [ 0 ] ) :\n            for j in range ( i + 1 , len ( str ) ) :\n                if ( str [ j ] == substr [ 1 ] ) :\n                    for k in range ( j + 1 , len ( str ) ) :\n                        if ( str [ k ] == substr [ 2 ] ) :\n                            counter = counter + 1\n    return counter\n"}
{"java": "static float emi_calculator ( float p , float r , float t ) { float emi ; r = r / ( 12 * 100 ) ; t = t * 12 ; emi = ( p * r * ( float ) Math . pow ( 1 + r , t ) ) / ( float ) ( Math . pow ( 1 + r , t ) - 1 ) ; return ( emi ) ; }", "python": "def emi_calculator ( p , r , t ) :\n    r = r / ( 12 * 100 )\n    t = t * 12\n    emi = ( p * r * pow ( 1 + r , t ) ) / ( pow ( 1 + r , t ) - 1 )\n    return emi\n"}
{"java": "static void CheckSubarray ( int arr [ ] , int N ) { int presum [ ] = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i += 1 ) { presum [ i ] = presum [ i - 1 ] + arr [ i - 1 ] ; } for ( int i = 1 ; i <= N ; i += 1 ) { for ( int j = i ; j <= N ; j += 1 ) { if ( ( presum [ j ] - presum [ i - 1 ] ) % N == 0 ) { System . out . print ( ( i - 1 ) + \" \u2581 \" + ( j - 1 ) ) ; return ; } } } System . out . print ( - 1 ) ; }", "python": "def CheckSubarray ( arr , N ) :\n    presum = [ 0 for i in range ( N + 1 ) ]\n    for i in range ( 1 , N + 1 ) :\n        presum [ i ] = presum [ i - 1 ] + arr [ i - 1 ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( i , N + 1 ) :\n            if ( ( presum [ j ] - presum [ i - 1 ] ) % N == 0 ) :\n                print ( i - 1 , j - 1 )\n                return\n    print ( \" - 1\" )\n"}
{"java": "static long countTriplets ( int A , int B , int C ) { long ans = 0 ; for ( int i = 1 ; i <= A ; i ++ ) { for ( int j = 1 ; j <= B ; j ++ ) { for ( int k = 1 ; k <= C ; k ++ ) { if ( i * k > j * j ) ans ++ ; } } } return ans ; }", "python": "def countTriplets ( A , B , C ) :\n    ans = 0\n    for i in range ( 1 , A + 1 ) :\n        for j in range ( 1 , B + 1 ) :\n            for k in range ( 1 , C + 1 ) :\n                if ( i * k > j * j ) :\n                    ans += 1\n    return ans\n"}
{"java": "static void Cholesky_Decomposition ( int [ ] [ ] matrix , int n ) { int [ ] [ ] lower = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { int sum = 0 ; if ( j == i ) { for ( int k = 0 ; k < j ; k ++ ) sum += ( int ) Math . pow ( lower [ j ] [ k ] , 2 ) ; lower [ j ] [ j ] = ( int ) Math . sqrt ( matrix [ j ] [ j ] - sum ) ; } else { for ( int k = 0 ; k < j ; k ++ ) sum += ( lower [ i ] [ k ] * lower [ j ] [ k ] ) ; lower [ i ] [ j ] = ( matrix [ i ] [ j ] - sum ) / lower [ j ] [ j ] ; } } } System . out . println ( \" \u2581 Lower \u2581 Triangular \\ t \u2581 Transpose \" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) System . out . print ( lower [ i ] [ j ] + \" \\ t \" ) ; System . out . print ( \" \" ) ; for ( int j = 0 ; j < n ; j ++ ) System . out . print ( lower [ j ] [ i ] + \" \\ t \" ) ; System . out . println ( ) ; } }", "python": "def Cholesky_Decomposition ( matrix , n ) :\n    lower = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ] ;\n    for i in range ( n ) :\n        for j in range ( i + 1 ) :\n            sum1 = 0 ;\n            if ( j == i ) :\n                for k in range ( j ) :\n                    sum1 += pow ( lower [ j ] [ k ] , 2 ) ;\n                lower [ j ] [ j ] = int ( math . sqrt ( matrix [ j ] [ j ] - sum1 ) ) ;\n            else :\n                for k in range ( j ) :\n                    sum1 += ( lower [ i ] [ k ] * lower [ j ] [ k ] ) ;\n                if ( lower [ j ] [ j ] > 0 ) :\n                    lower [ i ] [ j ] = int ( ( matrix [ i ] [ j ] - sum1 ) / lower [ j ] [ j ] ) ;\n    print ( \" Lower \u2581 Triangular \\ t \\ tTranspose \" ) ;\n    for i in range ( n ) :\n        for j in range ( n ) :\n            print ( lower [ i ] [ j ] , end = \" \\ t \" ) ;\n        print ( \" \" , end = \" \\ t \" ) ;\n        for j in range ( n ) :\n            print ( lower [ j ] [ i ] , end = \" \\ t \" ) ;\n        print ( \" \" ) ;\n"}
{"java": "public static int find ( int n ) { int sum = ( int ) Math . pow ( 2 , n ) ; int sum2 = 0 ; for ( int i = 1 ; i < n / 2 ; i ++ ) { sum = sum + ( int ) Math . pow ( 2 , i ) ; } for ( int i = n / 2 ; i < n ; i ++ ) { sum2 = sum2 + ( int ) Math . pow ( 2 , i ) ; } int y = Math . abs ( sum2 - sum ) ; return y ; }", "python": "def array_building ( n : int ) :\n    build_list = [ pow ( 2 , _ ) for _ in range ( 1 , n + 1 ) ]\n    return build_list\n"}
{"java": "static void print ( int n ) { System . out . println ( n + n / 2 ) ; for ( int i = 2 ; i <= n ; i += 2 ) System . out . print ( i + \" \u2581 \" ) ; for ( int i = 1 ; i <= n ; i += 2 ) System . out . print ( i + \" \u2581 \" ) ; for ( int i = 2 ; i <= n ; i += 2 ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def bomb_required ( n ) :\n    print ( n + n // 2 )\n    for i in range ( 2 , n + 1 , 2 ) :\n        print ( i , end = \" \u2581 \" )\n    for i in range ( 1 , n + 1 , 2 ) :\n        print ( i , end = \" \u2581 \" )\n    for i in range ( 2 , n , 2 ) :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "static int next ( String [ ] sr , int ind ) { return Integer . parseInt ( sr [ ind ] ) ; }", "python": "def main ( ) :\n    n , a = [ int ( i ) for i in input ( ) . split ( ) ]\n    if n == 3 :\n        print ( 1 , 2 , 3 )\n        return\n    s = ( n - 2 ) * 180\n    a1 = s / n\n    f = ( a1 - a ) / ( 180 - a1 ) * 2\n    c = 2\n    b = n - f\n    if b - int ( b ) > 0.50 :\n        b = max ( min ( int ( b ) + 1 , n ) , 3 )\n    else :\n        b = max ( min ( int ( b ) , n ) , 3 )\n    if c - int ( c ) > 0.50 :\n        c = max ( int ( c ) + 1 , 2 )\n    else :\n        c = max ( int ( c ) , 2 )\n    print ( c , 1 , b )\n"}
{"java": "static int countNums ( int l , int r ) { int cnt = 0 ; for ( int i = l ; i <= r ; i ++ ) { int lastDigit = ( i % 10 ) ; if ( ( lastDigit % 10 ) == 2 || ( lastDigit % 10 ) == 3 || ( lastDigit % 10 ) == 9 ) { cnt ++ ; } } return cnt ; }", "python": "def countNums ( l , r ) :\n    cnt = 0 ;\n    for i in range ( l , r + 1 ) :\n        lastDigit = ( i % 10 ) ;\n        if ( ( lastDigit % 10 ) == 2 or ( lastDigit % 10 ) == 3 or ( lastDigit % 10 ) == 9 ) :\n            cnt += 1 ;\n    return cnt ;\n"}
{"java": "static int maxValue ( int a [ ] , int n ) { HashMap < Integer , Integer > first = new HashMap < > ( ) ; HashMap < Integer , Integer > last = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { first . put ( a [ i ] , 0 ) ; last . put ( a [ i ] , 0 ) ; } int [ ] pr = new int [ n ] ; pr [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { pr [ i ] = pr [ i - 1 ] + a [ i ] ; if ( Integer . parseInt ( String . valueOf ( first . get ( a [ i ] ) ) ) == 0 ) first . put ( a [ i ] , i ) ; last . put ( a [ i ] , i ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int start = Integer . parseInt ( String . valueOf ( first . get ( a [ i ] ) ) ) ; int end = Integer . parseInt ( String . valueOf ( last . get ( a [ i ] ) ) ) ; if ( start != 0 ) ans = Math . max ( ans , pr [ end ] - pr [ start - 1 ] ) ; } return ans ; }", "python": "def maxValue ( a , n ) :\n    first = defaultdict ( lambda : 0 )\n    last = defaultdict ( lambda : 0 )\n    pr = [ None ] * n\n    pr [ 0 ] = a [ 0 ]\n    for i in range ( 1 , n ) :\n        pr [ i ] = pr [ i - 1 ] + a [ i ]\n        if first [ a [ i ] ] == 0 :\n            first [ a [ i ] ] = i\n        last [ a [ i ] ] = i\n    ans = 0\n    for i in range ( 0 , n ) :\n        start = first [ a [ i ] ]\n        end = last [ a [ i ] ]\n        ans = max ( ans , pr [ end ] - pr [ start - 1 ] )\n    return ans\n"}
{"java": "public static int longestAr ( int n , int arr [ ] ) { Hashtable < Integer , Integer > count = new Hashtable < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( count . containsKey ( arr [ i ] ) ) count . put ( arr [ i ] , count . get ( arr [ i ] ) + 1 ) ; else count . put ( arr [ i ] , 1 ) ; } Set < Integer > kset = count . keySet ( ) ; Iterator < Integer > it = kset . iterator ( ) ; int max = 0 ; while ( it . hasNext ( ) ) { int a = ( int ) it . next ( ) ; int cur = 0 ; int cur1 = 0 ; int cur2 = 0 ; if ( count . containsKey ( a + 1 ) ) cur1 = count . get ( a + 1 ) ; if ( count . containsKey ( a - 1 ) ) cur2 = count . get ( a - 1 ) ; cur = count . get ( a ) + Math . max ( cur1 , cur2 ) ; if ( cur > max ) max = cur ; } return ( max ) ; }", "python": "def longestAr ( n , arr ) :\n    count = dict ( )\n    for i in arr :\n        count [ i ] = count . get ( i , 0 ) + 1\n    kset = count . keys ( )\n    maxm = 0\n    for it in list ( kset ) :\n        a = it\n        cur = 0\n        cur1 = 0\n        cur2 = 0\n        if ( ( a + 1 ) in count ) :\n            cur1 = count [ a + 1 ]\n        if ( ( a - 1 ) in count ) :\n            cur2 = count [ a - 1 ]\n        cur = count [ a ] + max ( cur1 , cur2 )\n        if ( cur > maxm ) :\n            maxm = cur\n    return maxm\n"}
{"java": "static void rec ( int idx , int [ ] c ) { if ( idx == N ) { int [ ] sum = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; ++ i ) { sum [ i ] = sum [ i - 1 ] + c [ i - 1 ] ; } if ( sum [ N ] > max ) { for ( int i = 0 ; i < M ; ++ i ) { if ( sum [ R [ i ] ] - sum [ L [ i ] - 1 ] != S [ i ] ) { return ; } } max = sum [ N ] ; ans = c . clone ( ) ; } return ; } for ( int i = 0 ; i <= X ; ++ i ) { c [ idx ] = i ; rec ( idx + 1 , c ) ; } }", "python": "def main ( ) :\n    n , x , m = map ( int , input ( ) . split ( ) )\n    lrs = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( m ) ]\n    lst = tuple ( x - i for i in range ( x + 1 ) )\n    for t in product ( lst , repeat = n ) :\n        acc = [ 0 ] + list ( accumulate ( t ) )\n        for l , r , s in lrs :\n            if acc [ r ] - acc [ l - 1 ] != s : break\n        else :\n            print ( * t )\n            break\n    else :\n        print ( - 1 )\n"}
{"java": "static String findMaxLenEven ( String str ) { int n = str . length ( ) ; int i = 0 ; int currlen = 0 ; int maxlen = 0 ; int st = - 1 ; while ( i < n ) { if ( str . charAt ( i ) == ' \u2581 ' ) { if ( currlen % 2 == 0 ) { if ( maxlen < currlen ) { maxlen = currlen ; st = i - currlen ; } } currlen = 0 ; } else { currlen ++ ; } i ++ ; } if ( currlen % 2 == 0 ) { if ( maxlen < currlen ) { maxlen = currlen ; st = i - currlen ; } } if ( st == - 1 ) return \" - 1\" ; return str . substring ( st , st + maxlen ) ; }", "python": "def findMaxLenEven ( str ) :\n    n = len ( str )\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = - 1\n    while ( i < n ) :\n        if ( str [ i ] == ' \u2581 ' ) :\n            if ( currlen % 2 == 0 ) :\n                if ( maxlen < currlen ) :\n                    maxlen = currlen\n                    st = i - currlen\n            currlen = 0\n        else :\n            currlen += 1\n        i += 1\n    if ( currlen % 2 == 0 ) :\n        if ( maxlen < currlen ) :\n            maxlen = currlen\n            st = i - currlen\n    if ( st == - 1 ) :\n        print ( \" trie \" )\n        return \" - 1\"\n    return str [ st : st + maxlen ]\n"}
{"java": "static int count ( int n ) { int cnt = 0 ; int p = 1 ; while ( p <= n ) { cnt ++ ; p *= 2 ; } return cnt ; }", "python": "def count ( n ) :\n    cnt = 0\n    p = 1\n    while ( p <= n ) :\n        cnt = cnt + 1\n        p *= 2\n    return cnt\n"}
{"java": "public static char [ ] lexo_small ( int n , int k ) { char arr [ ] = new char [ n ] ; Arrays . fill ( arr , ' a ' ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { k -= i ; if ( k >= 0 ) { if ( k >= 26 ) { arr [ i ] = ' z ' ; k -= 26 ; } else { arr [ i ] = ( char ) ( k + 97 - 1 ) ; k -= arr [ i ] - ' a ' + 1 ; } } else break ; k += i ; } return arr ; }", "python": "def lexo_small ( n , k ) :\n    arr = \" \" ;\n    for i in range ( n ) :\n        arr += ' a ' ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        k -= i ;\n        if ( k >= 0 ) :\n            if ( k >= 26 ) :\n                arr = arr [ : i ] + ' z ' + arr [ i + 1 : ] ;\n                k -= 26 ;\n            else :\n                c = ( k + 97 - 1 ) ;\n                arr = arr [ : i ] + chr ( c ) + arr [ i + 1 : ] ;\n                k -= ord ( arr [ i ] ) - ord ( ' a ' ) + 1 ;\n        else :\n            break ;\n        k += i ;\n    return arr ;\n"}
{"java": "private static void fill ( final char [ ] [ ] s , int i , int count , final char koma ) { int j = 1 ; while ( count > 0 ) { s [ i ] [ j ] = koma ; j += 2 ; count -- ; if ( j >= 2 * K - 1 ) { i += 2 ; j = 1 ; } } }", "python": "def MI ( ) : return map ( int , sys . stdin . readline ( ) . rstrip ( ) . split ( ) )\nA , B = MI ( )\nq1 , r1 = ( B - 1 ) // 50 , ( B - 1 ) % 50\nq1 += 1\nq2 , r2 = ( A - 1 ) // 50 , ( A - 1 ) % 50\nq2 += 1\nif B > 1 and A > 1 :\n    print ( 2 * ( q1 + q2 ) , 100 )\n"}
{"java": "public static String LedRequired ( String s , int led ) { int seg [ ] = { 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 } ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) { count += seg [ ( int ) ( s . charAt ( i ) ) - 48 ] ; } if ( count <= led ) return \" YES \" ; else return \" NO \" ; }", "python": "def LedRequired ( s , led ) :\n    count = 0\n    for i in range ( len ( s ) ) :\n        count += seg [ ord ( s [ i ] ) - 48 ]\n    if ( count <= led ) :\n        return \" YES \"\n    else :\n        return \" NO \"\n"}
{"java": "static void printPrevGreater ( int [ ] arr , int n ) { TreeSet < Integer > ts = new TreeSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { Integer c = ts . ceiling ( arr [ i ] ) ; if ( c == null ) System . out . print ( - 1 + \" \u2581 \" ) ; else System . out . print ( c + \" \u2581 \" ) ; ts . add ( arr [ i ] ) ; } }", "python": "def printPrevGreater ( arr , n ) :\n    s = set ( )\n    for i in range ( 0 , n ) :\n        it = [ x for x in s if x >= arr [ i ] ]\n        if len ( it ) == 0 :\n            print ( \" - 1\" , end = \" \u2581 \" )\n        else :\n            print ( min ( it ) , end = \" \u2581 \" )\n        s . add ( arr [ i ] )\n"}
{"java": "static void check ( int nowPos , boolean [ ] moved , int [ ] maxInterval , int [ ] [ ] map ) { for ( int i = 0 ; i < map [ nowPos ] . length ; i ++ ) { if ( map [ nowPos ] [ i ] >= 0 ) { if ( maxInterval [ i ] > maxInterval [ nowPos ] + map [ nowPos ] [ i ] ) { maxInterval [ i ] = maxInterval [ nowPos ] + map [ nowPos ] [ i ] ; } } } int nextIndex = - 1 ; int min = 1 << 30 ; for ( int i = 0 ; i < moved . length ; i ++ ) { if ( ! moved [ i ] ) { if ( maxInterval [ i ] <= min ) { nextIndex = i ; min = maxInterval [ i ] ; } } } if ( nextIndex > 0 ) { moved [ nextIndex ] = true ; check ( nextIndex , moved , maxInterval , map ) ; } }", "python": "def dijkstra ( s ) :\n    color = [ 0 ] * n\n    d = [ inf ] * n\n    d [ s ] = 0\n    while True :\n        mincost = inf\n        for i in range ( n ) :\n            if color [ i ] != 1 and d [ i ] < mincost :\n                mincost = d [ i ]\n                u = i\n        if mincost == inf : break\n        color [ u ] = 1\n        for v in range ( n ) :\n            if color [ v ] != 1 and M [ u ] [ v ] != inf :\n                if d [ u ] + M [ u ] [ v ] < d [ v ] :\n                    d [ v ] = d [ u ] + M [ u ] [ v ]\n    return d\n"}
{"java": "static double maxDistance ( int n , int fuel ) { double dist_covered = 0 ; while ( n > 0 ) { dist_covered += ( double ) fuel / n ; n -= 1 ; } return dist_covered ; }", "python": "def maxDistance ( n , fuel ) :\n    dist_covered = 0\n    while ( n > 0 ) :\n        dist_covered = dist_covered + ( fuel / n )\n        n = n - 1\n    return dist_covered\n"}
{"java": "static void Kroneckerproduct ( int A [ ] [ ] , int B [ ] [ ] ) { int [ ] [ ] C = new int [ rowa * rowb ] [ cola * colb ] ; for ( int i = 0 ; i < rowa ; i ++ ) { for ( int k = 0 ; k < rowb ; k ++ ) { for ( int j = 0 ; j < cola ; j ++ ) { for ( int l = 0 ; l < colb ; l ++ ) { C [ i + l + 1 ] [ j + k + 1 ] = A [ i ] [ j ] * B [ k ] [ l ] ; System . out . print ( C [ i + l + 1 ] [ j + k + 1 ] + \" \u2581 \" ) ; } } System . out . println ( ) ; } } }", "python": "def Kroneckerproduct ( A , B ) :\n    C = [ [ 0 for j in range ( cola * colb ) ] for i in range ( rowa * rowb ) ]\n    for i in range ( 0 , rowa ) :\n        for k in range ( 0 , rowb ) :\n            for j in range ( 0 , cola ) :\n                for l in range ( 0 , colb ) :\n                    C [ i + l + 1 ] [ j + k + 1 ] = A [ i ] [ j ] * B [ k ] [ l ]\n                    print ( C [ i + l + 1 ] [ j + k + 1 ] , end = ' \u2581 ' )\n            print ( \" \\n \" )\n"}
{"java": "static int findSplit ( int [ ] arr , int n ) { int i ; int preSum = 0 ; int ind1 = - 1 , ind2 = - 1 ; int S ; S = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) S += arr [ i ] ; if ( S % 3 != 0 ) return 0 ; int S1 = S / 3 ; int S2 = 2 * S1 ; for ( i = 0 ; i < n ; i ++ ) { preSum += arr [ i ] ; if ( preSum % S1 == 0 && ind1 == - 1 ) ind1 = i ; else if ( preSum % S2 == 0 ) { ind2 = i ; break ; } } if ( ind1 != - 1 && ind2 != - 1 ) { System . out . print ( \" ( \" + ind1 + \" , \u2581 \" + ind2 + \" ) \" ) ; return 1 ; } return 0 ; }", "python": "def findSplit ( arr , n ) :\n    preSum = 0\n    ind1 = - 1\n    ind2 = - 1\n    S = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        S += arr [ i ]\n    if ( S % 3 != 0 ) :\n        return 0\n    S1 = S / 3\n    S2 = 2 * S1\n    for i in range ( 0 , n ) :\n        preSum += arr [ i ]\n        if ( preSum % S1 == 0 and ind1 == - 1 ) :\n            ind1 = i\n        elif ( preSum % S2 == 0 ) :\n            ind2 = i\n            break\n    if ( ind1 != - 1 and ind2 != - 1 ) :\n        print ( \" ( { } , \u2581 { } ) \" . format ( ind1 , ind2 ) )\n        return 1\n    return 0\n"}
{"java": "static int findSum ( int [ ] arr , int n , int left , int right ) { int k = right - left ; int d = arr [ 1 ] - arr [ 0 ] ; int ans = arr [ left - 1 ] * ( k + 1 ) ; ans = ans + ( d * ( k * ( k + 1 ) ) ) / 2 ; return ans ; }", "python": "def findSum ( arr , n , left , right ) :\n    k = right - left ;\n    d = arr [ 1 ] - arr [ 0 ] ;\n    ans = arr [ left - 1 ] * ( k + 1 ) ;\n    ans = ans + ( d * ( k * ( k + 1 ) ) ) // 2 ;\n    return ans ;\n"}
{"java": "static void minOperation ( String S , int N , int K ) { if ( N % K != 0 ) { System . out . println ( \" Not \u2581 Possible \" ) ; } else { int [ ] count = new int [ 26 ] ; for ( int i = 0 ; i < N ; i ++ ) { count [ ( S . charAt ( i ) - 97 ) ] ++ ; } int E = N / K ; Vector < Integer > greaterE = new Vector < > ( ) ; Vector < Integer > lessE = new Vector < > ( ) ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( count [ i ] < E ) lessE . add ( E - count [ i ] ) ; else greaterE . add ( count [ i ] - E ) ; } Collections . sort ( greaterE ) ; Collections . sort ( lessE ) ; int mi = Integer . MAX_VALUE ; for ( int i = 0 ; i <= K ; i ++ ) { int set1 = i ; int set2 = K - i ; if ( greaterE . size ( ) >= set1 && lessE . size ( ) >= set2 ) { int step1 = 0 ; int step2 = 0 ; for ( int j = 0 ; j < set1 ; j ++ ) step1 += greaterE . get ( j ) ; for ( int j = 0 ; j < set2 ; j ++ ) step2 += lessE . get ( j ) ; mi = Math . min ( mi , Math . max ( step1 , step2 ) ) ; } } System . out . println ( mi ) ; } }", "python": "def minOperation ( S , N , K ) :\n    if N % K :\n        print ( \" Not \u2581 Possible \" )\n        return\n    count = [ 0 ] * 26\n    for i in range ( 0 , N ) :\n        count [ ord ( S [ i ] ) - 97 ] += 1\n    E = N // K\n    greaterE = [ ]\n    lessE = [ ]\n    for i in range ( 0 , 26 ) :\n        if count [ i ] < E :\n            lessE . append ( E - count [ i ] )\n        else :\n            greaterE . append ( count [ i ] - E )\n    greaterE . sort ( )\n    lessE . sort ( )\n    mi = float ( ' inf ' )\n    for i in range ( 0 , K + 1 ) :\n        set1 , set2 = i , K - i\n        if ( len ( greaterE ) >= set1 and len ( lessE ) >= set2 ) :\n            step1 , step2 = 0 , 0\n            for j in range ( 0 , set1 ) :\n                step1 += greaterE [ j ]\n            for j in range ( 0 , set2 ) :\n                step2 += lessE [ j ]\n            mi = min ( mi , max ( step1 , step2 ) )\n    print ( mi )\n"}
{"java": "static boolean isWordPresent ( String sentence , String word ) { String [ ] s = sentence . split ( \" \u2581 \" ) ; for ( String temp : s ) { if ( temp . compareTo ( word ) == 0 ) { return true ; } } return false ; }", "python": "def isWordPresent ( sentence , word ) :\n    s = sentence . split ( \" \u2581 \" )\n    for i in s :\n        if ( i == word ) :\n            return True\n    return False\n"}
{"java": "static int countDigit ( long n ) { return ( int ) Math . floor ( Math . log10 ( n ) + 1 ) ; }", "python": "def countDigit ( n ) :\n    return math . floor ( math . log ( n , 10 ) + 1 )\n"}
{"java": "static boolean canBeEqual ( int a , int b , int c , int k ) { int [ ] arr = new int [ 3 ] ; arr [ 0 ] = a ; arr [ 1 ] = b ; arr [ 2 ] = c ; Arrays . sort ( arr ) ; int diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] ; k = k - diff ; if ( k < 0 || k % 3 != 0 ) return false ; return true ; }", "python": "def canBeEqual ( a , b , c , k ) :\n    arr = [ 0 ] * 3 ;\n    arr [ 0 ] = a ;\n    arr [ 1 ] = b ;\n    arr [ 2 ] = c ;\n    arr . sort ( )\n    diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] ;\n    k = k - diff ;\n    if ( k < 0 or k % 3 != 0 ) :\n        return False ;\n    return True ;\n"}
{"java": "static boolean isRotation ( long x , long y ) { long x64 = x | ( x << 32 ) ; while ( x64 >= y ) { if ( x64 == y ) { return true ; } x64 >>= 1 ; } return false ; }", "python": "def isRotation ( x , y ) :\n    x64 = x | ( x << 32 )\n    while ( x64 >= y ) :\n        if ( ( x64 ) == y ) :\n            return True\n        x64 >>= 1\n    return False\n"}
{"java": "static void cal_cos ( float n ) { float accuracy = ( float ) 0.0001 , x1 , denominator , cosx , cosval ; n = n * ( float ) ( 3.142 / 180.0 ) ; x1 = 1 ; cosx = x1 ; cosval = ( float ) cos ( n ) ; int i = 1 ; do { denominator = 2 * i * ( 2 * i - 1 ) ; x1 = - x1 * n * n / denominator ; cosx = cosx + x1 ; i = i + 1 ; } while ( accuracy <= cosval - cosx ) ; System . out . println ( cosx ) ; }", "python": "def cal_cos ( n ) :\n    accuracy = 0.0001\n    n = n * ( 3.142 / 180.0 )\n    x1 = 1\n    cosx = x1\n    cosval = cos ( n )\n    i = 1\n    denominator = 2 * i * ( 2 * i - 1 )\n    x1 = - x1 * n * n / denominator\n    cosx = cosx + x1\n    i = i + 1\n    while ( accuracy <= fabs ( cosval - cosx ) ) :\n        denominator = 2 * i * ( 2 * i - 1 )\n        x1 = - x1 * n * n / denominator\n        cosx = cosx + x1\n        i = i + 1\n    print ( ' { 0 : . 6 } ' . format ( cosx ) )\n"}
{"java": "static void findIntegers ( int n , int x , int y ) { ArrayList < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) ans . add ( 1 ) ; if ( y - ( n - 1 ) <= 0 ) { System . out . print ( \" - 1\" ) ; return ; } ans . add ( y - ( n - 1 ) ) ; int store = 0 ; for ( int i = 0 ; i < n ; i ++ ) store += ans . get ( i ) * ans . get ( i ) ; if ( store < x ) { System . out . print ( \" - 1\" ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( ans . get ( i ) + \" \u2581 \" ) ; }", "python": "def findIntegers ( n , x , y ) :\n    ans = [ ]\n    for i in range ( n - 1 ) :\n        ans . append ( 1 )\n    if ( y - ( n - 1 ) <= 0 ) :\n        print ( \" - 1\" , end = \" \" )\n        return\n    ans . append ( y - ( n - 1 ) )\n    store = 0\n    for i in range ( n ) :\n        store += ans [ i ] * ans [ i ]\n    if ( store < x ) :\n        print ( \" - 1\" , end = \" \" )\n        return ;\n    for i in range ( n ) :\n        print ( ans [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int countConsecutive ( String s ) { int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) { i ++ ; } else { count ++ ; } } return count ; }", "python": "def countConsecutive ( s ) :\n    count = - 1\n    for i in range ( len ( s ) - 1 ) :\n        if ( i <= len ( s ) ) :\n            if ( s [ i ] is s [ i + 1 ] ) :\n                i += 1\n            else :\n                count += 1\n    return count\n"}
{"java": "static int countChars ( String str , int n ) { int i = 0 , cnt = 0 ; while ( i < n ) { if ( str . charAt ( i ) == '0' ) i += 1 ; else i += 2 ; cnt += 1 ; } return cnt ; }", "python": "def countChars ( string , n ) :\n    i = 0 ; cnt = 0 ;\n    while ( i < n ) :\n        if ( string [ i ] == '0' ) :\n            i += 1 ;\n        else :\n            i += 2 ;\n        cnt += 1 ;\n    return cnt ;\n"}
{"java": "static int findMinRemoval ( int arr [ ] , int n ) { int temp , value = 0 ; int maximum = 0 ; if ( n == 1 ) return 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i != 0 && i != n - 1 ) { value = value + Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; temp = Math . abs ( arr [ i ] - arr [ i + 1 ] ) + Math . abs ( arr [ i ] - arr [ i - 1 ] ) - Math . abs ( arr [ i - 1 ] - arr [ i + 1 ] ) ; } else if ( i == 0 ) { value = value + Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; temp = Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; } else temp = Math . abs ( arr [ i ] - arr [ i - 1 ] ) ; maximum = Math . max ( maximum , temp ) ; } return ( value - maximum ) ; }", "python": "def findMinRemoval ( arr , n ) :\n    value = 0\n    maximum = 0\n    if ( n == 1 ) :\n        return 0\n    for i in range ( n ) :\n        if ( i != 0 and i != n - 1 ) :\n            value = value + abs ( arr [ i ] - arr [ i + 1 ] )\n            temp = ( abs ( arr [ i ] - arr [ i + 1 ] ) + abs ( arr [ i ] - arr [ i - 1 ] ) - abs ( arr [ i - 1 ] - arr [ i + 1 ] ) )\n        elif ( i == 0 ) :\n            value = value + abs ( arr [ i ] - arr [ i + 1 ] )\n            temp = abs ( arr [ i ] - arr [ i + 1 ] )\n        else :\n            temp = abs ( arr [ i ] - arr [ i - 1 ] )\n        maximum = max ( maximum , temp )\n    return ( value - maximum )\n"}
{"java": "static int nibu ( int q ) { int ans = nums . length / 2 ; int toadd = nums . length / 2 ; while ( true ) { if ( nums [ ans ] [ 0 ] < q ) { ans += Math . max ( 1 , toadd /= 2 ) ; } else { ans -= Math . max ( 1 , toadd /= 2 ) ; } if ( ans < 0 || ans >= nums . length - 1 || ( nums [ ans ] [ 0 ] < q && nums [ ans + 1 ] [ 0 ] > q ) ) break ; } return ans ; }", "python": "def II ( ) : return int ( sys . stdin . readline ( ) )\ndef MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) )\ndef MI1 ( ) : return map ( int1 , sys . stdin . readline ( ) . split ( ) )\ndef MF ( ) : return map ( float , sys . stdin . readline ( ) . split ( ) )\ndef LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) )\ndef LI1 ( ) : return list ( map ( int1 , sys . stdin . readline ( ) . split ( ) ) )\ndef LF ( ) : return list ( map ( float , sys . stdin . readline ( ) . split ( ) ) )\ndef LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ]\ndij = [ ( 1 , 0 ) , ( 0 , 1 ) , ( - 1 , 0 ) , ( 0 , - 1 ) ]\ndef main ( ) :\n    n = II ( )\n    tt = [ ]\n    aa = [ ]\n    for _ in range ( n ) :\n        t , a = MI ( )\n        tt . append ( t )\n        aa . append ( log10 ( 10 - a ) - 1 )\n    cm = [ 0 ]\n    for a in aa :\n        cm . append ( cm [ - 1 ] + a )\n    q = II ( )\n    for _ in range ( q ) :\n        l , r = MI ( )\n        li = bisect_left ( tt , l )\n        ri = bisect_left ( tt , r )\n        print ( pow ( 10 , cm [ ri ] - cm [ li ] + 9 ) )\n"}
{"java": "static void solve ( int n , int k ) { int mini = 0 ; int x1 = 1 ; int [ ] a = new int [ k ] ; for ( int i = 1 ; i <= k ; i ++ ) { mini += x1 ; a [ i - 1 ] = x1 ; x1 += 1 ; } if ( n < mini ) { System . out . print ( \" - 1\" ) ; return ; } int rem = n - mini ; int cnt = rem / k ; rem = rem % k ; for ( int i = 0 ; i < k ; i ++ ) a [ i ] += cnt ; for ( int i = k - 1 ; i > 0 && rem > 0 ; i -- ) { int xx = a [ i - 1 ] * 2 ; int left = xx - a [ i ] ; if ( rem >= left ) { a [ i ] = xx ; rem -= left ; } else { a [ i ] += rem ; rem = 0 ; } } int sum = a [ 0 ] ; for ( int i = 1 ; i < k ; i ++ ) { if ( a [ i ] > 2 * a [ i - 1 ] ) { System . out . print ( \" - 1\" ) ; return ; } sum += a [ i ] ; } if ( sum != n ) { System . out . print ( \" - 1\" ) ; return ; } for ( int i = 0 ; i < k ; i ++ ) System . out . print ( a [ i ] + \" \u2581 \" ) ; }", "python": "def solve ( n , k ) :\n    mini = 0\n    x1 = 1\n    a = [ 0 for i in range ( k ) ]\n    for i in range ( 1 , k + 1 ) :\n        mini += x1\n        a [ i - 1 ] = x1\n        x1 += 1\n    if ( n < mini ) :\n        print ( \" - 1\" , end = \" \" )\n        return\n    rem = n - mini\n    cnt = int ( rem / k )\n    rem = rem % k\n    for i in range ( k ) :\n        a [ i ] += cnt\n    i = k - 1\n    while ( i > 0 and rem > 0 ) :\n        xx = a [ i - 1 ] * 2\n        left = xx - a [ i ]\n        if ( rem >= left ) :\n            a [ i ] = xx\n            rem -= left\n        else :\n            a [ i ] += rem\n            rem = 0\n        i -= 1\n    sum = a [ 0 ]\n    for i in range ( 1 , k ) :\n        if ( a [ i ] > 2 * a [ i - 1 ] ) :\n            print ( \" - 1\" , end = \" \" )\n            return\n        sum += a [ i ]\n    if ( sum != n ) :\n        print ( \" - 1\" , end = \" \" )\n        return\n    for i in range ( k ) :\n        print ( a [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int countMaxSetBits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) left |= left + 1 ; return left ; }", "python": "def countMaxSetBits ( left , right ) :\n    while ( left | ( left + 1 ) ) <= right :\n        left |= left + 1\n    return left\n"}
{"java": "private static String parseStdin ( ) { String stdin = null ; try { String tmp = br . readLine ( ) ; if ( tmp != null ) { if ( ! tmp . isEmpty ( ) ) stdin = tmp ; } } catch ( IOException e ) { } return stdin ; }", "python": "def get_input ( ) :\n    while True :\n        try :\n            yield ' ' . join ( input ( ) )\n        except EOFError :\n            break\n"}
{"java": "static int LongIncrConseqSubseq ( int arr [ ] , int n ) { HashMap < Integer , Integer > map = new HashMap < > ( ) ; map . put ( arr [ 0 ] , 1 ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( map . containsKey ( arr [ i ] - 1 ) ) { map . put ( arr [ i ] , map . get ( arr [ i ] - 1 ) + 1 ) ; map . remove ( arr [ i ] - 1 ) ; } else { map . put ( arr [ i ] , 1 ) ; } } return Collections . max ( map . values ( ) ) ; }", "python": "def longestSubsequence ( a , n ) :\n    mp = defaultdict ( lambda : 0 )\n    dp = [ 0 for i in range ( n ) ]\n    maximum = - sys . maxsize\n    for i in range ( n ) :\n        if a [ i ] - 1 in mp :\n            lastIndex = mp [ a [ i ] - 1 ] - 1\n            dp [ i ] = 1 + dp [ lastIndex ]\n        else :\n            dp [ i ] = 1\n        mp [ a [ i ] ] = i + 1\n        maximum = max ( maximum , dp [ i ] )\n    return maximum\n"}
{"java": "static int setBitNumber ( int n ) { n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; n = n + 1 ; return ( n >> 1 ) ; }", "python": "def setBitNumber ( n ) :\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n = n + 1\n    return ( n >> 1 )\n"}
{"java": "static int stepsRequired ( int arr [ ] [ ] ) { int result = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( i > j + 1 ) result += Math . abs ( arr [ i ] [ j ] ) ; } } return result ; }", "python": "def stepsRequired ( arr ) :\n    result = 0 ;\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( i > j + 1 ) :\n                result += abs ( arr [ i ] [ j ] ) ;\n    return result ;\n"}
{"java": "static int stepsRequired ( int arr [ ] [ ] ) { int result = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( j > i + 1 ) result += Math . abs ( arr [ i ] [ j ] ) ; } } return result ; }", "python": "def stepsRequired ( arr ) :\n    result = 0\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( j > i + 1 ) :\n                result += abs ( arr [ i ] [ j ] )\n    return result\n"}
{"java": "static void printValueOfPi ( int N ) { double pi = 2 * Math . acos ( 0.0 ) ; System . out . println ( pi ) ; }", "python": "def printValueOfPi ( N ) :\n    pi = round ( 2 * acos ( 0.0 ) , N ) ;\n    print ( pi ) ;\n"}
{"java": "static boolean isPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) sum = sum + i + n / i ; else sum = sum + i ; } } if ( sum == n && n != 1 ) return true ; return false ; }", "python": "def isPerfect ( n ) :\n    sum = 1\n    i = 2\n    while i * i <= n :\n        if n % i == 0 :\n            sum = sum + i + n / i\n        i += 1\n    return ( True if sum == n and n != 1 else False )\n"}
{"java": "static void findBalance ( int x , float bal ) { if ( x % 10 == 0 && ( ( float ) x + 1.50 ) <= bal ) { System . out . printf ( \" % .2f \\n \" , bal - x - 1.50 ) ; } else { System . out . printf ( \" % .2f \\n \" , bal ) ; } }", "python": "def findBalance ( x , bal ) :\n    if ( x % 10 == 0 and ( x + 1.50 ) <= bal ) :\n        print ( round ( bal - x - 1.50 , 2 ) )\n    else :\n        print ( round ( bal , 2 ) )\n"}
{"java": "static void positiveNegativeZero ( int [ ] arr ) { int len = arr . length ; float positiveCount = 0 ; float negativeCount = 0 ; float zeroCount = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( arr [ i ] > 0 ) { positiveCount ++ ; } else if ( arr [ i ] < 0 ) { negativeCount ++ ; } else if ( arr [ i ] == 0 ) { zeroCount ++ ; } } System . out . printf ( \" % 1.4f \u2581 \" , positiveCount / len ) ; System . out . printf ( \" % 1.4f \u2581 \" , negativeCount / len ) ; System . out . printf ( \" % 1.4f \u2581 \" , zeroCount / len ) ; System . out . println ( ) ; }", "python": "def positiveNegativeZero ( arr ) :\n    length = len ( arr ) ;\n    positiveCount = 0 ;\n    negativeCount = 0 ;\n    zeroCount = 0 ;\n    for i in range ( length ) :\n        if ( arr [ i ] > 0 ) :\n            positiveCount += 1 ;\n        elif ( arr [ i ] < 0 ) :\n            negativeCount += 1 ;\n        elif ( arr [ i ] == 0 ) :\n            zeroCount += 1 ;\n    print ( \" { 0 : . 4f } \" . format ( ( positiveCount / length ) ) , end = \" \u2581 \" ) ;\n    print ( \" % 1.4f \u2581 \" % ( negativeCount / length ) , end = \" \u2581 \" ) ;\n    print ( \" % 1.4f \u2581 \" % ( zeroCount / length ) , end = \" \u2581 \" ) ;\n    print ( ) ;\n"}
{"java": "static int oddDays ( int N ) { int hund1 = N / 100 ; int hund4 = N / 400 ; int leap = N >> 2 ; int ord = N - leap ; if ( hund1 > 0 ) { ord += hund1 ; leap -= hund1 ; } if ( hund4 > 0 ) { ord -= hund4 ; leap += hund4 ; } int days = ord + leap * 2 ; int odd = days % 7 ; return odd ; }", "python": "def oddDays ( N ) :\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if ( hund1 ) :\n        ordd += hund1\n        leap -= hund1\n    if ( hund4 ) :\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd\n"}
{"java": "static void solve ( InputStream is , PrintStream os ) { Scanner scan = new Scanner ( is ) ; int N = scan . nextInt ( ) ; int M = scan . nextInt ( ) ; boolean [ ] isCorrect = new boolean [ N ] ; int correct = 0 ; int wa = 0 ; int wrong [ ] = new int [ N ] ; for ( int i = 0 ; i < M ; i ++ ) { int p = scan . nextInt ( ) - 1 ; String str = scan . next ( ) ; if ( isCorrect [ p ] ) continue ; if ( str . equals ( \" AC \" ) ) { isCorrect [ p ] = true ; correct ++ ; wa += wrong [ p ] ; } else { wrong [ p ] ++ ; } } os . println ( correct + \" \u2581 \" + wa ) ; }", "python": "def t ( n , ps ) :\n    ac = 0\n    wa = 0\n    a = [ False ] * ( n + 1 )\n    b = [ 0 ] * ( n + 1 )\n    for p , s in ps :\n        if a [ int ( p ) ] :\n            continue\n        if s == ' AC ' :\n            ac += 1\n            wa += b [ int ( p ) ]\n            a [ int ( p ) ] = True\n        else :\n            b [ int ( p ) ] += 1\n    return ( ac , wa )\n"}
{"java": "static void minSet ( ArrayList < Integer > nums ) { ArrayList < Integer > A = new ArrayList < Integer > ( ) ; Collections . sort ( nums ) ; int sum = 0 ; for ( int i = 0 ; i < nums . size ( ) ; i ++ ) sum += nums . get ( i ) ; int temp = 0 ; for ( int i = nums . size ( ) - 1 ; i >= 0 && temp <= sum / 2 ; i -- ) { A . add ( nums . get ( i ) ) ; temp += nums . get ( i ) ; } for ( int i = 0 ; i < A . size ( ) ; i ++ ) System . out . print ( A . get ( i ) + \" \u2581 \" ) ; }", "python": "def minSet ( nums ) :\n    A = [ ]\n    nums . sort ( )\n    sum = 0\n    for i in range ( 0 , len ( nums ) ) :\n        sum += nums [ i ]\n    temp = 0\n    for i in range ( len ( nums ) - 1 , - 1 , - 1 ) :\n        if ( temp > sum / 2 ) :\n            break\n        A . append ( nums [ i ] )\n        temp += nums [ i ]\n    for i in range ( 0 , len ( A ) ) :\n        print ( A [ i ] , end = ' \u2581 ' )\n"}
{"java": "static int sumMax ( int i , int arr [ ] , int n ) { if ( i >= n - 1 ) return 0 ; if ( v [ i ] ) return dp [ i ] ; v [ i ] = true ; dp [ i ] = Math . max ( arr [ i ] + arr [ i + 1 ] + sumMax ( i + 3 , arr , n ) , sumMax ( i + 1 , arr , n ) ) ; return dp [ i ] ; }", "python": "def sumMax ( i , arr , n ) :\n    if ( i >= n - 1 ) :\n        return 0\n    if ( v [ i ] ) :\n        return dp [ i ]\n    v [ i ] = True\n    dp [ i ] = max ( arr [ i ] + arr [ i + 1 ] + sumMax ( i + 3 , arr , n ) , sumMax ( i + 1 , arr , n ) )\n    return dp [ i ]\n"}
{"java": "static double pentdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.22 * a ; return d ; }", "python": "def pentdiagonal ( a ) :\n    if ( a < 0 ) :\n        return - 1\n    d = 1.22 * a\n    return d\n"}
{"java": "static int frequencyDigits ( int n , int d ) { int c = 0 ; while ( n > 0 ) { if ( n % 10 == d ) c ++ ; n = n / 10 ; } return c ; }", "python": "def frequencyDigits ( n , d ) :\n    c = 0 ;\n    while ( n > 0 ) :\n        if ( n % 10 == d ) :\n            c += 1 ;\n        n = int ( n / 10 ) ;\n    return c ;\n"}
{"java": "static int sum ( int N , int X , int Y ) { int S1 , S2 , S3 ; S1 = ( ( N / X ) ) * ( 2 * X + ( N / X - 1 ) * X ) / 2 ; S2 = ( ( N / Y ) ) * ( 2 * Y + ( N / Y - 1 ) * Y ) / 2 ; S3 = ( ( N / ( X * Y ) ) ) * ( 2 * ( X * Y ) + ( N / ( X * Y ) - 1 ) * ( X * Y ) ) / 2 ; return S1 + S2 - S3 ; }", "python": "def sum ( N , X , Y ) :\n    S1 = floor ( floor ( N / X ) * floor ( 2 * X + floor ( N / X - 1 ) * X ) / 2 )\n    S2 = floor ( floor ( N / Y ) ) * floor ( 2 * Y + floor ( N / Y - 1 ) * Y ) / 2\n    S3 = floor ( floor ( N / ( X * Y ) ) ) * floor ( 2 * ( X * Y ) + floor ( N / ( X * Y ) - 1 ) * ( X * Y ) ) / 2\n    return S1 + S2 - S3\n"}
{"java": "static char findExtraCharcter ( char [ ] strA , char [ ] strB ) { int [ ] m1 = new int [ 256 ] ; for ( int i = 0 ; i < strB . length ; i ++ ) m1 [ strB [ i ] ] ++ ; for ( int i = 0 ; i < strA . length ; i ++ ) m1 [ strA [ i ] ] -- ; for ( int i = 0 ; i < m1 . length ; i ++ ) { if ( m1 [ i ] == 1 ) return ( char ) i ; } return Character . MIN_VALUE ; }", "python": "def findExtraCharacter ( strA , strB ) :\n    m1 = { }\n    for i in strB :\n        if i in m1 :\n            m1 [ i ] += 1\n        else :\n            m1 [ i ] = 1\n    for i in strA :\n        m1 [ i ] -= 1\n    for h1 in m1 :\n        if m1 [ h1 ] == 1 :\n            return h1\n"}
{"java": "static boolean validate ( long n ) { int count [ ] = new int [ 10 ] ; while ( n > 0 ) { int r = ( int ) n % 10 ; if ( count [ r ] == r ) return false ; count [ r ] ++ ; n /= 10 ; } return true ; }", "python": "def validate ( n ) :\n    count = [ 0 for i in range ( 10 ) ]\n    while ( n > 0 ) :\n        r = n % 10\n        if ( count [ r ] == r ) :\n            return False\n        count [ r ] += 1\n        n = n // 10\n    return True\n"}
{"java": "static boolean canMakeEqual ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { while ( a [ i ] % 5 == 0 ) { a [ i ] /= 5 ; } while ( a [ i ] % 3 == 0 ) { a [ i ] /= 3 ; } } int last = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] != last ) { return false ; } } return true ; }", "python": "def canMakeEqual ( a , n ) :\n    for i in range ( n ) :\n        while ( a [ i ] % 5 == 0 ) :\n            a [ i ] //= 5 ;\n        while ( a [ i ] % 3 == 0 ) :\n            a [ i ] //= 3 ;\n    last = a [ 0 ] ;\n    for i in range ( 1 , n ) :\n        if ( a [ i ] != last ) :\n            return False ;\n    return True ;\n"}
{"java": "static int getSum ( int x , int y , int z ) { int ans = 0 ; exactnum [ 0 ] [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i <= x ; ++ i ) { for ( int j = 0 ; j <= y ; ++ j ) { for ( int k = 0 ; k <= z ; ++ k ) { if ( i > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i - 1 ] [ j ] [ k ] * 10 + 4 * exactnum [ i - 1 ] [ j ] [ k ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i - 1 ] [ j ] [ k ] % mod ; } if ( j > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j - 1 ] [ k ] * 10 + 5 * exactnum [ i ] [ j - 1 ] [ k ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j - 1 ] [ k ] % mod ; } if ( k > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j ] [ k - 1 ] * 10 + 6 * exactnum [ i ] [ j ] [ k - 1 ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j ] [ k - 1 ] % mod ; } ans += exactsum [ i ] [ j ] [ k ] % mod ; ans %= mod ; } } } return ans ; }", "python": "def getSum ( x , y , z ) :\n    ans = 0 ;\n    exactnum [ 0 ] [ 0 ] [ 0 ] = 1 ;\n    for i in range ( x + 1 ) :\n        for j in range ( y + 1 ) :\n            for k in range ( z + 1 ) :\n                if ( i > 0 ) :\n                    exactsum [ i ] [ j ] [ k ] += ( exactsum [ i - 1 ] [ j ] [ k ] * 10 + 4 * exactnum [ i - 1 ] [ j ] [ k ] ) % mod ;\n                    exactnum [ i ] [ j ] [ k ] += exactnum [ i - 1 ] [ j ] [ k ] % mod ;\n                if ( j > 0 ) :\n                    exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j - 1 ] [ k ] * 10 + 5 * exactnum [ i ] [ j - 1 ] [ k ] ) % mod ;\n                    exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j - 1 ] [ k ] % mod ;\n                if ( k > 0 ) :\n                    exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j ] [ k - 1 ] * 10 + 6 * exactnum [ i ] [ j ] [ k - 1 ] ) % mod ;\n                    exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j ] [ k - 1 ] % mod ;\n                ans += exactsum [ i ] [ j ] [ k ] % mod ;\n                ans %= mod ;\n    return ans ;\n"}
{"java": "static int sumOddFibonacci ( int n ) { int Sum [ ] = new int [ n + 1 ] ; Sum [ 0 ] = 0 ; Sum [ 1 ] = 1 ; Sum [ 2 ] = 2 ; Sum [ 3 ] = 5 ; Sum [ 4 ] = 10 ; Sum [ 5 ] = 23 ; for ( int i = 6 ; i <= n ; i ++ ) { Sum [ i ] = ( ( Sum [ i - 1 ] + ( 4 * Sum [ i - 2 ] ) % mod - ( 4 * Sum [ i - 3 ] ) % mod + mod ) % mod + ( Sum [ i - 4 ] - Sum [ i - 5 ] + mod ) % mod ) % mod ; } return Sum [ n ] ; }", "python": "def sumOddFibonacci ( n ) :\n    Sum = [ 0 ] * ( n + 1 ) ;\n    Sum [ 0 ] = 0 ;\n    Sum [ 1 ] = 1 ;\n    Sum [ 2 ] = 2 ;\n    Sum [ 3 ] = 5 ;\n    Sum [ 4 ] = 10 ;\n    Sum [ 5 ] = 23 ;\n    for i in range ( 6 , n + 1 ) :\n        Sum [ i ] = ( ( Sum [ i - 1 ] + ( 4 * Sum [ i - 2 ] ) % mod - ( 4 * Sum [ i - 3 ] ) % mod + mod ) % mod + ( Sum [ i - 4 ] - Sum [ i - 5 ] + mod ) % mod ) % mod ;\n    return Sum [ n ] ;\n"}
{"java": "static int printNthElement ( int n ) { int arr [ ] = new int [ n + 1 ] ; arr [ 1 ] = 4 ; arr [ 2 ] = 7 ; for ( int i = 3 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) arr [ i ] = arr [ i / 2 ] * 10 + 4 ; else arr [ i ] = arr [ ( i / 2 ) - 1 ] * 10 + 7 ; } return arr [ n ] ; }", "python": "def printNthElement ( n ) :\n    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 4\n    arr [ 2 ] = 7\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 4\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 7\n    return arr [ n ]\n"}
{"java": "static int printNthElement ( int n ) { int arr [ ] = new int [ n + 1 ] ; arr [ 1 ] = 3 ; arr [ 2 ] = 5 ; for ( int i = 3 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) arr [ i ] = arr [ i / 2 ] * 10 + 3 ; else arr [ i ] = arr [ ( i / 2 ) - 1 ] * 10 + 5 ; } return arr [ n ] ; }", "python": "def printNthElement ( n ) :\n    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 3\n    arr [ 2 ] = 5\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 3\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 5\n    return arr [ n ]\n"}
{"java": "static int printNthElement ( int n ) { int arr [ ] = new int [ n + 1 ] ; arr [ 1 ] = 1 ; arr [ 2 ] = 2 ; for ( int i = 3 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) arr [ i ] = arr [ i / 2 ] * 10 + 1 ; else arr [ i ] = arr [ ( i / 2 ) - 1 ] * 10 + 2 ; } return arr [ n ] ; }", "python": "def printNthElement ( n ) :\n    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 1\n    arr [ 2 ] = 2\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 1\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 2\n    return arr [ n ]\n"}
{"java": "public static void checkType ( int arr [ ] , int n ) { if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] <= arr [ n - 1 ] ) System . out . println ( \" Increasing \" ) ; else if ( arr [ 0 ] >= arr [ 1 ] && arr [ n - 2 ] >= arr [ n - 1 ] ) System . out . println ( \" Decreasing \" ) ; else if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] >= arr [ n - 1 ] ) System . out . println ( \" Increasing \u2581 then \u2581 decreasing \" ) ; else System . out . println ( \" Decreasing \u2581 then \u2581 increasing \" ) ; }", "python": "def checkType ( arr , n ) :\n    if ( arr [ 0 ] <= arr [ 1 ] and arr [ n - 2 ] <= arr [ n - 1 ] ) :\n        print ( \" Increasing \" ) ;\n    elif ( arr [ 0 ] >= arr [ 1 ] and arr [ n - 2 ] >= arr [ n - 1 ] ) :\n        print ( \" Decreasing \" ) ;\n    elif ( arr [ 0 ] <= arr [ 1 ] and arr [ n - 2 ] >= arr [ n - 1 ] ) :\n        print ( \" Increasing \u2581 then \u2581 decreasing \" ) ;\n    else :\n        print ( \" Decreasing \u2581 then \u2581 increasing \" ) ;\n"}
{"java": "static boolean isPossibleToZero ( int a [ ] , int n ) { int num = 0 ; for ( int i = 0 ; i < n ; i ++ ) num = num * 10 + a [ i ] ; return ( num % 11 == 0 ) ; }", "python": "def isPossibleToZero ( a , n ) :\n    num = 0 ;\n    for i in range ( n ) :\n        num = num * 10 + a [ i ] ;\n    return ( num % 11 == 0 ) ;\n"}
{"java": "static void swapThree ( ) { a = a + b + c ; b = a - ( b + c ) ; c = a - ( b + c ) ; a = a - ( b + c ) ; }", "python": "def swapThree ( a , b , c ) :\n    a = a + b + c\n    b = a - ( b + c )\n    c = a - ( b + c )\n    a = a - ( b + c )\n    print ( \" After \u2581 swapping \u2581 a \u2581 = \" , a , \" , \u2581 b \u2581 = \" , b , \" , \u2581 c \u2581 = \" , c )\n"}
{"java": "static void swapThree ( ) { a = a ^ b ^ c ; b = a ^ b ^ c ; c = a ^ b ^ c ; a = a ^ b ^ c ; }", "python": "def swapThree ( a , b , c ) :\n    a [ 0 ] = a [ 0 ] ^ b [ 0 ] ^ c [ 0 ]\n    b [ 0 ] = a [ 0 ] ^ b [ 0 ] ^ c [ 0 ]\n    c [ 0 ] = a [ 0 ] ^ b [ 0 ] ^ c [ 0 ]\n    a [ 0 ] = a [ 0 ] ^ b [ 0 ] ^ c [ 0 ]\n"}
{"java": "static float squareArea ( float l , float b , float h ) { if ( l < 0 || b < 0 || h < 0 ) return - 1 ; float a = ( l * b ) / ( l + b ) ; return a * a ; }", "python": "def squareArea ( l , b , h ) :\n    if l < 0 or b < 0 or h < 0 :\n        return - 1\n    a = ( l * b ) / ( l + b )\n    return a * a\n"}
{"java": "static void Permutation ( int n , int k ) { int [ ] p = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) p [ i ] = i ; for ( int i = 1 ; i < n - k ; i ++ ) p [ i + 1 ] = i ; p [ 1 ] = n - k ; for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( p [ i ] + \" \u2581 \" ) ; }", "python": "def Permutation ( n , k ) :\n    p = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        p [ i ] = i\n    for i in range ( 1 , n - k ) :\n        p [ i + 1 ] = i\n    p [ 1 ] = n - k\n    for i in range ( 1 , n + 1 ) :\n        print ( p [ i ] , end = \" \u2581 \" )\n"}
{"java": "static void findsolution ( long n , long x , long y ) { if ( ( y - n + 1 ) * ( y - n + 1 ) + n - 1 < x || y < n ) { System . out . println ( \" No \u2581 solution \" ) ; return ; } System . out . println ( y - n + 1 ) ; while ( n -- > 1 ) System . out . println ( \"1\" ) ; }", "python": "def findsolution ( n , x , y ) :\n    if ( ( y - n + 1 ) * ( y - n + 1 ) + n - 1 < x or y < n ) :\n        print ( \" No \u2581 solution \" ) ;\n        return ;\n    print ( y - n + 1 ) ;\n    while ( n > 1 ) :\n        print ( 1 ) ;\n        n -= 1 ;\n"}
{"java": "static String FirstAndLast ( String str ) { char [ ] ch = str . toCharArray ( ) ; for ( int i = 0 ; i < ch . length ; i ++ ) { int k = i ; while ( i < ch . length && ch [ i ] != ' \u2581 ' ) i ++ ; ch [ k ] = ( char ) ( ch [ k ] >= ' a ' && ch [ k ] <= ' z ' ? ( ( int ) ch [ k ] - 32 ) : ( int ) ch [ k ] ) ; ch [ i - 1 ] = ( char ) ( ch [ i - 1 ] >= ' a ' && ch [ i - 1 ] <= ' z ' ? ( ( int ) ch [ i - 1 ] - 32 ) : ( int ) ch [ i - 1 ] ) ; } return new String ( ch ) ; }", "python": "def FirstAndLast ( string ) :\n    ch = list ( string ) ;\n    i = 0 ;\n    while i < len ( ch ) :\n        k = i ;\n        while ( i < len ( ch ) and ch [ i ] != ' \u2581 ' ) :\n            i += 1 ;\n        if ( ord ( ch [ k ] ) >= 97 and ord ( ch [ k ] ) <= 122 ) :\n            ch [ k ] = chr ( ord ( ch [ k ] ) - 32 ) ;\n        else :\n            ch [ k ] = ch [ k ]\n        if ( ord ( ch [ i - 1 ] ) >= 90 and ord ( ch [ i - 1 ] ) <= 122 ) :\n            ch [ i - 1 ] = chr ( ord ( ch [ i - 1 ] ) - 32 ) ;\n        else :\n            ch [ i - 1 ] = ch [ i - 1 ]\n        i += 1\n    return \" \" . join ( ch ) ;\n"}
{"java": "static int findBucketNo ( int p ) { return ( int ) Math . ceil ( ( Math . sqrt ( 8 * p + 1 ) - 1 ) / 2 ) ; }", "python": "def findBucketNo ( p ) :\n    return math . ceil ( ( math . sqrt ( 8 * p + 1 ) - 1 ) / 2 )\n"}
{"java": "static int LongestSubarray ( int a [ ] , int n , int k ) { int [ ] pre = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > k ) pre [ i ] = 1 ; else pre [ i ] = - 1 ; } for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + pre [ i ] ; int len = 0 ; int lo = 1 , hi = n ; while ( lo <= hi ) { int mid = ( lo + hi ) / 2 ; boolean ok = false ; for ( int i = mid - 1 ; i < n ; i ++ ) { int x = pre [ i ] ; if ( i - mid >= 0 ) x -= pre [ i - mid ] ; if ( x > 0 ) { ok = true ; break ; } } if ( ok == true ) { len = mid ; lo = mid + 1 ; } else hi = mid - 1 ; } return len ; }", "python": "def LongestSubarray ( a , n , k ) :\n    pre = [ 0 for i in range ( n ) ]\n    for i in range ( n ) :\n        if ( a [ i ] > k ) :\n            pre [ i ] = 1\n        else :\n            pre [ i ] = - 1\n    for i in range ( 1 , n ) :\n        pre [ i ] = pre [ i - 1 ] + pre [ i ]\n    Len = 0\n    lo = 1\n    hi = n\n    while ( lo <= hi ) :\n        mid = ( lo + hi ) // 2\n        ok = False\n        for i in range ( mid - 1 , n ) :\n            x = pre [ i ]\n            if ( i - mid >= 0 ) :\n                x -= pre [ i - mid ]\n            if ( x > 0 ) :\n                ok = True\n                break\n        if ( ok == True ) :\n            Len = mid\n            lo = mid + 1\n        else :\n            hi = mid - 1\n    return Len\n"}
{"java": "public static boolean areDistinct ( Integer arr [ ] ) { Set < Integer > s = new HashSet < Integer > ( Arrays . asList ( arr ) ) ; return ( s . size ( ) == arr . length ) ; }", "python": "def areDistinct ( arr ) :\n    n = len ( arr )\n    s = set ( )\n    for i in range ( 0 , n ) :\n        s . add ( arr [ i ] )\n    return ( len ( s ) == len ( arr ) )\n"}
{"java": "static int countDistinctCode ( String str ) { Set < String > codes = new HashSet < > ( ) ; for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ ) codes . add ( str . substring ( i , i + 2 ) ) ; return codes . size ( ) ; }", "python": "def countDistinctCode ( string ) :\n    codes = set ( )\n    for i in range ( 0 , len ( string ) - 1 ) :\n        codes . add ( string [ i : i + 2 ] )\n    return len ( codes )\n"}
{"java": "private static void simuEqu ( double [ ] nums ) { double a = nums [ 0 ] ; double b = nums [ 1 ] ; double c = nums [ 2 ] ; double d = nums [ 3 ] ; double e = nums [ 4 ] ; double f = nums [ 5 ] ; double x = ( c * e - f * b ) / ( a * e - b * d ) ; double y = ( c - a * x ) / b ; if ( x == 0.0 ) { x = 0.0 ; } if ( y == 0.0 ) { y = 0.0 ; } System . out . printf ( \" % .3f \u2581 % .3f \\n \" , x , y ) ; }", "python": "def inverse ( a , b , d , e ) :\n    deta = a * e - b * d\n    return ( deta , e , - b , - d , a )\n"}
{"java": "public static int mostCommon ( int lower , int higher ) { if ( lower == higher ) return lower ; else return 2 ; }", "python": "def mostCommon ( lower , higher ) :\n    if ( lower == higher ) :\n        return lower\n    else :\n        return 2\n"}
{"java": "static int extractMaximum ( String str ) { int num = 0 , res = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( Character . isDigit ( str . charAt ( i ) ) ) num = num * 10 + ( str . charAt ( i ) - '0' ) ; else { res = Math . max ( res , num ) ; num = 0 ; } } return Math . max ( res , num ) ; }", "python": "def extractMaximum ( ss ) :\n    num , res = 0 , 0\n    for i in range ( len ( ss ) ) :\n        if ss [ i ] >= \"0\" and ss [ i ] <= \"9\" :\n            num = num * 10 + int ( int ( ss [ i ] ) - 0 )\n        else :\n            res = max ( res , num )\n            num = 0\n    return max ( res , num )\n"}
{"java": "static void centeredHexagonalSeries ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( 3 * i * ( i - 1 ) + 1 + \" \u2581 \" ) ; }", "python": "def centeredHexagonalSeries ( n ) :\n    for i in range ( 1 , n + 1 ) :\n        print ( 3 * i * ( i - 1 ) + 1 , end = \" \u2581 \" )\n"}
{"java": "static String longestInteger ( String str , int l ) { int count = 0 , max = 0 , pos = - 1 , pre_pos , pre_len , len = 0 ; for ( int i = 0 ; i < l ; i ++ ) { pre_pos = pos ; pre_len = len ; count = 0 ; len = 0 ; if ( Character . isDigit ( str . charAt ( i ) ) ) pos = i ; while ( Character . isDigit ( str . charAt ( i ) ) ) { count ++ ; i ++ ; len ++ ; } if ( count > max ) { max = count ; } else { pos = pre_pos ; len = pre_len ; } } return ( str . substring ( pos , pos + len ) ) ; }", "python": "def longestInteger ( s , length ) :\n    count = 0\n    maximum = 0\n    pos = - 1\n    l = 0\n    for i in range ( length ) :\n        pre_pos = pos\n        pre_len = l\n        count = 0\n        l = 0\n        if ( s [ i ] . isdecimal ( ) ) :\n            pos = i\n        while ( s [ i ] . isdecimal ( ) ) :\n            count += 1\n            i += 1\n            l += 1\n        if ( count > maximum ) :\n            maximum = count\n        else :\n            pos = pre_pos\n            l = pre_len\n    return ( s [ pos : pos + l ] )\n"}
{"java": "static void findRoots ( int b , int c ) { int a = 1 ; int d = b * b - 4 * a * c ; double sqrt_val = Math . sqrt ( Math . abs ( d ) ) ; if ( d > 0 ) { double x = - b + sqrt_val ; double y = - b - sqrt_val ; int root1 = ( int ) ( x ) / ( 2 * a ) ; int root2 = ( int ) ( y ) / ( 2 * a ) ; if ( root1 + root2 == - 1 * b && root1 * root2 == c ) System . out . print ( root1 + \" , \u2581 \" + root2 ) ; else System . out . print ( - 1 ) ; } else if ( d == 0 ) { int root = - b / ( 2 * a ) ; if ( root + root == - 1 * b && root * root == c ) System . out . print ( root + \" , \u2581 \" + root ) ; else System . out . print ( - 1 ) ; } else { System . out . print ( - 1 ) ; } System . out . println ( ) ; }", "python": "def findRoots ( b , c ) :\n    a = 1\n    d = b * b - 4 * a * c\n    sqrt_val = sqrt ( abs ( d ) )\n    if ( d > 0 ) :\n        x = - b + sqrt_val\n        y = - b - sqrt_val\n        root1 = ( x ) // ( 2 * a )\n        root2 = ( y ) // ( 2 * a )\n        if ( root1 + root2 == - 1 * b and root1 * root2 == c ) :\n            print ( int ( root1 ) , \" , \" , int ( root2 ) )\n        else :\n            print ( - 1 )\n    elif ( d == 0 ) :\n        root = - b // ( 2 * a )\n        if ( root + root == - 1 * b and root * root == c ) :\n            print ( root , \" , \" , root )\n        else :\n            print ( - 1 )\n    else :\n        print ( - 1 )\n"}
{"java": "static int remainingArea ( int N , int M , int K ) { while ( K -- > 0 && N > 0 && M > 0 ) { if ( N > M ) N = N - M ; else M = M - N ; } if ( N > 0 && M > 0 ) return N * M ; else return 0 ; }", "python": "def remainingArea ( N , M , K ) :\n    while ( K > 0 and N > 0 and M > 0 ) :\n        if ( N > M ) :\n            N = N - M ;\n        else :\n            M = M - N ;\n        K = K - 1 ;\n    if ( N > 0 and M > 0 ) :\n        return N * M ;\n    else :\n        return 0 ;\n"}
{"java": "static boolean isValid ( String str , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i - 1 ) ) return false ; } return true ; }", "python": "def isValid ( string , length ) :\n    for i in range ( 1 , length ) :\n        if string [ i ] == string [ i - 1 ] :\n            return False\n    return True\n"}
{"java": "static int getValue ( int n ) { int i = 0 , k = 1 ; while ( i < n ) { i = i + k ; k = k * 2 ; } return k / 2 ; }", "python": "def getValue ( n ) :\n    i = 0 ;\n    k = 1 ;\n    while ( i < n ) :\n        i = i + k ;\n        k = k * 2 ;\n    return int ( k / 2 ) ;\n"}
{"java": "static void equation_plane ( int x1 , int y1 , int z1 , int x2 , int y2 , int z2 , int x3 , int y3 , int z3 , int x , int y , int z ) { int a1 = x2 - x1 ; int b1 = y2 - y1 ; int c1 = z2 - z1 ; int a2 = x3 - x1 ; int b2 = y3 - y1 ; int c2 = z3 - z1 ; int a = b1 * c2 - b2 * c1 ; int b = a2 * c1 - a1 * c2 ; int c = a1 * b2 - b1 * a2 ; int d = ( - a * x1 - b * y1 - c * z1 ) ; if ( a * x + b * y + c * z + d == 0 ) System . out . println ( \" Coplanar \" ) ; else System . out . println ( \" Not \u2581 Coplanar \" ) ; }", "python": "def equation_plane ( x1 , y1 , z1 , x2 , y2 , z2 , x3 , y3 , z3 , x , y , z ) :\n    a1 = x2 - x1\n    b1 = y2 - y1\n    c1 = z2 - z1\n    a2 = x3 - x1\n    b2 = y3 - y1\n    c2 = z3 - z1\n    a = b1 * c2 - b2 * c1\n    b = a2 * c1 - a1 * c2\n    c = a1 * b2 - b1 * a2\n    d = ( - a * x1 - b * y1 - c * z1 )\n    if ( a * x + b * y + c * z + d == 0 ) :\n        print ( \" Coplanar \" )\n    else :\n        print ( \" Not \u2581 Coplanar \" )\n"}
{"java": "static boolean sameLength ( int A , int B ) { while ( ( A > 0 ) && ( B > 0 ) ) { A = A / 10 ; B = B / 10 ; } if ( ( A == 0 ) && ( B == 0 ) ) return true ; return false ; }", "python": "def sameLength ( A , B ) :\n    while ( A > 0 and B > 0 ) :\n        A = A / 10 ;\n        B = B / 10 ;\n    if ( A == 0 and B == 0 ) :\n        return True ;\n    return False ;\n"}
{"java": "private static long fastPow ( long b , long a ) { int c = mod - 2 ; long res = b , base = a ; while ( c > 0 ) { if ( c % 2 == 1 ) res = ( res * base ) % mod ; base = base * base % mod ; c >>= 1 ; } return res ; }", "python": "def comb ( n , r ) :\n    return fact [ n ] * inv [ r ] % mod * inv [ n - r ] % mod if n >= r >= 0 else 0\n"}
{"java": "public static void check ( int n , int x , int y ) { long fact = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { fact *= i ; } long divisor = ( long ) Math . pow ( x , y ) ; if ( fact % divisor == 0 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; }", "python": "def check ( n , x , y ) :\n    fact = 1 ;\n    for i in range ( 2 , n + 1 ) :\n        fact *= i ;\n    divisor = x ** y ;\n    if ( fact % divisor == 0 ) :\n        print ( \" YES \" ) ;\n    else :\n        print ( \" NO \" ) ;\n"}
{"java": "static void findRemainders ( long n ) { HashSet < Long > vc = new HashSet < Long > ( ) ; for ( long i = 1 ; i <= Math . ceil ( Math . sqrt ( n ) ) ; i ++ ) vc . add ( n / i ) ; for ( long i = ( long ) ( n / Math . ceil ( Math . sqrt ( n ) ) - 1 ) ; i >= 0 ; i -- ) vc . add ( i ) ; for ( long it : vc ) System . out . print ( it + \" \u2581 \" ) ; }", "python": "def findRemainders ( n ) :\n    vc = dict ( )\n    for i in range ( 1 , ceil ( sqrt ( n ) ) + 1 ) :\n        vc [ n // i ] = 1\n    for i in range ( n // ceil ( sqrt ( n ) ) - 1 , - 1 , - 1 ) :\n        vc [ i ] = 1\n    for it in sorted ( vc ) :\n        print ( it , end = \" \u2581 \" )\n"}
{"java": "static int fla ( int p , int q ) { int ti = 2 * q - p ; int tj = 2 * p - q ; if ( ti % 3 != 0 || tj % 3 != 0 ) return 0 ; ti /= 3 ; tj /= 3 ; return 0 ; }", "python": "def num_u_ways ( r , c , H , W ) :\n    if ( r >= H or c >= W ) :\n        return 0\n    if ( ( r , c ) in rocks ) :\n        return 0\n    if ( r == H - 1 and c == W - 1 ) :\n        return 1\n    if ( ( r , c ) in num_ways ) :\n        return num_ways [ ( r , c ) ]\n    a = num_u_ways ( r + 2 , c + 1 , H , W )\n    b = num_u_ways ( r + 1 , c + 2 , H , W )\n    num_ways [ ( r , c ) ] = ( a + b ) % mod\n    return num_ways [ ( r , c ) ]\n"}
{"java": "private static String method ( long x , long y ) { if ( x >= y ) { return \" YES \" ; } if ( x == 1 || x == 3 ) { return \" NO \" ; } if ( x == 2 && y > 3 ) { return \" NO \" ; } return \" YES \" ; }", "python": "def _input ( ) : return map ( int , input ( ) . split ( ) )\nfor _ in range ( int ( input ( ) ) ) :\n    x , y = _input ( )\n    if x >= y : print ( \" YES \" )\n    elif x == 2 and y == 3 : print ( \" YES \" )\n    elif x <= 3 : print ( \" NO \" )\n    else : print ( \" YES \" )\n"}
{"java": "static boolean targetstring ( String str1 , String str2 ) { int l1 = str1 . length ( ) ; int l2 = str2 . length ( ) ; if ( l1 != l2 ) return false ; int [ ] map = new int [ MAX ] ; for ( int i = 0 ; i < l1 ; i ++ ) map [ str1 . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < l2 ; i ++ ) { map [ str2 . charAt ( i ) - ' a ' ] -- ; if ( map [ str2 . charAt ( i ) - ' a ' ] < 0 ) return false ; } return true ; }", "python": "def targetstring ( str1 , str2 ) :\n    l1 = len ( str1 )\n    l2 = len ( str2 )\n    if ( l1 != l2 ) :\n        return False\n    map = [ 0 ] * MAX\n    for i in range ( l1 ) :\n        map [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( l2 ) :\n        map [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] -= 1\n        if ( map [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] < 0 ) :\n            return False\n    return True\n"}
{"java": "static boolean isPossible ( int x , int y ) { if ( ( x - y ) == 1 ) return false ; return true ; }", "python": "def isPossible ( x , y ) :\n    if ( ( x - y ) == 1 ) :\n        return False\n    return True\n"}
{"java": "static void result ( String s , int n ) { HashSet < String > st = new HashSet < String > ( ) ; for ( int i = 0 ; i < ( int ) s . length ( ) ; i ++ ) { String ans = \" \" ; for ( int j = i ; j < ( int ) s . length ( ) ; j ++ ) { ans += s . charAt ( j ) ; if ( ans . length ( ) == n ) { st . add ( ans ) ; break ; } } } for ( String it : st ) System . out . print ( it + \" \u2581 \" ) ; }", "python": "def result ( s , n ) :\n    st = set ( ) ;\n    for i in range ( len ( s ) ) :\n        ans = \" \" ;\n        for j in range ( i , len ( s ) ) :\n            ans += s [ j ] ;\n            if ( len ( ans ) == n ) :\n                st . add ( ans ) ;\n                break ;\n    for it in st :\n        print ( it , end = \" \u2581 \" ) ;\n"}
{"java": "static int HailstoneNumbers ( int N ) { System . out . print ( N + \" \u2581 \" ) ; if ( N == 1 && c == 0 ) { return c ; } else if ( N == 1 && c != 0 ) { c ++ ; return c ; } else if ( N % 2 == 0 ) { c ++ ; HailstoneNumbers ( N / 2 ) ; } else if ( N % 2 != 0 ) { c ++ ; HailstoneNumbers ( 3 * N + 1 ) ; } return c ; }", "python": "def HailstoneNumbers ( N , c ) :\n    print ( N , end = \" \u2581 \" ) ;\n    if ( N == 1 and c == 0 ) :\n        return c ;\n    elif ( N == 1 and c != 0 ) :\n        c = c + 1 ;\n    elif ( N % 2 == 0 ) :\n        c = c + 1 ;\n        c = HailstoneNumbers ( int ( N / 2 ) , c ) ;\n    elif ( N % 2 != 0 ) :\n        c = c + 1 ;\n        c = HailstoneNumbers ( 3 * N + 1 , c ) ;\n    return c ;\n"}
{"java": "static String solve ( int n ) { int m = n / 2 + 1 ; return String . format ( \" % d \\n % s \" , m , IntStream . range ( 0 , n ) . mapToObj ( i -> String . format ( \" % d \u2581 % d \" , Math . max ( 1 , i - m + 2 ) , Math . min ( m , i + 1 ) ) ) . collect ( Collectors . joining ( \" \\n \" ) ) ) ; }", "python": "def output ( ) :\n    print ( m )\n    for i in range ( n ) :\n        print ( coord_X [ i ] , coord_Y [ i ] )\n"}
{"java": "static int countPairs ( int arr [ ] , int n ) { int count = 0 ; int right = 0 , left = 0 ; boolean visited [ ] = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) visited [ i ] = false ; while ( right < n ) { while ( right < n && ! visited [ arr [ right ] ] ) { count += ( right - left ) ; visited [ arr [ right ] ] = true ; right ++ ; } while ( left < right && ( right != n && visited [ arr [ right ] ] ) ) { visited [ arr [ left ] ] = false ; left ++ ; } } return count ; }", "python": "def countPairs ( arr , n ) :\n    count = 0\n    right = 0\n    left = 0\n    visited = [ False for i in range ( n ) ]\n    while ( right < n ) :\n        while ( right < n and visited [ arr [ right ] ] == False ) :\n            count += ( right - left )\n            visited [ arr [ right ] ] = True\n            right += 1\n        while ( left < right and ( right != n and visited [ arr [ right ] ] == True ) ) :\n            visited [ arr [ left ] ] = False\n            left += 1\n    return count\n"}
{"java": "static int givesum ( int A [ ] , int n ) { int max = Arrays . stream ( A ) . max ( ) . getAsInt ( ) ; int maxBit = ( int ) Math . ceil ( Math . log ( max ) + 1 ) ; int totalSubarrays = n * ( n + 1 ) / 2 ; int s = 0 ; for ( int i = 0 ; i < maxBit ; i ++ ) { int c1 = 0 ; Vector < Integer > vec = new Vector < > ( ) ; int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { int a = A [ j ] >> i ; if ( ! ( a % 2 == 1 ) ) { vec . add ( j ) ; } } int cntSubarrNotSet = 0 ; int cnt = 1 ; for ( int j = 1 ; j < vec . size ( ) ; j ++ ) { if ( vec . get ( j ) - vec . get ( j - 1 ) == 1 ) { cnt ++ ; } else { cntSubarrNotSet += cnt * ( cnt + 1 ) / 2 ; cnt = 1 ; } } cntSubarrNotSet += cnt * ( cnt + 1 ) / 2 ; if ( vec . size ( ) == 0 ) cntSubarrNotSet = 0 ; int cntSubarrIthSet = totalSubarrays - cntSubarrNotSet ; s += cntSubarrIthSet * Math . pow ( 2 , i ) ; } return s ; }", "python": "def givesum ( A , n ) :\n    max_element = max ( A )\n    maxBit = int ( log2 ( max_element ) ) + 1\n    totalSubarrays = n * ( n + 1 ) // 2\n    s = 0\n    for i in range ( maxBit ) :\n        c1 = 0\n        vec = [ ]\n        sum = 0\n        for j in range ( n ) :\n            a = A [ j ] >> i\n            if ( not ( a & 1 ) ) :\n                vec . append ( j )\n        cntSubarrNotSet = 0\n        cnt = 1\n        for j in range ( 1 , len ( vec ) ) :\n            if ( vec [ j ] - vec [ j - 1 ] == 1 ) :\n                cnt += 1\n            else :\n                cntSubarrNotSet += cnt * ( cnt + 1 ) // 2\n                cnt = 1\n        cntSubarrNotSet += cnt * ( cnt + 1 ) // 2\n        if len ( vec ) == 0 :\n            cntSubarrNotSet = 0\n        cntSubarrIthSet = totalSubarrays - cntSubarrNotSet\n        s += cntSubarrIthSet * pow ( 2 , i )\n    return s\n"}
{"java": "static void Matrix ( char a [ ] [ ] ) { char ch = '1' ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( a [ i ] [ j ] == ' . ' ) a [ i ] [ j ] = ch ; ch = ( ch == '1' ) ? '0' : '1' ; System . out . print ( a [ i ] [ j ] + \" \u2581 \" ) ; } System . out . println ( ) ; if ( i % 2 == 0 ) ch = '0' ; else ch = '1' ; } }", "python": "def Matrix ( a ) :\n    ch = '1' ;\n    for i in range ( N ) :\n        for j in range ( M ) :\n            if ( a [ i ] [ j ] == ' . ' ) :\n                a [ i ] [ j ] = ch ;\n            if ( ch == '1' ) :\n                ch == '0'\n            else :\n                ch = '1'\n            print ( a [ i ] [ j ] , end = \" \u2581 \" ) ;\n        print ( )\n        if ( i % 2 == 0 ) :\n            ch = '0' ;\n        else :\n            ch = '1' ;\n"}
{"java": "static int largestSubSeq ( String arr [ ] , int n ) { int [ ] count = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { String str = arr [ i ] ; boolean [ ] hash = new boolean [ MAX ] ; for ( int j = 0 ; j < str . length ( ) ; j ++ ) { hash [ str . charAt ( j ) - ' a ' ] = true ; } for ( int j = 0 ; j < MAX ; j ++ ) { if ( hash [ j ] ) count [ j ] ++ ; } } int max = - 1 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( max < count [ i ] ) max = count [ i ] ; } return max ; }", "python": "def largestSubSeq ( arr , n ) :\n    count = [ 0 ] * MAX\n    for i in range ( n ) :\n        string = arr [ i ]\n        _hash = [ False ] * MAX\n        for j in range ( len ( string ) ) :\n            _hash [ ord ( string [ j ] ) - ord ( ' a ' ) ] = True\n        for j in range ( MAX ) :\n            if _hash [ j ] == True :\n                count [ j ] += 1\n    return max ( count )\n"}
{"java": "static double expectedSteps ( int x ) { if ( x == 0 ) return 0 ; if ( x <= 5 ) return 6 ; if ( v [ x ] == 1 ) return dp [ x ] ; v [ x ] = 1 ; dp [ x ] = 1 + ( expectedSteps ( x - 1 ) + expectedSteps ( x - 2 ) + expectedSteps ( x - 3 ) + expectedSteps ( x - 4 ) + expectedSteps ( x - 5 ) + expectedSteps ( x - 6 ) ) / 6 ; return dp [ x ] ; }", "python": "def expectedSteps ( x ) :\n    if ( x == 0 ) :\n        return 0\n    if ( x <= 5 ) :\n        return 6\n    if ( v [ x ] ) :\n        return dp [ x ]\n    v [ x ] = 1\n    dp [ x ] = 1 + ( expectedSteps ( x - 1 ) + expectedSteps ( x - 2 ) + expectedSteps ( x - 3 ) + expectedSteps ( x - 4 ) + expectedSteps ( x - 5 ) + expectedSteps ( x - 6 ) ) / 6\n    return dp [ x ]\n"}
{"java": "static String tribWord ( int n ) { String Sn_1 = \"1\" ; String Sn_2 = \"12\" ; String Sn_3 = \"1213\" ; String tmp ; for ( int i = 3 ; i <= n ; i ++ ) { tmp = Sn_3 ; Sn_3 += ( Sn_2 + Sn_1 ) ; Sn_1 = Sn_2 ; Sn_2 = tmp ; } return Sn_3 ; }", "python": "def tribWord ( n ) :\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range ( 3 , n + 1 ) :\n        tmp = Sn_3\n        Sn_3 += ( Sn_2 + Sn_1 )\n        Sn_1 = Sn_2\n        Sn_2 = tmp\n    return Sn_3\n"}
{"java": "public static int minSteps ( int arr [ ] , int n ) { int min_Steps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 ) min_Steps += Math . abs ( arr [ i ] - arr [ i - 1 ] ) ; else min_Steps += Math . abs ( arr [ i ] ) ; } return min_Steps ; }", "python": "def minSteps ( arr , n ) :\n    min_Steps = 0\n    for i in range ( n ) :\n        if ( i > 0 ) :\n            min_Steps += abs ( arr [ i ] - arr [ i - 1 ] )\n        else :\n            min_Steps += abs ( arr [ i ] )\n    return min_Steps\n"}
{"java": "static int fnMod ( int n ) { int rem = n % 4 ; if ( rem == 0 || rem == 3 ) return 0 ; else if ( rem == 1 || rem == 2 ) return 1 ; return 0 ; }", "python": "def fnMod ( n ) :\n    rem = n % 4\n    if ( rem == 0 or rem == 3 ) :\n        return 0\n    elif ( rem == 1 or rem == 2 ) :\n        return 1\n"}
{"java": "private static double solve ( int rem , int flg , int last ) { if ( dp [ flg ] [ last ] > 0 ) return dp [ flg ] [ last ] ; if ( rem == 0 ) return dp [ flg ] [ last ] = r [ last ] ; double res = Double . MAX_VALUE ; for ( int i = 0 ; i < r . length ; i ++ ) { if ( ( ( 1 << i ) & flg ) > 0 ) continue ; double tmp = Math . sqrt ( Math . pow ( r [ last ] + r [ i ] , 2 ) - Math . pow ( r [ last ] - r [ i ] , 2 ) ) ; res = Math . min ( res , tmp + solve ( rem - 1 , flg | ( 1 << i ) , i ) ) ; } return dp [ flg ] [ last ] = res ; }", "python": "def rec ( state , v ) :\n    if state == ( 1 << N ) - 1 :\n        return cakes [ v ]\n    if dp [ state ] [ v ] != - 1 :\n        return dp [ state ] [ v ]\n    ret = INF\n    for i in range ( N ) :\n        if state == 0 :\n            ret = min ( ret , rec ( 1 << i , i ) + cakes [ i ] )\n        elif not ( state >> i & 1 ) :\n            ret = min ( ret , rec ( state | 1 << i , i ) + sqrt ( pow ( cakes [ i ] + cakes [ v ] , 2 ) - pow ( cakes [ i ] - cakes [ v ] , 2 ) ) )\n    dp [ state ] [ v ] = ret\n    return ret\n"}
{"java": "static int calculate_sum ( int a , int N ) { int m = N / a ; int sum = m * ( m + 1 ) / 2 ; int ans = a * sum ; return ans ; }", "python": "def calculate_sum ( a , N ) :\n    m = N / a\n    sum = m * ( m + 1 ) / 2\n    ans = a * sum\n    print ( \" Sum \u2581 of \u2581 multiples \u2581 of \u2581 \" , a , \" \u2581 up \u2581 to \u2581 \" , N , \" \u2581 = \u2581 \" , ans )\n"}
{"java": "static int nthTerm ( int n ) { int d = 2 , a1 = 0 ; int An = a1 + ( n - 1 ) * d ; return ( int ) Math . pow ( An , 3 ) ; }", "python": "def term ( n ) :\n    d = 2\n    a1 = 0\n    An = a1 + ( n - 1 ) * d\n    An = An ** 3\n    return An ;\n"}
{"java": "static public void debug ( Object ... o ) { System . out . println ( Arrays . deepToString ( o ) ) ; }", "python": "def Com ( a , b ) :\n    list_a = list ( a )\n    list_b = list ( b )\n    list_a . reverse ( )\n    list_b . reverse ( )\n    while ' * ' in list_a :\n        list_a . remove ( ' * ' )\n    ans = True\n    for i in range ( len ( list_a ) ) :\n        if list_a [ i ] != list_b [ i ] :\n            ans = False\n            break\n    return ans\n"}
{"java": "public static void cal_IST ( int h , double r ) { double IST = ( h * r * 1.0 ) / 360 ; int int_IST = ( int ) IST ; int float_IST = ( int ) Math . ceil ( ( int ) ( ( IST - int_IST ) * 60 ) ) ; System . out . println ( int_IST + \" : \" + float_IST ) ; }", "python": "def cal_IST ( h , r ) :\n    IST = round ( ( h * r * 1.0 ) / 360 , 3 ) ;\n    int_IST = int ( IST ) ;\n    float_IST = ceil ( ( IST - int_IST ) * 60 ) ;\n    print ( int_IST , \" : \" , float_IST ) ;\n"}
{"java": "static void result ( long n , long k , long t ) { if ( t <= k ) System . out . println ( t ) ; else if ( t <= n ) System . out . println ( k ) ; else { long temp = t - n ; temp = k - temp ; System . out . println ( temp ) ; } }", "python": "def result ( n , k , t ) :\n    if ( t <= k ) :\n        print ( t )\n    elif ( t <= n ) :\n        print ( k )\n    else :\n        temp = t - n\n        temp = k - temp\n        print ( temp )\n"}
{"java": "public static boolean check ( int a ) { if ( a % 2 == 0 ) return true ; else return false ; }", "python": "def isDifferent ( val , val2 , val3 ) :\n    if val % 2 == 0 and ( val2 % 2 != 0 and val3 % 2 != 0 ) : return True\n    elif val % 2 != 0 and ( val2 % 2 == 0 and val3 % 2 == 0 ) : return True\n    return False\n"}
{"java": "public static int MDAS_Factorial ( int N ) { if ( N <= 2 ) return N ; if ( N <= 4 ) return ( N + 3 ) ; if ( ( N - 4 ) % 4 == 0 ) return ( N + 1 ) ; else if ( ( N - 4 ) % 4 <= 2 ) return ( N + 2 ) ; else return ( N - 1 ) ; }", "python": "def MDAS_Factorial ( N ) :\n    if N <= 2 :\n        return N\n    if N <= 4 :\n        return N + 3\n    if ( N - 4 ) % 4 == 0 :\n        return N + 1\n    elif ( N - 4 ) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"java": "static int findMaxXOR ( Vector < Integer > arr , int n ) { Vector < Integer > stack = new Vector < Integer > ( ) ; int res = 0 , l = 0 , i ; for ( i = 0 ; i < n ; i ++ ) { while ( ! stack . isEmpty ( ) && stack . get ( stack . size ( ) - 1 ) < arr . get ( i ) ) { stack . remove ( stack . size ( ) - 1 ) ; l -- ; } stack . add ( arr . get ( i ) ) ; l ++ ; if ( l > 1 ) { res = Math . max ( res , stack . get ( l - 1 ) ^ stack . get ( l - 2 ) ) ; } } return res ; }", "python": "def maxXOR ( arr ) :\n    stack = deque ( )\n    l = 0\n    res1 = 0\n    for i in arr :\n        while stack and stack [ - 1 ] < i :\n            stack . pop ( )\n            l -= 1\n        stack . append ( i )\n        l += 1\n        if l > 1 :\n            res1 = max ( res1 , stack [ - 1 ] ^ stack [ - 2 ] )\n    res2 = 0\n    stack . clear ( )\n    l = 0\n    arr . reverse ( )\n    for i in arr :\n        while stack and stack [ - 1 ] < i :\n            stack . pop ( )\n            l -= 1\n        stack . append ( i )\n        l += 1\n        if l > 1 :\n            res2 = max ( res2 , stack [ - 1 ] ^ stack [ - 2 ] )\n    return max ( res1 , res2 )\n"}
{"java": "static int checkArray ( int [ ] arr , int n ) { return ( ( arr [ 0 ] % 2 ) > 0 && ( arr [ n - 1 ] % 2 ) > 0 && ( n % 2 ) > 0 ) ? 1 : 0 ; }", "python": "def checkArray ( arr , n ) :\n    return ( ( arr [ 0 ] % 2 ) and ( arr [ n - 1 ] % 2 ) and ( n % 2 ) )\n"}
{"java": "static int countSum ( int N , int L , int R ) { if ( L > R ) { return 0 ; } if ( N == 1 ) { return R - L + 1 ; } if ( N > 1 ) { return ( N - 2 ) * ( R - L ) + 1 ; } return 0 ; }", "python": "def countSum ( N , L , R ) :\n    if ( L > R ) :\n        return 0 ;\n    if ( N == 1 ) :\n        return R - L + 1 ;\n    if ( N > 1 ) :\n        return ( N - 2 ) * ( R - L ) + 1 ;\n    return 0 ;\n"}
{"java": "static void findSubsequence ( int [ ] arr , int n , int k ) { HashMap < Integer , Integer > M = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( M . containsKey ( arr [ i ] ) ) M . put ( arr [ i ] , M . get ( arr [ i ] ) + 1 ) ; else M . put ( arr [ i ] , 1 ) ; } int [ ] numCount = new int [ k + 1 ] ; for ( int i = 0 ; i <= k ; ++ i ) numCount [ i ] = 0 ; Iterator < HashMap . Entry < Integer , Integer > > itr = M . entrySet ( ) . iterator ( ) ; while ( itr . hasNext ( ) ) { HashMap . Entry < Integer , Integer > entry = itr . next ( ) ; if ( entry . getKey ( ) <= k ) { for ( int i = 1 ; ; ++ i ) { if ( entry . getKey ( ) * i > k ) break ; numCount [ entry . getKey ( ) * i ] += entry . getValue ( ) ; } } else break ; } int lcm = 0 , length = 0 ; for ( int i = 1 ; i <= k ; ++ i ) { if ( numCount [ i ] > length ) { length = numCount [ i ] ; lcm = i ; } } if ( lcm == 0 ) System . out . println ( - 1 ) ; else { System . out . println ( \" LCM \u2581 = \u2581 \" + lcm + \" \u2581 Length \u2581 = \u2581 \" + length ) ; System . out . print ( \" Indexes \u2581 = \u2581 \" ) ; for ( int i = 0 ; i < n ; ++ i ) if ( lcm % arr [ i ] == 0 ) System . out . print ( i + \" \u2581 \" ) ; } }", "python": "def findSubsequence ( arr , n , k ) :\n    M = defaultdict ( lambda : 0 )\n    for i in range ( 0 , n ) :\n        M [ arr [ i ] ] += 1\n    numCount = [ 0 ] * ( k + 1 )\n    for p in M :\n        if p <= k :\n            i = 1\n            while p * i <= k :\n                numCount [ p * i ] += M [ p ]\n                i += 1\n        else :\n            break\n    lcm , length = 0 , 0\n    for i in range ( 1 , k + 1 ) :\n        if numCount [ i ] > length :\n            length = numCount [ i ]\n            lcm = i\n    if lcm == 0 :\n        print ( - 1 )\n    else :\n        print ( \" LCM \u2581 = \u2581 { 0 } , \u2581 Length \u2581 = \u2581 { 1 } \" . format ( lcm , length ) )\n        print ( \" Indexes \u2581 = \u2581 \" , end = \" \" )\n        for i in range ( 0 , n ) :\n            if lcm % arr [ i ] == 0 :\n                print ( i , end = \" \u2581 \" )\n"}
{"java": "static int findMin ( int arr [ ] , int n ) { int m = 0 ; for ( int i = 0 ; i < n ; i ++ ) m = Math . max ( m , arr [ i ] ) ; int freq [ ] = new int [ m + 2 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; for ( int i = 1 ; i <= m + 1 ; i ++ ) { int j = i ; int cnt = 0 ; while ( j <= m ) { cnt += freq [ j ] ; j += i ; } if ( cnt == 0 ) return i ; } return m + 1 ; }", "python": "def findMin ( arr , n ) :\n    m = 0\n    for i in range ( n ) :\n        m = max ( m , arr [ i ] )\n    freq = [ 0 ] * ( m + 2 )\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    for i in range ( 1 , m + 2 ) :\n        j = i\n        cnt = 0\n        while ( j <= m ) :\n            cnt += freq [ j ]\n            j += i\n        if ( not cnt ) :\n            return i\n    return m + 1\n"}
{"java": "private static int testcase ( final Scanner sc ) { final int r = sc . nextInt ( ) ; final int c = sc . nextInt ( ) ; final int w = sc . nextInt ( ) ; return ( c / w ) * r + ( w - 1 ) + ( c % w == 0 ? 0 : 1 ) ; }", "python": "def solve ( test ) :\n    r , c , w = map ( int , input ( ) . split ( ) )\n    ans = ( c / w + w - 1 ) if c % w == 0 else ( c / w + w )\n    ans += ( r - 1 ) * c / w\n    print ( \" Case \u2581 # % d : \u2581 % d \" % ( test , ans ) )\n"}
{"java": "static void numbersWith3Divisors ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } System . out . println ( \" Numbers \u2581 with \u2581 3 \u2581 divisors \u2581 : \u2581 \" ) ; for ( int i = 0 ; i * i <= n ; i ++ ) if ( prime [ i ] ) System . out . print ( i * i + \" \u2581 \" ) ; }", "python": "def numbersWith3Divisors ( n ) :\n    prime = [ True ] * ( n + 1 ) ;\n    prime [ 0 ] = prime [ 1 ] = False ;\n    p = 2 ;\n    while ( p * p <= n ) :\n        if ( prime [ p ] == True ) :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = False ;\n        p += 1 ;\n    print ( \" Numbers \u2581 with \u2581 3 \u2581 divisors \u2581 : \" ) ;\n    i = 0 ;\n    while ( i * i <= n ) :\n        if ( prime [ i ] ) :\n            print ( i * i , end = \" \u2581 \" ) ;\n        i += 1 ;\n"}
{"java": "static void performQueries ( String str , int q , int type [ ] , char ch [ ] , int freq [ ] ) { int n = str . length ( ) ; int [ ] [ ] L = new int [ MAX ] [ n ] ; int [ ] [ ] F = new int [ MAX ] [ n ] ; int [ ] cnt = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { int k = str . charAt ( i ) - ' a ' ; cnt [ k ] ++ ; for ( int j = 0 ; j < MAX ; j ++ ) { if ( k == j ) { L [ j ] [ cnt [ j ] ] = i ; F [ j ] [ cnt [ j ] ] = i ; } else L [ j ] [ cnt [ j ] ] = L [ j ] [ cnt [ j ] ] + 1 ; } } for ( int i = 0 ; i < q ; i ++ ) { if ( type [ i ] == 1 ) { System . out . print ( L [ ch [ i ] - ' a ' ] [ freq [ i ] ] ) ; } else { System . out . print ( F [ ch [ i ] - ' a ' ] [ freq [ i ] ] ) ; } System . out . print ( \" \\n \" ) ; } }", "python": "def performQueries ( string , q , type_arr , ch , freq ) :\n    n = len ( string ) ;\n    L = np . zeros ( ( MAX , n ) ) ;\n    F = np . zeros ( ( MAX , n ) ) ;\n    cnt = [ 0 ] * MAX ;\n    for i in range ( n ) :\n        k = ord ( string [ i ] ) - ord ( ' a ' ) ;\n        cnt [ k ] += 1 ;\n        for j in range ( MAX ) :\n            if ( k == j ) :\n                L [ j ] [ cnt [ j ] ] = i ;\n                F [ j ] [ cnt [ j ] ] = i ;\n            else :\n                L [ j ] [ cnt [ j ] ] = L [ j ] [ cnt [ j ] ] + 1 ;\n    for i in range ( q ) :\n        if ( type_arr [ i ] == 1 ) :\n            print ( L [ ord ( ch [ i ] ) - ord ( ' a ' ) ] [ freq [ i ] ] , end = \" \" ) ;\n        else :\n            print ( F [ ord ( ch [ i ] ) - ord ( ' a ' ) ] [ freq [ i ] ] , end = \" \" ) ;\n        print ( )\n"}
{"java": "static void specialNumber ( int n ) { if ( n < 10 || n > 99 ) System . out . println ( \" Invalid \u2581 Input ! \u2581 \" + \" Number \u2581 should \u2581 have \u2581 \" + \"2 \u2581 digits \u2581 only \" ) ; else { int first = n / 10 ; int last = n % 10 ; int sum = first + last ; int pro = first * last ; if ( ( sum + pro ) == n ) { System . out . println ( n + \" \u2581 is \u2581 a \u2581 Special \" + \" \u2581 Two - Digit \u2581 Number \" ) ; } else { System . out . println ( n + \" \u2581 is \u2581 Not \u2581 a \u2581 Special \" + \" \u2581 Two - Digit \u2581 Number \" ) ; } } }", "python": "def specialNumber ( n ) :\n    if ( n < 10 or n > 99 ) :\n        print ( \" Invalid \u2581 Input ! \u2581 Number \" , \" \u2581 should \u2581 have \u2581 2 \u2581 digits \u2581 only \" )\n    else :\n        first = n // 10\n        last = n % 10\n        sum = first + last\n        pro = first * last\n        if ( ( sum + pro ) == n ) :\n            print ( n , \" \u2581 is \u2581 a \u2581 Special \u2581 \" , \" Two - Digit \u2581 Number \" )\n        else :\n            print ( n , \" \u2581 is \u2581 Not \u2581 a \u2581 \" , \" Special \u2581 Two - Digit \u2581 Number \" )\n"}
{"java": "static String smallestPoss ( String s , int n ) { String ans = \" \" ; int arr [ ] = new int [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - 48 ] ++ ; } for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < arr [ i ] ; j ++ ) ans = ans + String . valueOf ( i ) ; } return ans ; }", "python": "def smallestPoss ( s , n ) :\n    ans = \" \" ;\n    arr = [ 0 ] * 10 ;\n    for i in range ( n ) :\n        arr [ ord ( s [ i ] ) - 48 ] += 1 ;\n    for i in range ( 10 ) :\n        for j in range ( arr [ i ] ) :\n            ans = ans + str ( i ) ;\n    return ans ;\n"}
{"java": "static int totalBoxesRemoved ( int arr [ ] , int n ) { int count = 0 ; int prev = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > prev ) { count += ( arr [ i ] - prev ) ; arr [ i ] = prev ; prev = arr [ i ] ; } else { prev = arr [ i ] ; } } return count ; }", "python": "def totalBoxesRemoved ( arr , n ) :\n    count = 0\n    prev = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > prev ) :\n            count += ( arr [ i ] - prev )\n            arr [ i ] = prev\n            prev = arr [ i ]\n        else :\n            prev = arr [ i ]\n    return count\n"}
{"java": "static void converthenumber ( int n ) { String s = Integer . toString ( n ) ; String res = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' || s . charAt ( i ) == '3' || s . charAt ( i ) == '5' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) res += s . charAt ( i ) ; if ( res . length ( ) == 2 ) break ; } if ( res . length ( ) == 2 ) System . out . println ( res ) ; else System . out . println ( - 1 ) ; }", "python": "def converthenumber ( n ) :\n    s = str ( n ) ;\n    res = \" \" ;\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == '1' or s [ i ] == '3' or s [ i ] == '5' or s [ i ] == '7' or s [ i ] == '9' ) :\n            res += s [ i ] ;\n        if ( len ( res ) == 2 ) :\n            break ;\n    if ( len ( res ) == 2 ) :\n        print ( res ) ;\n    else :\n        print ( \" - 1\" ) ;\n"}
{"java": "public static int averageValue ( String s ) { int sum_char = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum_char += ( int ) s . charAt ( i ) ; } return sum_char / s . length ( ) ; }", "python": "def averageValue ( s ) :\n    sum_char = 0\n    for i in range ( len ( s ) ) :\n        sum_char += ord ( s [ i ] )\n    return sum_char // len ( s )\n"}
{"java": "static float Area ( float r ) { if ( r < 0 ) return - 1 ; float x = ( 2 * r ) / ( float ) ( Math . sqrt ( 5 ) ) ; float A = 0.70477f * ( float ) ( Math . pow ( x , 2 ) ) ; return A ; }", "python": "def Area ( r ) :\n    if ( r < 0 ) :\n        return - 1\n    x = ( 2 * r ) / mt . sqrt ( 5 )\n    A = 0.70477 * pow ( x , 2 )\n    return A\n"}
{"java": "static void findNumbers ( int arr [ ] , int n ) { int num [ ] = new int [ n ] ; int b_minus_a = arr [ n - 1 ] - arr [ 1 ] ; num [ 1 ] = ( arr [ 0 ] + b_minus_a ) / 2 ; num [ 0 ] = arr [ 0 ] - num [ 1 ] ; for ( int i = 1 ; i <= ( n - 2 ) ; i ++ ) num [ i + 1 ] = arr [ i ] - num [ 0 ] ; System . out . print ( \" Numbers \u2581 are : \u2581 \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( num [ i ] + \" \u2581 \" ) ; }", "python": "def findNumbers ( arr , n ) :\n    num = [ 0 for i in range ( n ) ]\n    b_minus_a = arr [ n - 1 ] - arr [ 1 ]\n    num [ 1 ] = ( arr [ 0 ] + b_minus_a ) // 2\n    num [ 0 ] = arr [ 0 ] - num [ 1 ]\n    for i in range ( 1 , ( n - 2 ) + 1 ) :\n        num [ i + 1 ] = arr [ i ] - num [ 0 ]\n    print ( \" Numbers \u2581 are : \u2581 \" , end = \" \" )\n    for i in range ( n ) :\n        print ( num [ i ] , end = \" , \u2581 \" )\n"}
{"java": "static int bankNotes ( int A , int B , int S , int N ) { int numerator = S - ( B * N ) ; int denominator = A - B ; if ( numerator % denominator == 0 ) return ( numerator / denominator ) ; return - 1 ; }", "python": "def bankNotes ( A , B , S , N ) :\n    numerator = S - ( B * N )\n    denominator = A - B\n    if ( numerator % denominator == 0 ) :\n        return ( numerator // denominator )\n    return - 1\n"}
{"java": "static int NoofWays ( int face , int throwsVal , int sum ) { if ( sum == 0 && throwsVal == 0 ) { return 1 ; } if ( sum < 0 || throwsVal == 0 ) { return 0 ; } if ( dp [ throwsVal ] [ sum ] != - 1 ) { return dp [ throwsVal ] [ sum ] ; } int ans = 0 ; for ( int i = 1 ; i <= face ; i ++ ) { ans += NoofWays ( face , throwsVal - 1 , sum - i ) ; } return dp [ throwsVal ] [ sum ] = ans ; }", "python": "def NoofWays ( face , throws , sum ) :\n    if ( sum == 0 and throws == 0 ) :\n        return 1 ;\n    if ( sum < 0 or throws == 0 ) :\n        return 0 ;\n    if ( dp [ throws ] [ sum ] != - 1 ) :\n        return dp [ throws ] [ sum ] ;\n    ans = 0 ;\n    for i in range ( 1 , face + 1 ) :\n        ans += NoofWays ( face , throws - 1 , sum - i ) ;\n    dp [ throws ] [ sum ] = ans ;\n    return ans ;\n"}
{"java": "static int CountTrailingZeros ( int n ) { String bit = Integer . toBinaryString ( n ) ; StringBuilder bit1 = new StringBuilder ( ) ; bit1 . append ( bit ) ; bit1 = bit1 . reverse ( ) ; int zero = 0 ; for ( int i = 0 ; i < 64 ; i ++ ) { if ( bit1 . charAt ( i ) == '0' ) zero ++ ; else break ; } return zero ; }", "python": "def CountTrailingZeros ( n ) :\n    bit = bin ( n ) [ 2 : ]\n    bit = bit [ : : - 1 ]\n    zero = 0 ;\n    for i in range ( len ( bit ) ) :\n        if ( bit [ i ] == '0' ) :\n            zero += 1\n        else :\n            break\n    return zero\n"}
{"java": "public static int Xor_Sum ( int [ ] arr , int n ) { int sum = 0 , index = - 1 ; int left_xor = 0 , right_xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { left_xor = left_xor ^ arr [ i ] ; right_xor = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { right_xor = right_xor ^ arr [ j ] ; } if ( left_xor + right_xor > sum ) { sum = left_xor + right_xor ; index = i ; } } return index + 1 ; }", "python": "def Xor_Sum ( arr , n ) :\n    sum = 0\n    index , left_xor = 0 , 0\n    right_xor = 0\n    for i in range ( n ) :\n        left_xor = left_xor ^ arr [ i ]\n        right_xor = 0\n        for j in range ( i + 1 , n ) :\n            right_xor = right_xor ^ arr [ j ]\n        if ( left_xor + right_xor > sum ) :\n            sum = left_xor + right_xor\n            index = i\n    return index + 1\n"}
{"java": "public static void printSeries ( int n ) { int [ ] nmtr = new int [ ] { 1 , 1 , 1 , 3 } ; int [ ] dntr = new int [ ] { 0 , 4 , 2 , 4 } ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 4 == 0 ) System . out . print ( nmtr [ i % 4 ] + ( i / 4 ) - 1 + \" \u2581 \" ) ; else { System . out . print ( nmtr [ i % 4 ] + ( ( i / 4 ) * dntr [ i % 4 ] ) + \" / \" + dntr [ i % 4 ] + \" \u2581 \" ) ; } } }", "python": "def printSeries ( n ) :\n    nmtr = [ 1 , 1 , 1 , 3 ]\n    dntr = [ 0 , 4 , 2 , 4 ]\n    for i in range ( 1 , n + 1 , 1 ) :\n        if ( i % 4 == 0 ) :\n            print ( nmtr [ i % 4 ] + int ( i / 4 ) - 1 , end = \" \u2581 \" )\n        else :\n            print ( nmtr [ i % 4 ] + ( int ( i / 4 ) * dntr [ i % 4 ] ) , end = \" \" )\n            print ( \" / \" , end = \" \" )\n            print ( dntr [ i % 4 ] , end = \" \u2581 \" )\n"}
{"java": "static int lds ( Integer arr [ ] , int n ) { Integer lds [ ] = new Integer [ n ] ; lds [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { lds [ i ] = 1 ; for ( int j = 0 ; j < i ; j ++ ) if ( lds [ j ] != 0 && arr [ i ] % arr [ j ] == 0 ) lds [ i ] = Math . max ( lds [ i ] , lds [ j ] + 1 ) ; } int max = ( int ) Collections . max ( Arrays . asList ( lds ) ) ; return max ; }", "python": "def lds ( arr , n ) :\n    lds = [ 0 for i in range ( n ) ]\n    lds [ 0 ] = 1\n    for i in range ( n ) :\n        lds [ i ] = 1\n        for j in range ( i ) :\n            if ( lds [ j ] != 0 and arr [ i ] % arr [ j ] == 0 ) :\n                lds [ i ] = max ( lds [ i ] , lds [ j ] + 1 )\n    return max ( lds )\n"}
{"java": "static int equalize ( int arr [ ] , int n , int k ) { int min_ele = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; boolean flag = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! ( ( arr [ i ] + k ) >= min_ele + k && min_ele + k >= ( arr [ i ] - k ) ) ) { flag = false ; break ; } } if ( flag ) { return min_ele + k ; } else return - 1 ; }", "python": "def equalize ( arr , n , k ) :\n    min_ele = min ( arr ) ;\n    flag = True ;\n    for i in range ( n ) :\n        if ( not ( ( arr [ i ] + k ) >= ( min_ele + k ) and ( min_ele + k ) >= ( arr [ i ] - k ) ) ) :\n            flag = False ;\n            break ;\n    if ( flag ) :\n        return min_ele + k ;\n    else :\n        return - 1 ;\n"}
{"java": "static int numLen ( int K ) { if ( K % 2 == 0 || K % 5 == 0 ) { return - 1 ; } int number = 0 ; int len = 1 ; for ( len = 1 ; len <= K ; len ++ ) { number = number * 10 + 1 ; if ( ( number % K == 0 ) ) { return len ; } } return - 1 ; }", "python": "def numLen ( K ) :\n    if ( K % 2 == 0 or K % 5 == 0 ) :\n        return - 1 ;\n    number = 0 ;\n    len = 1 ;\n    for len in range ( 1 , K + 1 ) :\n        number = number * 10 + 1 ;\n        if ( ( number % K == 0 ) ) :\n            return len ;\n    return - 1 ;\n"}
{"java": "public static int numLen ( int K ) { if ( K % 2 == 0 || K % 5 == 0 ) return - 1 ; int number = 0 ; int len = 1 ; for ( len = 1 ; len <= K ; len ++ ) { number = ( number * 10 + 1 ) % K ; if ( number == 0 ) return len ; } return - 1 ; }", "python": "def numLen ( K ) :\n    if ( K % 2 == 0 or K % 5 == 0 ) :\n        return - 1\n    number = 0\n    len = 1\n    for len in range ( 1 , K + 1 ) :\n        number = ( number * 10 + 1 ) % K\n        if number == 0 :\n            return len\n    return - 1\n"}
{"java": "static int changeTheArray ( int arr [ ] , int n ) { int minEle = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; int maxEle = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int minOperations = Integer . MAX_VALUE ; for ( int num = minEle ; num <= maxEle ; num ++ ) { int operations = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != num ) { operations += ( Math . abs ( num - arr [ i ] ) - 1 ) ; } } minOperations = Math . min ( minOperations , operations ) ; } return minOperations ; }", "python": "def changeTheArray ( arr , n ) :\n    minEle = min ( arr )\n    maxEle = max ( arr )\n    minOperations = sys . maxsize\n    for num in range ( minEle , maxEle + 1 ) :\n        operations = 0\n        for i in range ( n ) :\n            if arr [ i ] != num :\n                operations += ( abs ( num - arr [ i ] ) - 1 )\n        minOperations = min ( minOperations , operations )\n    return minOperations\n"}
{"java": "static int calSum ( int n ) { int a = 3 , b = 0 , c = 2 ; if ( n == 0 ) return 3 ; if ( n == 1 ) return 3 ; if ( n == 2 ) return 5 ; int sum = 5 ; while ( n > 2 ) { int d = a + b ; sum += d ; a = b ; b = c ; c = d ; n -- ; } return sum ; }", "python": "def calSum ( n ) :\n    a = 3\n    b = 0\n    c = 2\n    if ( n == 0 ) :\n        return 3\n    if ( n == 1 ) :\n        return 3\n    if ( n == 2 ) :\n        return 5\n    sum = 5\n    while ( n > 2 ) :\n        d = a + b\n        sum = sum + d\n        a = b\n        b = c\n        c = d\n        n = n - 1\n    return sum\n"}
{"java": "static float sqroot ( float s ) { int pSq = 0 ; int N = 0 ; for ( int i = ( int ) ( s ) ; i > 0 ; i -- ) { for ( int j = 1 ; j < i ; j ++ ) { if ( j * j == i ) { pSq = i ; N = j ; break ; } } if ( pSq > 0 ) break ; } float d = s - pSq ; float P = d / ( 2.0f * N ) ; float A = N + P ; float sqrt_of_s = A - ( ( P * P ) / ( 2.0f * A ) ) ; return sqrt_of_s ; }", "python": "def sqroot ( s ) :\n    pSq = 0 ;\n    N = 0 ;\n    for i in range ( int ( s ) , 0 , - 1 ) :\n        for j in range ( 1 , i ) :\n            if ( j * j == i ) :\n                pSq = i ;\n                N = j ;\n                break ;\n        if ( pSq > 0 ) :\n            break ;\n    d = s - pSq ;\n    P = d / ( 2.0 * N ) ;\n    A = N + P ;\n    sqrt_of_s = A - ( ( P * P ) / ( 2.0 * A ) ) ;\n    return sqrt_of_s ;\n"}
{"java": "static boolean isPossible ( int n ) { int fac [ ] = new int [ 10 ] ; fac [ 0 ] = fac [ 1 ] = 1 ; for ( int i = 2 ; i < 10 ; i ++ ) fac [ i ] = fac [ i - 1 ] * i ; int sum = 0 ; int x = n ; while ( x != 0 ) { sum += fac [ x % 10 ] ; x /= 10 ; } if ( sum % n == 0 ) return true ; return false ; }", "python": "def isPossible ( n ) :\n    fac = [ 0 for i in range ( 10 ) ]\n    fac [ 0 ] = 1\n    fac [ 1 ] = 1\n    for i in range ( 2 , 10 , 1 ) :\n        fac [ i ] = fac [ i - 1 ] * i\n    sum = 0\n    x = n\n    while ( x ) :\n        sum += fac [ x % 10 ]\n        x = int ( x / 10 )\n    if ( sum % n == 0 ) :\n        return True\n    return False\n"}
{"java": "static float polyarea ( float n , float a ) { if ( a < 0 && n < 0 ) return - 1 ; float A = ( a * a * n ) / ( float ) ( 4 * Math . tan ( ( 180 / n ) * 3.14159 / 180 ) ) ; return A ; }", "python": "def polyarea ( n , a ) :\n    if ( a < 0 and n < 0 ) :\n        return - 1\n    A = ( a * a * n ) / ( 4 * tan ( ( 180 / n ) * 3.14159 / 180 ) )\n    return A\n"}
{"java": "static double getProbability ( double p , double q ) { p /= 100 ; q /= 100 ; double probability = ( p * p + q * q ) / ( p + q ) ; return probability ; }", "python": "def getProbability ( p , q ) :\n    p /= 100\n    q /= 100\n    probability = ( p * p + q * q ) / ( p + q )\n    return probability\n"}
{"java": "static int XorAscii ( String str , int len ) { int ans = ( str . charAt ( 0 ) ) ; for ( int i = 1 ; i < len ; i ++ ) { ans = ( ans ^ ( ( str . charAt ( i ) ) ) ) ; } return ans ; }", "python": "def XorAscii ( str1 , len1 ) :\n    ans = ord ( str1 [ 0 ] )\n    for i in range ( 1 , len1 ) :\n        ans = ( ans ^ ( ord ( str1 [ i ] ) ) )\n    return ans\n"}
{"java": "static boolean checkFibinnary ( int n ) { int prev_last = 0 ; while ( n != 0 ) { if ( ( n & 1 ) != 0 && prev_last != 0 ) return false ; prev_last = n & 1 ; n >>= 1 ; } return true ; }", "python": "def checkFibinnary ( n ) :\n    prev_last = 0\n    while ( n ) :\n        if ( ( n & 1 ) and prev_last ) :\n            return False\n        prev_last = n & 1\n        n >>= 1\n    return True\n"}
{"java": "static boolean areVowelsInOrder ( String s ) { int n = s . length ( ) ; char c = ( char ) 64 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' e ' || s . charAt ( i ) == ' i ' || s . charAt ( i ) == ' o ' || s . charAt ( i ) == ' u ' ) { if ( s . charAt ( i ) < c ) return false ; else { c = s . charAt ( i ) ; } } } return true ; }", "python": "def areVowelsInOrder ( s ) :\n    n = len ( s )\n    c = chr ( 64 )\n    for i in range ( 1 , n ) :\n        if ( s [ i ] == ' a ' or s [ i ] == ' e ' or s [ i ] == ' i ' or s [ i ] == ' o ' or s [ i ] == ' u ' ) :\n            if s [ i ] < c :\n                return False\n            else :\n                c = s [ i ]\n    return True\n"}
{"java": "static void smallestPermute ( int n ) { char res [ ] = new char [ n + 1 ] ; if ( n % 2 == 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) res [ i ] = ( char ) ( 48 + i + 2 ) ; else res [ i ] = ( char ) ( 48 + i ) ; } } else { for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( i % 2 == 0 ) res [ i ] = ( char ) ( 48 + i + 2 ) ; else res [ i ] = ( char ) ( 48 + i ) ; } res [ n - 1 ] = ( char ) ( 48 + n - 2 ) ; res [ n - 2 ] = ( char ) ( 48 + n ) ; res [ n - 3 ] = ( char ) ( 48 + n - 1 ) ; } res [ n ] = ' \\ 0' ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( res [ i ] ) ; } }", "python": "def smallestPermute ( n ) :\n    res = [ \" \" ] * ( n + 1 )\n    if ( n % 2 == 0 ) :\n        for i in range ( n ) :\n            if ( i % 2 == 0 ) :\n                res [ i ] = chr ( 48 + i + 2 )\n            else :\n                res [ i ] = chr ( 48 + i )\n    else :\n        for i in range ( n - 2 ) :\n            if ( i % 2 == 0 ) :\n                res [ i ] = chr ( 48 + i + 2 )\n            else :\n                res [ i ] = chr ( 48 + i )\n        res [ n - 1 ] = chr ( 48 + n - 2 )\n        res [ n - 2 ] = chr ( 48 + n )\n        res [ n - 3 ] = chr ( 48 + n - 1 )\n    res = ' ' . join ( res )\n    return res\n"}
{"java": "public static int counLastDigitK ( int low , int high , int k ) { int count = ( high - low ) / 10 ; if ( high % 10 >= k ) count ++ ; if ( low % 10 > k ) count -- ; return count ; }", "python": "def counLastDigitK ( low , high , k ) :\n    count = ( high - low ) / 10\n    if ( high % 10 >= k ) :\n        count += 1\n    if ( low % 10 > k ) :\n        count -= 1\n    return int ( count )\n"}
{"java": "static int minAbsDiff ( int n ) { int left = 1 << ( ( int ) Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ) ; int right = left * 2 ; return Math . min ( ( n - left ) , ( right - n ) ) ; }", "python": "def minAbsDiff ( n ) :\n    left = 1 << ( int ) ( math . floor ( math . log2 ( n ) ) )\n    right = left * 2\n    return min ( ( n - left ) , ( right - n ) )\n"}
{"java": "static double ReuleauxArea ( double r ) { if ( r < 0 ) return - 1 ; double A = 0.70477 * 2 * Math . pow ( r , 2 ) ; return A ; }", "python": "def ReuleauxArea ( r ) :\n    if ( r < 0 ) :\n        return - 1\n    A = 0.70477 * 2 * pow ( r , 2 )\n    return A\n"}
{"java": "static String newString ( String s ) { int l = s . length ( ) ; int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < l ; i ++ ) { freq [ s . charAt ( i ) - ' a ' ] += 1 ; } String ans = \" \" ; for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 0 ; j < freq [ i ] ; j ++ ) { ans += ( char ) ( 97 + i ) ; } } return ans ; }", "python": "def newString ( s ) :\n    l = len ( s )\n    freq = [ 0 ] * ( 26 )\n    for i in range ( 0 , l ) :\n        freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1\n    ans = \" \"\n    for i in range ( 0 , 26 ) :\n        for j in range ( 0 , freq [ i ] ) :\n            ans += chr ( 97 + i )\n    return ans\n"}
{"java": "static int search ( int ar [ ] , int size ) { int a = 0 , b = size - 1 ; int mid = 0 ; while ( ( b - a ) > 1 ) { mid = ( a + b ) / 2 ; if ( ( ar [ a ] - a ) != ( ar [ mid ] - mid ) ) b = mid ; else if ( ( ar [ b ] - b ) != ( ar [ mid ] - mid ) ) a = mid ; } return ( ar [ mid ] + 1 ) ; }", "python": "def search ( ar , size ) :\n    a = 0\n    b = size - 1\n    mid = 0\n    while b > a + 1 :\n        mid = ( a + b ) // 2\n        if ( ar [ a ] - a ) != ( ar [ mid ] - mid ) :\n            b = mid\n        elif ( ar [ b ] - b ) != ( ar [ mid ] - mid ) :\n            a = mid\n    return ar [ mid ] + 1\n"}
{"java": "static int minSteps ( String str ) { int count = 0 ; for ( int i = 0 ; i < str . length ( ) - 2 ; i ++ ) { if ( ( ( int ) str . charAt ( i ) ) == '0' ) { if ( str . charAt ( i + 1 ) == '1' ) { if ( str . charAt ( i + 2 ) == '0' ) { count ++ ; i += 2 ; } } } } return count ; }", "python": "def minSteps ( str ) :\n    count = 0\n    i = 0\n    while i < len ( str ) - 2 :\n        if str [ i ] == '0' :\n            if ( str [ i + 1 ] == '1' ) :\n                if ( str [ i + 2 ] == '0' ) :\n                    count = count + 1\n                    i = i + 2\n        i = i + 1\n    return count\n"}
{"java": "public static int firstEven ( int arr [ ] , int n ) { HashMap < Integer , Boolean > map = new HashMap < Integer , Boolean > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( arr [ i ] ) == null ) map . put ( arr [ i ] , false ) ; else { boolean val = map . get ( arr [ i ] ) ; if ( val == true ) map . put ( arr [ i ] , false ) ; else map . put ( arr [ i ] , true ) ; } } int j = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( map . get ( arr [ j ] ) == true ) break ; } return arr [ j ] ; }", "python": "def firstEven ( arr , n ) :\n    map1 = { }\n    for i in range ( 0 , n ) :\n        if arr [ i ] not in map1 :\n            map1 [ arr [ i ] ] = False\n        else :\n            map1 [ arr [ i ] ] = not map1 [ arr [ i ] ]\n    for j in range ( 0 , n ) :\n        if map1 [ arr [ j ] ] == True :\n            break\n    return arr [ j ]\n"}
{"java": "public static int find ( int cur_v , int cur_t , int [ ] time , int [ ] parent ) { if ( time [ cur_v ] < cur_t ) return cur_v ; if ( parent [ cur_v ] == cur_v ) return cur_v ; return parent [ cur_v ] = find ( parent [ cur_v ] , cur_t , time , parent ) ; }", "python": "def solve ( ) :\n    import sys\n    file_input = sys . stdin\n    while True :\n        N , Q = map ( int , file_input . readline ( ) . split ( ) )\n        if N == 0 :\n            break\n        parent = [ None , None ]\n        parent += [ int ( file_input . readline ( ) ) for _ in range ( N - 1 ) ]\n        unmarked = [ True ] * ( N + 1 )\n        unmarked [ 1 ] = False\n        ans = 0\n        for _ in range ( Q ) :\n            line = file_input . readline ( )\n            v = int ( line [ 2 : ] )\n            if line [ 0 ] == ' M ' :\n                unmarked [ v ] = False\n            else :\n                while unmarked [ v ] :\n                    v = parent [ v ]\n                ans += v\n        print ( ans )\n"}
{"java": "static int maxXOR ( int arr [ ] , int n ) { int xorArr = 0 ; for ( int i = 0 ; i < n ; i ++ ) xorArr ^= arr [ i ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans = Math . max ( ans , ( xorArr ^ arr [ i ] ) ) ; return ans ; }", "python": "def maxXOR ( arr , n ) :\n    xorArr = 0\n    for i in range ( n ) :\n        xorArr ^= arr [ i ]\n    ans = 0\n    for i in range ( n ) :\n        ans = max ( ans , ( xorArr ^ arr [ i ] ) )\n    return ans\n"}
{"java": "static boolean isReachable ( int sx , int sy , int dx , int dy ) { if ( sx > dx || sy > dy ) return false ; if ( sx == dx && sy == dy ) return true ; return ( isReachable ( sx + sy , sy , dx , dy ) || isReachable ( sx , sy + sx , dx , dy ) ) ; }", "python": "def isReachable ( sx , sy , dx , dy ) :\n    if ( sx > dx or sy > dy ) :\n        return False\n    if ( sx == dx and sy == dy ) :\n        return True\n    return ( isReachable ( sx + sy , sy , dx , dy ) or isReachable ( sx , sy + sx , dx , dy ) )\n"}
{"java": "static int largestSideLen ( int matrix [ ] [ ] ) { int result = 1 ; for ( int i = 0 ; i < ( n / 2 ) ; i ++ ) { int element = matrix [ i ] [ i ] ; int isSquare = 1 ; for ( int j = i ; j < n - i ; j ++ ) { if ( matrix [ i ] [ j ] != element ) isSquare = 0 ; if ( matrix [ n - i - 1 ] [ j ] != element ) isSquare = 0 ; if ( matrix [ j ] [ i ] != element ) isSquare = 0 ; if ( matrix [ j ] [ n - i - 1 ] != element ) isSquare = 0 ; } if ( isSquare > 0 ) return n - ( 2 * i ) ; } return result ; }", "python": "def largestSideLen ( matrix ) :\n    result = 1\n    for i in range ( int ( n / 2 ) ) :\n        element = matrix [ i ] [ i ]\n        isSquare = 1\n        for j in range ( i , n - i ) :\n            if ( matrix [ i ] [ j ] != element ) :\n                isSquare = 0\n            if ( matrix [ n - i - 1 ] [ j ] != element ) :\n                isSquare = 0\n            if ( matrix [ j ] [ i ] != element ) :\n                isSquare = 0\n            if ( matrix [ j ] [ n - i - 1 ] != element ) :\n                isSquare = 0\n        if ( isSquare ) :\n            return n - 2 * i\n    return result\n"}
{"java": "public static void FindAllElements ( int n , int k ) { int sum = k ; int [ ] A = new int [ k ] ; Arrays . fill ( A , 0 , k , 1 ) ; for ( int i = k - 1 ; i >= 0 ; -- i ) { while ( sum + A [ i ] <= n ) { sum += A [ i ] ; A [ i ] *= 2 ; } } if ( sum != n ) { System . out . print ( \" Impossible \" ) ; } else { for ( int i = 0 ; i < k ; ++ i ) System . out . print ( A [ i ] + \" \u2581 \" ) ; } }", "python": "def FindAllElements ( n , k ) :\n    sum = k\n    A = [ 1 for i in range ( k ) ]\n    i = k - 1\n    while ( i >= 0 ) :\n        while ( sum + A [ i ] <= n ) :\n            sum += A [ i ]\n            A [ i ] *= 2\n        i -= 1\n    if ( sum != n ) :\n        print ( \" Impossible \" )\n    else :\n        for i in range ( 0 , k , 1 ) :\n            print ( A [ i ] , end = ' \u2581 ' )\n"}
{"java": "static int avoidObstacles ( int [ ] obs ) { HashSet < Integer > hs = new HashSet < Integer > ( ) ; int max = obs [ 0 ] ; for ( int i = 0 ; i < obs . length ; i ++ ) { hs . add ( obs [ i ] ) ; max = Math . max ( max , obs [ i ] ) ; } for ( int i = 1 ; i <= max ; i ++ ) { int j ; for ( j = i ; j <= max ; j = j + i ) { if ( hs . contains ( j ) ) break ; } if ( j > max ) return i ; } return max + 1 ; }", "python": "def avoidObstacles ( obs ) :\n    obs = sorted ( obs )\n    jump_dist = 1\n    obstacle_hit = True\n    while ( obstacle_hit ) :\n        obstacle_hit = False\n        jump_dist += 1\n        for i in range ( 0 , len ( obs ) ) :\n            if obs [ i ] % jump_dist == 0 :\n                obstacle_hit = True\n                break\n    return jump_dist\n"}
{"java": "static int areSame ( int A [ ] [ ] , int B [ ] [ ] ) { int i , j ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j < N ; j ++ ) if ( A [ i ] [ j ] != B [ i ] [ j ] ) return 0 ; return 1 ; }", "python": "def areSame ( A , B ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( A [ i ] [ j ] != B [ i ] [ j ] ) :\n                return 0\n    return 1\n"}
{"java": "static int cntWays ( int n ) { if ( n % 2 == 1 ) { return 0 ; } else { return ( n - 2 ) / 4 ; } }", "python": "def cntWays ( n ) :\n    if n % 2 == 1 :\n        return 0\n    else :\n        return ( n - 2 ) // 4\n"}
{"java": "static void printEgyptian ( int nr , int dr ) { if ( dr == 0 || nr == 0 ) { return ; } if ( dr % nr == 0 ) { System . out . print ( \"1 / \" + dr / nr ) ; return ; } if ( nr % dr == 0 ) { System . out . print ( nr / dr ) ; return ; } if ( nr > dr ) { System . out . print ( nr / dr + \" \u2581 + \u2581 \" ) ; printEgyptian ( nr % dr , dr ) ; return ; } int n = dr / nr + 1 ; System . out . print ( \"1 / \" + n + \" \u2581 + \u2581 \" ) ; printEgyptian ( nr * n - dr , dr * n ) ; }", "python": "def egyptianFraction ( nr , dr ) :\n    print ( \" The \u2581 Egyptian \u2581 Fraction \u2581 \" + \" Representation \u2581 of \u2581 { 0 } / {1 } \u2581 is \" . format ( nr , dr ) , end = \" \\n \" )\n    ef = [ ]\n    while nr != 0 :\n        x = math . ceil ( dr / nr )\n        ef . append ( x )\n        nr = x * nr - dr\n        dr = dr * x\n    for i in range ( len ( ef ) ) :\n        if i != len ( ef ) - 1 :\n            print ( \" \u2581 1 / { 0 } \u2581 + \" . format ( ef [ i ] ) , end = \" \u2581 \" )\n        else :\n            print ( \" \u2581 1 / { 0 } \" . format ( ef [ i ] ) , end = \" \u2581 \" )\n"}
{"java": "static int countSubSeq ( int i , int sum , int cnt , int a [ ] , int n ) { if ( i == n ) { if ( sum == 0 && cnt > 0 ) { return 1 ; } else { return 0 ; } } int ans = 0 ; ans += countSubSeq ( i + 1 , sum , cnt , a , n ) ; ans += countSubSeq ( i + 1 , sum + a [ i ] , cnt + 1 , a , n ) ; return ans ; }", "python": "def countSubSeq ( i , Sum , cnt , a , n ) :\n    if ( i == n ) :\n        if ( Sum == 0 and cnt > 0 ) :\n            return 1\n        else :\n            return 0\n    ans = 0\n    ans += countSubSeq ( i + 1 , Sum , cnt , a , n )\n    ans += countSubSeq ( i + 1 , Sum + a [ i ] , cnt + 1 , a , n )\n    return ans\n"}
{"java": "public static long countSubseq ( int [ ] arr , int n ) { HashMap < Integer , Integer > um = new HashMap < > ( ) ; long count = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( um . get ( arr [ i ] ) != null ) { int a = um . get ( arr [ i ] ) ; um . put ( arr [ i ] , ++ a ) ; } else um . put ( arr [ i ] , 1 ) ; } for ( HashMap . Entry < Integer , Integer > entry : um . entrySet ( ) ) { count *= entry . getValue ( ) ; } return count ; }", "python": "def countSubseq ( arr , n ) :\n    um = { i : 0 for i in range ( 8 ) }\n    count = 1\n    for i in range ( n ) :\n        um [ arr [ i ] ] += 1\n    for key , values in um . items ( ) :\n        if ( values > 0 ) :\n            count *= values\n    return count\n"}
{"java": "static int AVLnodes ( int height ) { if ( height == 0 ) return 1 ; else if ( height == 1 ) return 2 ; return ( 1 + AVLnodes ( height - 1 ) + AVLnodes ( height - 2 ) ) ; }", "python": "def AVLnodes ( height ) :\n    if ( height == 0 ) :\n        return 1\n    elif ( height == 1 ) :\n        return 2\n    return ( 1 + AVLnodes ( height - 1 ) + AVLnodes ( height - 2 ) )\n"}
{"java": "static void BubbleSort ( int d [ ] ) { for ( int i = d . length - 1 ; i > 0 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { if ( d [ j ] > d [ j + 1 ] ) { int work ; work = d [ j ] ; d [ j ] = d [ j + 1 ] ; d [ j + 1 ] = work ; } } } }", "python": "def main ( ) :\n    N = input ( )\n    a = list ( map ( int , input ( ) . split ( ) ) )\n    print ( max ( a ) - min ( a ) )\n"}
{"java": "static int steps ( int source , int step , int dest ) { if ( Math . abs ( source ) > ( dest ) ) return Integer . MAX_VALUE ; if ( source == dest ) return step ; int pos = steps ( source + step + 1 , step + 1 , dest ) ; int neg = steps ( source - step - 1 , step + 1 , dest ) ; return Math . min ( pos , neg ) ; }", "python": "def steps ( source , step , dest ) :\n    if ( abs ( source ) > ( dest ) ) :\n        return sys . maxsize\n    if ( source == dest ) :\n        return step\n    pos = steps ( source + step + 1 , step + 1 , dest )\n    neg = steps ( source - step - 1 , step + 1 , dest )\n    return min ( pos , neg )\n"}
{"java": "static String countnndSay ( int n ) { if ( n == 1 ) return \"1\" ; if ( n == 2 ) return \"11\" ; String str = \"11\" ; for ( int i = 3 ; i <= n ; i ++ ) { str += ' $ ' ; int len = str . length ( ) ; int cnt = 1 ; String tmp = \" \" ; char [ ] arr = str . toCharArray ( ) ; for ( int j = 1 ; j < len ; j ++ ) { if ( arr [ j ] != arr [ j - 1 ] ) { tmp += cnt + 0 ; tmp += arr [ j - 1 ] ; cnt = 1 ; } else cnt ++ ; } str = tmp ; } return str ; }", "python": "def countnndSay ( n ) :\n    if ( n == 1 ) :\n        return \"1\"\n    if ( n == 2 ) :\n        return \"11\"\n    s = \"11\"\n    for i in range ( 3 , n + 1 ) :\n        s += ' $ '\n        l = len ( s )\n        cnt = 1\n        tmp = \" \"\n        for j in range ( 1 , l ) :\n            if ( s [ j ] != s [ j - 1 ] ) :\n                tmp += str ( cnt + 0 )\n                tmp += s [ j - 1 ]\n                cnt = 1\n            else :\n                cnt += 1\n        s = tmp\n    return s ;\n"}
{"java": "static int maxLength ( int arr [ ] , int N ) { int product = 1 , len = 0 ; for ( int i = 0 ; i < N ; i ++ ) { product *= arr [ i ] ; } if ( product >= 0 ) { return N ; } for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] < 0 ) { len = Math . max ( len , Math . max ( N - i - 1 , i ) ) ; } } return len ; }", "python": "def maxLength ( arr , N ) :\n    product = 1\n    Len = 0\n    for i in arr :\n        product *= i\n    if ( product >= 0 ) :\n        return N\n    for i in range ( N ) :\n        if ( arr [ i ] < 0 ) :\n            Len = max ( Len , max ( N - i - 1 , i ) )\n    return Len\n"}
{"java": "static float normal ( float m , float n ) { float N = ( float ) ( ( Math . abs ( m ) * Math . abs ( n ) ) / Math . sqrt ( ( Math . abs ( m ) * Math . abs ( m ) ) + ( Math . abs ( n ) * Math . abs ( n ) ) ) ) ; return N ; }", "python": "def normal ( m , n ) :\n    N = ( ( abs ( m ) * abs ( n ) ) / math . sqrt ( ( abs ( m ) * abs ( m ) ) + ( abs ( n ) * abs ( n ) ) ) ) ;\n    return N ;\n"}
{"java": "static int countSubarray ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( sum + arr [ j ] < k ) { sum = arr [ j ] + sum ; count ++ ; } else { break ; } } } return count ; }", "python": "def countSubarray ( arr , n , k ) :\n    count = 0\n    for i in range ( 0 , n ) :\n        sum = 0 ;\n        for j in range ( i , n ) :\n            if ( sum + arr [ j ] < k ) :\n                sum = arr [ j ] + sum\n                count += 1\n            else :\n                break\n    return count ;\n"}
{"java": "static void find_composite_nos ( int n ) { System . out . println ( 9 * n + \" \u2581 \" + 8 * n ) ; }", "python": "def find_composite_nos ( n ) :\n    print ( 9 * n , 8 * n ) ;\n"}
{"java": "static int countTripletsLessThanL ( int n , int L , int [ ] arr ) { Arrays . sort ( arr ) ; int ways = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { int mostDistantDistance = arr [ k ] - arr [ i ] ; if ( mostDistantDistance <= L ) { ways ++ ; } } } } return ways ; }", "python": "def countTripletsLessThanL ( n , L , arr ) :\n    arr . sort ( )\n    ways = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            for k in range ( j + 1 , n ) :\n                mostDistantDistance = arr [ k ] - arr [ i ]\n                if ( mostDistantDistance <= L ) :\n                    ways += 1\n    return ways\n"}
{"java": "static int findTwoThreePrime ( int l , int r ) { if ( l == 1 ) l ++ ; int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { int num = i ; while ( num % 2 == 0 ) num /= 2 ; while ( num % 3 == 0 ) num /= 3 ; if ( num == 1 ) count ++ ; } return count ; }", "python": "def findTwoThreePrime ( l , r ) :\n    if ( l == 1 ) :\n        l += 1\n    count = 0\n    for i in range ( l , r + 1 ) :\n        num = i\n        while ( num % 2 == 0 ) :\n            num //= 2 ;\n        while ( num % 3 == 0 ) :\n            num //= 3\n        if ( num == 1 ) :\n            count += 1\n    return count\n"}
{"java": "public static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; }", "python": "def toggleLastMBits ( n , m ) :\n    num = ( 1 << m ) - 1\n    return ( n ^ num )\n"}
{"java": "static int countNumbers ( int L , int R , int K ) { if ( K == 9 ) { K = 0 ; } int totalnumbers = R - L + 1 ; int factor9 = totalnumbers / 9 ; int rem = totalnumbers % 9 ; int ans = factor9 ; for ( int i = R ; i > R - rem ; i -- ) { int rem1 = i % 9 ; if ( rem1 == K ) { ans ++ ; } } return ans ; }", "python": "def countNumbers ( L , R , K ) :\n    if ( K == 9 ) :\n        K = 0\n    totalnumbers = R - L + 1\n    factor9 = totalnumbers // 9\n    rem = totalnumbers % 9\n    ans = factor9\n    for i in range ( R , R - rem , - 1 ) :\n        rem1 = i % 9\n        if ( rem1 == K ) :\n            ans += 1\n    return ans\n"}
{"java": "public static long firstkdigits ( int n , int k ) { double product = n * Math . log10 ( n ) ; double decimal_part = product - Math . floor ( product ) ; decimal_part = Math . pow ( 10 , decimal_part ) ; double digits = Math . pow ( 10 , k - 1 ) , i = 0 ; return ( ( long ) ( decimal_part * digits ) ) ; }", "python": "def firstkdigits ( n , k ) :\n    product = n * math . log ( n , 10 ) ;\n    decimal_part = product - math . floor ( product ) ;\n    decimal_part = pow ( 10 , decimal_part ) ;\n    digits = pow ( 10 , k - 1 ) ;\n    return math . floor ( decimal_part * digits ) ;\n"}
{"java": "static int countMountains ( int a [ ] [ ] , int n ) { int [ ] [ ] A = new int [ n + 2 ] [ n + 2 ] ; int count = 0 ; for ( int i = 0 ; i < n + 2 ; i ++ ) { for ( int j = 0 ; j < n + 2 ; j ++ ) { if ( ( i == 0 ) || ( j == 0 ) || ( i == n + 1 ) || ( j == n + 1 ) ) { A [ i ] [ j ] = Integer . MIN_VALUE ; } else { A [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] ; } } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( ( A [ i ] [ j ] > A [ i - 1 ] [ j ] ) && ( A [ i ] [ j ] > A [ i + 1 ] [ j ] ) && ( A [ i ] [ j ] > A [ i ] [ j - 1 ] ) && ( A [ i ] [ j ] > A [ i ] [ j + 1 ] ) && ( A [ i ] [ j ] > A [ i - 1 ] [ j - 1 ] ) && ( A [ i ] [ j ] > A [ i + 1 ] [ j + 1 ] ) && ( A [ i ] [ j ] > A [ i - 1 ] [ j + 1 ] ) && ( A [ i ] [ j ] > A [ i + 1 ] [ j - 1 ] ) ) { count ++ ; } } } return count ; }", "python": "def countMountains ( a , n ) :\n    A = [ [ 0 for i in range ( n + 2 ) ] for i in range ( n + 2 ) ]\n    count = 0\n    for i in range ( n + 2 ) :\n        for j in range ( n + 2 ) :\n            if ( ( i == 0 ) or ( j == 0 ) or ( i == n + 1 ) or ( j == n + 1 ) ) :\n                A [ i ] [ j ] = float ( ' - inf ' )\n            else :\n                A [ i ] [ j ] = a [ i - 1 ] [ j - 1 ]\n    for i in range ( n + 1 ) :\n        for j in range ( n + 1 ) :\n            if ( ( A [ i ] [ j ] > A [ i - 1 ] [ j ] ) and ( A [ i ] [ j ] > A [ i + 1 ] [ j ] ) and ( A [ i ] [ j ] > A [ i ] [ j - 1 ] ) and ( A [ i ] [ j ] > A [ i ] [ j + 1 ] ) and ( A [ i ] [ j ] > A [ i - 1 ] [ j - 1 ] ) and ( A [ i ] [ j ] > A [ i + 1 ] [ j + 1 ] ) and ( A [ i ] [ j ] > A [ i - 1 ] [ j + 1 ] ) and ( A [ i ] [ j ] > A [ i + 1 ] [ j - 1 ] ) ) :\n                count = count + 1\n    return count\n"}
{"java": "static int FindElement ( int [ ] A , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int flag = 0 ; for ( int j = 0 ; j < i ; j ++ ) if ( A [ j ] >= A [ i ] ) { flag = 1 ; break ; } for ( int j = i + 1 ; j < n ; j ++ ) if ( A [ j ] <= A [ i ] ) { flag = 1 ; break ; } if ( flag == 0 ) return A [ i ] ; } return - 1 ; }", "python": "def FindElement ( A , n ) :\n    for i in range ( 0 , n , 1 ) :\n        flag = 0\n        for j in range ( 0 , i , 1 ) :\n            if ( A [ j ] >= A [ i ] ) :\n                flag = 1\n                break\n        for j in range ( i + 1 , n , 1 ) :\n            if ( A [ j ] <= A [ i ] ) :\n                flag = 1\n                break\n        if ( flag == 0 ) :\n            return A [ i ]\n    return - 1\n"}
{"java": "static int minimumIncrease ( int a , int b , int c ) { int arr [ ] = { a , b , c } ; Arrays . sort ( arr ) ; if ( arr [ 0 ] + arr [ 1 ] >= arr [ 2 ] ) return 0 ; else return arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] ) ; }", "python": "def minimumIncrease ( a , b , c ) :\n    arr = [ a , b , c ]\n    arr . sort ( )\n    if arr [ 0 ] + arr [ 1 ] >= arr [ 2 ] :\n        return 0\n    else :\n        return arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] )\n"}
{"java": "static int countPairs ( int A , int B ) { int cnt = 0 ; for ( int i = 0 ; i <= A ; ++ i ) { for ( int j = i ; j <= A ; ++ j ) { int AND = i & j ; int OR = i | j ; if ( OR == A && AND == B ) { cnt ++ ; } } } return cnt ; }", "python": "def countPairs ( A , B ) :\n    cnt = 0\n    for i in range ( 0 , A + 1 ) :\n        for j in range ( i , A + 1 ) :\n            AND = i & j\n            OR = i | j\n            if ( OR == A and AND == B ) :\n                cnt += 1\n    return cnt\n"}
{"java": "static int minimumNumbers ( int n , int s ) { if ( ( s % n ) > 0 ) return s / n + 1 ; else return s / n ; }", "python": "def minimumNumbers ( n , s ) :\n    if ( s % n ) :\n        return s / n + 1 ;\n    else :\n        return s / n ;\n"}
{"java": "static double wastedWater ( double V , double M , double N ) { double wasted_amt , amt_per_min , time_to_fill ; amt_per_min = M - N ; time_to_fill = V / amt_per_min ; wasted_amt = N * time_to_fill ; return wasted_amt ; }", "python": "def wastedWater ( V , M , N ) :\n    amt_per_min = M - N\n    time_to_fill = V / amt_per_min\n    wasted_amt = N * time_to_fill\n    return wasted_amt\n"}
{"java": "static int getProduct ( int n ) { int product = 1 ; while ( n != 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } return product ; }", "python": "def getProduct ( n ) :\n    product = 1\n    while ( n != 0 ) :\n        product = product * ( n % 10 )\n        n = n // 10\n    return product\n"}
{"java": "public static boolean isPalindrome ( float num ) { String s = String . valueOf ( num ) ; int low = 0 ; int high = s . length ( ) - 1 ; while ( low < high ) { if ( s . charAt ( low ) != s . charAt ( high ) ) return false ; low ++ ; high -- ; } return true ; }", "python": "def isPalindrome ( num ) :\n    s = str ( num )\n    low = 0\n    high = len ( s ) - 1\n    while ( low < high ) :\n        if ( s [ low ] != s [ high ] ) :\n            return False\n        low += 1\n        high -= 1\n    return True\n"}
{"java": "private static void init ( ) { Scanner scanner = new Scanner ( System . in ) ; N = scanner . nextInt ( ) ; a = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int number = scanner . nextInt ( ) ; if ( a . containsKey ( number ) ) { Integer c = a . get ( number ) ; c ++ ; a . put ( number , c ) ; } else { a . put ( number , 1 ) ; } } scanner . close ( ) ; }", "python": "def c_good_sequence ( N , A ) :\n    from collections import Counter\n    count = Counter ( A )\n    ans = 0\n    for k , v in count . items ( ) :\n        if k == 1 :\n            if v == 1 :\n                continue\n            else :\n                ans += v - k\n        elif k != v :\n            ans += v % k\n    return ans\n"}
{"java": "static int reversDigits ( int num ) { boolean negativeFlag = false ; if ( num < 0 ) { negativeFlag = true ; num = - num ; } int prev_rev_num = 0 , rev_num = 0 ; while ( num != 0 ) { int curr_digit = num % 10 ; rev_num = ( rev_num * 10 ) + curr_digit ; if ( ( rev_num - curr_digit ) / 10 != prev_rev_num ) { System . out . println ( \" WARNING \u2581 OVERFLOWED ! ! ! \" ) ; return 0 ; } prev_rev_num = rev_num ; num = num / 10 ; } return ( negativeFlag == true ) ? - rev_num : rev_num ; }", "python": "def reversDigits ( num ) :\n    negativeFlag = False\n    if ( num < 0 ) :\n        negativeFlag = True\n        num = - num\n    prev_rev_num = 0\n    rev_num = 0\n    while ( num != 0 ) :\n        curr_digit = num % 10\n        rev_num = ( rev_num * 10 ) + curr_digit\n        if ( rev_num >= 2147483647 or rev_num <= - 2147483648 ) :\n            rev_num = 0\n        if ( ( rev_num - curr_digit ) // 10 != prev_rev_num ) :\n            print ( \" WARNING \u2581 OVERFLOWED ! ! ! \" )\n            return 0\n        prev_rev_num = rev_num\n        num = num // 10\n    return - rev_num if ( negativeFlag == True ) else rev_num\n"}
{"java": "static void parallel ( int a [ ] [ ] ) { boolean x = true , y = true ; for ( int i = 0 ; i < a . length - 1 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ 0 ] != a [ i + 1 ] [ 0 ] ) x = false ; if ( a [ i ] [ 1 ] != a [ i + 1 ] [ 1 ] ) y = false ; } } if ( x ) System . out . println ( \" Parallel \u2581 to \u2581 X \u2581 Axis \" ) ; else if ( y ) System . out . println ( \" Parallel \u2581 to \u2581 Y \u2581 Axis \" ) ; else System . out . println ( \" Not \u2581 parallel \u2581 to \u2581 X \" + \" \u2581 and \u2581 Y \u2581 axis \" ) ; }", "python": "def parallel ( n , a ) :\n    x = True ;\n    y = True ;\n    for i in range ( n - 1 ) :\n        for j in range ( 2 ) :\n            if ( a [ i ] [ 0 ] != a [ i + 1 ] [ 0 ] ) :\n                x = False ;\n            if ( a [ i ] [ 1 ] != a [ i + 1 ] [ 1 ] ) :\n                y = False ;\n    if ( x ) :\n        print ( \" Parallel \u2581 to \u2581 X \u2581 Axis \" ) ;\n    elif ( y ) :\n        print ( \" Parallel \u2581 to \u2581 Y \u2581 Axis \" ) ;\n    else :\n        print ( \" Not \u2581 Parallel \u2581 to \u2581 X \u2581 and \u2581 Y \u2581 Axis \" ) ;\n"}
{"java": "static int cost ( String str ) { int len = str . length ( ) ; int res = 0 ; for ( int i = 0 , j = len - 1 ; i < j ; i ++ , j -- ) if ( str . charAt ( i ) != str . charAt ( j ) ) res += Math . min ( str . charAt ( i ) , str . charAt ( j ) ) - ' a ' + 1 ; return res ; }", "python": "def cost ( st ) :\n    l = len ( st )\n    res = 0\n    j = l - 1\n    i = 0\n    while ( i < j ) :\n        if ( st [ i ] != st [ j ] ) :\n            res += ( min ( ord ( st [ i ] ) , ord ( st [ j ] ) ) - ord ( ' a ' ) + 1 )\n        i = i + 1\n        j = j - 1\n    return res\n"}
{"java": "static double heptdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.802 * a ; return d ; }", "python": "def heptdiagonal ( a ) :\n    if ( a < 0 ) :\n        return - 1\n    d = 1.802 * a\n    return round ( d , 3 )\n"}
{"java": "static boolean isPerfectCubeString ( String str ) { int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) sum += ( int ) str . charAt ( i ) ; double cr = Math . round ( Math . cbrt ( sum ) ) ; return ( cr * cr * cr == sum ) ; }", "python": "def isPerfectCubeString ( str1 ) :\n    sum = 0\n    for i in range ( len ( str1 ) ) :\n        sum += ord ( str1 [ i ] )\n    cr = ceil ( ( sum ) ** ( 1 / 3 ) )\n    return ( cr * cr * cr == sum )\n"}
{"java": "static int xorOfSum ( int a [ ] , int n ) { int answer = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) answer ^= ( a [ i ] + a [ j ] ) ; } return answer ; }", "python": "def xorOfSum ( a , n ) :\n    answer = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            answer ^= ( a [ i ] + a [ j ] )\n    return answer\n"}
{"java": "static void encode ( String s , int k ) { String newS = \" \" ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) { int val = s . charAt ( i ) ; int dup = k ; if ( val + k > 122 ) { k -= ( 122 - val ) ; k = k % 26 ; newS += ( char ) ( 96 + k ) ; } else { newS += ( char ) ( val + k ) ; } k = dup ; } System . out . println ( newS ) ; }", "python": "def encode ( s , k ) :\n    newS = \" \"\n    for i in range ( len ( s ) ) :\n        val = ord ( s [ i ] )\n        dup = k\n        if val + k > 122 :\n            k -= ( 122 - val )\n            k = k % 26\n            newS += chr ( 96 + k )\n        else :\n            newS += chr ( val + k )\n        k = dup\n    print ( newS )\n"}
{"java": "static int summation ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 1 ) sum += ( i * i ) ; else sum -= ( i * i ) ; } return sum ; }", "python": "def summation ( n ) :\n    sum = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        if ( i % 2 == 1 ) :\n            sum += ( i * i ) ;\n        else :\n            sum -= ( i * i ) ;\n    return sum ;\n"}
{"java": "static int maxSum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; int limit = 2 * sum + 1 ; int dp [ ] [ ] = new int [ n + 1 ] [ limit ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { for ( int j = 0 ; j < limit ; j ++ ) dp [ i ] [ j ] = INT_MIN ; } dp [ 0 ] [ sum ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < limit ; j ++ ) { if ( ( j - a [ i - 1 ] ) >= 0 && dp [ i - 1 ] [ j - a [ i - 1 ] ] != INT_MIN ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - a [ i - 1 ] ] + a [ i - 1 ] ) ; if ( ( j + a [ i - 1 ] ) < limit && dp [ i - 1 ] [ j + a [ i - 1 ] ] != INT_MIN ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j + a [ i - 1 ] ] ) ; if ( dp [ i - 1 ] [ j ] != INT_MIN ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ sum ] ; }", "python": "def maxSum ( a , n ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += a [ i ] ;\n    limit = 2 * sum + 1 ;\n    dp = np . zeros ( ( n + 1 , limit ) ) ;\n    for i in range ( n + 1 ) :\n        for j in range ( limit ) :\n            dp [ i ] [ j ] = INT_MIN ;\n    dp [ 0 ] [ sum ] = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( limit ) :\n            if ( ( j - a [ i - 1 ] ) >= 0 and dp [ i - 1 ] [ j - a [ i - 1 ] ] != INT_MIN ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - a [ i - 1 ] ] + a [ i - 1 ] ) ;\n            if ( ( j + a [ i - 1 ] ) < limit and dp [ i - 1 ] [ j + a [ i - 1 ] ] != INT_MIN ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j + a [ i - 1 ] ] ) ;\n            if ( dp [ i - 1 ] [ j ] != INT_MIN ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] ) ;\n    return dp [ n ] [ sum ] ;\n"}
{"java": "static int PointInKSquares ( int n , int a [ ] , int k ) { Arrays . sort ( a ) ; return a [ n - k ] ; }", "python": "def PointInKSquares ( n , a , k ) :\n    a . sort ( )\n    return a [ n - k ]\n"}
{"java": "static void ans ( int n ) { if ( n == 1 ) System . out . println ( \"1\" ) ; else System . out . println ( \"0\" ) ; }", "python": "def ans ( n ) :\n    if ( n == 1 ) :\n        print ( \"1\" , end = \" \" ) ;\n    else :\n        print ( \"0\" , end = \" \" ) ;\n"}
{"java": "static void sub_segments ( String str , int n ) { int l = str . length ( ) ; for ( int x = 0 ; x < l ; x += n ) { String newlist = str . substring ( x , x + n ) ; List < Character > arr = new ArrayList < Character > ( ) ; for ( char y : newlist . toCharArray ( ) ) { if ( ! arr . contains ( y ) ) arr . add ( y ) ; } for ( char y : arr ) System . out . print ( y ) ; System . out . println ( ) ; } }", "python": "def sub_segments ( string , n ) :\n    l = len ( string )\n    for x in range ( 0 , l , n ) :\n        newlist = string [ x : x + n ]\n        arr = [ ]\n        for y in newlist :\n            if y not in arr :\n                arr . append ( y )\n        print ( ' ' . join ( arr ) )\n"}
{"java": "private static void putBlack ( HashMap < String , Integer > result , int a , int b , int h , int w ) { for ( int x = a - 2 ; x <= a ; x ++ ) { if ( x < 1 || x > h - 2 ) { continue ; } for ( int y = b - 2 ; y <= b ; y ++ ) { if ( y < 1 || y > w - 2 ) { continue ; } String point = x + \" \u2581 \" + y ; if ( ! result . containsKey ( point ) ) { result . put ( point , Integer . valueOf ( 1 ) ) ; } else { int count = result . get ( point ) ; result . put ( point , count + 1 ) ; } } } }", "python": "def main ( ) :\n    from sys import stdin\n    input = stdin . readline\n    h , w , n = map ( int , input ( ) . split ( ) )\n    ab = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in [ 0 ] * n ]\n    ans = [ 0 ] * 10\n    d = { }\n    for a , b in ab :\n        for j in range ( - 1 , 2 ) :\n            for k in range ( - 1 , 2 ) :\n                d [ ( a + j , b + k ) ] = d . get ( ( a + j , b + k ) , 0 ) + 1\n    for ( i , j ) , k in d . items ( ) :\n        if 2 <= i < h and 2 <= j < w :\n            ans [ k ] += 1\n    print ( ( h - 2 ) * ( w - 2 ) - sum ( ans ) )\n    for i in ans [ 1 : ] :\n        print ( i )\n"}
{"java": "static int oddTriangularNumber ( int N ) { return ( N * ( ( 2 * N ) - 1 ) ) ; }", "python": "def oddTriangularNumber ( N ) :\n    return ( N * ( ( 2 * N ) - 1 ) )\n"}
{"java": "static int minPower ( int n , int x ) { if ( x == 1 ) return n ; int ans = 0 ; while ( n > 0 ) { ans += ( n % x ) ; n /= x ; } return ans ; }", "python": "def minPower ( n , x ) :\n    if ( x == 1 ) :\n        return n\n    ans = 0\n    while ( n > 0 ) :\n        ans += ( n % x )\n        n //= x\n    return ans\n"}
{"java": "static boolean isPowerful ( int n ) { while ( n % 2 == 0 ) { int power = 0 ; while ( n % 2 == 0 ) { n /= 2 ; power ++ ; } if ( power == 1 ) return false ; } for ( int factor = 3 ; factor <= Math . sqrt ( n ) ; factor += 2 ) { int power = 0 ; while ( n % factor == 0 ) { n = n / factor ; power ++ ; } if ( power == 1 ) return false ; } return ( n == 1 ) ; }", "python": "def isPowerful ( n ) :\n    while ( n % 2 == 0 ) :\n        power = 0\n        while ( n % 2 == 0 ) :\n            n = n // 2\n            power = power + 1\n        if ( power == 1 ) :\n            return False\n    for factor in range ( 3 , int ( math . sqrt ( n ) ) + 1 , 2 ) :\n        power = 0\n        while ( n % factor == 0 ) :\n            n = n // factor\n            power = power + 1\n        if ( power == 1 ) :\n            return false\n    return ( n == 1 )\n"}
{"java": "static int maxValue ( int arr [ ] , int n , int moves ) { for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] > 0 ) { int distance = n - 1 - i ; if ( moves < distance ) break ; int can_take = moves / distance ; int take = Math . min ( arr [ i ] , can_take ) ; arr [ n - 1 ] += take ; moves -= take * distance ; } } return arr [ n - 1 ] ; }", "python": "def maxValue ( arr , n , moves ) :\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] > 0 ) :\n            distance = n - 1 - i\n            if ( moves < distance ) :\n                break\n            can_take = moves // distance\n            take = min ( arr [ i ] , can_take )\n            arr [ n - 1 ] += take\n            moves -= take * distance\n    return arr [ n - 1 ]\n"}
{"java": "static void countSubarraysof1and0 ( int a [ ] , int n ) { int count1 = 0 , count0 = 0 ; int number1 = 0 , number0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { count1 += 1 ; } else { number1 += ( count1 ) * ( count1 + 1 ) / 2 ; count1 = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { count0 += 1 ; } else { number0 += ( count0 ) * ( count0 + 1 ) / 2 ; count0 = 0 ; } } if ( count1 > 0 ) number1 += ( count1 ) * ( count1 + 1 ) / 2 ; if ( count0 > 0 ) number0 += ( count0 ) * ( count0 + 1 ) / 2 ; System . out . println ( \" Count \u2581 of \u2581 subarrays \u2581 of \u2581 0 \u2581 only : \u2581 \" + number0 ) ; System . out . println ( \" \\n Count \u2581 of \u2581 subarrays \u2581 of \u2581 1 \u2581 only : \u2581 \" + number1 ) ; }", "python": "def countSubarraysof1and0 ( a , n ) :\n    count1 = 0\n    count0 = 0\n    number1 = 0\n    number0 = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( a [ i ] == 1 ) :\n            count1 += 1\n        else :\n            number1 += ( ( count1 ) * ( count1 + 1 ) / 2 )\n            count1 = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( a [ i ] == 0 ) :\n            count0 += 1\n        else :\n            number0 += ( count0 ) * ( count0 + 1 ) / 2\n            count0 = 0\n    if ( count1 ) :\n        number1 += ( count1 ) * ( count1 + 1 ) / 2\n    if ( count0 ) :\n        number0 += ( count0 ) * ( count0 + 1 ) / 2\n    print ( \" Count \u2581 of \u2581 subarrays \u2581 of \u2581 0 \u2581 only : \" , int ( number0 ) )\n    print ( \" Count \u2581 of \u2581 subarrays \u2581 of \u2581 1 \u2581 only : \" , int ( number1 ) )\n"}
{"java": "static void pairwiseDifference ( int arr [ ] , int n ) { int diff ; for ( int i = 0 ; i < n - 1 ; i ++ ) { diff = Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; System . out . print ( diff + \" \u2581 \" ) ; } }", "python": "def pairwiseDifference ( arr , n ) :\n    for i in range ( n - 1 ) :\n        diff = abs ( arr [ i ] - arr [ i + 1 ] )\n        print ( diff , end = \" \u2581 \" )\n"}
{"java": "static double countNumbers ( int N ) { return ( Math . pow ( 10 , N ) - 1 ) - ( Math . pow ( 10 , N ) - Math . pow ( 8 , N ) ) / 2 ; }", "python": "def countNumber ( n ) :\n    return ( pow ( 10 , n ) - 1 ) - ( pow ( 10 , n ) - pow ( 8 , n ) ) // 2\n"}
{"java": "static int countNumbers ( int N ) { return ( int ) ( Math . pow ( 10 , N ) - Math . pow ( 8 , N ) ) / 2 ; }", "python": "def countNumbers ( N ) :\n    return ( pow ( 10 , N ) - pow ( 8 , N ) ) // 2\n"}
{"java": "static void findPair ( int arr [ ] , int n ) { if ( n < 2 ) { System . out . print ( \" - 1\" ) ; return ; } int maximum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) maximum = Math . max ( maximum , arr [ i ] ) ; int temp = 10000001 , r = 0 , middle = maximum / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . abs ( middle - arr [ i ] ) < temp && n % 2 == 0 ) { temp = Math . abs ( middle - arr [ i ] ) ; r = arr [ i ] ; } else if ( Math . min ( Math . abs ( middle - arr [ i ] ) , Math . abs ( middle + 1 - arr [ i ] ) ) < temp && n % 2 == 1 ) { temp = Math . min ( Math . abs ( middle - arr [ i ] ) , Math . abs ( middle + 1 - arr [ i ] ) ) ; r = arr [ i ] ; } } System . out . print ( \" n \u2581 = \u2581 \" + maximum + \" \u2581 and \u2581 r \u2581 = \u2581 \" + r ) ; }", "python": "def findPair ( arr , n ) :\n    if ( n < 2 ) :\n        print ( \" - 1\" , end = \" \u2581 \" ) ;\n        return ;\n    maximum = max ( arr ) ;\n    temp = 10000001 ; r = 0 ; middle = maximum // 2 ;\n    for i in range ( n ) :\n        if ( abs ( middle - arr [ i ] ) < temp and n % 2 == 0 ) :\n            temp = abs ( middle - arr [ i ] ) ;\n            r = arr [ i ] ;\n        elif ( min ( abs ( middle - arr [ i ] ) , abs ( middle + 1 - arr [ i ] ) ) < temp and n % 2 == 1 ) :\n            temp = min ( abs ( middle - arr [ i ] ) , abs ( middle + 1 - arr [ i ] ) ) ;\n            r = arr [ i ] ;\n    print ( \" n \u2581 = \" , maximum , \" and \u2581 r \u2581 = \" , r ) ;\n"}
{"java": "static int findSum ( int arr [ ] , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { sum += arr [ i ] ; } } return sum ; }", "python": "def findSum ( arr , n , k ) :\n    sum = 0\n    for i in range ( n ) :\n        if arr [ i ] % k == 0 :\n            sum += arr [ i ]\n    return sum\n"}
{"java": "static int valueofX ( int ar [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ar [ i ] ; } if ( sum % n == 0 ) { return sum / n ; } else { int A = sum / n , B = sum / n + 1 ; int ValueA = 0 , ValueB = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ValueA += ( ar [ i ] - A ) * ( ar [ i ] - A ) ; ValueB += ( ar [ i ] - B ) * ( ar [ i ] - B ) ; } if ( ValueA < ValueB ) { return A ; } else { return B ; } } }", "python": "def valueofX ( ar , n ) :\n    summ = sum ( ar )\n    if ( summ % n == 0 ) :\n        return summ // n\n    else :\n        A = summ // n\n        B = summ // n + 1\n        ValueA = 0\n        ValueB = 0\n        for i in range ( n ) :\n            ValueA += ( ar [ i ] - A ) * ( ar [ i ] - A )\n            ValueB += ( ar [ i ] - B ) * ( ar [ i ] - B )\n        if ( ValueA < ValueB ) :\n            return A\n        else :\n            return B\n"}
{"java": "public static int longestSubseq ( String s ) { int n = s . length ( ) ; int [ ] pre_count_0 = new int [ n + 2 ] ; int [ ] pre_count_1 = new int [ n + 1 ] ; int [ ] post_count_0 = new int [ n + 2 ] ; pre_count_0 [ 0 ] = 0 ; post_count_0 [ n + 1 ] = 0 ; pre_count_1 [ 0 ] = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { pre_count_0 [ j ] = pre_count_0 [ j - 1 ] ; pre_count_1 [ j ] = pre_count_1 [ j - 1 ] ; post_count_0 [ n - j + 1 ] = post_count_0 [ n - j + 2 ] ; if ( s . charAt ( j - 1 ) == '0' ) pre_count_0 [ j ] ++ ; else pre_count_1 [ j ] ++ ; if ( s . charAt ( n - j ) == '0' ) post_count_0 [ n - j + 1 ] ++ ; } if ( pre_count_0 [ n ] == n || pre_count_0 [ n ] == 0 ) return n ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i ; j <= n ; j ++ ) ans = Math . max ( pre_count_0 [ i - 1 ] + pre_count_1 [ j ] - pre_count_1 [ i - 1 ] + post_count_0 [ j + 1 ] , ans ) ; return ans ; }", "python": "def longestSubseq ( s ) :\n    n = len ( s )\n    pre_count_0 = [ 0 for i in range ( n + 2 ) ]\n    pre_count_1 = [ 0 for i in range ( n + 1 ) ]\n    post_count_0 = [ 0 for i in range ( n + 2 ) ]\n    pre_count_0 [ 0 ] = 0\n    post_count_0 [ n + 1 ] = 0\n    pre_count_1 [ 0 ] = 0\n    for j in range ( 1 , n + 1 ) :\n        pre_count_0 [ j ] = pre_count_0 [ j - 1 ]\n        pre_count_1 [ j ] = pre_count_1 [ j - 1 ]\n        post_count_0 [ n - j + 1 ] = post_count_0 [ n - j + 2 ]\n        if ( s [ j - 1 ] == '0' ) :\n            pre_count_0 [ j ] += 1\n        else :\n            pre_count_1 [ j ] += 1\n        if ( s [ n - j ] == '0' ) :\n            post_count_0 [ n - j + 1 ] += 1\n    if ( pre_count_0 [ n ] == n or pre_count_0 [ n ] == 0 ) :\n        return n\n    ans = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i , n + 1 , 1 ) :\n            ans = max ( pre_count_0 [ i - 1 ] + pre_count_1 [ j ] - pre_count_1 [ i - 1 ] + post_count_0 [ j + 1 ] , ans )\n    return ans\n"}
{"java": "static boolean solve ( int n , int k ) { if ( n >= ( k * ( k + 1 ) ) / 2 ) { return true ; } return false ; }", "python": "def solve ( n , k ) :\n    if ( n >= ( k * ( k + 1 ) ) // 2 ) :\n        return True\n    return False\n"}
{"java": "static String lastNonRepeating ( String str , int n ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) ] ++ ; for ( int i = n - 1 ; i >= 0 ; i -- ) { char ch = str . charAt ( i ) ; if ( freq [ ch ] == 1 ) return ( \" \" + ch ) ; } return \" - 1\" ; }", "python": "def lastNonRepeating ( string , n ) :\n    freq = [ 0 ] * MAX ;\n    for i in range ( n ) :\n        freq [ ord ( string [ i ] ) ] += 1 ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        ch = string [ i ] ;\n        if ( freq [ ord ( ch ) ] == 1 ) :\n            return ( \" \" + ch ) ;\n    return \" - 1\" ;\n"}
{"java": "public static void StarPattern ( int height ) { for ( int i = 0 ; i < height ; i ++ ) { for ( int j = height - 1 ; j > i ; j -- ) { System . out . print ( \" * \" ) ; } boolean printChar = false ; for ( int j = 0 ; j < ( ( i * 2 ) + 1 ) ; j ++ ) { if ( printChar ) { System . out . print ( \" * \" ) ; } else { System . out . print ( i + 1 ) ; } printChar = ! printChar ; } for ( int j = height - 1 ; j > i ; j -- ) { System . out . print ( \" * \" ) ; } System . out . println ( ) ; } }", "python": "def StarPattern ( height ) :\n    for i in range ( height ) :\n        for j in range ( height - 1 , i , - 1 ) :\n            print ( \" * \" , end = \" \" )\n        printChar = False\n        for j in range ( ( ( i * 2 ) + 1 ) ) :\n            if ( printChar ) :\n                print ( \" * \" , end = \" \" )\n            else :\n                print ( i + 1 , end = \" \" )\n            printChar = not printChar\n        for j in range ( height - 1 , i , - 1 ) :\n            print ( \" * \" , end = \" \" )\n        print ( )\n"}
{"java": "static int LongestSubarray ( int [ ] arr , int n , int k ) { int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr2 [ i ] = arr [ i ] % k ; int current_length , max_length = 0 ; int j ; for ( int i = 0 ; i < n ; ) { current_length = 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr2 [ j ] == arr2 [ i ] ) current_length ++ ; else break ; } max_length = Math . max ( max_length , current_length ) ; i = j ; } return max_length ; }", "python": "def LongestSubarray ( arr , n , k ) :\n    arr2 = [ 0 ] * n\n    for i in range ( n ) :\n        arr2 [ i ] = arr [ i ] % k\n    max_length = 0\n    i = 0\n    while i < n :\n        current_length = 1\n        for j in range ( i + 1 , n ) :\n            if ( arr2 [ j ] == arr2 [ i ] ) :\n                current_length += 1\n            else :\n                break\n        max_length = max ( max_length , current_length )\n        i = j\n        i += 1\n    return max_length\n"}
{"java": "static long squareDigitSum ( String s ) { long lengthN = s . length ( ) ; long result = ( lengthN / 9 ) * 81 + ( long ) Math . pow ( ( lengthN % 9 ) , 2 ) ; return result ; }", "python": "def squareDigitSum ( num ) :\n    lengthN = len ( num )\n    result = ( lengthN // 9 ) * 81 + ( lengthN % 9 ) ** 2\n    return result\n"}
{"java": "static void removeChar ( String s , char c ) { int j , count = 0 , n = s . length ( ) ; char [ ] t = s . toCharArray ( ) ; for ( int i = j = 0 ; i < n ; i ++ ) { if ( t [ i ] != c ) t [ j ++ ] = t [ i ] ; else count ++ ; } while ( count > 0 ) { t [ j ++ ] = ' \\ 0' ; count -- ; } System . out . println ( t ) ; }", "python": "def removeChar ( s , c ) :\n    counts = s . count ( c )\n    s = list ( s )\n    while counts :\n        s . remove ( c )\n        counts -= 1\n    s = ' ' . join ( s )\n    print ( s )\n"}
{"java": "public static int findNature ( int a , int b , int n ) { int [ ] seq = new int [ 100 ] ; seq [ 0 ] = a ; seq [ 1 ] = b ; for ( int i = 2 ; i <= n ; i ++ ) seq [ i ] = seq [ i - 1 ] + seq [ i - 2 ] ; if ( ( seq [ n ] & 1 ) != 0 ) return 1 ; else return 0 ; }", "python": "def findNature ( a , b , n ) :\n    seq = [ 0 ] * MAX ;\n    seq [ 0 ] = a ;\n    seq [ 1 ] = b ;\n    for i in range ( 2 , n + 1 ) :\n        seq [ i ] = seq [ i - 1 ] + seq [ i - 2 ] ;\n    return ( seq [ n ] & 1 ) ;\n"}
{"java": "static void MaximumProduct ( int a [ ] , int n ) { int cntneg = 0 ; int cntzero = 0 ; int used [ ] = new int [ n ] ; int pos = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( a [ i ] == 0 ) { used [ i ] = 1 ; cntzero ++ ; } if ( a [ i ] < 0 ) { cntneg ++ ; if ( pos == - 1 || Math . abs ( a [ pos ] ) > Math . abs ( a [ i ] ) ) { pos = i ; } } } if ( cntneg % 2 == 1 ) { used [ pos ] = 1 ; } if ( cntzero == n || ( cntzero == n - 1 && cntneg == 1 ) ) { for ( int i = 0 ; i < n - 1 ; ++ i ) { System . out . println ( 1 + \" \u2581 \" + ( i + 1 ) + \" \u2581 \" + ( i + 2 ) ) ; } return ; } int lst = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( used [ i ] == 1 ) { if ( lst != - 1 ) { System . out . println ( 1 + \" \u2581 \" + ( lst + 1 ) + \" \u2581 \" + ( i + 1 ) ) ; } lst = i ; } } if ( lst != - 1 ) { System . out . println ( 2 + \" \u2581 \" + ( lst + 1 ) ) ; } lst = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( used [ i ] != 1 ) { if ( lst != - 1 ) { System . out . println ( 1 + \" \u2581 \" + ( lst + 1 ) + \" \u2581 \" + ( i + 1 ) ) ; } lst = i ; } } }", "python": "def MaximumProduct ( a , n ) :\n    cntneg = 0\n    cntzero = 0\n    used = [ 0 ] * n\n    pos = - 1\n    for i in range ( n ) :\n        if ( a [ i ] == 0 ) :\n            used [ i ] = 1\n            cntzero += 1\n        if ( a [ i ] < 0 ) :\n            cntneg += 1\n            if ( pos == - 1 or abs ( a [ pos ] ) > abs ( a [ i ] ) ) :\n                pos = i\n    if ( cntneg % 2 == 1 ) :\n        used [ pos ] = 1\n    if ( cntzero == n or ( cntzero == n - 1 and cntneg == 1 ) ) :\n        for i in range ( n - 1 ) :\n            print ( 1 , \" \u2581 \" , i + 1 , \" \u2581 \" , i + 2 )\n        return\n    lst = - 1\n    for i in range ( n ) :\n        if ( used [ i ] ) :\n            if ( lst != - 1 ) :\n                print ( 1 , \" \u2581 \" , lst + 1 , \" \u2581 \" , i + 1 )\n            lst = i\n    if ( lst != - 1 ) :\n        print ( 2 , \" \u2581 \" , lst + 1 )\n    lst = - 1\n    for i in range ( n ) :\n        if ( not used [ i ] ) :\n            if ( lst != - 1 ) :\n                print ( 1 , \" \u2581 \" , lst + 1 , \" \u2581 \" , i + 1 )\n            lst = i\n"}
{"java": "public static int solve ( int k , int a , int b ) { if ( k == n ) { return Math . abs ( a - b ) ; } return Math . min ( solve ( k + 1 , a , b + ps [ k ] ) , solve ( k + 1 , a + ps [ k ] , b ) ) ; }", "python": "def main ( ) :\n    while True :\n        n = int ( input ( ) )\n        if n == 0 :\n            break\n        alst = list ( map ( int , input ( ) . split ( ) ) )\n        s = sum ( alst )\n        alst = [ a * 2 for a in alst ]\n        lst = [ - s ]\n        for a in alst :\n            lst . extend ( [ i + a for i in lst ] )\n        print ( min ( map ( abs , lst ) ) )\n"}
{"java": "static int findMin ( int arr [ ] , int n ) { int m = 0 ; for ( int i = 0 ; i < n ; i ++ ) m = Math . max ( m , arr [ i ] ) ; int cnt [ ] = new int [ m + 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j * j <= arr [ i ] ; j ++ ) { if ( arr [ i ] % j == 0 ) { if ( j * j == arr [ i ] ) cnt [ j ] ++ ; else { cnt [ j ] ++ ; cnt [ arr [ i ] / j ] ++ ; } } } } for ( int i = 1 ; i <= m + 1 ; i ++ ) if ( cnt [ i ] == 0 ) { return i ; } return - 1 ; }", "python": "def findMin ( arr , n ) :\n    m = 0\n    for i in range ( n ) :\n        m = max ( m , arr [ i ] )\n    cnt = [ 0 ] * ( m + 2 )\n    for i in range ( n ) :\n        j = 1\n        while j * j <= arr [ i ] :\n            if ( arr [ i ] % j == 0 ) :\n                if ( j * j == arr [ i ] ) :\n                    cnt [ j ] += 1\n                else :\n                    cnt [ j ] += 1\n                    cnt [ arr [ i ] // j ] += 1\n            j += 1\n    for i in range ( 1 , m + 2 ) :\n        if ( cnt [ i ] == 0 ) :\n            return i\n    return - 1\n"}
{"java": "static boolean match_words ( String dictionary [ ] , String sentence [ ] , int n , int m ) { Map < String , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( dictionary [ i ] ) ) { mp . put ( dictionary [ i ] , mp . get ( dictionary [ i ] ) + 1 ) ; } else { mp . put ( dictionary [ i ] , 1 ) ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( mp . containsKey ( sentence [ i ] ) ) mp . put ( sentence [ i ] , mp . get ( sentence [ i ] ) - 1 ) ; else return false ; } return true ; }", "python": "def match_words ( dictionary , sentence , n , m ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        mp [ dictionary [ i ] ] = mp . get ( dictionary [ i ] , 0 ) + 1\n    for i in range ( m ) :\n        if ( mp [ sentence [ i ] ] ) :\n            mp [ sentence [ i ] ] -= 1\n        else :\n            return False\n    return True\n"}
{"java": "public static int getMinValue ( List < Integer > list , int value ) { int sum = 0 ; for ( Integer x : list ) { sum += ( x - value ) * ( x - value ) ; } return sum ; }", "python": "def cost ( A , ave ) :\n    return sum ( map ( lambda x : ( x - ave ) ** 2 , A ) )\n"}
{"java": "static void getLongestSeq ( int a [ ] , int n ) { int maxIdx = 0 , maxLen = 0 , currLen = 0 , currIdx = 0 ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] > 0 ) { currLen ++ ; if ( currLen == 1 ) currIdx = k ; } else { if ( currLen > maxLen ) { maxLen = currLen ; maxIdx = currIdx ; } currLen = 0 ; } } if ( maxLen > 0 ) { System . out . print ( \" Length \u2581 \" + maxLen ) ; System . out . print ( \" , starting \u2581 index \u2581 \" + maxIdx ) ; } else System . out . println ( \" No \u2581 positive \u2581 sequence \u2581 detected . \" ) ; return ; }", "python": "def getLongestSeq ( a , n ) :\n    maxIdx = 0\n    maxLen = 0\n    currLen = 0\n    currIdx = 0\n    for k in range ( n ) :\n        if a [ k ] > 0 :\n            currLen += 1\n            if currLen == 1 :\n                currIdx = k\n        else :\n            if currLen > maxLen :\n                maxLen = currLen\n                maxIdx = currIdx\n            currLen = 0\n    if maxLen > 0 :\n        print ( ' Index \u2581 : \u2581 ' , maxIdx , ' , Length \u2581 : \u2581 ' , maxLen , )\n    else :\n        print ( \" No \u2581 positive \u2581 sequence \u2581 detected . \" )\n"}
{"java": "static void odd_even ( int arr [ ] , int n ) { Vector < Integer > odd_indexes = new Vector < Integer > ( ) ; Vector < Integer > even_indexes = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) odd_indexes . add ( arr [ i ] ) ; else even_indexes . add ( arr [ i ] ) ; } Collections . sort ( odd_indexes ) ; Collections . sort ( even_indexes ) ; for ( int i = 0 ; i < odd_indexes . size ( ) ; i ++ ) System . out . print ( odd_indexes . get ( i ) + \" \u2581 \" ) ; for ( int i = 0 ; i < even_indexes . size ( ) ; i ++ ) System . out . print ( even_indexes . get ( i ) + \" \u2581 \" ) ; }", "python": "def odd_even ( n ) :\n    odd_indexes = [ ]\n    even_indexes = [ ]\n    for i in range ( len ( n ) ) :\n        if i % 2 == 0 : odd_indexes . append ( n [ i ] )\n        else : even_indexes . append ( n [ i ] )\n    for i in sorted ( odd_indexes ) : print ( i , end = \" \u2581 \" )\n    for i in sorted ( even_indexes ) : print ( i , end = \" \u2581 \" )\n"}
{"java": "public static String fibWord ( int n ) { String Sn_1 = \"0\" ; String Sn = \"01\" ; String tmp ; for ( int i = 2 ; i <= n ; i ++ ) { tmp = Sn ; Sn += Sn_1 ; Sn_1 = tmp ; } return Sn ; }", "python": "def fibWord ( n ) :\n    Sn_1 = \"0\"\n    Sn = \"01\"\n    tmp = \" \"\n    for i in range ( 2 , n + 1 ) :\n        tmp = Sn\n        Sn += Sn_1\n        Sn_1 = tmp\n    return Sn\n"}
{"java": "static int maxval ( int a [ ] , int n ) { if ( n < 2 ) { return - 99999 ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = ( a [ i ] + i ) * ( a [ j ] + j ) ; if ( max < x ) { max = x ; } } } return max ; }", "python": "def maxval ( a , n ) :\n    if ( n < 2 ) :\n        return - 99999\n    max = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            x = ( a [ i ] + i ) * ( a [ j ] + j )\n            if max < x :\n                max = x\n    return max\n"}
{"java": "static int numbers ( int n , int arr [ ] , int m ) { int isZero = 0 , isFive = 0 ; int result = 0 ; if ( m < n ) { return - 1 ; } for ( int i = 0 ; i < m ; i ++ ) { if ( arr [ i ] == 0 ) { isZero = 1 ; } if ( arr [ i ] == 5 ) { isFive = 1 ; } } if ( isZero == 1 && isFive == 1 ) { result = 2 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { result = result * ( -- m ) ; } } else if ( isZero == 1 || isFive == 1 ) { result = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { result = result * ( -- m ) ; } } else { result = - 1 ; } return result ; }", "python": "def numbers ( n , arr , m ) :\n    isZero = 0\n    isFive = 0\n    result = 0\n    if ( m < n ) :\n        return - 1\n    for i in range ( m ) :\n        if ( arr [ i ] == 0 ) :\n            isZero = 1\n        if ( arr [ i ] == 5 ) :\n            isFive = 1\n    if ( isZero and isFive ) :\n        result = 2\n        for i in range ( n - 1 ) :\n            m -= 1\n            result = result * ( m )\n    elif ( isZero or isFive ) :\n        result = 1\n        for i in range ( n - 1 ) :\n            m -= 1\n            result = result * ( m )\n    else :\n        result = - 1\n    return result\n"}
{"java": "static void checksum ( int n ) { if ( n == 0 ) { System . out . println ( \" - 1 \u2581 0 \u2581 1\" ) ; return ; } int inc ; if ( n > 0 ) inc = 1 ; else inc = - 1 ; for ( int i = 0 ; i <= n - 2 ; i += inc ) { if ( i + i + 1 + i + 2 == n ) { System . out . println ( i + \" \u2581 \" + ( i + 1 ) + \" \u2581 \" + ( i + 2 ) ) ; return ; } } System . out . println ( \" - 1\" ) ; }", "python": "def checksum ( n ) :\n    if n == 0 :\n        print ( \" - 1 \u2581 0 \u2581 1\" )\n        return 0\n    inc = 0\n    if n > 0 :\n        inc = 1\n    else :\n        inc = - 1\n    for i in range ( 0 , n - 1 , inc ) :\n        if i + i + 1 + i + 2 == n :\n            print ( i , \" \u2581 \" , i + 1 , \" \u2581 \" , i + 2 )\n            return 0\n    print ( \" - 1\" )\n"}
{"java": "static void checksum ( int n ) { if ( n == 0 ) { System . out . println ( \" - 2 \u2581 - 1 \u2581 0 \u2581 1 \u2581 2\" ) ; return ; } int inc ; if ( n > 0 ) inc = 1 ; else inc = - 1 ; for ( int i = 0 ; i <= n - 4 ; i += inc ) { if ( i + i + 1 + i + 2 + i + 3 + i + 4 == n ) { System . out . print ( ( i ) + \" \u2581 \" + ( i + 1 ) + \" \u2581 \" + ( i + 2 ) + \" \u2581 \" + ( i + 3 ) + \" \u2581 \" + ( i + 4 ) ) ; return ; } } System . out . println ( \" - 1\" ) ; }", "python": "def checksum ( n ) :\n    if n == 0 :\n        print ( \" - 2 \u2581 - 1 \u2581 0 \u2581 1 \u2581 2\" )\n        return 0\n    inc = 0\n    if n > 0 :\n        inc = 1\n    else :\n        inc = - 1\n    for i in range ( 0 , n - 3 , inc ) :\n        if i + i + 1 + i + 2 + i + 3 + i + 4 == n :\n            print ( i , \" \u2581 \" , i + 1 , \" \u2581 \" , i + 2 , \" \u2581 \" , i + 3 , \" \u2581 \" , i + 4 )\n            return 0\n    print ( \" - 1\" )\n"}
{"java": "static int xorOfArray ( int arr [ ] , int n ) { int xor_arr = 0 ; for ( int i = 0 ; i < n ; i ++ ) { xor_arr = xor_arr ^ arr [ i ] ; } return xor_arr ; }", "python": "def xorOfArray ( arr , n ) :\n    xor_arr = 0\n    for i in range ( n ) :\n        xor_arr = xor_arr ^ arr [ i ]\n    return xor_arr\n"}
{"java": "static int xorGivenSetBits ( int arr [ ] , int n , int k ) { Vector < Integer > v = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . bitCount ( arr [ i ] ) == k ) { v . add ( arr [ i ] ) ; } } int result = v . get ( 0 ) ; for ( int i = 1 ; i < v . size ( ) ; i ++ ) { result = result ^ v . get ( i ) ; } return result ; }", "python": "def xorGivenSetBits ( arr , n , k ) :\n    v = [ ]\n    for i in range ( 0 , n , 1 ) :\n        if ( bin ( arr [ i ] ) . count ( '1' ) == k ) :\n            v . append ( arr [ i ] )\n    result = v [ 0 ]\n    for i in range ( 1 , len ( v ) , 1 ) :\n        result = result ^ v [ i ]\n    return result\n"}
{"java": "static boolean checkTriangularSumRepresentation ( int n ) { HashSet < Integer > tri = new HashSet < > ( ) ; int i = 1 ; while ( true ) { int x = i * ( i + 1 ) / 2 ; if ( x >= n ) { break ; } tri . add ( x ) ; i ++ ; } for ( Integer tm : tri ) { if ( tri . contains ( n - tm ) && ( n - tm ) != ( int ) tri . toArray ( ) [ tri . size ( ) - 1 ] ) { return true ; } } return false ; }", "python": "def checkTriangularSumRepresentation ( n ) :\n    tri = list ( ) ;\n    i = 1 ;\n    while ( 1 ) :\n        x = i * ( i + 1 ) // 2 ;\n        if ( x >= n ) :\n            break ;\n        tri . append ( x ) ;\n        i += 1 ;\n    for tm in tri :\n        if n - tm in tri :\n            return True ;\n    return False ;\n"}
{"java": "static String removeChars ( char arr [ ] , int k ) { int [ ] hash = new int [ MAX_CHAR ] ; int n = arr . length ; for ( int i = 0 ; i < n ; ++ i ) hash [ arr [ i ] - ' a ' ] ++ ; String ans = \" \" ; for ( int i = 0 ; i < n ; ++ i ) { if ( hash [ arr [ i ] - ' a ' ] != k ) { ans += arr [ i ] ; } } return ans ; }", "python": "def removeChars ( arr , k ) :\n    hash = [ 0 ] * MAX_CHAR\n    n = len ( arr )\n    for i in range ( n ) :\n        hash [ ord ( arr [ i ] ) - ord ( ' a ' ) ] += 1\n    ans = \" \"\n    index = 0\n    for i in range ( n ) :\n        if ( hash [ ord ( arr [ i ] ) - ord ( ' a ' ) ] != k ) :\n            ans += arr [ i ]\n    return ans\n"}
{"java": "static String maxValue ( char [ ] a , char [ ] b ) { Arrays . sort ( b ) ; int n = a . length ; int m = b . length ; int j = m - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( j < 0 ) break ; if ( b [ j ] > a [ i ] ) { a [ i ] = b [ j ] ; j -- ; } } return String . valueOf ( a ) ; }", "python": "def maxValue ( a , b ) :\n    b = sorted ( b )\n    bi = [ i for i in b ]\n    ai = [ i for i in a ]\n    n = len ( a )\n    m = len ( b )\n    j = m - 1\n    for i in range ( n ) :\n        if ( j < 0 ) :\n            break\n        if ( bi [ j ] > ai [ i ] ) :\n            ai [ i ] = bi [ j ]\n            j -= 1\n    x = \" \" . join ( ai )\n    return x\n"}
{"java": "public static long productPrimeFactors ( int n ) { long product = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { boolean isPrime = true ; for ( int j = 2 ; j <= i / 2 ; j ++ ) { if ( i % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { product = product * i ; } } } return product ; }", "python": "def productPrimeFactors ( n ) :\n    product = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( n % i == 0 ) :\n            isPrime = 1\n            for j in range ( 2 , int ( i / 2 + 1 ) ) :\n                if ( i % j == 0 ) :\n                    isPrime = 0\n                    break\n            if ( isPrime ) :\n                product = product * i\n    return product\n"}
{"java": "static void findTime ( String T , int K ) { int minutes = ( ( T . charAt ( 0 ) - '0' ) * 10 + T . charAt ( 1 ) - '0' ) * 60 + ( ( T . charAt ( 3 ) - '0' ) * 10 + T . charAt ( 4 ) - '0' ) ; minutes += K ; int hour = ( minutes / 60 ) % 24 ; int min = minutes % 60 ; if ( hour < 10 ) { System . out . print ( \"0\" + hour + \" : \" ) ; } else { System . out . print ( hour + \" : \" ) ; } if ( min < 10 ) { System . out . println ( \"0\" + min ) ; } else { System . out . println ( min ) ; } }", "python": "def findTime ( T , K ) :\n    minutes = ( ( ( ord ( T [ 0 ] ) - ord ( '0' ) ) * 10 + ord ( T [ 1 ] ) - ord ( '0' ) ) * 60 + ( ( ord ( T [ 3 ] ) - ord ( '0' ) ) * 10 + ord ( T [ 4 ] ) - ord ( '0' ) ) ) ;\n    minutes += K\n    hour = ( int ( minutes / 60 ) ) % 24\n    min = minutes % 60\n    if ( hour < 10 ) :\n        print ( 0 , hour , \" : \" , end = \" \u2581 \" )\n    else :\n        print ( hour , \" : \" , end = \" \u2581 \" )\n    if ( min < 10 ) :\n        print ( 0 , min , end = \" \u2581 \" )\n    else :\n        print ( min , end = \" \u2581 \" )\n"}
{"java": "static int maxSumArrangement ( int A [ ] , int R [ ] [ ] , int N , int M ) { int count [ ] = new int [ N ] ; int i ; for ( i = 0 ; i < M ; ++ i ) { int l = R [ i ] [ 0 ] , r = R [ i ] [ 1 ] + 1 ; l -- ; r -- ; count [ l ] ++ ; if ( r < N ) count [ r ] -- ; } for ( i = 1 ; i < N ; ++ i ) { count [ i ] += count [ i - 1 ] ; } int ans = 0 ; Arrays . sort ( count ) ; Arrays . sort ( A ) ; for ( i = N - 1 ; i >= 0 ; -- i ) { ans += A [ i ] * count [ i ] ; } return ans ; }", "python": "def maxSumArrangement ( A , R , N , M ) :\n    count = [ 0 for i in range ( N ) ]\n    for i in range ( M ) :\n        l = R [ i ] [ 0 ]\n        r = R [ i ] [ 1 ] + 1\n        l = l - 1\n        r = r - 1\n        count [ l ] = count [ l ] + 1\n        if ( r < N ) :\n            count [ r ] = count [ r ] - 1\n    for i in range ( 1 , N ) :\n        count [ i ] = count [ i ] + count [ i - 1 ]\n    ans = 0\n    count . sort ( )\n    A . sort ( )\n    for i in range ( N - 1 , - 1 , - 1 ) :\n        ans = ans + A [ i ] * count [ i ]\n    return ans\n"}
{"java": "public static void findSeason ( int M ) { switch ( M ) { case 12 : case 1 : case 2 : System . out . println ( \" WINTER \" ) ; break ; case 3 : case 4 : case 5 : System . out . println ( \" SPRING \" ) ; break ; case 6 : case 7 : case 8 : System . out . println ( \" SUMMER \" ) ; break ; case 9 : case 10 : case 11 : System . out . println ( \" AUTUMN \" ) ; break ; default : System . out . println ( \" Invalid \u2581 Month \u2581 number \" ) ; break ; } }", "python": "def findseason ( M ) :\n    list1 = [ [ 12 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] , [ 9 , 10 , 11 ] ]\n    if M in list1 [ 0 ] :\n        print ( \" WINTER \" )\n    elif M in list1 [ 1 ] :\n        print ( \" SPRING \" )\n    elif M in list1 [ 2 ] :\n        print ( \" SUMMER \" )\n    elif M in list1 [ 3 ] :\n        print ( \" AUTUMN \" )\n    else :\n        print ( \" Invalid \u2581 Month \u2581 Number \" )\n"}
{"java": "static float rectanglearea ( float r ) { if ( r < 0 ) return - 1 ; float a = r * r ; return a ; }", "python": "def rectanglearea ( r ) :\n    if r < 0 :\n        return - 1\n    a = r * r\n    return a\n"}
{"java": "static float frobeniusNorm ( int mat [ ] [ ] ) { int sumSq = 0 ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < col ; j ++ ) { sumSq += ( int ) Math . pow ( mat [ i ] [ j ] , 2 ) ; } } float res = ( float ) Math . sqrt ( sumSq ) ; return res ; }", "python": "def frobeniusNorm ( mat ) :\n    sumSq = 0\n    for i in range ( row ) :\n        for j in range ( col ) :\n            sumSq += pow ( mat [ i ] [ j ] , 2 )\n    res = sqrt ( sumSq )\n    return round ( res , 5 )\n"}
{"java": "static void printNonConsecutive ( int n ) { int p = ( 1 << n ) ; for ( int i = 1 ; i < p ; i ++ ) if ( ( i & ( i << 1 ) ) == 0 ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def printNonConsecutive ( n ) :\n    p = ( 1 << n )\n    for i in range ( 1 , p ) :\n        if ( ( i & ( i << 1 ) ) == 0 ) :\n            print ( i , end = \" \u2581 \" )\n"}
{"java": "private static boolean [ ] getAvail ( int engines , int cur ) { boolean [ ] result = new boolean [ engines ] ; for ( int i = 0 ; i < engines ; i ++ ) result [ i ] = i != cur ; return result ; }", "python": "def readline ( file ) :\n    return file . readline ( ) . rstrip ( ' \\n ' )\n"}
{"java": "static void max_element ( int a [ ] , int n ) { int [ ] pre = new int [ n ] ; pre [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = Math . max ( pre [ i - 1 ] , a [ i ] ) ; int [ ] suf = new int [ n ] ; suf [ n - 1 ] = a [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) suf [ i ] = Math . max ( suf [ i + 1 ] , a [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) System . out . print ( suf [ i + 1 ] + \" \u2581 \" ) ; else if ( i == n - 1 ) System . out . print ( pre [ i - 1 ] + \" \u2581 \" ) ; else System . out . print ( Math . max ( pre [ i - 1 ] , suf [ i + 1 ] ) + \" \u2581 \" ) ; } }", "python": "def max_element ( a , n ) :\n    pre = [ 0 ] * n ;\n    pre [ 0 ] = a [ 0 ] ;\n    for i in range ( 1 , n ) :\n        pre [ i ] = max ( pre [ i - 1 ] , a [ i ] ) ;\n    suf = [ 0 ] * n ;\n    suf [ n - 1 ] = a [ n - 1 ] ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        suf [ i ] = max ( suf [ i + 1 ] , a [ i ] ) ;\n    for i in range ( n ) :\n        if ( i == 0 ) :\n            print ( suf [ i + 1 ] , end = \" \u2581 \" ) ;\n        elif ( i == n - 1 ) :\n            print ( pre [ i - 1 ] , end = \" \u2581 \" ) ;\n        else :\n            print ( max ( pre [ i - 1 ] , suf [ i + 1 ] ) , end = \" \u2581 \" ) ;\n"}
{"java": "static void print_result ( int a [ ] , int n , int k , int m ) { Vector < Vector < Integer > > v = new Vector < Vector < Integer > > ( m ) ; for ( int i = 0 ; i < m ; i ++ ) v . add ( new Vector < Integer > ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int rem = a [ i ] % m ; v . get ( rem ) . add ( a [ i ] ) ; if ( v . get ( rem ) . size ( ) == k ) { for ( int j = 0 ; j < k ; j ++ ) System . out . print ( v . get ( rem ) . get ( j ) + \" \u2581 \" ) ; return ; } } System . out . print ( \" - 1\" ) ; }", "python": "def print_result ( a , n , k , m ) :\n    v = [ [ ] for i in range ( m ) ]\n    for i in range ( 0 , n ) :\n        rem = a [ i ] % m\n        v [ rem ] . append ( a [ i ] )\n        if ( len ( v [ rem ] ) == k ) :\n            for j in range ( 0 , k ) :\n                print ( v [ rem ] [ j ] , end = \" \u2581 \" )\n            return\n    print ( - 1 )\n"}
{"java": "static String maxNumber ( String str , int n ) { int [ ] freq = new int [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == ' z ' ) freq [ 0 ] ++ ; else if ( str . charAt ( i ) == ' n ' ) freq [ 1 ] ++ ; } String num = \" \" ; for ( int i = 0 ; i < freq [ 1 ] ; i ++ ) num += '1' ; for ( int i = 0 ; i < freq [ 0 ] ; i ++ ) num += '0' ; return num ; }", "python": "def maxNumber ( string , n ) :\n    freq = [ 0 , 0 ]\n    for i in range ( n ) :\n        if ( string [ i ] == ' z ' ) :\n            freq [ 0 ] += 1 ;\n        elif ( string [ i ] == ' n ' ) :\n            freq [ 1 ] += 1 ;\n    num = \" \" ;\n    for i in range ( freq [ 1 ] ) :\n        num += '1' ;\n    for i in range ( freq [ 0 ] ) :\n        num += '0' ;\n    return num ;\n"}
{"java": "static int colourVisible ( int height [ ] , int colour [ ] , int K ) { int arr [ ] = new int [ K + 1 ] ; int visible = 0 ; int max = height [ K - 1 ] ; arr [ colour [ K - 1 ] ] = 1 ; for ( int i = K - 2 ; i >= 0 ; i -- ) { if ( height [ i ] > max ) { max = height [ i ] ; arr [ colour [ i ] ] = 1 ; } } for ( int i = 1 ; i <= K ; i ++ ) { if ( arr [ i ] == 1 ) visible ++ ; } return visible ; }", "python": "def colourVisible ( height , colour , K ) :\n    arr = [ 0 for i in range ( K + 1 ) ]\n    visible = 0\n    max = height [ K - 1 ]\n    arr [ colour [ K - 1 ] ] = 1\n    i = K - 2\n    while ( i >= 0 ) :\n        if ( height [ i ] > max ) :\n            max = height [ i ]\n            arr [ colour [ i ] ] = 1\n        i -= 1\n    for i in range ( 1 , K + 1 , 1 ) :\n        if ( arr [ i ] == 1 ) :\n            visible += 1\n    return visible\n"}
{"java": "static void MinSteps ( int SourceX , int SourceY , int DestX , int DestY ) { System . out . println ( Math . max ( Math . abs ( SourceX - DestX ) , Math . abs ( SourceY - DestY ) ) ) ; while ( ( SourceX != DestX ) || ( SourceY != DestY ) ) { if ( SourceX < DestX ) { System . out . print ( ' U ' ) ; SourceX ++ ; } if ( SourceX > DestX ) { System . out . println ( ' D ' ) ; SourceX -- ; } if ( SourceY > DestY ) { System . out . print ( ' L ' ) ; SourceY -- ; } if ( SourceY < DestY ) { System . out . print ( ' R ' ) ; SourceY ++ ; } System . out . println ( ) ; } }", "python": "def MinSteps ( SourceX , SourceY , DestX , DestY ) :\n    print ( max ( abs ( SourceX - DestX ) , abs ( SourceY - DestY ) ) )\n    while ( ( SourceX != DestX ) or ( SourceY != DestY ) ) :\n        if ( SourceX < DestX ) :\n            print ( ' U ' , end = \" \" )\n            SourceX += 1\n        if ( SourceX > DestX ) :\n            print ( ' D ' , end = \" \" )\n            SourceX -= 1\n        if ( SourceY > DestY ) :\n            print ( ' L ' )\n            SourceY -= 1\n        if ( SourceY < DestY ) :\n            print ( ' R ' , end = \" \" )\n            SourceY += 1\n"}
{"java": "static int sameOccurrence ( int arr [ ] , int n , int x , int y ) { int result = 0 ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { int ctX = 0 , ctY = 0 ; for ( int j = i ; j <= n - 1 ; j ++ ) { if ( arr [ j ] == x ) ctX += 1 ; else if ( arr [ j ] == y ) ctY += 1 ; if ( ctX == ctY ) result += 1 ; } } return ( result ) ; }", "python": "def sameOccurrence ( arr , n , x , y ) :\n    result = 0\n    for i in range ( n ) :\n        ctX = 0\n        ctY = 0\n        for j in range ( i , n , 1 ) :\n            if ( arr [ j ] == x ) :\n                ctX += 1 ;\n            elif ( arr [ j ] == y ) :\n                ctY += 1\n            if ( ctX == ctY ) :\n                result += 1\n    return ( result )\n"}
{"java": "public static boolean isPrime ( int num , int [ ] prime ) { int k = Double . valueOf ( Math . sqrt ( num ) ) . intValue ( ) ; for ( int i : prime ) { if ( num % i == 0 ) return false ; if ( i > k ) return true ; } return true ; }", "python": "def enum_prime ( n ) :\n    if n < 2 :\n        return [ ]\n    if n == 2 :\n        return [ 2 ]\n    L = list ( range ( 2 , n + 1 ) )\n    PL = [ ]\n    while True :\n        PL . append ( L [ 0 ] )\n        L = [ i for i in L if i % PL [ - 1 ] != 0 ]\n        if L [ - 1 ] < PL [ - 1 ] ** 2 :\n            return PL + L\n"}
{"java": "static int maxModValue ( int arr [ ] , int n ) { int ans = 0 ; Arrays . sort ( arr ) ; for ( int j = n - 2 ; j >= 0 ; -- j ) { if ( ans >= arr [ j ] ) break ; if ( arr [ j ] == arr [ j + 1 ] ) continue ; for ( int i = 2 * arr [ j ] ; i <= arr [ n - 1 ] + arr [ j ] ; i += arr [ j ] ) { int ind = Arrays . binarySearch ( arr , i ) ; if ( ind < 0 ) ind = Math . abs ( ind + 1 ) ; else { while ( arr [ ind ] == i ) { ind -- ; if ( ind == 0 ) { ind = - 1 ; break ; } } ind ++ ; } ans = Math . max ( ans , arr [ ind - 1 ] % arr [ j ] ) ; } } return ans ; }", "python": "def maxModValue ( arr , n ) :\n    ans = 0\n    arr = sorted ( arr )\n    for j in range ( n - 2 , - 1 , - 1 ) :\n        if ( ans >= arr [ j ] ) :\n            break\n        if ( arr [ j ] == arr [ j + 1 ] ) :\n            continue\n        i = 2 * arr [ j ]\n        while ( i <= arr [ n - 1 ] + arr [ j ] ) :\n            ind = 0\n            for k in arr :\n                if k >= i :\n                    ind = arr . index ( k )\n            ans = max ( ans , arr [ ind - 1 ] % arr [ j ] )\n            i += arr [ j ]\n    return ans\n"}
{"java": "static int findSum ( int arr [ ] , int N ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; int minFreq = Integer . MAX_VALUE ; minFreq = Collections . min ( mp . entrySet ( ) , Comparator . comparingInt ( Map . Entry :: getKey ) ) . getValue ( ) ; int sum = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) == minFreq ) { sum += entry . getKey ( ) * entry . getValue ( ) ; } } return sum ; }", "python": "def findSum ( arr , N ) :\n    mp = dict ( )\n    for i in arr :\n        if i in mp . keys ( ) :\n            mp [ i ] += 1\n        else :\n            mp [ i ] = 1\n    minFreq = 10 ** 9\n    for itr in mp :\n        if mp [ itr ] < minFreq :\n            minFreq = mp [ itr ]\n    Sum = 0\n    for itr in mp :\n        if mp [ itr ] == minFreq :\n            Sum += itr * mp [ itr ]\n    return Sum\n"}
{"java": "static int minOperations ( int n , String a , String b , String c ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char x = a . charAt ( i ) ; char y = b . charAt ( i ) ; char z = c . charAt ( i ) ; if ( x == y && y == z ) ; else if ( x == y || y == z || x == z ) { ans ++ ; } else { ans += 2 ; } } return ans ; }", "python": "def minOperations ( n , a , b , c ) :\n    ans = 0\n    for i in range ( n ) :\n        x = a [ i ]\n        y = b [ i ]\n        z = c [ i ]\n        if ( x == y and y == z ) :\n            continue\n        elif ( x == y or y == z or x == z ) :\n            ans += 1\n        else :\n            ans += 2\n    return ans\n"}
{"java": "static int findNthOddDigitNumber ( int n ) { int count = 0 ; for ( int i = 1 ; ; i ++ ) { int num = i ; boolean isMadeOfOdd = true ; while ( num != 0 ) { if ( num % 10 == 0 || num % 10 == 2 || num % 10 == 4 || num % 10 == 6 || num % 10 == 8 ) { isMadeOfOdd = false ; break ; } num = num / 10 ; } if ( isMadeOfOdd == true ) count ++ ; if ( count == n ) return i ; } }", "python": "def findNthOddDigitNumber ( n ) :\n    count = 0\n    i = 1\n    while True :\n        num = i\n        isMadeOfOdd = True\n        while num != 0 :\n            if ( num % 10 == 0 or num % 10 == 2 or num % 10 == 4 or num % 10 == 6 or num % 10 == 8 ) :\n                isMadeOfOdd = False\n                break\n            num /= 10\n        if isMadeOfOdd == True :\n            count += 1\n        if count == n :\n            return i\n        i += 1\n"}
{"java": "public static boolean traverse ( int x , int y , int dx , int dy ) { int count = 0 ; boolean empty = false ; while ( x >= 0 && x < 10 && y >= 0 && y < 10 ) { if ( x + dx >= 0 && y + dy >= 0 && x + dx < 10 && y + dy < 10 && board [ x + dx ] [ y + dy ] == ' X ' ) count ++ ; else if ( x + dx >= 0 && y + dy >= 0 && x + dx < 10 && y + dy < 10 && board [ x + dx ] [ y + dy ] == ' . ' && ! empty ) { count ++ ; empty = true ; } else break ; x += dx ; y += dy ; } if ( count == 4 ) return true ; return false ; }", "python": "def check ( ) :\n    for i in range ( 10 ) :\n        for j in range ( 10 ) :\n            if j + 4 < 10 :\n                th = ' '\n                for k in range ( 5 ) :\n                    th += s [ i ] [ j + k ]\n                if th == ' XXXXX ' :\n                    return True\n    for i in range ( 10 ) :\n        for j in range ( 10 ) :\n            if i + 4 < 10 :\n                th = ' '\n                for k in range ( 5 ) :\n                    th += s [ i + k ] [ j ]\n                if th == ' XXXXX ' :\n                    return True\n    for i in range ( 10 ) :\n        for j in range ( 10 ) :\n            if i + 4 < 10 and j + 4 < 10 :\n                th = ' '\n                for k in range ( 5 ) :\n                    th += s [ i + k ] [ j + k ]\n                if th == ' XXXXX ' :\n                    return True\n    for i in range ( 10 ) :\n        for j in range ( 10 ) :\n            if i + 4 < 10 and j - 4 >= 0 :\n                th = ' '\n                for k in range ( 5 ) :\n                    th += s [ i + k ] [ j - k ]\n                if th == ' XXXXX ' :\n                    return True\n    return False\n"}
{"java": "public static int nth_term ( int n ) { int a = 1 , b = 1 , c = 1 ; for ( int i = 0 ; i < n ; i ++ ) { c = a + b ; a = b ; b = c ; } return c ; }", "python": "def nth_term ( n ) :\n    a = 1\n    b = 1\n    c = 1\n    for i in range ( 0 , n ) :\n        c = a + b\n        a = b\n        b = c\n    return c\n"}
{"java": "static int pairs_count ( int arr [ ] , int n , int sum ) { int ans = 0 ; Arrays . sort ( arr ) ; int i = 0 , j = n - 1 ; while ( i < j ) { if ( arr [ i ] + arr [ j ] < sum ) i ++ ; else if ( arr [ i ] + arr [ j ] > sum ) j -- ; else { int x = arr [ i ] , xx = i ; while ( ( i < j ) && ( arr [ i ] == x ) ) i ++ ; int y = arr [ j ] , yy = j ; while ( ( j >= i ) && ( arr [ j ] == y ) ) j -- ; if ( x == y ) { int temp = i - xx + yy - j - 1 ; ans += ( temp * ( temp + 1 ) ) / 2 ; } else ans += ( i - xx ) * ( yy - j ) ; } } return ans ; }", "python": "def pairs_count ( arr , n , sum ) :\n    ans = 0\n    arr = sorted ( arr )\n    i , j = 0 , n - 1\n    while ( i < j ) :\n        if ( arr [ i ] + arr [ j ] < sum ) :\n            i += 1\n        elif ( arr [ i ] + arr [ j ] > sum ) :\n            j -= 1\n        else :\n            x = arr [ i ]\n            xx = i\n            while ( i < j and arr [ i ] == x ) :\n                i += 1\n            y = arr [ j ]\n            yy = j\n            while ( j >= i and arr [ j ] == y ) :\n                j -= 1\n            if ( x == y ) :\n                temp = i - xx + yy - j - 1\n                ans += ( temp * ( temp + 1 ) ) // 2\n            else :\n                ans += ( i - xx ) * ( yy - j )\n    return ans\n"}
{"java": "static int countCoins ( int n ) { int c = 0 ; if ( n < 10 ) { return n ; } if ( n > 9 && n < 25 ) { c = n / 10 + n % 10 ; return c ; } if ( n > 24 ) { c = n / 25 ; if ( n % 25 < 10 ) { c = c + n % 25 ; return c ; } if ( n % 25 > 9 ) { c = c + ( n % 25 ) / 10 + ( n % 25 ) % 10 ; return c ; } } return c ; }", "python": "def countCoins ( n ) :\n    c = 0\n    if ( n < 10 ) :\n        return n\n    if ( n > 9 and n < 25 ) :\n        c = n // 10 + n % 10\n        return c\n    if ( n > 24 ) :\n        c = n // 25\n        if ( n % 25 < 10 ) :\n            c = c + n % 25\n            return c\n        if ( n % 25 > 9 ) :\n            c = ( c + ( n % 25 ) // 10 + ( n % 25 ) % 10 )\n            return c\n"}
{"java": "static int minCost ( int N , int P , int Q ) { int cost = 0 ; while ( N > 0 ) { if ( ( N & 1 ) > 0 ) { cost += P ; N -- ; } else { int temp = N / 2 ; if ( temp * P > Q ) cost += Q ; else cost += P * temp ; N /= 2 ; } } return cost ; }", "python": "def minCost ( N , P , Q ) :\n    cost = 0\n    while ( N > 0 ) :\n        if ( N & 1 ) :\n            cost += P\n            N -= 1\n        else :\n            temp = N // 2 ;\n            if ( temp * P > Q ) :\n                cost += Q\n            else :\n                cost += P * temp\n            N //= 2\n    return cost\n"}
{"java": "static void newvol ( double x ) { System . out . print ( \" percentage \u2581 increase \u2581 \" + \" in \u2581 the \u2581 volume \u2581 of \u2581 the \u2581 cylinder \u2581 is \u2581 \" + x + \" % \" ) ; }", "python": "def newvol ( x ) :\n    print ( \" percentage \u2581 increase \u2581 in \u2581 the \u2581 volume \u2581 of \u2581 the \u2581 cylinder \u2581 is \u2581 \" , x , \" % \" )\n"}
{"java": "public static void printLogestIncSubArr ( int arr [ ] , int n ) { int max = 1 , len = 1 , maxIndex = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) len ++ ; else { if ( max < len ) { max = len ; maxIndex = i - max ; } len = 1 ; } } if ( max < len ) { max = len ; maxIndex = n - max ; } for ( int i = maxIndex ; i < max + maxIndex ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def printLogestIncSubArr ( arr , n ) :\n    m = 1\n    l = 1\n    maxIndex = 0\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            l = l + 1\n        else :\n            if ( m < l ) :\n                m = l\n                maxIndex = i - m\n            l = 1\n    if ( m < l ) :\n        m = l\n        maxIndex = n - m\n    for i in range ( maxIndex , ( m + maxIndex ) ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int CenteredDodecahedral_num ( int n ) { return ( 2 * n + 1 ) * ( 5 * n * n + 5 * n + 1 ) ; }", "python": "def CenteredDodecahedral_num ( n ) :\n    return ( 2 * n + 1 ) * ( 5 * n * n + 5 * n + 1 )\n"}
{"java": "static boolean EqualNumber ( int A , int B ) { if ( ( A ^ B ) != 0 ) return true ; else return false ; }", "python": "def EqualNumber ( A , B ) :\n    return ( A ^ B )\n"}
{"java": "static void findUniquePair ( int [ ] arr , int n ) { int XOR = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) XOR = XOR ^ arr [ i ] ; int set_bit_no = XOR & ~ ( XOR - 1 ) ; int x = 0 , y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & set_bit_no ) > 0 ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } System . out . println ( \" The \u2581 unique \u2581 pair \u2581 is \u2581 ( \" + x + \" , \" + y + \" ) \" ) ; }", "python": "def findUniquePair ( arr , n ) :\n    XOR = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        XOR = XOR ^ arr [ i ]\n    set_bit_no = XOR & ~ ( XOR - 1 )\n    x = 0\n    y = 0\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] & set_bit_no ) :\n            x = x ^ arr [ i ]\n        else :\n            y = y ^ arr [ i ]\n    print ( \" The \u2581 unique \u2581 pair \u2581 is \u2581 ( \" , x , \" , \u2581 \" , y , \" ) \" , sep = \" \" )\n"}
{"java": "public static int segments ( int n , int [ ] p , int m ) { HashMap < Integer , Integer > c = new HashMap < > ( ) ; c . put ( 0 , 1 ) ; boolean has = false ; int sum = 0 ; int ans = 0 ; for ( int r = 0 ; r < n ; r ++ ) { if ( p [ r ] < m ) sum -- ; else if ( p [ r ] > m ) sum ++ ; if ( p [ r ] == m ) has = true ; if ( has ) ans += ( c . get ( sum ) == null ? 0 : c . get ( sum ) ) + ( c . get ( sum - 1 ) == null ? 0 : c . get ( sum - 1 ) ) ; else c . put ( sum , c . get ( sum ) == null ? 1 : c . get ( sum ) + 1 ) ; } return ans ; }", "python": "def segments ( n , p , m ) :\n    c = dict ( )\n    c [ 0 ] = 1\n    has = False\n    Sum = 0\n    ans = 0\n    for r in range ( n ) :\n        if ( p [ r ] < m ) :\n            Sum -= 1\n        elif ( p [ r ] > m ) :\n            Sum += 1\n        if ( p [ r ] == m ) :\n            has = True\n        if ( has ) :\n            if ( Sum in c . keys ( ) ) :\n                ans += c [ Sum ]\n            if Sum - 1 in c . keys ( ) :\n                ans += c [ Sum - 1 ]\n        else :\n            c [ Sum ] = c . get ( Sum , 0 ) + 1\n    return ans\n"}
{"java": "static long centered_heptagonal_num ( long n ) { return ( 7 * n * n - 7 * n + 2 ) / 2 ; }", "python": "def centered_heptagonal_num ( n ) :\n    return ( 7 * n * n - 7 * n + 2 ) // 2\n"}
{"java": "static int maxSubarrayLength ( int [ ] A , int N ) { int maxLen = 0 ; int curr_sum = 0 ; HashMap < Integer , Integer > hash = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 0 ) curr_sum -= 1 ; else curr_sum += 1 ; if ( curr_sum == 0 ) maxLen = Math . max ( maxLen , i + 1 ) ; if ( hash . containsKey ( curr_sum ) ) maxLen = Math . max ( maxLen , i - hash . get ( curr_sum ) ) ; else { hash . put ( curr_sum , i ) ; } } return maxLen ; }", "python": "def maxSubarrayLength ( A , N ) :\n    maxLen = 0 ;\n    curr_sum = 0 ;\n    hash = { } ;\n    for i in range ( N ) :\n        if ( A [ i ] % 2 == 0 ) :\n            curr_sum -= 1 ;\n        else :\n            curr_sum += 1 ;\n        if ( curr_sum == 0 ) :\n            maxLen = max ( maxLen , i + 1 ) ;\n        if curr_sum in hash :\n            maxLen = max ( maxLen , i - hash [ curr_sum ] ) ;\n        else :\n            hash [ curr_sum ] = i ;\n    return maxLen ;\n"}
{"java": "static double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( Math . pow ( x , i ) / i ) ; return total ; }", "python": "def SUM ( x , n ) :\n    total = 1\n    for i in range ( 1 , n + 1 ) :\n        total = total + ( ( x ** i ) / i )\n    return total\n"}
{"java": "static void findpair ( int l , int r ) { int ans1 = l ; int ans2 = 2 * l ; System . out . println ( ans1 + \" , \u2581 \" + ans2 ) ; }", "python": "def findpair ( l , r ) :\n    ans1 = l\n    ans2 = 2 * l\n    print ( ans1 , \" , \u2581 \" , ans2 )\n"}
{"java": "static int makeOdd ( int n ) { if ( n % 2 != 0 ) return 1 ; int i ; for ( i = 2 ; i <= n ; i ++ ) if ( ( n % i == 0 ) && ( ( n / i ) % 2 == 1 ) ) break ; return i ; }", "python": "def makeOdd ( n ) :\n    if n % 2 != 0 :\n        return 1 ;\n    for i in range ( 2 , n ) :\n        if ( n % i == 0 and ( int ) ( n / i ) % 2 == 1 ) :\n            return i ;\n"}
{"java": "static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }", "python": "def gcd ( a , b ) :\n    if ( a == 0 or b == 0 ) :\n        False\n    if ( a == b ) :\n        return a\n    if ( a > b ) :\n        return gcd ( a - b , b )\n    return gcd ( a , b - a )\n"}
{"java": "static int gcd ( int a , int b ) { while ( a != 0 && b != 0 ) if ( a > b ) a %= b ; else b %= a ; return a + b ; }", "python": "def sieve ( n ) :\n    s = [ True ] * n\n    for i in range ( 3 , int ( n ** 0.5 ) + 1 , 2 ) :\n        if s [ i ] :\n            s [ i * i : : 2 * i ] = [ False ] * ( ( n - i * i - 1 ) // ( 2 * i ) + 1 )\n    return [ 2 ] + [ i for i in range ( 3 , n , 2 ) if s [ i ] ]\n"}
{"java": "static int factors ( int n ) { HashMap < Integer , Integer > prime = new HashMap < Integer , Integer > ( ) ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; ++ i ) { while ( n % i == 0 ) { if ( prime . containsKey ( i ) ) { prime . put ( i , prime . get ( i ) + 1 ) ; } else { prime . put ( i , 1 ) ; } n = n / i ; } } if ( n > 2 ) { if ( prime . containsKey ( n ) ) { prime . put ( n , prime . get ( n ) + 1 ) ; } else { prime . put ( n , 1 ) ; } } int ans1 = 1 , ans2 = 1 ; for ( Map . Entry < Integer , Integer > it : prime . entrySet ( ) ) { ans1 *= 2 * it . getValue ( ) + 1 ; ans2 *= it . getValue ( ) + 1 ; } return ans1 - ans2 ; }", "python": "def factors ( n ) :\n    prime = dict ( )\n    for i in range ( 2 , mt . ceil ( mt . sqrt ( n + 1 ) ) ) :\n        while ( n % i == 0 ) :\n            if i in prime . keys ( ) :\n                prime [ i ] += 1\n            else :\n                prime [ i ] = 1\n            n = n // i\n    if ( n > 2 ) :\n        if n in prime . keys ( ) :\n            prime [ n ] += 1\n        else :\n            prime [ n ] = 1\n    ans1 = 1\n    ans2 = 1\n    for it in prime :\n        ans1 *= 2 * prime [ it ] + 1\n        ans2 *= prime [ it ] + 1\n    return ans1 - ans2\n"}
{"java": "static int maxTeams ( int N1 , int N2 ) { int count = 0 ; while ( N1 > 0 && N2 > 0 && N1 + N2 >= 3 ) { if ( N1 > N2 ) { N1 -= 2 ; N2 -= 1 ; } else { N1 -= 1 ; N2 -= 2 ; } count ++ ; } return count ; }", "python": "def maxTeams ( N1 , N2 ) :\n    count = 0\n    while ( N1 > 0 and N2 > 0 and N1 + N2 >= 3 ) :\n        if ( N1 > N2 ) :\n            N1 -= 2\n            N2 -= 1\n        else :\n            N1 -= 1\n            N2 -= 2\n        count = count + 1\n    return count\n"}
{"java": "static int next ( ) throws Exception { in . nextToken ( ) ; return ( int ) in . nval ; }", "python": "def memoized ( func ) :\n    mem = { }\n    def wrapped ( * args ) :\n        if args not in mem :\n            mem [ args ] = func ( * args )\n        return mem [ args ]\n    return wrapped\n"}
{"java": "static int findCount ( String s , int n , int a , int b ) { int res = 0 ; char [ ] s1 = s . toCharArray ( ) ; for ( int i = 0 ; i < b ; i ++ ) { if ( i == a ) { if ( s1 [ n - i - 1 ] != '1' ) res += 1 ; } else { if ( s1 [ n - i - 1 ] != '0' ) res += 1 ; } } return res ; }", "python": "def findCount ( s , n , a , b ) :\n    res = 0\n    for i in range ( b ) :\n        if ( i == a ) :\n            res += ( s [ n - i - 1 ] != '1' )\n        else :\n            res += ( s [ n - i - 1 ] != '0' )\n    return res\n"}
{"java": "static int findMinSwaps ( int arr [ ] , int n ) { int noOfZeroes [ ] = new int [ n ] ; int i , count = 0 ; noOfZeroes [ n - 1 ] = 1 - arr [ n - 1 ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { noOfZeroes [ i ] = noOfZeroes [ i + 1 ] ; if ( arr [ i ] == 0 ) noOfZeroes [ i ] ++ ; } for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) count += noOfZeroes [ i ] ; } return count ; }", "python": "def findMinSwaps ( arr , n ) :\n    noOfZeroes = [ 0 ] * n\n    count = 0\n    noOfZeroes [ n - 1 ] = 1 - arr [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        noOfZeroes [ i ] = noOfZeroes [ i + 1 ]\n        if ( arr [ i ] == 0 ) :\n            noOfZeroes [ i ] = noOfZeroes [ i ] + 1\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 1 ) :\n            count = count + noOfZeroes [ i ]\n    return count\n"}
{"java": "static int minimunMoves ( String arr [ ] , int n ) { int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int curr_count = 0 ; String tmp = \" \" ; for ( int j = 0 ; j < n ; j ++ ) { tmp = arr [ j ] + arr [ j ] ; int index = tmp . indexOf ( arr [ i ] ) ; if ( index == arr [ i ] . length ( ) ) return - 1 ; curr_count += index ; } ans = Math . min ( curr_count , ans ) ; } return ans ; }", "python": "def minimunMoves ( arr , n ) :\n    ans = sys . maxsize\n    for i in range ( n ) :\n        curr_count = 0\n        for j in range ( n ) :\n            tmp = arr [ j ] + arr [ j ]\n            index = tmp . find ( arr [ i ] )\n            if ( index == len ( arr [ i ] ) ) :\n                return - 1\n            curr_count += index\n        ans = min ( curr_count , ans )\n    return ans\n"}
{"java": "static int OddDivCount ( int a , int b ) { int res = 0 ; for ( int i = a ; i <= b ; ++ i ) { int divCount = 0 ; for ( int j = 1 ; j <= i ; ++ j ) { if ( i % j == 0 ) { ++ divCount ; } } if ( ( divCount % 2 ) != 0 ) { ++ res ; } } return res ; }", "python": "def OddDivCount ( a , b ) :\n    res = 0\n    for i in range ( a , b + 1 ) :\n        divCount = 0\n        for j in range ( 1 , i + 1 ) :\n            if ( i % j == 0 ) :\n                divCount += 1\n        if ( divCount % 2 ) :\n            res += 1\n    return res\n"}
{"java": "static int getCount ( int a , int b , int c ) { int count = 0 ; for ( int i = 1 ; i <= 81 ; i ++ ) { int cr = b * ( int ) Math . pow ( i , a ) + c ; int tmp = cr ; int sm = 0 ; while ( tmp != 0 ) { sm += tmp % 10 ; tmp /= 10 ; } if ( sm == i && cr < 1e9 ) count ++ ; } return count ; }", "python": "def getCount ( a , b , c ) :\n    count = 0\n    for i in range ( 1 , 82 ) :\n        cr = b * pow ( i , a ) + c\n        tmp = cr\n        sm = 0\n        while ( tmp ) :\n            sm += tmp % 10\n            tmp //= 10\n        if ( sm == i and cr < 10 ** 9 ) :\n            count += 1\n    return count\n"}
{"java": "static int Sum ( int N ) { int SumOfPrimeDivisors [ ] = new int [ N + 1 ] ; for ( int i = 2 ; i <= N ; ++ i ) { if ( SumOfPrimeDivisors [ i ] == 0 ) { for ( int j = i ; j <= N ; j += i ) { SumOfPrimeDivisors [ j ] += i ; } } } return SumOfPrimeDivisors [ N ] ; }", "python": "def Sum ( N ) :\n    SumOfPrimeDivisors = [ 0 ] * ( N + 1 )\n    for i in range ( 2 , N + 1 ) :\n        if ( SumOfPrimeDivisors [ i ] == 0 ) :\n            for j in range ( i , N + 1 , i ) :\n                SumOfPrimeDivisors [ j ] += i\n    return SumOfPrimeDivisors [ N ]\n"}
{"java": "static int maxProdSum ( int arr [ ] , int n ) { int leftArraySum = 0 , maxProduct = 0 ; for ( int i = 0 ; i < n ; i ++ ) { leftArraySum += arr [ i ] ; int rightArraySum = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { rightArraySum += arr [ j ] ; } int k = leftArraySum * rightArraySum ; if ( k > maxProduct ) { maxProduct = k ; } } return maxProduct ; }", "python": "def maxProdSum ( arr , n ) :\n    leftArraySum = 0 ;\n    maxProduct = 0 ;\n    for i in range ( n ) :\n        leftArraySum += arr [ i ] ;\n        rightArraySum = 0 ;\n        for j in range ( i + 1 , n ) :\n            rightArraySum += arr [ j ] ;\n        k = leftArraySum * rightArraySum ;\n        if ( k > maxProduct ) :\n            maxProduct = k ;\n    return maxProduct ;\n"}
{"java": "static int [ ] solve ( int n ) { int low = 1 , high = ( int ) 1e4 , x = n , p = 0 ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int sum = ( mid * ( mid + 1 ) ) / 2 ; if ( x - sum >= 1 ) { p = mid ; low = mid + 1 ; } else { high = mid - 1 ; } } int start = 1 , end = ( int ) 1e4 , y = 1 , q = 0 ; while ( start <= end ) { int mid = ( start + end ) / 2 ; int sum = ( mid * ( mid + 1 ) ) / 2 ; if ( y + sum <= n ) { q = mid ; start = mid + 1 ; } else { end = mid - 1 ; } } x = x - ( p * ( p + 1 ) ) / 2 ; y = y + ( q * ( q + 1 ) ) / 2 ; int r = x ; int c = q + 1 - n + y ; int ans [ ] = { r , c } ; return ans ; }", "python": "def solve ( n ) :\n    low = 1\n    high = 10 ** 4\n    x , p = n , 0\n    while ( low <= high ) :\n        mid = ( low + high ) // 2\n        sum = ( mid * ( mid + 1 ) ) // 2\n        if ( x - sum >= 1 ) :\n            p = mid\n            low = mid + 1\n        else :\n            high = mid - 1\n    start , end , y , q = 1 , 10 ** 4 , 1 , 0\n    while ( start <= end ) :\n        mid = ( start + end ) // 2\n        sum = ( mid * ( mid + 1 ) ) // 2\n        if ( y + sum <= n ) :\n            q = mid\n            start = mid + 1\n        else :\n            end = mid - 1\n    x = x - ( p * ( p + 1 ) ) // 2\n    y = y + ( q * ( q + 1 ) ) // 2\n    r = x\n    c = q + 1 - n + y\n    return r , c\n"}
{"java": "private static String createString ( int a , int b ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < a ; i ++ ) { builder . append ( b ) ; } return builder . toString ( ) ; }", "python": "def resolve ( ) :\n    a , b = iim ( )\n    if a > b :\n        a , b = b , a\n    print ( \" { 0 } \" . format ( a ) * b )\n"}
{"java": "static void EvenOddLength ( int arr [ ] , int n ) { int even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String x = Integer . toString ( arr [ i ] ) ; if ( x . length ( ) % 2 == 0 ) even ++ ; } System . out . println ( \" Number \u2581 of \u2581 even \u2581 length \u2581 elements \u2581 = \u2581 \" + even ) ; System . out . println ( \" Number \u2581 of \u2581 odd \u2581 length \u2581 elements \u2581 = \u2581 \" + ( n - even ) ) ; }", "python": "def EvenOddLength ( arr , n ) :\n    even = 0\n    for i in range ( n ) :\n        x = str ( arr [ i ] )\n        if ( len ( x ) % 2 == 0 ) :\n            even += 1\n    print ( \" Number \u2581 of \u2581 even \u2581 length \u2581 elements \u2581 = \u2581 \" , even )\n    print ( \" Number \u2581 of \u2581 odd \u2581 length \u2581 elements \u2581 = \u2581 \" , n - even )\n"}
{"java": "static void printMax ( int arr [ ] , int n , int k ) { Deque < Integer > Qi = new LinkedList < Integer > ( ) ; int i ; for ( i = 0 ; i < k ; ++ i ) { while ( ! Qi . isEmpty ( ) && arr [ i ] >= arr [ Qi . peekLast ( ) ] ) Qi . removeLast ( ) ; Qi . addLast ( i ) ; } for ( ; i < n ; ++ i ) { System . out . print ( arr [ Qi . peek ( ) ] + \" \u2581 \" ) ; while ( ( ! Qi . isEmpty ( ) ) && Qi . peek ( ) <= i - k ) Qi . removeFirst ( ) ; while ( ( ! Qi . isEmpty ( ) ) && arr [ i ] >= arr [ Qi . peekLast ( ) ] ) Qi . removeLast ( ) ; Qi . addLast ( i ) ; } System . out . print ( arr [ Qi . peek ( ) ] ) ; }", "python": "def printMax ( arr , n , k ) :\n    Qi = deque ( )\n    for i in range ( k ) :\n        while Qi and arr [ i ] >= arr [ Qi [ - 1 ] ] :\n            Qi . pop ( )\n        Qi . append ( i ) ;\n    for i in range ( k , n ) :\n        print ( str ( arr [ Qi [ 0 ] ] ) + \" \u2581 \" , end = \" \" )\n        while Qi and Qi [ 0 ] <= i - k :\n            Qi . popleft ( )\n        while Qi and arr [ i ] >= arr [ Qi [ - 1 ] ] :\n            Qi . pop ( )\n        Qi . append ( i )\n    print ( str ( arr [ Qi [ 0 ] ] ) )\n"}
{"java": "static int angle ( int n ) { return 2 * n ; }", "python": "def angle ( n ) :\n    return 2 * n\n"}
{"java": "private static char whoWins ( String s , int n ) { if ( n == 1 ) { return ( s . charAt ( 0 ) - '0' ) % 2 == 0 ? '2' : '1' ; } boolean isOdd = false ; boolean isEven = false ; for ( int i = 1 ; i <= n ; i ++ ) { int num = s . charAt ( i - 1 ) - '0' ; if ( i % 2 == 0 ) { isEven |= ( num % 2 == 0 ) ; } else { isOdd |= ( num % 2 == 1 ) ; } } if ( n % 2 == 0 ) { return isEven ? '2' : '1' ; } return isOdd ? '1' : '2' ; }", "python": "def solve ( ) :\n    a = int ( input ( ) )\n    n = input ( )\n    if a % 2 == 1 :\n        has_odd = False\n        x = 0\n        while x < a :\n            if int ( n [ x ] ) % 2 == 1 :\n                has_odd = True\n                break\n            x += 2\n        if has_odd :\n            print ( 1 )\n        else :\n            print ( 2 )\n    else :\n        even = False\n        x = 1\n        while x < a :\n            if int ( n [ x ] ) % 2 == 0 :\n                even = True\n                break\n            else :\n                x += 2\n        if even :\n            print ( 2 )\n        else :\n            print ( 1 )\n"}
{"java": "static void printCommon ( String s1 , String s2 ) { int [ ] a1 = new int [ MAX_CHAR ] ; int [ ] a2 = new int [ MAX_CHAR ] ; int length1 = s1 . length ( ) ; int length2 = s2 . length ( ) ; for ( int i = 0 ; i < length1 ; i ++ ) a1 [ s1 . charAt ( i ) - ' a ' ] += 1 ; for ( int i = 0 ; i < length2 ; i ++ ) a2 [ s2 . charAt ( i ) - ' a ' ] += 1 ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( a1 [ i ] != 0 && a2 [ i ] != 0 ) { for ( int j = 0 ; j < Math . min ( a1 [ i ] , a2 [ i ] ) ; j ++ ) System . out . print ( ( ( char ) ( i + ' a ' ) ) ) ; } } }", "python": "def printCommon ( s1 , s2 ) :\n    a1 = [ 0 for i in range ( MAX_CHAR ) ]\n    a2 = [ 0 for i in range ( MAX_CHAR ) ]\n    length1 = len ( s1 )\n    length2 = len ( s2 )\n    for i in range ( 0 , length1 ) :\n        a1 [ ord ( s1 [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( 0 , length2 ) :\n        a2 [ ord ( s2 [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( 0 , MAX_CHAR ) :\n        if ( a1 [ i ] != 0 and a2 [ i ] != 0 ) :\n            for j in range ( 0 , min ( a1 [ i ] , a2 [ i ] ) ) :\n                ch = chr ( ord ( ' a ' ) + i )\n                print ( ch , end = ' ' )\n"}
{"java": "static void printPattern ( int n ) { int arr [ ] [ ] = new int [ n ] [ n ] ; int k , i , j , p = 1 , f ; for ( k = 0 ; k < n ; k ++ ) { j = k ; i = 0 ; while ( j >= 0 ) { arr [ i ] [ j ] = p ; p ++ ; i = i + 1 ; j = j - 1 ; } } for ( k = 1 ; k < n ; k ++ ) { i = k ; j = n - 1 ; f = k ; while ( j >= f ) { arr [ i ] [ j ] = p ; p ++ ; i = i + 1 ; j = j - 1 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ i ] [ j ] + \" \u2581 \" ) ; } System . out . println ( ) ; } }", "python": "def printPattern ( n ) :\n    arr = [ [ 0 for i in range ( n ) ] for j in range ( n ) ]\n    p = 1\n    for k in range ( n ) :\n        j = k\n        i = 0\n        while ( j >= 0 ) :\n            arr [ i ] [ j ] = p\n            p += 1\n            i = i + 1\n            j = j - 1\n    for k in range ( 1 , n , 1 ) :\n        i = k\n        j = n - 1\n        f = k\n        while ( j >= f ) :\n            arr [ i ] [ j ] = p\n            p += 1\n            i = i + 1\n            j = j - 1\n    for i in range ( 0 , n , 1 ) :\n        for j in range ( 0 , n , 1 ) :\n            print ( arr [ i ] [ j ] , end = \" \u2581 \" )\n        print ( \" \\n \" , end = \" \" )\n"}
{"java": "static int minimumDeletions ( int a [ ] , int n ) { if ( n <= 2 ) return 0 ; int count = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( ( a [ i ] < a [ i + 1 ] && a [ i + 1 ] < a [ i + 2 ] ) || ( a [ i ] > a [ i + 1 ] && a [ i + 1 ] > a [ i + 2 ] ) ) count ++ ; } return count ; }", "python": "def minimumDeletions ( a , n ) :\n    if ( n <= 2 ) :\n        return 0\n    count = 0\n    for i in range ( n - 2 ) :\n        if ( ( a [ i ] < a [ i + 1 ] and a [ i + 1 ] < a [ i + 2 ] ) or ( a [ i ] > a [ i + 1 ] and a [ i + 1 ] > a [ i + 2 ] ) ) :\n            count += 1\n    return count\n"}
{"java": "static int getNumber ( int n , int k ) { int pos ; if ( ( n % 2 ) == 0 ) { pos = n / 2 ; } else { pos = ( n / 2 ) + 1 ; } if ( k <= pos ) { return ( k * 2 - 1 ) ; } else return ( ( k - pos ) * 2 ) ; }", "python": "def getNumber ( n , k ) :\n    if ( n % 2 == 0 ) :\n        pos = n // 2 ;\n    else :\n        pos = ( n // 2 ) + 1 ;\n    if ( k <= pos ) :\n        return ( k * 2 - 1 ) ;\n    else :\n        return ( ( k - pos ) * 2 ) ;\n"}
{"java": "public static void solve ( BufferedReader br , PrintWriter pr ) throws IOException { int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] temp = br . readLine ( ) . split ( \" \u2581 \" ) ; int [ ] nums = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { nums [ i ] = Integer . parseInt ( temp [ i ] ) ; } int res = 0 ; int countTriple = 0 ; for ( int i = 2 ; i < n ; i ++ ) { if ( i >= 2 && nums [ i ] == 2 && nums [ i - 1 ] == 1 && nums [ i - 2 ] == 3 ) { countTriple ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { int sum = nums [ i ] + nums [ i + 1 ] ; if ( sum == 5 ) { pr . println ( \" Infinite \" ) ; return ; } else if ( sum == 4 ) { res += 4 ; } else if ( sum == 3 ) { res += 3 ; } } pr . println ( \" Finite \" ) ; pr . println ( res - countTriple ) ; }", "python": "def solve ( N , lista ) :\n    global ans\n    aux_lados = [ 0 , 0 , 3 , 4 ]\n    for i in range ( 1 , N ) :\n        if ( lista [ i - 1 ] == 2 and lista [ i ] == 3 or lista [ i - 1 ] == 3 and lista [ i ] == 2 ) :\n            return - 1\n    cont = 0\n    for i in range ( 1 , N ) :\n        if lista [ i ] == 1 :\n            ans += aux_lados [ lista [ i - 1 ] ]\n        if lista [ i ] == 2 :\n            ans += aux_lados [ lista [ i ] ]\n            if i >= 2 and lista [ i - 2 ] == 3 and lista [ i - 1 ] :\n                ans += - 1\n        if ( lista [ i ] == 3 ) :\n            ans += aux_lados [ lista [ i ] ]\n    return ans\n"}
{"java": "static Vector < Integer > find_idx ( int ar [ ] , int n ) { Vector < Integer > answer = new Vector < Integer > ( ) ; int sum = ar [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( sum == ar [ i ] ) { answer . add ( i + 1 ) ; } sum += ar [ i ] ; } return answer ; }", "python": "def find_idx ( ar , n ) :\n    answer = [ ] ;\n    sum = ar [ 0 ] ;\n    for i in range ( 1 , n ) :\n        if ( sum == ar [ i ] ) :\n            answer . append ( i + 1 ) ;\n        sum += ar [ i ] ;\n    return answer ;\n"}
{"java": "static int Centered_Trigunal_num ( int n ) { return ( 3 * n * n + 3 * n + 2 ) / 2 ; }", "python": "def Centered_Trigunal_num ( n ) :\n    return ( 3 * n * n + 3 * n + 2 ) // 2\n"}
{"java": "static float cone ( float a ) { if ( a < 0 ) return - 1 ; float r = ( float ) ( a * Math . sqrt ( 2 ) ) / 3 ; float h = ( 2 * a ) / 3 ; float V = ( float ) ( 3.14 * Math . pow ( r , 2 ) * h ) ; return V ; }", "python": "def cone ( a ) :\n    if ( a < 0 ) :\n        return - 1 ;\n    r = ( a * math . sqrt ( 2 ) ) / 3 ;\n    h = ( 2 * a ) / 3 ;\n    V = 3.14 * math . pow ( r , 2 ) * h ;\n    return V ;\n"}
{"java": "static boolean isEqualBlock ( int n ) { int first_bit = n % 2 ; int first_count = 1 ; n = n / 2 ; while ( n % 2 == first_bit && n > 0 ) { n = n / 2 ; first_count ++ ; } if ( n == 0 ) return false ; while ( n > 0 ) { first_bit = n % 2 ; int curr_count = 1 ; n = n / 2 ; while ( n % 2 == first_bit ) { n = n / 2 ; curr_count ++ ; } if ( curr_count != first_count ) return false ; } return true ; }", "python": "def isEqualBlock ( n ) :\n    first_bit = n % 2\n    first_count = 1\n    n = n // 2\n    while n % 2 == first_bit and n > 0 :\n        n = n // 2\n        first_count += 1\n    if n == 0 :\n        return False\n    while n > 0 :\n        first_bit = n % 2\n        curr_count = 1\n        n = n // 2\n        while n % 2 == first_bit :\n            n = n // 2\n            curr_count += 1\n        if curr_count != first_count :\n            return False\n    return True\n"}
{"java": "static void farey ( int n ) { double x1 = 0 , y1 = 1 , x2 = 1 , y2 = n ; System . out . printf ( \" % .0f / % . 0f \u2581 % .0f / % . 0f \" , x1 , y1 , x2 , y2 ) ; double x , y = 0 ; while ( y != 1.0 ) { x = Math . floor ( ( y1 + n ) / y2 ) * x2 - x1 ; y = Math . floor ( ( y1 + n ) / y2 ) * y2 - y1 ; System . out . printf ( \" \u2581 % .0f / % . 0f \" , x , y ) ; x1 = x2 ; x2 = x ; y1 = y2 ; y2 = y ; } }", "python": "def farey ( n ) :\n    x1 = 0 ;\n    y1 = 1 ;\n    x2 = 1 ;\n    y2 = n ;\n    print ( x1 , end = \" \" )\n    print ( \" / \" , end = \" \" )\n    print ( y1 , x2 , end = \" \" )\n    print ( \" / \" , end = \" \" )\n    print ( y2 , end = \" \u2581 \" ) ;\n    x = 0 ;\n    y = 0 ;\n    while ( y != 1.0 ) :\n        x = math . floor ( ( y1 + n ) / y2 ) * x2 - x1 ;\n        y = math . floor ( ( y1 + n ) / y2 ) * y2 - y1 ;\n        print ( x , end = \" \" )\n        print ( \" / \" , end = \" \" )\n        print ( y , end = \" \u2581 \" ) ;\n        x1 = x2 ;\n        x2 = x ;\n        y1 = y2 ;\n        y2 = y ;\n"}
{"java": "private static int helper ( int [ ] arr , int n ) { int ans = arr [ 0 ] ; for ( int i = 1 ; i < arr . length ; i ++ ) { ans &= arr [ i ] ; } return ans ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    a = list ( map ( int , input ( ) . split ( ) ) )\n    res = a [ 0 ]\n    for i in range ( 1 , n ) :\n        res &= a [ i ]\n    print ( res )\n"}
{"java": "static long calculateSum ( int n , int k ) { int res = 1 ; int MOD = 1000000007 ; while ( k > 0 ) { if ( ( k & 1 ) == 1 ) res = ( res * n ) % MOD ; k = k / 2 ; n = ( n * n ) % MOD ; } return res ; }", "python": "def calculateSum ( n , k ) :\n    res = 1\n    MOD = 1000000007\n    while k > 0 :\n        if ( k & 1 ) == 1 :\n            res = ( res * n ) % MOD\n        k = k // 2\n        n = ( n * n ) % MOD\n    return res\n"}
{"java": "static int extraElement ( int A [ ] , int B [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans ^= A [ i ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) ans ^= B [ i ] ; return ans ; }", "python": "def extraElement ( A , B , n ) :\n    ans = 0 ;\n    for i in range ( n ) :\n        ans ^= A [ i ] ;\n    for i in range ( n + 1 ) :\n        ans ^= B [ i ] ;\n    return ans ;\n"}
{"java": "static void newvol ( double x ) { System . out . print ( \" percentage \u2581 increase \u2581 \" + \" in \u2581 the \u2581 volume \u2581 of \u2581 the \u2581 cube \u2581 is \u2581 \" + ( Math . pow ( x , 3 ) / 10000 + 3 * x + ( 3 * Math . pow ( x , 2 ) ) / 100 ) ) ; System . out . print ( \" % \" ) ; }", "python": "def newvol ( x ) :\n    print ( \" percentage \u2581 increase \" \" in \u2581 the \u2581 volume \u2581 of \u2581 the \u2581 cube \u2581 is \u2581 \" , ( ( x ** ( 3 ) ) / 10000 + 3 * x + ( 3 * ( x ** ( 2 ) ) ) / 100 ) , \" % \" ) ;\n"}
{"java": "static void newvol ( double x ) { System . out . print ( \" percentage \u2581 increase \u2581 in \u2581 the \" + \" \u2581 volume \u2581 of \u2581 the \u2581 sphere \u2581 is \u2581 \" + ( Math . pow ( x , 3 ) / 10000 + 3 * x + ( 3 * Math . pow ( x , 2 ) ) / 100 ) + \" % \" ) ; }", "python": "def newvol ( x ) :\nprint ( \" percentage \u2581 increase \u2581 in \u2581 the \" , pow ( x , 3 ) / 10000 + 3 * x + ( 3 * pow ( x , 2 ) ) / 100 , \" % \" )"}
{"java": "static void dfs ( int u , int p ) { for ( int v : g [ u ] ) { if ( v != p ) { dfs ( v , u ) ; for ( int i = 0 ; i < 22 ; i ++ ) a [ u ] [ i ] += a [ v ] [ i ] ; } } int pp = 0 ; for ( int i = 0 ; i < 22 ; i ++ ) { if ( ! ( ( a [ u ] [ i ] > 0 && x [ i ] - a [ u ] [ i ] > 0 ) || ( a [ u ] [ i ] == 0 && x [ i ] == 0 ) ) ) { pp = 1 ; break ; } } if ( pp == 0 ) ans ++ ; }", "python": "def dfs ( u , p ) :\n    global ans\n    for i in range ( 0 , len ( g [ u ] ) ) :\n        v = g [ u ] [ i ]\n        if v != p :\n            dfs ( v , u )\n            for i in range ( 0 , 22 ) :\n                a [ u ] [ i ] += a [ v ] [ i ]\n    pp = 0\n    for i in range ( 0 , 22 ) :\n        if ( not ( ( a [ u ] [ i ] > 0 and x [ i ] - a [ u ] [ i ] > 0 ) or ( a [ u ] [ i ] == 0 and x [ i ] == 0 ) ) ) :\n            pp = 1\n            break\n    if pp == 0 :\n        ans += 1\n"}
{"java": "private static void path ( int a , int b , int st , int mask ) { int diffBit = Integer . highestOneBit ( mask & ( a ^ b ) ) ; mask = mask ^ diffBit ; int size = Integer . bitCount ( mask ) ; if ( size == 0 ) { path [ st ] = a ; path [ st + 1 ] = b ; } else { int otherBit = Integer . highestOneBit ( mask ) ; path ( a , a ^ otherBit , st , mask ) ; path ( a ^ diffBit ^ otherBit , b , st + ( 1 << size ) , mask ) ; } }", "python": "def route ( x , i , j ) :\n    NOW = x\n    ANS . append ( NOW )\n    check [ NOW ] = 1\n    for k in range ( 1 << j ) :\n        for l in range ( N ) :\n            if check [ NOW ^ ( 1 << l ) ] == 0 and l != i :\n                NOW = NOW ^ ( 1 << l )\n                check [ NOW ] = 1\n                ANS . append ( NOW )\n                break\n    return NOW ^ ( 1 << i )\n"}
{"java": "static int phi ( int n ) { float result = n ; for ( int p = 2 ; p * p <= n ; ++ p ) { if ( n % p == 0 ) { while ( n % p == 0 ) n /= p ; result *= ( 1.0 - ( 1.0 / ( float ) p ) ) ; } } if ( n > 1 ) result *= ( 1.0 - ( 1.0 / ( float ) n ) ) ; return ( int ) result ; }", "python": "def phi ( n ) :\n    result = n\n    p = 2\n    while ( p * p <= n ) :\n        if ( n % p == 0 ) :\n            while ( n % p == 0 ) :\n                n = n // p\n            result = result * ( 1.0 - ( 1.0 / ( float ) ( p ) ) )\n        p = p + 1\n    if ( n > 1 ) :\n        result = result * ( 1.0 - ( 1.0 / ( float ) ( n ) ) )\n    return ( int ) ( result )\n"}
{"java": "static int phi ( int n ) { int result = n ; for ( int p = 2 ; p * p <= n ; ++ p ) { if ( n % p == 0 ) { while ( n % p == 0 ) n /= p ; result -= result / p ; } } if ( n > 1 ) result -= result / n ; return result ; }", "python": "def phi ( n ) :\n    result = n ;\n    p = 2 ;\n    while ( p * p <= n ) :\n        if ( n % p == 0 ) :\n            while ( n % p == 0 ) :\n                n = int ( n / p ) ;\n            result -= int ( result / p ) ;\n        p += 1 ;\n    if ( n > 1 ) :\n        result -= int ( result / n ) ;\n    return result ;\n"}
{"java": "static int Circular ( int n ) { int Result = 1 ; while ( n > 0 ) { Result = Result * n ; n -- ; } return Result ; }", "python": "def Circular ( n ) :\n    Result = 1\n    while n > 0 :\n        Result = Result * n\n        n -= 1\n    return Result\n"}
{"java": "static int previousFibonacci ( int n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return ( int ) Math . round ( a ) ; }", "python": "def previousFibonacci ( n ) :\n    a = n / ( ( 1 + sqrt ( 5 ) ) / 2.0 )\n    return round ( a )\n"}
{"java": "static boolean checkEqualNo ( int m , int n , int a , int b ) { if ( m <= n ) { if ( ( n - m ) % ( a + b ) == 0 ) { return true ; } else { return false ; } } else { return false ; } }", "python": "def checkEqualNo ( m , n , a , b ) :\n    if ( m <= n ) :\n        if ( ( n - m ) % ( a + b ) == 0 ) :\n            return True ;\n        else :\n            return False ;\n    else :\n        return False ;\n"}
{"java": "static void printPattern ( int n ) { int t ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) System . out . print ( \" \\ t \" ) ; t = i ; for ( int k = 1 ; k <= i ; k ++ ) { System . out . print ( t + \" \\ t \\ t \" ) ; t = t + n - k ; } System . out . println ( ) ; } }", "python": "def printPattern ( n ) :\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i , n ) :\n            print ( \" \\ t \" , end = \" \" )\n        t = i\n        for k in range ( 1 , i + 1 ) :\n            print ( t , \" \\ t \" , \" \\ t \" , end = \" \" )\n            t = t + n - k\n        print ( )\n"}
{"java": "static int smallestIndex ( int [ ] a , int n ) { int right1 = 0 , right0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) right1 = i ; else right0 = i ; } return Math . min ( right1 , right0 ) ; }", "python": "def smallestIndex ( a , n ) :\n    right1 = 0\n    right0 = 0\n    for i in range ( n ) :\n        if ( a [ i ] == 1 ) :\n            right1 = i\n        else :\n            right0 = i\n    return min ( right1 , right0 )\n"}
{"java": "static void findAndPrintOriginalArray ( int arr [ ] , int n ) { int arr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) arr_sum += arr [ i ] ; arr_sum = arr_sum / ( n - 1 ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr_sum - arr [ i ] + \" \u2581 \" ) ; }", "python": "def findAndPrintOriginalArray ( arr , n ) :\n    arr_sum = 0\n    for i in range ( 0 , n ) :\n        arr_sum += arr [ i ]\n    arr_sum = int ( arr_sum / ( n - 1 ) )\n    for i in range ( 0 , n ) :\n        print ( ( arr_sum - arr [ i ] ) , end = \" \u2581 \" )\n"}
{"java": "static void makeAP ( int arr [ ] , int n ) { int initial_term , common_difference ; if ( n == 3 ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else if ( ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] ) { initial_term = arr [ 0 ] ; common_difference = arr [ 1 ] - arr [ 0 ] ; } else if ( ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else { common_difference = ( arr [ 3 ] - arr [ 0 ] ) / 3 ; initial_term = arr [ 0 ] ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( initial_term + ( i * common_difference ) + \" \u2581 \" ) ; System . out . println ( ) ; }", "python": "def makeAP ( arr , n ) :\n    initial_term , common_difference = 0 , 0\n    if ( n == 3 ) :\n        common_difference = arr [ 2 ] - arr [ 1 ]\n        initial_term = arr [ 1 ] - common_difference\n    elif ( ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] ) :\n        initial_term = arr [ 0 ]\n        common_difference = arr [ 1 ] - arr [ 0 ]\n    elif ( ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) ) :\n        common_difference = arr [ 2 ] - arr [ 1 ]\n        initial_term = arr [ 1 ] - common_difference\n    else :\n        common_difference = ( arr [ 3 ] - arr [ 0 ] ) / 3\n        initial_term = arr [ 0 ]\n    for i in range ( n ) :\n        print ( int ( initial_term + ( i * common_difference ) ) , end = \" \u2581 \" )\n    print ( )\n"}
{"java": "static double findMinValue ( double arr [ ] , double n ) { double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += ( double ) Math . log10 ( arr [ i ] ) + EPS ; double xl = ( double ) ( sum / n + EPS ) ; double res = Math . pow ( ( double ) 10.0 , ( double ) xl ) + EPS ; return ( double ) Math . ceil ( res + EPS ) ; }", "python": "def findMinValue ( arr , n ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += math . log10 ( arr [ i ] ) + EPS ;\n    xl = ( sum / n + EPS ) ;\n    res = math . pow ( 10.0 , xl ) + EPS ;\n    return math . ceil ( res + EPS ) ;\n"}
{"java": "static double longestRodInCuboid ( int length , int breadth , int height ) { double result ; int temp ; temp = length * length + breadth * breadth + height * height ; result = Math . sqrt ( temp ) ; return result ; }", "python": "def longestRodInCuboid ( length , breadth , height ) :\n    temp = length * length + breadth * breadth + height * height\n    result = sqrt ( temp )\n    return result\n"}
{"java": "static int maxOR ( int L , int R ) { int maximum = Integer . MIN_VALUE ; for ( int i = L ; i < R ; i ++ ) for ( int j = i + 1 ; j <= R ; j ++ ) maximum = Math . max ( maximum , ( i | j ) ) ; return maximum ; }", "python": "def maxOR ( L , R ) :\n    maximum = - 10 ** 9\n    for i in range ( L , R ) :\n        for j in range ( i + 1 , R + 1 ) :\n            maximum = max ( maximum , ( i | j ) )\n    return maximum\n"}
{"java": "static boolean isDivisible ( int [ ] arr , int n , int y ) { int d = 0 , i = 0 ; while ( i < n ) { while ( d < y && i < n ) d = d * 10 + arr [ i ++ ] ; d = d % y ; } if ( d == 0 ) return true ; return false ; }", "python": "def isDivisible ( arr , n , y ) :\n    d , i = 0 , 0\n    while i < n :\n        while d < y and i < n :\n            d = d * 10 + arr [ i ]\n            i += 1\n        d = d % y\n    if d == 0 :\n        return True\n    return False\n"}
{"java": "static int numberOfCuts ( int M , int N ) { int result = 0 ; result = ( M - 1 ) * ( N - 1 ) ; return result ; }", "python": "def numberOfCuts ( M , N ) :\n    result = 0\n    result = ( M - 1 ) * ( N - 1 )\n    return result\n"}
{"java": "static int getElement ( int a [ ] , int n , int S ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum + ( a [ i ] * ( n - i ) ) == S ) return a [ i ] ; sum += a [ i ] ; } return - 1 ; }", "python": "def getElement ( a , n , S ) :\n    a . sort ( ) ;\n    sum = 0 ;\n    for i in range ( n ) :\n        if ( sum + ( a [ i ] * ( n - i ) ) == S ) :\n            return a [ i ] ;\n        sum += a [ i ] ;\n    return - 1 ;\n"}
{"java": "static int xorOdd ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int xorArr = 0 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { if ( ( ( it . getValue ( ) ) % 2 ) == 1 ) { xorArr ^= it . getKey ( ) ; } } return xorArr ; }", "python": "def xorOdd ( arr , n ) :\n    m = dict . fromkeys ( arr , 0 ) ;\n    for i in range ( n ) :\n        m [ arr [ i ] ] += 1 ;\n    xorArr = 0 ;\n    for key , value in m . items ( ) :\n        if ( value & 1 ) :\n            xorArr ^= key ;\n    return xorArr ;\n"}
{"java": "static double sumProductDifference ( int a , int b , int c , int d , int e ) { double rootSum = ( double ) ( - 1 * b ) / a ; double rootProduct = ( double ) e / a ; return Math . abs ( rootSum - rootProduct ) ; }", "python": "def sumProductDifference ( a , b , c , d , e ) :\n    rootSum = ( - 1 * b ) / a\n    rootProduct = e / a\n    return abs ( rootSum - rootProduct )\n"}
{"java": "static void equal_xor_sum ( int arr [ ] , int n ) { int Sum = 0 ; int Xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Sum = Sum + arr [ i ] ; Xor = Xor ^ arr [ i ] ; } if ( Sum == Xor ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; }", "python": "def equal_xor_sum ( arr , n ) :\n    Sum = 0 ;\n    Xor = 0 ;\n    for i in range ( n ) :\n        Sum = Sum + arr [ i ] ;\n        Xor = Xor ^ arr [ i ] ;\n    if ( Sum == Xor ) :\n        print ( \" YES \" ) ;\n    else :\n        print ( \" NO \" ) ;\n"}
{"java": "static int coin ( int totalRupees , int X , int Y , int Z ) { float one = 0 , fifty = 0 , twentyfive = 0 , result = 0 , total = 0 ; one = X * 1 ; fifty = ( ( Y * 1 ) / 2 ) ; twentyfive = ( ( Z * 1 ) / 4 ) ; total = one + fifty + twentyfive ; result = ( ( totalRupees ) / total ) ; return ( int ) result ; }", "python": "def coin ( totalRupees , X , Y , Z ) :\n    one = X * 1\n    fifty = ( ( Y * 1 ) / 2.0 )\n    twentyfive = ( ( Z * 1 ) / 4.0 )\n    total = one + fifty + twentyfive\n    result = ( ( totalRupees ) / total )\n    return int ( result )\n"}
{"java": "static long noOfTriples ( long arr [ ] , int n ) { Arrays . sort ( arr ) ; long count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == arr [ 2 ] ) count ++ ; if ( arr [ 0 ] == arr [ 2 ] ) return ( count - 2 ) * ( count - 1 ) * ( count ) / 6 ; else if ( arr [ 1 ] == arr [ 2 ] ) return ( count - 1 ) * ( count ) / 2 ; return count ; }", "python": "def noOfTriples ( arr , n ) :\n    arr . sort ( )\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] == arr [ 2 ] :\n            count += 1\n    if arr [ 0 ] == arr [ 2 ] :\n        return ( count - 2 ) * ( count - 1 ) * ( count ) / 6\n    elif arr [ 1 ] == arr [ 2 ] :\n        return ( count - 1 ) * ( count ) / 2\n    return count\n"}
{"java": "static double haversine ( double lat1 , double lon1 , double lat2 , double lon2 ) { double dLat = Math . toRadians ( lat2 - lat1 ) ; double dLon = Math . toRadians ( lon2 - lon1 ) ; lat1 = Math . toRadians ( lat1 ) ; lat2 = Math . toRadians ( lat2 ) ; double a = Math . pow ( Math . sin ( dLat / 2 ) , 2 ) + Math . pow ( Math . sin ( dLon / 2 ) , 2 ) * Math . cos ( lat1 ) * Math . cos ( lat2 ) ; double rad = 6371 ; double c = 2 * Math . asin ( Math . sqrt ( a ) ) ; return rad * c ; }", "python": "def haversine ( lat1 , lon1 , lat2 , lon2 ) :\n    dLat = ( lat2 - lat1 ) * math . pi / 180.0\n    dLon = ( lon2 - lon1 ) * math . pi / 180.0\n    lat1 = ( lat1 ) * math . pi / 180.0\n    lat2 = ( lat2 ) * math . pi / 180.0\n    a = ( pow ( math . sin ( dLat / 2 ) , 2 ) + pow ( math . sin ( dLon / 2 ) , 2 ) * math . cos ( lat1 ) * math . cos ( lat2 ) ) ;\n    rad = 6371\n    c = 2 * math . asin ( math . sqrt ( a ) )\n    return rad * c\n"}
{"java": "static void printCount ( int a [ ] [ ] , int n , int m , int z [ ] , int l ) { for ( int i = 0 ; i < n ; i ++ ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int j = 0 ; j < m ; j ++ ) mp . put ( a [ i ] [ j ] , 1 ) ; int count = 0 ; for ( int j = 0 ; j < l ; j ++ ) { if ( mp . containsKey ( z [ j ] ) ) count += 1 ; } System . out . println ( \" row \" + ( i + 1 ) + \" \u2581 = \u2581 \" + count ) ; } }", "python": "def printCount ( a , n , m , z , l ) :\n    for i in range ( n ) :\n        mp = dict ( )\n        for j in range ( m ) :\n            mp [ a [ i ] [ j ] ] = 1\n        count = 0\n        for j in range ( l ) :\n            if z [ j ] in mp . keys ( ) :\n                count += 1\n        print ( \" row \" , i + 1 , \" \u2581 = \u2581 \" , count )\n"}
{"java": "static void solve ( long n ) { if ( n == 1 ) { System . out . println ( - 1 ) ; } else { int num = 2 ; for ( long i = 0 ; i < n - 1 ; i ++ ) { num = ( num * 10 ) + 3 ; } System . out . println ( num ) ; } }", "python": "def solve ( n ) :\n    if ( n == 1 ) :\n        print ( - 1 ) ;\n    else :\n        num = 2 ;\n        for i in range ( n - 1 ) :\n            num = ( num * 10 ) + 3 ;\n        print ( num ) ;\n"}
{"java": "static int countOccurrances ( int n , int d ) { int count = 0 ; while ( n > 0 ) { count = ( n % 10 == d ) ? count + 1 : count ; n = n / 10 ; } return count ; }", "python": "def countOccurrances ( n , d ) :\n    count = 0\n    while ( n > 0 ) :\n        if ( n % 10 == d ) :\n            count = count + 1\n        n = n // 10\n    return count\n"}
{"java": "public static int nthTerm ( int N ) { int nth = 0 , i ; for ( i = N ; i > 0 ; i -- ) { nth += Math . pow ( i , i ) ; } return nth ; }", "python": "def nthTerm ( N ) :\n    nth = 0\n    for i in range ( N , 0 , - 1 ) :\n        nth += pow ( i , i )\n    return nth\n"}
{"java": "static int countPairs ( int a [ ] , int n ) { int mn = Integer . MAX_VALUE ; int mx = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { mn = Math . min ( mn , a [ i ] ) ; mx = Math . max ( mx , a [ i ] ) ; } int c1 = 0 ; int c2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == mn ) c1 ++ ; if ( a [ i ] == mx ) c2 ++ ; } if ( mn == mx ) return n * ( n - 1 ) / 2 ; else return c1 * c2 ; }", "python": "def countPairs ( a , n ) :\n    mn = + 2147483647\n    mx = - 2147483648\n    for i in range ( n ) :\n        mn = min ( mn , a [ i ] )\n        mx = max ( mx , a [ i ] )\n    c1 = 0\n    c2 = 0\n    for i in range ( n ) :\n        if ( a [ i ] == mn ) :\n            c1 += 1\n        if ( a [ i ] == mx ) :\n            c2 += 1\n    if ( mn == mx ) :\n        return n * ( n - 1 ) // 2\n    else :\n        return c1 * c2\n"}
{"java": "static void rec ( int x ) { if ( x >= k ) { for ( int j = 0 ; j < l / k ; j ++ ) for ( int d = 0 ; d < k ; d ++ ) { c2 [ k * j + a [ d ] ] = c1 [ k * j + d ] ; } ; char cc = ' @ ' ; int cnt = 0 ; for ( int j = 0 ; j < l ; j ++ ) if ( c2 [ j ] != cc ) { cc = c2 [ j ] ; ++ cnt ; } ; mn = Math . min ( cnt , mn ) ; } else { for ( int i = 0 ; i < k ; i ++ ) if ( ! b [ i ] ) { b [ i ] = true ; a [ x ] = i ; rec ( x + 1 ) ; b [ i ] = false ; } ; } ; }", "python": "def next_permut ( entry ) :\n    m = len ( entry )\n    i = m - 1\n    while ( i > 0 and entry [ i ] < entry [ i - 1 ] ) :\n        i -= 1\n    if ( i == 0 ) :\n        entry . reverse ( )\n        return False\n    k = m - 1\n    while ( entry [ k ] < entry [ i - 1 ] ) :\n        k -= 1\n    entry [ i - 1 ] , entry [ k ] = entry [ k ] , entry [ i - 1 ]\n    x = 0\n    while ( i + x < m - 1 - x ) :\n        entry [ i + x ] , entry [ m - 1 - x ] = entry [ m - 1 - x ] , entry [ i + x ]\n        x += 1\n    return True\n"}
{"java": "public static void aMethod ( ) { Scanner scanner = new Scanner ( System . in ) ; String word = scanner . nextLine ( ) ; System . out . print ( word . substring ( 0 , 1 ) . toUpperCase ( ) ) ; System . out . println ( word . substring ( 1 , word . length ( ) ) ) ; }", "python": "def word ( ) :\n    p = input ( )\n    print ( p [ 0 ] . upper ( ) + p [ 1 : ] )\n"}
{"java": "static int FindMinNumber ( int arr [ ] , int n , int k ) { int i = 0 ; int j = 0 ; int min_num = Integer . MAX_VALUE ; boolean found = false ; int sum = 0 ; while ( i < n ) { sum = sum + arr [ i ] ; if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } else if ( sum > k ) { while ( sum > k ) { sum = sum - arr [ j ] ; j ++ ; } if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } } i ++ ; } if ( found ) return min_num ; return - 1 ; }", "python": "def FindMinNumber ( arr , n , k ) :\n    i = 0\n    j = 0\n    min_num = 10 ** 9\n    found = False\n    Sum = 0\n    while ( i < n ) :\n        Sum = Sum + arr [ i ]\n        if ( Sum == k ) :\n            min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) )\n            found = True\n        elif ( Sum > k ) :\n            while ( Sum > k ) :\n                Sum = Sum - arr [ j ]\n                j += 1\n            if ( Sum == k ) :\n                min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) )\n                found = True\n        i += 1\n    if ( found ) :\n        return min_num\n    return - 1\n"}
{"java": "static int findQuadruples ( int a [ ] , int b [ ] , int c [ ] , int d [ ] , int x , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) for ( int l = 0 ; l < n ; l ++ ) if ( ( a [ i ] ^ b [ j ] ^ c [ k ] ^ d [ l ] ) == x ) count ++ ; return count ; }", "python": "def findQuadruples ( a , b , c , d , x , n ) :\n    count = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            for k in range ( n ) :\n                for l in range ( n ) :\n                    if ( ( a [ i ] ^ b [ j ] ^ c [ k ] ^ d [ l ] ) == x ) :\n                        count += 1\n    return count\n"}
{"java": "static boolean isPossible ( int Sx , int Sy , int Dx , int Dy , int x , int y ) { if ( Math . abs ( Sx - Dx ) % x == 0 && Math . abs ( Sy - Dy ) % y == 0 && ( Math . abs ( Sx - Dx ) / x ) % 2 == ( Math . abs ( Sy - Dy ) / y ) % 2 ) return true ; return false ; }", "python": "def isPossible ( Sx , Sy , Dx , Dy , x , y ) :\n    if ( abs ( Sx - Dx ) % x == 0 and abs ( Sy - Dy ) % y == 0 and ( abs ( Sx - Dx ) / x ) % 2 == ( abs ( Sy - Dy ) / y ) % 2 ) :\n        return True ;\n    return False ;\n"}
{"java": "static int minOperations ( int k ) { if ( k <= 0 || k >= 10000 ) return 1000000000 ; if ( k == m ) return 0 ; dp [ k ] = dp [ k ] ; if ( dp [ k ] != - 1 ) return dp [ k ] ; dp [ k ] = 1000000000 ; dp [ k ] = 1 + Math . min ( minOperations ( 2 * k ) , minOperations ( k - 1 ) ) ; return dp [ k ] ; }", "python": "def minOperations ( k ) :\n    if ( k <= 0 or k >= 1000 ) :\n        return 1e9\n    if ( k == m ) :\n        return 0\n    dp [ k ] = dp [ k ]\n    if ( dp [ k ] != - 1 ) :\n        return dp [ k ]\n    dp [ k ] = 1e9\n    dp [ k ] = 1 + min ( minOperations ( 2 * k ) , minOperations ( k - 1 ) )\n    return dp [ k ]\n"}
{"java": "static void checksum ( int n ) { if ( n % 3 == 0 ) System . out . println ( n / 3 - 1 + \" \u2581 \" + n / 3 + \" \u2581 \" + ( n / 3 + 1 ) ) ; else System . out . println ( \" - 1\" ) ; }", "python": "def checksum ( n ) :\n    n = int ( n )\n    if n % 3 == 0 :\n        print ( int ( n / 3 - 1 ) , \" \u2581 \" , int ( n / 3 ) , \" \u2581 \" , int ( n / 3 + 1 ) )\n    else :\n        print ( \" - 1\" )\n"}
{"java": "static void checksum ( int n ) { if ( n % 5 == 0 ) System . out . println ( ( n / 5 - 2 ) + \" \u2581 \" + ( n / 5 - 1 ) + \" \u2581 \" + ( n / 5 ) + \" \u2581 \" + ( n / 5 + 1 ) + \" \u2581 \" + ( n / 5 + 2 ) ) ; else System . out . println ( \" - 1\" ) ; }", "python": "def checksum ( n ) :\n    n = int ( n )\n    if n % 5 == 0 :\n        print ( int ( n / 5 - 2 ) , \" \u2581 \" , int ( n / 5 - 1 ) , \" \u2581 \" , int ( n / 5 ) , \" \u2581 \" , int ( n / 5 + 1 ) , \" \u2581 \" , int ( n / 5 + 2 ) )\n    else :\n        print ( \" - 1\" )\n"}
{"java": "static int getMinimumOps ( int ar [ ] , int k ) { int n = ar . length ; int dp [ ] [ ] = new int [ n ] [ k + 1 ] ; dp [ 0 ] [ 1 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int maxGroups = Math . min ( k , i + 1 ) ; for ( int j = 1 ; j <= maxGroups ; j ++ ) { dp [ i ] [ j ] = Integer . MAX_VALUE ; if ( j == 1 ) { int freq [ ] = new int [ 100000 ] ; int freqOfMode = 0 ; for ( int it = 0 ; it <= i ; it ++ ) { freq [ ar [ it ] ] ++ ; int newElementFreq = freq [ ar [ it ] ] ; if ( newElementFreq > freqOfMode ) freqOfMode = newElementFreq ; } dp [ i ] [ 1 ] = ( i + 1 ) - freqOfMode ; } else { int freq [ ] = new int [ 100000 ] ; int freqOfMode = 0 ; for ( int it = i ; it >= j - 1 ; it -- ) { freq [ ar [ it ] ] ++ ; int newElementFreq = freq [ ar [ it ] ] ; if ( newElementFreq > freqOfMode ) freqOfMode = newElementFreq ; int elementsToChange = i - it + 1 ; elementsToChange -= freqOfMode ; dp [ i ] [ j ] = Math . min ( dp [ it - 1 ] [ j - 1 ] + elementsToChange , dp [ i ] [ j ] ) ; } } } } return dp [ n - 1 ] [ k ] ; }", "python": "def getMinimumOps ( ar , k ) :\n    n = len ( ar )\n    dp = [ [ 0 for i in range ( k + 1 ) ] for i in range ( n ) ]\n    dp [ 0 ] [ 1 ] = 0\n    for i in range ( 1 , n ) :\n        maxGroups = min ( k , i + 1 )\n        for j in range ( 1 , maxGroups + 1 ) :\n            dp [ i ] [ j ] = 10 ** 9\n            if ( j == 1 ) :\n                freq1 = dict ( )\n                freqOfMode = 0\n                for it in range ( 0 , i + 1 ) :\n                    freq1 [ ar [ it ] ] = freq1 . get ( ar [ it ] , 0 ) + 1\n                    newElementFreq = freq1 [ ar [ it ] ]\n                    if ( newElementFreq > freqOfMode ) :\n                        freqOfMode = newElementFreq\n                dp [ i ] [ 1 ] = ( i + 1 ) - freqOfMode\n            else :\n                freq = dict ( )\n                freqOfMode = 0\n                for it in range ( i , j - 2 , - 1 ) :\n                    freq [ ar [ it ] ] = freq . get ( ar [ it ] , 0 ) + 1\n                    newElementFreq = freq [ ar [ it ] ]\n                    if ( newElementFreq > freqOfMode ) :\n                        freqOfMode = newElementFreq\n                    elementsToChange = i - it + 1\n                    elementsToChange -= freqOfMode\n                    dp [ i ] [ j ] = min ( dp [ it - 1 ] [ j - 1 ] + elementsToChange , dp [ i ] [ j ] )\n    return dp [ n - 1 ] [ k ]\n"}
{"java": "static int findLen ( int [ ] arr , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == m ) return 0 ; else return - 1 ; } if ( v [ i ] [ curr ] ) return dp [ i ] [ curr ] ; v [ i ] [ curr ] = true ; int l = findLen ( arr , i + 1 , curr , n , m ) ; int r = findLen ( arr , i + 1 , curr | arr [ i ] , n , m ) ; dp [ i ] [ curr ] = l ; if ( r != - 1 ) dp [ i ] [ curr ] = Math . max ( dp [ i ] [ curr ] , r + 1 ) ; return dp [ i ] [ curr ] ; }", "python": "def findLen ( arr , i , curr , n , m ) :\n    if ( i == n ) :\n        if ( curr == m ) :\n            return 0 ;\n        else :\n            return - 1 ;\n    if ( v [ i ] [ curr ] ) :\n        return dp [ i ] [ curr ] ;\n    v [ i ] [ curr ] = 1 ;\n    l = findLen ( arr , i + 1 , curr , n , m ) ;\n    r = findLen ( arr , i + 1 , curr | arr [ i ] , n , m ) ;\n    dp [ i ] [ curr ] = l ;\n    if ( r != - 1 ) :\n        dp [ i ] [ curr ] = max ( dp [ i ] [ curr ] , r + 1 ) ;\n    return dp [ i ] [ curr ] ;\n"}
{"java": "static int findLen ( int [ ] arr , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == m ) return 0 ; else return - 1 ; } if ( v [ i ] [ curr ] ) return dp [ i ] [ curr ] ; v [ i ] [ curr ] = true ; int l = findLen ( arr , i + 1 , curr , n , m ) ; int r = findLen ( arr , i + 1 , curr & arr [ i ] , n , m ) ; dp [ i ] [ curr ] = l ; if ( r != - 1 ) dp [ i ] [ curr ] = Math . max ( dp [ i ] [ curr ] , r + 1 ) ; return dp [ i ] [ curr ] ; }", "python": "def findLen ( arr , i , curr , n , m ) :\n    if ( i == n ) :\n        if ( curr == m ) :\n            return 0 ;\n        else :\n            return - 1 ;\n    if ( v [ i ] [ curr ] ) :\n        return dp [ i ] [ curr ] ;\n    v [ i ] [ curr ] = 1 ;\n    l = findLen ( arr , i + 1 , curr , n , m ) ;\n    r = findLen ( arr , i + 1 , curr & arr [ i ] , n , m ) ;\n    dp [ i ] [ curr ] = l ;\n    if ( r != - 1 ) :\n        dp [ i ] [ curr ] = max ( dp [ i ] [ curr ] , r + 1 ) ;\n    return dp [ i ] [ curr ] ;\n"}
{"java": "static void pattern ( int nos , int i , int space ) { char prt = ' $ ' ; int s , j ; for ( s = nos ; s >= 1 ; s -- ) { System . out . print ( \" \u2581 \u2581 \" ) ; } for ( j = 1 ; j <= i ; j ++ ) { if ( space != 0 ) { if ( i == 9 && j == 1 ) { continue ; } } if ( i == 1 || i == 9 ) { System . out . print ( prt + \" \" ) ; } else if ( j == 1 || j == i ) { System . out . print ( prt + \" \" ) ; } else { System . out . print ( \" \u2581 \u2581 \" ) ; } } }", "python": "def pattern ( nos , i , space ) :\n    prt = ' $ '\n    for s in range ( nos , 0 , - 1 ) :\n        print ( end = \" \u2581 \u2581 \" )\n    for j in range ( 1 , i + 1 ) :\n        if ( space != 0 ) :\n            if ( i == 9 and j == 1 ) :\n                continue\n        if ( i == 1 or i == 9 ) :\n            print ( prt , end = \" \" )\n        elif ( j == 1 or j == i ) :\n            print ( prt , end = \" \" )\n        else :\n            print ( end = \" \u2581 \u2581 \" )\n"}
{"java": "static int sumOfTermsInNthRow ( int n ) { int sum = ( int ) ( n * ( 2 * pow ( n , 2 ) + 1 ) ) ; return sum ; }", "python": "def sumOfTermsInNthRow ( n ) :\n    sum = n * ( 2 * pow ( n , 2 ) + 1 )\n    return sum\n"}
{"java": "static void find_distinct ( int a [ ] , int n , int q , int queries [ ] ) { int [ ] check = new int [ MAX ] ; int [ ] idx = new int [ MAX ] ; int cnt = 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( check [ a [ i ] ] == 0 ) { idx [ i ] = cnt ; check [ a [ i ] ] = 1 ; cnt ++ ; } else { idx [ i ] = cnt - 1 ; } } for ( int i = 0 ; i < q ; i ++ ) { int m = queries [ i ] ; System . out . print ( idx [ m ] + \" \u2581 \" ) ; } }", "python": "def find_distinct ( a , n , q , queries ) :\n    check = [ 0 ] * MAX ;\n    idx = [ 0 ] * MAX ;\n    cnt = 1 ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( check [ a [ i ] ] == 0 ) :\n            idx [ i ] = cnt ;\n            check [ a [ i ] ] = 1 ;\n            cnt += 1 ;\n        else :\n            idx [ i ] = cnt - 1 ;\n    for i in range ( 0 , q ) :\n        m = queries [ i ] ;\n        print ( idx [ m ] , end = \" \u2581 \" ) ;\n"}
{"java": "static int xorPairSum ( int ar [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) sum = sum ^ ( ar [ i ] + ar [ j ] ) ; return sum ; }", "python": "def xor_pair_sum ( ar , n ) :\n    total = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            total = total ^ ( ar [ i ] + ar [ j ] )\n    return total\n"}
{"java": "private static void paint ( int [ ] [ ] area , int px , int py , int qx , int qy ) { for ( int i = px ; i < qx ; i ++ ) { for ( int j = py ; j < qy ; j ++ ) { area [ i ] [ j ] = 0 ; } } }", "python": "def i_input ( ) : return int ( input ( ) )\ndef i_map ( ) : return map ( int , input ( ) . split ( ) )\ndef i_list ( ) : return list ( i_map ( ) )\ndef i_row ( N ) : return [ i_input ( ) for _ in range ( N ) ]\ndef i_row_list ( N ) : return [ i_list ( ) for _ in range ( N ) ]\ndef s_input ( ) : return input ( )\ndef s_map ( ) : return input ( ) . split ( )\ndef s_list ( ) : return list ( s_map ( ) )\ndef s_row ( N ) : return [ s_input for _ in range ( N ) ]\ndef s_row_str ( N ) : return [ s_list ( ) for _ in range ( N ) ]\ndef s_row_list ( N ) : return [ list ( s_input ( ) ) for _ in range ( N ) ]\ndef main ( ) :\n    w , h , n = i_map ( )\n    up = h\n    right = w\n    down = 0\n    left = 0\n    for i in range ( n ) :\n        x , y , a = i_map ( )\n        if a == 1 :\n            left = max ( left , x )\n        elif a == 2 :\n            right = min ( right , x )\n        elif a == 3 :\n            down = max ( down , y )\n        else :\n            up = min ( up , y )\n    print ( max ( ( up - down ) , 0 ) * max ( ( right - left ) , 0 ) )\n"}
{"java": "static boolean isPairWithDiff ( int mat [ ] [ ] , int k ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < M ; j ++ ) s . add ( mat [ i ] [ j ] ) ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < M ; j ++ ) if ( s . contains ( k + mat [ i ] [ j ] ) && k + mat [ i ] [ j ] != ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) return true ; return false ; }", "python": "def isPairWithDiff ( mat , k ) :\n    s = dict ( )\n    for i in range ( N ) :\n        for j in range ( M ) :\n            s [ mat [ i ] [ j ] ] = 1\n    for i in range ( N ) :\n        for j in range ( M ) :\n            if k + mat [ i ] [ j ] in s :\n                return True\n    return False\n"}
{"java": "static void pattern ( int n ) { int p , k = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { p = k ; for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( p ) ; System . out . print ( \" \u2581 \" ) ; p = p - ( n + j - i ) ; } System . out . println ( ) ; k = k + 1 + n - i ; } }", "python": "def pattern ( n ) :\n    k = 1\n    for i in range ( 1 , n + 1 ) :\n        p = k\n        for j in range ( 1 , i + 1 ) :\n            print ( p , end = \" \u2581 \" )\n            p = p - ( n + j - i )\n        print ( \" \" )\n        k = k + 1 + n - i\n"}
{"java": "static void numOfSubseq ( int arr [ ] , int n ) { int i , inc_count , dec_count ; int max [ ] = new int [ n ] ; int min [ ] = new int [ n ] ; int k1 = 0 , k2 = 0 ; if ( arr [ 0 ] < arr [ 1 ] ) min [ k1 ++ ] = 0 ; else max [ k2 ++ ] = 0 ; for ( i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] && arr [ i ] < arr [ i + 1 ] ) min [ k1 ++ ] = i ; if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) max [ k2 ++ ] = i ; } if ( arr [ n - 1 ] < arr [ n - 2 ] ) min [ k1 ++ ] = n - 1 ; else max [ k2 ++ ] = n - 1 ; if ( min [ 0 ] == 0 ) { inc_count = k2 ; dec_count = k1 - 1 ; } else { inc_count = k2 - 1 ; dec_count = k1 ; } System . out . println ( \" Increasing \u2581 Subsequence \" + \" \u2581 Count : \u2581 \" + inc_count ) ; System . out . println ( \" Decreasing \u2581 Subsequence \" + \" \u2581 Count : \u2581 \" + dec_count ) ; }", "python": "def numOfSubseq ( arr , n ) :\n    i , inc_count , dec_count = 0 , 0 , 0 ;\n    max = [ 0 ] * n ;\n    min = [ 0 ] * n ;\n    k1 = 0 ;\n    k2 = 0 ;\n    if ( arr [ 0 ] < arr [ 1 ] ) :\n        min [ k1 ] = 0 ;\n        k1 += 1 ;\n    else :\n        max [ k2 ] = 0 ;\n        k2 += 1 ;\n    for i in range ( 1 , n - 1 ) :\n        if ( arr [ i ] < arr [ i - 1 ] and arr [ i ] < arr [ i + 1 ] ) :\n            min [ k1 ] = i ;\n            k1 += 1 ;\n        if ( arr [ i ] > arr [ i - 1 ] and arr [ i ] > arr [ i + 1 ] ) :\n            max [ k2 ] = i ;\n            k2 += 1 ;\n    if ( arr [ n - 1 ] < arr [ n - 2 ] ) :\n        min [ k1 ] = n - 1 ;\n        k1 += 1 ;\n    else :\n        max [ k2 ] = n - 1 ;\n        k2 += 1 ;\n    if ( min [ 0 ] == 0 ) :\n        inc_count = k2 ;\n        dec_count = k1 - 1 ;\n    else :\n        inc_count = k2 - 1 ;\n        dec_count = k1 ;\n    print ( \" Increasing \u2581 Subsequence \u2581 Count : \u2581 \" , inc_count ) ;\n    print ( \" Decreasing \u2581 Subsequence \u2581 Count : \u2581 \" , dec_count ) ;\n"}
{"java": "static int maximumAbsolute ( int arr [ ] , int n ) { int mn = Integer . MAX_VALUE ; int mx = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && arr [ i ] == - 1 && arr [ i - 1 ] != - 1 ) { mn = Math . min ( mn , arr [ i - 1 ] ) ; mx = Math . max ( mx , arr [ i - 1 ] ) ; } if ( i < n - 1 && arr [ i ] == - 1 && arr [ i + 1 ] != - 1 ) { mn = Math . min ( mn , arr [ i + 1 ] ) ; mx = Math . max ( mx , arr [ i + 1 ] ) ; } } int common_integer = ( mn + mx ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == - 1 ) arr [ i ] = common_integer ; } int max_diff = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int diff = Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; if ( diff > max_diff ) max_diff = diff ; } return max_diff ; }", "python": "def maximumAbsolute ( arr , n ) :\n    mn = 10 ** 9\n    mx = - 10 ** 9\n    for i in range ( n ) :\n        if ( i > 0 and arr [ i ] == - 1 and arr [ i - 1 ] != - 1 ) :\n            mn = min ( mn , arr [ i - 1 ] )\n            mx = max ( mx , arr [ i - 1 ] )\n        if ( i < n - 1 and arr [ i ] == - 1 and arr [ i + 1 ] != - 1 ) :\n            mn = min ( mn , arr [ i + 1 ] )\n            mx = max ( mx , arr [ i + 1 ] )\n    common_integer = ( mn + mx ) // 2\n    for i in range ( n ) :\n        if ( arr [ i ] == - 1 ) :\n            arr [ i ] = common_integer\n    max_diff = 0\n    for i in range ( n - 1 ) :\n        diff = abs ( arr [ i ] - arr [ i + 1 ] )\n        if ( diff > max_diff ) :\n            max_diff = diff\n    return max_diff\n"}
{"java": "static int findCost ( String str , int arr [ ] , int n ) { long costofC = 0 , costofO = 0 , costofD = 0 , costofE = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == ' c ' ) costofC += arr [ i ] ; else if ( str . charAt ( i ) == ' o ' ) costofO = Math . min ( costofC , costofO + arr [ i ] ) ; else if ( str . charAt ( i ) == ' d ' ) costofD = Math . min ( costofO , costofD + arr [ i ] ) ; else if ( str . charAt ( i ) == ' e ' ) costofE = Math . min ( costofD , costofE + arr [ i ] ) ; } return ( int ) costofE ; }", "python": "def findCost ( str , arr , n ) :\n    costofC , costofO = 0 , 0\n    costofD , costofE = 0 , 0\n    for i in range ( n ) :\n        if ( str [ i ] == ' c ' ) :\n            costofC += arr [ i ]\n        elif ( str [ i ] == ' o ' ) :\n            costofO = min ( costofC , costofO + arr [ i ] )\n        elif ( str [ i ] == ' d ' ) :\n            costofD = min ( costofO , costofD + arr [ i ] )\n        elif ( str [ i ] == ' e ' ) :\n            costofE = min ( costofD , costofE + arr [ i ] )\n    return costofE\n"}
{"java": "static String even_or_odd ( String N ) { int len = N . length ( ) ; if ( N . charAt ( len - 1 ) == '0' || N . charAt ( len - 1 ) == '2' || N . charAt ( len - 1 ) == '4' || N . charAt ( len - 1 ) == '6' || N . charAt ( len - 1 ) == '8' || N . charAt ( len - 1 ) == ' A ' || N . charAt ( len - 1 ) == ' C ' || N . charAt ( len - 1 ) == ' E ' ) return ( \" Even \" ) ; else return ( \" Odd \" ) ; }", "python": "def even_or_odd ( N ) :\n    l = len ( N )\n    if ( N [ l - 1 ] == '0' or N [ l - 1 ] == '2' or N [ l - 1 ] == '4' or N [ l - 1 ] == '6' or N [ l - 1 ] == '8' or N [ l - 1 ] == ' A ' or N [ l - 1 ] == ' C ' or N [ l - 1 ] == ' E ' ) :\n        return ( \" Even \" )\n    else :\n        return ( \" Odd \" )\n"}
{"java": "static long NthTerm ( long n ) { long x = ( 3 * n * n ) % 1000000009 ; return ( x - n + 1000000009 ) % 1000000009 ; }", "python": "def NthTerm ( N ) :\n    x = ( 3 * N * N ) % 1000000009\n    return ( ( x - N + 1000000009 ) % 1000000009 )\n"}
{"java": "public static long findSum ( long n ) { return ( ( n % mod ) * ( n % mod ) ) % mod ; }", "python": "def findSum ( n ) :\n    return ( ( n % mod ) * ( n % mod ) ) % mod\n"}
{"java": "static void createSorted ( int a [ ] , int n ) { Vector < Integer > b = new Vector < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( b . isEmpty ( ) ) b . add ( a [ j ] ) ; else { int start = 0 , end = b . size ( ) - 1 ; int pos = 0 ; while ( start <= end ) { int mid = start + ( end - start ) / 2 ; if ( b . get ( mid ) == a [ j ] ) { b . add ( ( Math . max ( 0 , mid + 1 ) ) , a [ j ] ) ; break ; } else if ( b . get ( mid ) > a [ j ] ) pos = end = mid - 1 ; else pos = start = mid + 1 ; if ( start > end ) { pos = start ; b . add ( Math . max ( 0 , pos ) , a [ j ] ) ; break ; } } } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( b . get ( i ) + \" \u2581 \" ) ; }", "python": "def createSorted ( a : list , n : int ) :\n    b = [ ]\n    for j in range ( n ) :\n        if len ( b ) == 0 :\n            b . append ( a [ j ] )\n        else :\n            start = 0\n            end = len ( b ) - 1\n            pos = 0\n            while start <= end :\n                mid = start + ( end - start ) // 2\n                if b [ mid ] == a [ j ] :\n                    b . insert ( max ( 0 , mid + 1 ) , a [ j ] )\n                    break\n                elif b [ mid ] > a [ j ] :\n                    pos = end = mid - 1\n                else :\n                    pos = start = mid + 1\n                if start > end :\n                    pos = start\n                    b . insert ( max ( 0 , pos ) , a [ j ] )\n                    break\n    for i in range ( n ) :\n        print ( b [ i ] , end = \" \u2581 \" )\n"}
{"java": "public static int longestSubarray ( int [ ] input ) { int prev = - 1 ; int current , next ; int prevCount = 0 , currentCount = 1 ; int longest = 1 ; current = input [ 0 ] ; for ( int i = 1 ; i < input . length ; i ++ ) { next = input [ i ] ; if ( next == current ) { currentCount ++ ; } else if ( next == prev ) { prevCount += currentCount ; prev = current ; current = next ; currentCount = 1 ; } else { longest = Math . max ( longest , currentCount + prevCount ) ; prev = current ; prevCount = currentCount ; current = next ; currentCount = 1 ; } } return Math . max ( longest , currentCount + prevCount ) ; }", "python": "def longestSubarray ( input , length ) :\n    prev = - 1\n    prevCount = 0\n    currentCount = 1\n    longest = 1\n    current = input [ 0 ]\n    for i in range ( 1 , length ) :\n        next = input [ i ]\n        if next == current :\n            currentCount += 1\n        elif next == prev :\n            prevCount += currentCount\n            prev = current\n            current = next\n            currentCount = 1\n        else :\n            longest = max ( longest , currentCount + prevCount )\n            prev = current\n            prevCount = currentCount\n            current = next\n            currentCount = 1\n    return max ( longest , currentCount + prevCount )\n"}
{"java": "static void findPerm ( int n , Vector < Integer > differences ) { Vector < Integer > ans = new Vector < Integer > ( ) ; ans . clear ( ) ; ans . add ( 0 ) ; int x = 0 ; for ( int i = 0 ; i <= n - 2 ; ++ i ) { int diff = differences . get ( i ) ; x = x + diff ; ans . add ( x ) ; } Vector < Integer > anss = new Vector < Integer > ( ) ; for ( Integer obj : ans ) anss . add ( obj ) ; Collections . sort ( ans ) ; int flag = - 1 ; for ( int i = 1 ; i <= n - 1 ; ++ i ) { int res = ans . get ( i ) - ans . get ( i - 1 ) ; if ( res != 1 ) { flag = 0 ; } } if ( flag == 0 ) { System . out . print ( - 1 ) ; return ; } else { Map < Integer , Integer > mpp = new HashMap < > ( ) ; mpp . clear ( ) ; int j = 1 ; Vector < Integer > value_at_index = new Vector < Integer > ( ) ; for ( Integer x1 : ans ) { mpp . put ( x1 , j ) ; ++ j ; } for ( Integer x2 : anss ) { value_at_index . add ( mpp . get ( x2 ) ) ; } for ( Integer x3 : value_at_index ) { System . out . print ( x3 + \" \u2581 \" ) ; } System . out . println ( ) ; } }", "python": "def findPerm ( n , differences ) :\n    ans = [ ]\n    ans . append ( 0 )\n    x = 0\n    for i in range ( n - 1 ) :\n        diff = differences [ i ]\n        x = x + diff\n        ans . append ( x )\n    anss = ans\n    ans = sorted ( ans )\n    flag = - 1\n    for i in range ( 1 , n ) :\n        res = ans [ i ] - ans [ i - 1 ]\n        if ( res != 1 ) :\n            flag = 0\n    if ( flag == 0 ) :\n        print ( \" - 1\" )\n        return\n    else :\n        mpp = dict ( )\n        j = 1\n        value_at_index = [ ]\n        for x in ans :\n            mpp [ x ] = j\n            j += 1\n        for x in anss :\n            value_at_index . append ( mpp [ x ] )\n        for x in value_at_index :\n            print ( x , end = \" \u2581 \" )\n        print ( )\n"}
{"java": "static int reachTarget ( int target ) { target = Math . abs ( target ) ; int sum = 0 , step = 0 ; while ( sum < target || ( sum - target ) % 2 != 0 ) { step ++ ; sum += step ; } return step ; }", "python": "def reachTarget ( target ) :\n    target = abs ( target )\n    sum = 0\n    step = 0\n    while ( sum < target or ( sum - target ) % 2 != 0 ) :\n        step = step + 1\n        sum = sum + step\n    return step\n"}
{"java": "static String lucas_sequence ( String s , int n ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) == null ? 1 : m . get ( s . charAt ( i ) ) + 1 ) ; Vector < Integer > v1 = new Vector < > ( ) ; Vector < Integer > v2 = new Vector < > ( ) ; for ( HashMap . Entry < Character , Integer > entry : m . entrySet ( ) ) v1 . add ( entry . getValue ( ) ) ; Collections . sort ( v1 ) ; if ( v1 . elementAt ( 0 ) == 1 && v1 . elementAt ( 1 ) == 2 ) { v1 . set ( 0 , 2 ) ; v1 . set ( 1 , 1 ) ; } else return \" NO \" ; int a = 2 , b = 1 ; int c ; v2 . add ( a ) ; v2 . add ( b ) ; for ( int i = 0 ; i < v1 . size ( ) - 2 ; i ++ ) { v2 . add ( a + b ) ; c = a + b ; a = b ; b = c ; } int flag = 1 ; for ( int i = 0 ; i < v1 . size ( ) ; i ++ ) { if ( v1 . elementAt ( i ) != v2 . elementAt ( i ) ) { flag = 0 ; break ; } } if ( flag == 1 ) return \" YES \" ; else return \" NO \" ; }", "python": "def lucas_sequence ( s , n ) :\n    m = defaultdict ( lambda : 0 )\n    for i in range ( 0 , n ) :\n        m [ s [ i ] ] += 1\n    v1 , v2 = [ ] , [ ]\n    for it in m :\n        v1 . append ( m [ it ] )\n    v1 . sort ( )\n    if v1 [ 0 ] == 1 and v1 [ 1 ] == 2 :\n        v1 [ 0 ] , v1 [ 1 ] = 2 , 1\n    else :\n        return \" NO \"\n    a , b = 2 , 1\n    v2 . append ( a )\n    v2 . append ( b )\n    for i in range ( 0 , len ( v1 ) - 2 ) :\n        v2 . append ( a + b )\n        a , b = b , a + b\n    flag = 1\n    for i in range ( 0 , len ( v1 ) ) :\n        if v1 [ i ] != v2 [ i ] :\n            flag = 0\n            break\n    if flag == 1 :\n        return \" YES \"\n    else :\n        return \" NO \"\n"}
{"java": "public static String solve ( ) { int n = scan . nextInt ( ) ; String answer = ( n - 1 ) % 9 + 1 + \" \" ; return answer ; }", "python": "def f ( n ) :\n    s = 0\n    for i in n : s += int ( i )\n    return s\n"}
{"java": "static int findMaxDiff ( int arr [ ] , int n ) { if ( n < 2 ) { System . out . print ( \" Invalid \u2581 \" ) ; return 0 ; } int res = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( res < ( arr [ i ] - arr [ j ] - i + j ) ) res = ( arr [ i ] - arr [ j ] - i + j ) ; return res ; }", "python": "def findMaxDiff ( arr , n ) :\n    if ( n < 2 ) :\n        print ( \" Invalid \u2581 \" )\n        return 0\n    res = - 2147483648\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if ( res < ( arr [ i ] - arr [ j ] - i + j ) ) :\n                res = ( arr [ i ] - arr [ j ] - i + j )\n    return res\n"}
{"java": "static int numberofterm ( int digit , int number ) { int firstnum = ( int ) Math . pow ( 10 , digit - 1 ) ; int lastnum = ( int ) Math . pow ( 10 , digit ) ; firstnum = ( firstnum - firstnum % number ) + number ; lastnum = ( lastnum - lastnum % number ) ; return ( ( lastnum - firstnum ) / number + 1 ) ; }", "python": "def numberofterm ( digit , number ) :\n    firstnum = pow ( 10 , digit - 1 )\n    lastnum = pow ( 10 , digit )\n    firstnum = ( firstnum - firstnum % number ) + number\n    lastnum = ( lastnum - lastnum % number )\n    return ( ( lastnum - firstnum ) // number + 1 ) ;\n"}
{"java": "static int findMinEqualSums ( int [ ] a , int N ) { int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += a [ i ] ; } int sum1 = 0 , sum2 = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { sum1 += a [ i ] ; sum2 = sum - sum1 ; if ( Math . abs ( sum1 - sum2 ) < min ) { min = Math . abs ( sum1 - sum2 ) ; } if ( min == 0 ) { break ; } } return min ; }", "python": "def findMinEqualSums ( a , N ) :\n    sum = 0\n    for i in range ( 0 , N ) :\n        sum = sum + a [ i ]\n    sum1 = 0\n    sum2 = 0\n    min = sys . maxsize\n    for i in range ( 0 , N - 1 ) :\n        sum1 += a [ i ]\n        sum2 = sum - sum1\n        if ( abs ( sum1 - sum2 ) < min ) :\n            min = abs ( sum1 - sum2 )\n        if ( min == 0 ) :\n            break\n    return min\n"}
{"java": "private static void printAnagrams ( String arr [ ] ) { HashMap < String , List < String > > map = new HashMap < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { String word = arr [ i ] ; char [ ] letters = word . toCharArray ( ) ; Arrays . sort ( letters ) ; String newWord = new String ( letters ) ; if ( map . containsKey ( newWord ) ) { map . get ( newWord ) . add ( word ) ; } else { List < String > words = new ArrayList < > ( ) ; words . add ( word ) ; map . put ( newWord , words ) ; } } for ( String s : map . keySet ( ) ) { List < String > values = map . get ( s ) ; if ( values . size ( ) > 1 ) { System . out . print ( values ) ; } } }", "python": "def printAnagramsTogether ( words ) :\n    groupedWords = defaultdict ( list )\n    for word in words :\n        groupedWords [ \" \" . join ( sorted ( word ) ) ] . append ( word )\n    for group in groupedWords . values ( ) :\n        print ( \" \u2581 \" . join ( group ) )\n"}
{"java": "public static void getSum ( int [ ] a , int n ) { int [ ] P = new int [ n ] ; P [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) P [ i ] = a [ i ] + P [ i - 1 ] ; int S = P [ n - 1 ] ; HashMap < Integer , Integer > hash = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) hash . put ( P [ i ] , 1 ) ; HashSet < Integer > res = new HashSet < > ( ) ; for ( int i = 1 ; i * i <= S ; i ++ ) { if ( S % i == 0 ) { boolean pres = true ; int div1 = i , div2 = S / i ; for ( int j = div1 ; j <= S ; j += div1 ) { if ( hash . get ( j ) == null || hash . get ( j ) != 1 ) { pres = false ; break ; } } if ( pres && div1 != S ) res . add ( div1 ) ; pres = true ; for ( int j = S / i ; j <= S ; j += S / i ) { if ( hash . get ( j ) == null || hash . get ( j ) != 1 ) { pres = false ; break ; } } if ( pres && div2 != S ) res . add ( div2 ) ; } } if ( res . size ( ) == 0 ) { System . out . println ( \" - 1\" ) ; return ; } for ( int i : res ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def getSum ( a , n ) :\n    P = [ 0 ] * n\n    P [ 0 ] = a [ 0 ]\n    for i in range ( 1 , n ) :\n        P [ i ] = a [ i ] + P [ i - 1 ]\n    S = P [ n - 1 ]\n    hash = { }\n    for i in range ( n ) :\n        hash [ P [ i ] ] = 1\n    res = set ( )\n    for i in range ( 1 , int ( sqrt ( S ) ) + 1 ) :\n        if ( S % i == 0 ) :\n            pres = True ;\n            div1 = i\n            div2 = S // i\n            for j in range ( div1 , S + 1 , div1 ) :\n                if j not in hash . keys ( ) :\n                    pres = False\n                    break\n            if ( pres and div1 != S ) :\n                res . add ( div1 )\n            pres = True\n            for j in range ( S // i , S + 1 , S // i ) :\n                if j not in hash . keys ( ) :\n                    pres = False ;\n                    break\n            if ( pres and div2 != S ) :\n                res . add ( div2 )\n    if ( len ( res ) == 0 ) :\n        print ( \" - 1\" )\n        return\n    for i in res :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "private static int d ( int x , int y , int x2 , int y2 ) { return Math . abs ( x - x2 ) + Math . abs ( y - y2 ) ; }", "python": "def traveling ( n , m ) :\n    t = range ( 1 , n + 1 )\n    for i in t :\n        tdif = m [ i ] [ 0 ] - m [ i - 1 ] [ 0 ]\n        xydif = abs ( m [ i ] [ 1 ] - m [ i - 1 ] [ 1 ] ) + abs ( m [ i ] [ 2 ] - m [ i - 1 ] [ 2 ] )\n        if tdif < xydif :\n            return ' No '\n        else :\n            if tdif % 2 != xydif % 2 :\n                return ' No '\n    return ' Yes '\n"}
{"java": "static void findEquation ( int a , int b ) { int sum = ( a + b ) ; int product = ( a * b ) ; System . out . println ( \" x ^ 2 \u2581 - \u2581 ( \" + sum + \" x ) \u2581 + \u2581 ( \" + product + \" ) \u2581 = \u2581 0\" ) ; }", "python": "def findEquation ( a , b ) :\n    summ = ( a + b )\n    product = ( a * b )\n    print ( \" x ^ 2 \u2581 - \u2581 ( \" , summ , \" x ) \u2581 + \u2581 ( \" , product , \" ) \u2581 = \u2581 0\" )\n"}
{"java": "public static int doMatch ( String A , String B ) { for ( int i = 0 ; i < A . length ( ) ; i ++ ) { if ( A . charAt ( i ) != ' * ' && B . charAt ( i ) != ' * ' ) { if ( A . charAt ( i ) != B . charAt ( i ) ) return 0 ; } } return 1 ; }", "python": "def doMatch ( A , B ) :\n    for i in range ( len ( A ) ) :\n        if A [ i ] != ' * ' and B [ i ] != ' * ' :\n            if A [ i ] != B [ i ] :\n                return False\n    return True\n"}
{"java": "static void solve ( ) { int bobs_rock = 0 , bobs_paper = 0 , bobs_sissor = 0 ; int alice_can_bit = 0 ; for ( char i : bobs_move ) { if ( i == ' R ' ) { bobs_rock ++ ; } else if ( i == ' P ' ) { bobs_paper ++ ; } else { ++ bobs_sissor ; } } alice_can_bit += Math . min ( bobs_paper , c ) + Math . min ( bobs_rock , b ) + Math . min ( bobs_sissor , a ) ; if ( 2 * alice_can_bit < n ) { System . out . println ( \" NO \" ) ; return ; } char alice_moves [ ] = new char [ n ] ; int index = 0 ; for ( char i : bobs_move ) { if ( i == ' R ' && b > 0 ) { alice_moves [ index ] = ' P ' ; -- b ; } else if ( i == ' P ' && c > 0 ) { alice_moves [ index ] = ' S ' ; -- c ; } else if ( i == ' S ' && a > 0 ) { -- a ; alice_moves [ index ] = ' R ' ; } else { alice_moves [ index ] = ' L ' ; } ++ index ; } System . out . println ( \" YES \" ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( alice_moves [ i ] == ' L ' ) { if ( a > 0 ) { alice_moves [ i ] = ' R ' ; -- a ; } else if ( b > 0 ) { alice_moves [ i ] = ' P ' ; -- b ; } else if ( c > 0 ) { alice_moves [ i ] = ' S ' ; -- c ; } } } System . out . println ( new String ( alice_moves ) ) ; }", "python": "def fin_st ( l_i , st , l , rules ) :\n    dict_a = { \" R \" : l [ 0 ] , \" P \" : l [ 1 ] , \" S \" : l [ 2 ] }\n    fin_str = ' '\n    for i in st :\n        if dict_a [ rules [ i ] ] > 0 :\n            fin_str += rules [ i ]\n            dict_a [ rules [ i ] ] -= 1\n        else :\n            t = randint ( 0 , len ( l_i ) - 1 )\n            fin_str += l_i [ t ]\n            del l_i [ t ]\n    return fin_str\n"}
{"java": "static void findSubSeq ( int arr [ ] , int n , int sum ) { for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( sum < arr [ i ] ) arr [ i ] = - 1 ; else sum -= arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != - 1 ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; } }", "python": "def findSubSeq ( arr , n , sum ) :\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( sum < arr [ i ] ) :\n            arr [ i ] = - 1 ;\n        else :\n            sum -= arr [ i ] ;\n    for i in range ( n ) :\n        if ( arr [ i ] != - 1 ) :\n            print ( arr [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "static int countIncreasing ( int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j - 1 ] ) cnt ++ ; else break ; } } return cnt ; }", "python": "def countIncreasing ( arr , n ) :\n    cnt = 0\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ j ] > arr [ j - 1 ] :\n                cnt += 1\n            else :\n                break\n    return cnt\n"}
{"java": "static float squarearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float area = 4 * ( float ) ( ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) / ( Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) ) ; return area ; }", "python": "def squarearea ( a , b ) :\n    if ( a < 0 or b < 0 ) :\n        return - 1\n    area = 4 * ( ( ( pow ( a , 2 ) + pow ( b , 2 ) ) / ( pow ( a , 2 ) * pow ( b , 2 ) ) ) )\n    return area\n"}
{"java": "static double expect ( double m , double n ) { double ans = 0.0 , i ; for ( i = m ; i > 0 ; i -- ) ans += ( Math . pow ( i / m , n ) - Math . pow ( ( i - 1 ) / m , n ) ) * i ; return ans ; }", "python": "def expect ( m , n ) :\n    ans = 0.0\n    i = m\n    while ( i ) :\n        ans += ( pow ( i / m , n ) - pow ( ( i - 1 ) / m , n ) ) * i\n        i -= 1\n    return ans\n"}
{"java": "static int maxProd ( int N ) { if ( N == 0 ) return 1 ; if ( N < 10 ) return N ; return Math . max ( maxProd ( N / 10 ) * ( N % 10 ) , maxProd ( N / 10 - 1 ) * 9 ) ; }", "python": "def maxProd ( N ) :\n    if ( N == 0 ) :\n        return 1\n    if ( N < 10 ) :\n        return N\n    return max ( maxProd ( N // 10 ) * ( N % 10 ) , maxProd ( N // 10 - 1 ) * 9 )\n"}
{"java": "static int countMaxLength ( int N ) { int res ; int pre [ ] = new int [ MAXN ] ; int p = 1 ; pre [ 0 ] = 0 ; for ( int i = 1 ; i < MAXN ; i ++ ) { p *= 2 ; pre [ i ] = pre [ i - 1 ] + i * p ; } int ind = 0 ; for ( int i = 1 ; i < MAXN ; i ++ ) { if ( pre [ i ] >= N ) { ind = i ; break ; } } int x = N - pre [ ind - 1 ] ; int y = 2 * ind - 1 ; if ( x >= y ) res = Math . min ( x , y ) ; else res = Math . max ( x , 2 * ( ind - 2 ) + 1 ) ; return res ; }", "python": "def countMaxLength ( N ) :\n    pre = [ 0 for i in range ( MAXN ) ]\n    p = 1\n    pre [ 0 ] = 0\n    for i in range ( 1 , MAXN , 1 ) :\n        p *= 2\n        pre [ i ] = pre [ i - 1 ] + i * p\n    for i in range ( 1 , MAXN , 1 ) :\n        if ( pre [ i ] >= N ) :\n            ind = i\n            break\n    x = N - pre [ ind - 1 ]\n    y = 2 * ind - 1\n    if ( x >= y ) :\n        res = min ( x , y )\n    else :\n        res = max ( x , 2 * ( ind - 2 ) + 1 )\n    return res\n"}
{"java": "static boolean isPower ( int n ) { for ( int x = 2 ; x <= ( int ) Math . sqrt ( n ) ; x ++ ) { float f = ( float ) Math . log ( n ) / ( float ) Math . log ( x ) ; if ( ( f - ( int ) f ) == 0.0 ) return true ; } return false ; }", "python": "def isPower ( n ) :\n    for x in range ( 2 , int ( math . sqrt ( n ) ) + 1 ) :\n        f = math . log ( n ) / math . log ( x ) ;\n        if ( ( f - int ( f ) ) == 0.0 ) :\n            return True ;\n    return False ;\n"}
{"java": "static int no_of_ways ( String s ) { int n = s . length ( ) ; int count_left = 0 , count_right = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s . charAt ( i ) == s . charAt ( 0 ) ) { ++ count_left ; } else break ; } for ( int i = n - 1 ; i >= 0 ; -- i ) { if ( s . charAt ( i ) == s . charAt ( n - 1 ) ) { ++ count_right ; } else break ; } if ( s . charAt ( 0 ) == s . charAt ( n - 1 ) ) return ( ( count_left + 1 ) * ( count_right + 1 ) ) ; else return ( count_left + count_right + 1 ) ; }", "python": "def no_of_ways ( s ) :\n    n = len ( s )\n    count_left = 0\n    count_right = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( s [ i ] == s [ 0 ] ) :\n            count_left += 1\n        else :\n            break\n    i = n - 1\n    while ( i >= 0 ) :\n        if ( s [ i ] == s [ n - 1 ] ) :\n            count_right += 1\n        else :\n            break\n        i -= 1\n    if ( s [ 0 ] == s [ n - 1 ] ) :\n        return ( ( count_left + 1 ) * ( count_right + 1 ) )\n    else :\n        return ( count_left + count_right + 1 )\n"}
{"java": "static void findPerm ( int Q [ ] , int n ) { int minval = 0 , qsum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { qsum += Q [ i ] ; if ( qsum < minval ) minval = qsum ; } int [ ] P = new int [ n ] ; P [ 0 ] = 1 - minval ; boolean permFound = true ; for ( int i = 0 ; i < n - 1 ; i ++ ) { P [ i + 1 ] = P [ i ] + Q [ i ] ; if ( P [ i + 1 ] > n || P [ i + 1 ] < 1 ) { permFound = false ; break ; } } if ( permFound ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( P [ i ] + \" \u2581 \" ) ; } } else { System . out . print ( - 1 ) ; } }", "python": "def findPerm ( Q , n ) :\n    minval = 0 ; qsum = 0 ;\n    for i in range ( n - 1 ) :\n        qsum += Q [ i ] ;\n        if ( qsum < minval ) :\n            minval = qsum ;\n    P = [ 0 ] * n ;\n    P [ 0 ] = 1 - minval ;\n    permFound = True ;\n    for i in range ( n - 1 ) :\n        P [ i + 1 ] = P [ i ] + Q [ i ] ;\n        if ( P [ i + 1 ] > n or P [ i + 1 ] < 1 ) :\n            permFound = False ;\n            break ;\n    if ( permFound ) :\n        for i in range ( n ) :\n            print ( P [ i ] , end = \" \u2581 \" ) ;\n    else :\n        print ( - 1 ) ;\n"}
{"java": "static void findNthTerm ( int N ) { int ans ; if ( N % 2 == 0 ) { ans = ( N / 2 ) * 6 + ( N / 2 ) * 2 ; } else { ans = ( N / 2 + 1 ) * 6 + ( N / 2 ) * 2 ; } System . out . print ( ans + \" \\n \" ) ; }", "python": "def findNthTerm ( N ) :\n    ans = 0 ;\n    if ( N % 2 == 0 ) :\n        ans = ( N // 2 ) * 6 + ( N // 2 ) * 2 ;\n    else :\n        ans = ( N // 2 + 1 ) * 6 + ( N // 2 ) * 2 ;\n    print ( ans ) ;\n"}
{"java": "static void solve ( String s ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; else m . put ( s . charAt ( i ) , 1 ) ; } String new_string = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . get ( s . charAt ( i ) ) % 2 == 0 ) continue ; new_string = new_string + s . charAt ( i ) ; } System . out . println ( new_string ) ; }", "python": "def solve ( s ) :\n    m = dict ( )\n    for i in range ( len ( s ) ) :\n        if s [ i ] in m :\n            m [ s [ i ] ] = m [ s [ i ] ] + 1\n        else :\n            m [ s [ i ] ] = 1\n    new_string = \" \"\n    for i in range ( len ( s ) ) :\n        if m [ s [ i ] ] % 2 == 0 :\n            continue\n        new_string = new_string + s [ i ]\n    print ( new_string )\n"}
{"java": "static int ksmallest ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; if ( k < arr [ 0 ] ) return k ; if ( k == arr [ 0 ] ) return arr [ 0 ] + 1 ; if ( k > arr [ n - 1 ] ) return k + n ; if ( arr [ 0 ] == 1 ) k -- ; else k -= ( arr [ 0 ] - 1 ) ; for ( int i = 1 ; i < n ; i ++ ) { int c = arr [ i ] - arr [ i - 1 ] - 1 ; if ( k <= c ) return arr [ i - 1 ] + k ; else k -= c ; } return arr [ n - 1 ] + k ; }", "python": "def ksmallest ( arr , n , k ) :\n    arr . sort ( ) ;\n    if ( k < arr [ 0 ] ) :\n        return k ;\n    if ( k == arr [ 0 ] ) :\n        return arr [ 0 ] + 1 ;\n    if ( k > arr [ n - 1 ] ) :\n        return k + n ;\n    if ( arr [ 0 ] == 1 ) :\n        k -= 1 ;\n    else :\n        k -= ( arr [ 0 ] - 1 ) ;\n    for i in range ( 1 , n ) :\n        c = arr [ i ] - arr [ i - 1 ] - 1 ;\n        if ( k <= c ) :\n            return arr [ i - 1 ] + k ;\n        else :\n            k -= c ;\n    return arr [ n - 1 ] + k ;\n"}
{"java": "static double decdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.902 * a ; return d ; }", "python": "def decdiagonal ( a ) :\n    if ( a < 0 ) :\n        return - 1\n    d = 1.902 * a\n    return d\n"}
{"java": "static int ccw ( int a0 , int b0 , int a1 , int b1 ) { int d = a0 * b1 - a1 * b0 ; return d ; }", "python": "def solve ( ) :\n    l1 = math . sqrt ( ( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2 )\n    for x , y in pts :\n        l2 = math . sqrt ( ( x - x1 ) ** 2 + ( y - y1 ) ** 2 )\n        dx = ( x2 - x1 ) / l1\n        dy = ( y2 - y1 ) / l1\n        ip = ( x - x1 ) * ( x2 - x1 ) + ( y - y1 ) * ( y2 - y1 )\n        sine = ( x - x1 ) * ( y2 - y1 ) - ( y - y1 ) * ( x2 - x1 )\n        if sine < 0.0 :\n            print ( \" COUNTER _ CLOCKWISE \" )\n        elif sine > 0.0 :\n            print ( \" CLOCKWISE \" )\n        elif abs ( ip - l1 * l2 ) < eps :\n            if l1 < l2 :\n                print ( \" ONLINE _ FRONT \" )\n            else :\n                print ( \" ON _ SEGMENT \" )\n        elif ip + l1 * l2 < eps :\n            print ( \" ONLINE _ BACK \" )\n"}
{"java": "static int countMinimumMoves ( int arr [ ] , int n , int k ) { int i ; for ( i = k - 1 ; i < n ; i ++ ) if ( arr [ i ] != arr [ k - 1 ] ) return - 1 ; for ( i = k - 1 ; i >= 0 ; i -- ) if ( arr [ i ] != arr [ k - 1 ] ) return i + 1 ; return 0 ; }", "python": "def countMinimumMoves ( arr , n , k ) :\n    for i in range ( k - 1 , n ) :\n        if ( arr [ i ] != arr [ k - 1 ] ) :\n            return - 1\n    for i in range ( k - 1 , - 1 , - 1 ) :\n        if ( arr [ i ] != arr [ k - 1 ] ) :\n            return i + 1\n    return 0\n"}
{"java": "static boolean isPalindrome ( int n ) { int divisor = 1 ; while ( n / divisor >= 10 ) divisor *= 10 ; while ( n != 0 ) { int leading = n / divisor ; int trailing = n % 10 ; if ( leading != trailing ) return false ; n = ( n % divisor ) / 10 ; divisor = divisor / 100 ; } return true ; }", "python": "def isPalindrome ( n ) :\n    divisor = 1\n    while ( n / divisor >= 10 ) :\n        divisor *= 10\n    while ( n != 0 ) :\n        leading = n // divisor\n        trailing = n % 10\n        if ( leading != trailing ) :\n            return False\n        n = ( n % divisor ) // 10\n        divisor = divisor / 100\n    return True\n"}
{"java": "static int countTriangles ( int a [ ] , int n ) { int cnt = 0 ; int pairs = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { pairs += a [ i ] / 2 ; if ( a [ i ] % 2 == 1 && pairs > 0 ) { cnt += 1 ; pairs -= 1 ; } } cnt += ( 2 * pairs ) / 3 ; return cnt ; }", "python": "def countTriangles ( a , n ) :\n    cnt = 0\n    pairs = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        pairs += a [ i ] // 2\n        if ( a [ i ] % 2 == 1 and pairs > 0 ) :\n            cnt += 1\n            pairs -= 1\n    cnt += ( 2 * pairs ) // 3\n    return cnt\n"}
{"java": "static int maxLenBitonic ( int [ ] A , int n ) { if ( n == 0 ) return 0 ; int maxLen = 1 ; int start = 0 ; int nextStart = 0 ; int j = 0 ; while ( j < n - 1 ) { while ( j < n - 1 && A [ j ] <= A [ j + 1 ] ) j ++ ; while ( j < n - 1 && A [ j ] >= A [ j + 1 ] ) { if ( j < n - 1 && A [ j ] > A [ j + 1 ] ) nextStart = j + 1 ; j ++ ; } maxLen = Math . max ( maxLen , j - ( start - 1 ) ) ; start = nextStart ; } return maxLen ; }", "python": "def bitonic ( A , n ) :\n    if ( n == 0 ) :\n        return 0 ;\n    maxLen = 1 ;\n    start = 0 ;\n    nextStart = 0 ;\n    j = 0 ;\n    while ( j < n - 1 ) :\n        while ( j < n - 1 and A [ j ] <= A [ j + 1 ] ) :\n            j = j + 1 ;\n        while ( j < n - 1 and A [ j ] >= A [ j + 1 ] ) :\n            if ( j < n - 1 and A [ j ] > A [ j + 1 ] ) :\n                nextStart = j + 1 ;\n            j = j + 1 ;\n        maxLen = max ( maxLen , j - ( start - 1 ) ) ;\n        start = nextStart ;\n    return maxLen ;\n"}
{"java": "static boolean checkPairs ( int l , int r ) { if ( ( l - r ) % 2 == 0 ) return false ; return true ; }", "python": "def checkPairs ( l , r ) :\n    if ( l - r ) % 2 == 0 :\n        return False\n    return True\n"}
{"java": "static int sum ( ) { int sum = 0 ; int i ; for ( i = 0 ; i < arr . length ; i ++ ) sum += arr [ i ] ; return sum ; }", "python": "def _sum ( arr , n ) :\n    return ( sum ( arr ) )\n"}
{"java": "static void possibleTripletInRange ( int L , int R ) { boolean flag = false ; int possibleA = 0 , possibleB = 0 , possibleC = 0 ; int numbersInRange = ( R - L + 1 ) ; if ( numbersInRange < 3 ) { flag = false ; } else if ( numbersInRange > 3 ) { flag = true ; if ( L % 2 > 0 ) { L ++ ; } possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { if ( ! ( L % 2 > 0 ) ) { flag = true ; possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { flag = false ; } } if ( flag == true ) { System . out . println ( \" ( \" + possibleA + \" , \u2581 \" + possibleB + \" , \u2581 \" + possibleC + \" ) \" + \" \u2581 is \u2581 one \u2581 such \u2581 possible \" + \" \u2581 triplet \u2581 between \u2581 \" + L + \" \u2581 and \u2581 \" + R ) ; } else { System . out . println ( \" No \u2581 Such \u2581 Triplet \" + \" \u2581 exists \u2581 between \u2581 \" + L + \" \u2581 and \u2581 \" + R ) ; } }", "python": "def possibleTripletInRange ( L , R ) :\n    flag = False ;\n    possibleA = 0 ;\n    possibleB = 0 ;\n    possibleC = 0 ;\n    numbersInRange = ( R - L + 1 ) ;\n    if ( numbersInRange < 3 ) :\n        flag = False ;\n    elif ( numbersInRange > 3 ) :\n        flag = True ;\n        if ( ( L % 2 ) > 0 ) :\n            L += 1 ;\n        possibleA = L ;\n        possibleB = L + 1 ;\n        possibleC = L + 2 ;\n    else :\n        if ( ( L % 2 ) == 0 ) :\n            flag = True ;\n            possibleA = L ;\n            possibleB = L + 1 ;\n            possibleC = L + 2 ;\n        else :\n            flag = False ;\n    if ( flag == True ) :\n        print ( \" ( \" , possibleA , \" , \" , possibleB , \" , \" , possibleC , \" ) \u2581 is \u2581 one \u2581 such \" , \" possible \u2581 triplet \u2581 between \" , L , \" and \" , R ) ;\n    else :\n        print ( \" No \u2581 Such \u2581 Triplet \u2581 exists \u2581 between \" , L , \" and \" , R ) ;\n"}
{"java": "static void findAngle ( int n ) { int interiorAngle , exteriorAngle ; interiorAngle = ( n - 2 ) * 180 / n ; exteriorAngle = 360 / n ; System . out . println ( \" Interior \u2581 angle : \u2581 \" + interiorAngle ) ; System . out . println ( \" Exterior \u2581 angle : \u2581 \" + exteriorAngle ) ; }", "python": "def findAngle ( n ) :\n    interiorAngle = int ( ( n - 2 ) * 180 / n )\n    exteriorAngle = int ( 360 / n )\n    print ( \" Interior \u2581 angle : \u2581 \" , interiorAngle )\n    print ( \" Exterior \u2581 angle : \u2581 \" , exteriorAngle )\n"}
{"java": "static void maxSum ( int [ ] a , int n ) { int maxAnd = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; int maxOR = 0 ; for ( int i = 0 ; i < n ; i ++ ) { maxOR |= a [ i ] ; } System . out . println ( ( maxAnd + maxOR ) ) ; }", "python": "def maxSum ( a , n ) :\n    maxAnd = max ( a )\n    maxOR = 0\n    for i in range ( n ) :\n        maxOR |= a [ i ]\n    print ( maxAnd + maxOR )\n"}
{"java": "static boolean CheckArray ( int arr [ ] , int n ) { int prod = 1 ; ArrayList < Integer > freq = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { freq . add ( arr [ i ] ) ; prod *= arr [ i ] ; } int root = ( int ) Math . sqrt ( prod ) ; if ( root * root == prod ) { if ( freq . contains ( root ) & freq . lastIndexOf ( root ) != ( freq . size ( ) ) ) { return true ; } } return false ; }", "python": "def CheckArray ( arr , n ) :\n    prod = 1\n    freq = [ ]\n    for i in range ( n ) :\n        freq . append ( arr [ i ] )\n        prod *= arr [ i ]\n    root = math . sqrt ( prod )\n    if ( root * root == prod ) :\n        if root in freq :\n            return True\n    return False\n"}
{"java": "static int countReduce ( String str ) { int n = str . length ( ) ; int res = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) res += Math . abs ( str . charAt ( i ) - str . charAt ( n - i - 1 ) ) ; return res ; }", "python": "def countReduce ( str ) :\n    n = len ( str )\n    res = 0\n    for i in range ( 0 , int ( n / 2 ) ) :\n        res += abs ( int ( ord ( str [ i ] ) ) - int ( ord ( str [ n - i - 1 ] ) ) )\n    return res\n"}
{"java": "static int findMinDel ( int [ ] arr , int n ) { int min_num = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) min_num = Math . min ( arr [ i ] , min_num ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == min_num ) cnt ++ ; return n - cnt ; }", "python": "def findMinDel ( arr , n ) :\n    min_num = sys . maxsize ;\n    for i in range ( n ) :\n        min_num = min ( arr [ i ] , min_num ) ;\n    cnt = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] == min_num ) :\n            cnt += 1 ;\n    return n - cnt ;\n"}
{"java": "static int findElement ( int arr [ ] , int n ) { int prefixMul [ ] = new int [ n ] ; prefixMul [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) prefixMul [ i ] = prefixMul [ i - 1 ] * arr [ i ] ; int suffixMul [ ] = new int [ n ] ; suffixMul [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) suffixMul [ i ] = suffixMul [ i + 1 ] * arr [ i ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) if ( prefixMul [ i ] == suffixMul [ i ] ) return arr [ i ] ; return - 1 ; }", "python": "def findElement ( arr , n ) :\n    prefixMul = [ ]\n    prefixMul . append ( arr [ 0 ] )\n    for i in range ( 1 , n ) :\n        prefixMul . append ( prefixMul [ i - 1 ] * arr [ i ] )\n    suffixMul = [ None for i in range ( 0 , n ) ]\n    suffixMul [ n - 1 ] = arr [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        suffixMul [ i ] = suffixMul [ i + 1 ] * arr [ i ]\n    for i in range ( 1 , n - 1 ) :\n        if prefixMul [ i ] == suffixMul [ i ] :\n            return arr [ i ]\n    return - 1\n"}
{"java": "static double solve ( int [ ] a ) { int max = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; long otherSum = Arrays . stream ( a ) . asLongStream ( ) . sum ( ) - max ; return max + otherSum / ( a . length - 1.0 ) ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    a = [ int ( i ) for i in input ( ) . split ( ) ]\n    return round ( max ( a ) + ( sum ( a ) - max ( a ) ) / ( n - 1 ) , 6 )\n"}
{"java": "private static boolean isOK ( long value , long head ) { return value / d != head ; }", "python": "def find_sub_result ( first_digit , exponent , division ) :\n    return ( ( ( first_digit * ( ( 10 ** ( exponent - 1 ) ) % MOD ) - 1 ) // division ) % MOD ) + 1\n"}
{"java": "private static void solve ( Scanner in ) { System . out . println ( in . nextInt ( ) < 1200 ? \" ABC \" : \" ARC \" ) ; }", "python": "def solve ( x ) :\n    print ( \" ABC \" if x < 1200 else \" ARC \" )\n"}
{"java": "static float area ( float r ) { if ( r < 0 ) return - 1 ; float area = ( float ) ( 3.14 * Math . pow ( r / ( 2 * Math . sqrt ( 2 ) ) , 2 ) ) ; return area ; }", "python": "def area ( r ) :\n    if ( r < 0 ) :\n        return - 1\n    area = 3.14 * pow ( r / ( 2 * sqrt ( 2 ) ) , 2 ) ;\n    return area ;\n"}
{"java": "static void canMake ( int n , int ar [ ] ) { int sum = 0 , maxx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ar [ i ] ; maxx = Math . max ( maxx , ar [ i ] ) ; } if ( n == 1 || sum % 2 == 1 || sum - maxx < maxx ) { System . out . print ( \" No \\n \" ) ; } else { System . out . print ( \" Yes \\n \" ) ; } }", "python": "def canMake ( n , ar ) :\n    sum = 0 ; maxx = - 1 ;\n    for i in range ( n ) :\n        sum += ar [ i ] ;\n        maxx = max ( maxx , ar [ i ] ) ;\n    if ( n == 1 or sum % 2 == 1 or sum - maxx < maxx ) :\n        print ( \" No \" ) ;\n    else :\n        print ( \" Yes \" ) ;\n"}
{"java": "static int minCost ( int [ ] cost , int n ) { int totalCost = 0 ; int boardingBus = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( cost [ boardingBus ] > cost [ i ] ) { totalCost += ( ( i - boardingBus ) * cost [ boardingBus ] ) ; boardingBus = i ; } } totalCost += ( ( n - boardingBus ) * cost [ boardingBus ] ) ; return totalCost ; }", "python": "def minCost ( cost , n ) :\n    totalCost = 0\n    boardingBus = 0\n    for i in range ( 1 , n ) :\n        if ( cost [ boardingBus ] > cost [ i ] ) :\n            totalCost += ( ( i - boardingBus ) * cost [ boardingBus ] )\n            boardingBus = i\n    totalCost += ( ( n - boardingBus ) * cost [ boardingBus ] )\n    return totalCost\n"}
{"java": "static void solve ( ) { int min_contest = 0 , max_contest = 0 ; int organaize_contest = 1 ; while ( organaize_contest < x ) { if ( ! contest [ organaize_contest ] ) { if ( organaize_contest + 1 < x && ! contest [ organaize_contest + 1 ] ) { contest [ organaize_contest ] = true ; contest [ organaize_contest + 1 ] = true ; max_contest += 2 ; min_contest += 1 ; organaize_contest += 2 ; } else { contest [ organaize_contest ++ ] = true ; max_contest ++ ; min_contest ++ ; } } else { ++ organaize_contest ; } } System . out . println ( min_contest + \" \u2581 \" + max_contest ) ; }", "python": "def STR ( ) : return list ( input ( ) )\ndef INT ( ) : return int ( input ( ) )\ndef MAP ( ) : return map ( int , input ( ) . split ( ) )\ndef MAP2 ( ) : return map ( float , input ( ) . split ( ) )\ndef LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef STRING ( ) : return input ( )\nimport string\nimport sys\nfrom heapq import heappop , heappush\nfrom bisect import *\nfrom collections import deque , Counter , defaultdict\nfrom math import *\nfrom itertools import permutations , accumulate\ndx = [ - 1 , 1 , 0 , 0 ]\ndy = [ 0 , 0 , 1 , - 1 ]\nx , k = MAP ( )\nif k == 0 :\n    x -= 1\n    print ( ceil ( x / 2 ) , x )\n    exit ( 0 )\n"}
{"java": "static int countEvenOdd ( char num [ ] , int n ) { int even_count = 0 ; int odd_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = num [ i ] - 48 ; if ( x % 2 == 0 ) even_count ++ ; else odd_count ++ ; } System . out . println ( \" Even \u2581 count \u2581 : \u2581 \" + even_count ) ; System . out . println ( \" Odd \u2581 count \u2581 : \u2581 \" + odd_count ) ; if ( even_count % 2 == 0 && odd_count % 2 != 0 ) return 1 ; else return 0 ; }", "python": "def countEvenOdd ( num , n ) :\n    even_count = 0 ;\n    odd_count = 0 ;\n    num = list ( str ( num ) )\n    for i in num :\n        if i in ( '0' , '2' , '4' , '6' , '8' ) :\n            even_count += 1\n        else :\n            odd_count += 1\n    print ( \" Even \u2581 count \u2581 : \u2581 \" , even_count ) ;\n    print ( \" Odd \u2581 count \u2581 : \u2581 \" , odd_count ) ;\n    if ( even_count % 2 == 0 and odd_count % 2 != 0 ) :\n        return 1 ;\n    else :\n        return 0 ;\n"}
{"java": "static int factorial ( int n ) { int i = n , fact = 1 ; while ( n / i != n ) { fact = fact * i ; i -- ; } return fact ; }", "python": "def factorial ( n ) :\n    i = n\n    fact = 1\n    while ( n / i != n ) :\n        fact = fact * i\n        i -= 1\n    return fact\n"}
{"java": "static int Squares ( int n , int m , int a ) { return ( ( m + a - 1 ) / a ) * ( ( n + a - 1 ) / a ) ; }", "python": "def Squares ( n , m , a ) :\n    return ( ( ( m + a - 1 ) // a ) * ( ( n + a - 1 ) // a ) )\n"}
{"java": "static int minOperations ( int [ ] a , int n , int k ) { HashMap < Integer , Boolean > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( a [ i ] ) && map . get ( a [ i ] ) ) return 0 ; map . put ( a [ i ] , true ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = a [ i ] ^ k ; map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) map . put ( b [ i ] , true ) ; } for ( int i = 0 ; i < n ; i ++ ) if ( map . containsKey ( a [ i ] ) && map . get ( a [ i ] ) ) return 1 ; map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( b [ i ] ) && map . get ( b [ i ] ) ) return 2 ; map . put ( b [ i ] , true ) ; } return - 1 ; }", "python": "def minOperations ( a , n , K ) :\n    map = dict . fromkeys ( a , False ) ;\n    for i in range ( n ) :\n        if ( map [ a [ i ] ] ) :\n            return 0 ;\n        map [ a [ i ] ] = True ;\n    b = [ 0 ] * n ;\n    for i in range ( n ) :\n        b [ i ] = a [ i ] ^ K ;\n    map . clear ( ) ;\n    for i in range ( n ) :\n        if ( a [ i ] != b [ i ] ) :\n            map [ b [ i ] ] = True ;\n    for i in range ( n ) :\n        if a [ i ] in map :\n            return 1 ;\n    map . clear ( ) ;\n    for i in range ( n ) :\n        if b [ i ] in map :\n            return 2 ;\n        map [ b [ i ] ] = True ;\n    return - 1 ;\n"}
{"java": "public static int minOperations ( int [ ] a , int n , int K ) { HashMap < Integer , Boolean > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( a [ i ] ) ) return 0 ; map . put ( a [ i ] , true ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = a [ i ] | K ; map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) map . put ( b [ i ] , true ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( a [ i ] ) ) return 1 ; } map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( b [ i ] ) ) return 2 ; map . put ( b [ i ] , true ) ; } return - 1 ; }", "python": "def minOperations ( a , n , K ) :\n    map = dict . fromkeys ( a , 0 ) ;\n    for i in range ( n ) :\n        if ( map [ a [ i ] ] ) :\n            return 0 ;\n        map [ a [ i ] ] = True ;\n    b = [ 0 ] * n ;\n    for i in range ( n ) :\n        b [ i ] = a [ i ] | K ;\n    map . clear ( ) ;\n    for i in range ( n ) :\n        if ( a [ i ] != b [ i ] ) :\n            map [ b [ i ] ] = True ;\n    for i in range ( n ) :\n        if a [ i ] not in map :\n            pass\n        elif ( map [ a [ i ] ] ) :\n            return 1 ;\n    map . clear ( ) ;\n    for i in range ( n ) :\n        if ( map [ b [ i ] ] ) :\n            return 2 ;\n        map [ b [ i ] ] = true ;\n    return - 1 ;\n"}
{"java": "static List < Integer > getSeed ( int m , int n ) { boolean list [ ] = new boolean [ MAX ] ; for ( int i = m ; i < ( MAX ) ; i ++ ) { if ( ! list [ i ] ) { for ( int j = i * 2 ; j < MAX ; j += i ) list [ j ] = true ; } } List < Integer > res = new ArrayList < > ( ) ; int i = m ; while ( res . size ( ) < n ) { if ( ! list [ i ] ) { res . add ( i ) ; } i ++ ; } return res ; }", "python": "def main ( m , n ) :\n    ck = [ True ] * ( 7368792 )\n    for i in range ( m , 7368792 ) :\n        if ck [ i ] :\n            n -= 1\n            ck [ i : : i ] = [ False ] * ( ( 7368791 - i ) // i + 1 )\n            if n != 0 :\n                continue\n            i += 1\n            while not ck [ i ] :\n                i += 1\n            print ( i )\n            return\n"}
{"java": "static void findSetBits ( int n ) { int [ ] dp = new int [ n + 1 ] ; System . out . print ( dp [ 0 ] + \" \u2581 \" ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { dp [ i ] = dp [ i / 2 ] ; } else { dp [ i ] = dp [ i / 2 ] + 1 ; } System . out . print ( dp [ i ] + \" \u2581 \" ) ; } }", "python": "def findSetBits ( n ) :\n    dp = [ 0 ] * ( n + 1 ) ;\n    print ( dp [ 0 ] , end = \" \u2581 \" ) ;\n    for i in range ( 1 , n + 1 ) :\n        if ( i % 2 == 0 ) :\n            dp [ i ] = dp [ i // 2 ] ;\n        else :\n            dp [ i ] = dp [ i // 2 ] + 1 ;\n        print ( dp [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "public static int findMissing ( int arr [ ] , int n ) { int l = 0 , h = n - 1 ; int mid ; while ( h > l ) { mid = l + ( h - l ) / 2 ; if ( arr [ mid ] - mid == arr [ 0 ] ) { if ( arr [ mid + 1 ] - arr [ mid ] > 1 ) return arr [ mid ] + 1 ; else { l = mid + 1 ; } } else { if ( arr [ mid ] - arr [ mid - 1 ] > 1 ) return arr [ mid ] - 1 ; else { h = mid - 1 ; } } } return - 1 ; }", "python": "def findMissing ( arr , n ) :\n    l , h = 0 , n - 1\n    mid = 0\n    while ( h > l ) :\n        mid = l + ( h - l ) // 2\n        if ( arr [ mid ] - mid == arr [ 0 ] ) :\n            if ( arr [ mid + 1 ] - arr [ mid ] > 1 ) :\n                return arr [ mid ] + 1\n            else :\n                l = mid + 1\n        else :\n            if ( arr [ mid ] - arr [ mid - 1 ] > 1 ) :\n                return arr [ mid ] - 1\n            else :\n                h = mid - 1\n    return - 1\n"}
{"java": "static int sumKRepeating ( int arr [ ] , int n , int k ) { int sum = 0 ; Vector < Boolean > visited = new Vector < Boolean > ( ) ; for ( int i = 0 ; i < n ; i ++ ) visited . add ( false ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited . get ( i ) == true ) continue ; int count = 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { count ++ ; visited . add ( j , true ) ; } } if ( count == k ) sum += arr [ i ] ; } return sum ; }", "python": "def sumKRepeating ( arr , n , k ) :\n    sum = 0\n    visited = [ False for i in range ( n ) ]\n    for i in range ( 0 , n , 1 ) :\n        if ( visited [ i ] == True ) :\n            continue\n        count = 1\n        for j in range ( i + 1 , n , 1 ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                count += 1\n                visited [ j ] = True\n        if ( count == k ) :\n            sum += arr [ i ]\n    return sum\n"}
{"java": "static float getPercentile ( int rank , int students ) { float result = ( float ) ( students - rank ) / students * 100 ; return result ; }", "python": "def getPercentile ( rank , students ) :\n    result = ( students - rank ) / students * 100 ;\n    return result ;\n"}
{"java": "static int countElements ( int p [ ] , int n ) { int ans = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( p [ i - 1 ] > p [ i ] && p [ i ] > p [ i + 1 ] ) ans ++ ; else if ( p [ i - 1 ] < p [ i ] && p [ i ] < p [ i + 1 ] ) ans ++ ; } return ans ; }", "python": "def countElements ( p , n ) :\n    ans = 0 ;\n    for i in range ( 1 , n - 1 ) :\n        if ( p [ i - 1 ] > p [ i ] and p [ i ] > p [ i + 1 ] ) :\n            ans += 1 ;\n        elif ( p [ i - 1 ] < p [ i ] and p [ i ] < p [ i + 1 ] ) :\n            ans += 1 ;\n    return ans ;\n"}
{"java": "static int divCount ( int n ) { boolean hash [ ] = new boolean [ n + 1 ] ; Arrays . fill ( hash , true ) ; for ( int p = 2 ; p * p < n ; p ++ ) if ( hash [ p ] == true ) for ( int i = p * 2 ; i < n ; i += p ) hash [ i ] = false ; int total = 1 ; for ( int p = 2 ; p <= n ; p ++ ) { if ( hash [ p ] ) { int count = 0 ; if ( n % p == 0 ) { while ( n % p == 0 ) { n = n / p ; count ++ ; } total = total * ( count + 1 ) ; } } } return total ; }", "python": "def divCount ( n ) :\n    hh = [ 1 ] * ( n + 1 ) ;\n    p = 2 ;\n    while ( ( p * p ) < n ) :\n        if ( hh [ p ] == 1 ) :\n            for i in range ( ( p * 2 ) , n , p ) :\n                hh [ i ] = 0 ;\n        p += 1 ;\n    total = 1 ;\n    for p in range ( 2 , n + 1 ) :\n        if ( hh [ p ] == 1 ) :\n            count = 0 ;\n            if ( n % p == 0 ) :\n                while ( n % p == 0 ) :\n                    n = int ( n / p ) ;\n                    count += 1 ;\n                total *= ( count + 1 ) ;\n    return total ;\n"}
{"java": "static void maxProductSum ( String str , int m ) { int n = str . length ( ) ; int maxProd = Integer . MIN_VALUE , maxSum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - m ; i ++ ) { int product = 1 , sum = 0 ; for ( int j = i ; j < m + i ; j ++ ) { product = product * ( str . charAt ( j ) - '0' ) ; sum = sum + ( str . charAt ( j ) - '0' ) ; } maxProd = Math . max ( maxProd , product ) ; maxSum = Math . max ( maxSum , sum ) ; } System . out . println ( \" Maximum \u2581 Product \u2581 = \u2581 \" + maxProd ) ; System . out . print ( \" \\n Maximum \u2581 Sum \u2581 = \u2581 \" + maxSum ) ; }", "python": "def maxProductSum ( string , m ) :\n    n = len ( string )\n    maxProd , maxSum = ( - ( sys . maxsize ) - 1 , - ( sys . maxsize ) - 1 )\n    for i in range ( n - m ) :\n        product , sum = 1 , 0\n        for j in range ( i , m + i ) :\n            product = product * ( ord ( string [ j ] ) - ord ( '0' ) )\n            sum = sum + ( ord ( string [ j ] ) - ord ( '0' ) )\n        maxProd = max ( maxProd , product )\n        maxSum = max ( maxSum , sum )\n    print ( \" Maximum \u2581 Product \u2581 = \" , maxProd )\n    print ( \" Maximum \u2581 sum \u2581 = \" , maxSum )\n"}
{"java": "static void angleextcycquad ( int z ) { System . out . print ( \" The \u2581 exterior \u2581 angle \u2581 of \u2581 the \" + \" \u2581 cyclic \u2581 quadrilateral \u2581 is \u2581 \" + z + \" \u2581 degrees \" ) ; }", "python": "def angleextcycquad ( z ) :\n    print ( \" The \u2581 exterior \u2581 angle \u2581 of \u2581 the \" , end = \" \" ) ;\n    print ( \" cyclic \u2581 quadrilateral \u2581 is \u2581 \" , end = \" \" ) ;\n    print ( z , \" \u2581 degrees \" ) ;\n"}
{"java": "static int kthSmallest ( int n , int k ) { return ( 2 * k ) ; }", "python": "def kthSmallest ( n , k ) :\n    return 2 * k\n"}
{"java": "public static int breakEvenPoint ( int exp1 , int S , int M ) { double earn = S - M ; double exp = exp1 ; double res = Math . ceil ( exp / earn ) ; int res1 = ( int ) res ; return res1 ; }", "python": "def breakEvenPoint ( exp , S , M ) :\n    earn = S - M\n    res = math . ceil ( exp / earn )\n    return res\n"}
{"java": "static int findCullen ( int n ) { return ( 1 << n ) * n + 1 ; }", "python": "def findCullen ( n ) :\n    return ( 1 << n ) * n + 1\n"}
{"java": "static int minCost ( int arr [ ] , int n ) { int count_even = 0 ; int count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count_even ++ ; else count_odd ++ ; } return Math . min ( count_even , count_odd ) ; }", "python": "def minCost ( arr , n ) :\n    count_even = 0\n    count_odd = 0\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 == 0 ) :\n            count_even += 1\n        else :\n            count_odd += 1\n    return min ( count_even , count_odd )\n"}
{"java": "static void product_subarrays ( int arr [ ] , int n ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { product *= arr [ j ] ; } } System . out . println ( product + \" \\n \" ) ; }", "python": "def product_subarrays ( arr , n ) :\n    product = 1 ;\n    for i in range ( n ) :\n        for j in range ( i , n ) :\n            product *= arr [ j ] ;\n    print ( product ) ;\n"}
{"java": "static int Minsteps ( int n , int m ) { int ans = 0 ; while ( m > n ) { if ( m % 2 != 0 ) { m ++ ; ans ++ ; } m /= 2 ; ans ++ ; } return ans + n - m ; }", "python": "def Minsteps ( n , m ) :\n    ans = 0\n    while ( m > n ) :\n        if ( m & 1 ) :\n            m += 1\n            ans += 1\n        m //= 2\n        ans += 1\n    return ans + n - m\n"}
{"java": "public static int [ ] getPermutation ( int n , int k ) { int [ ] ans = new int [ 2 * n ] ; int idx = 0 ; while ( idx < k ) { ans [ 2 * idx ] = 2 * idx + 2 ; ans [ 2 * idx + 1 ] = 2 * idx + 1 ; idx ++ ; } while ( idx < n ) { ans [ 2 * idx ] = 2 * idx + 1 ; ans [ 2 * idx + 1 ] = 2 * idx + 2 ; idx ++ ; } return ans ; }", "python": "def solve ( ) :\n    ans = [ x + 1 for x in range ( 2 * n ) ]\n    for i in range ( k ) :\n        ans [ 2 * i ] , ans [ 2 * i + 1 ] = ans [ 2 * i + 1 ] , ans [ 2 * i ]\n    return ans\n"}
{"java": "static int smallestNumber ( int n ) { int num = 0 ; String s = \" \" ; int duplicate = n ; while ( n > 0 ) { s = ( char ) ( n % 10 + 48 ) + s ; n /= 10 ; } int index = - 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int digit = s . charAt ( i ) - '0' ; if ( ( digit & 1 ) == 0 ) { index = i ; break ; } } if ( index == - 1 ) { return duplicate ; } for ( int i = 0 ; i < index ; i ++ ) { num = num * 10 + ( s . charAt ( i ) - '0' ) ; } num = num * 10 + ( s . charAt ( index ) - '0' + 1 ) ; for ( int i = index + 1 ; i < s . length ( ) ; i ++ ) { num = num * 10 + 1 ; } return num ; }", "python": "def smallestNumber ( n ) :\n    num = 0\n    s = \" \"\n    duplicate = n\n    while ( n ) :\n        s = chr ( n % 10 + 48 ) + s\n        n //= 10\n    index = - 1\n    for i in range ( len ( s ) ) :\n        digit = ord ( s [ i ] ) - ord ( '0' )\n        if ( ( digit & 1 ) == 0 ) :\n            index = i\n            break\n    if ( index == - 1 ) :\n        return duplicate\n    for i in range ( index ) :\n        num = num * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )\n    num = num * 10 + ( ord ( s [ index ] ) - ord ( '0' ) + 1 )\n    for i in range ( index + 1 , len ( s ) ) :\n        num = num * 10 + 1\n    return num\n"}
{"java": "private static void solve ( ) throws Exception { Vector < Integer > ansVector = new Vector < > ( ) ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { boolean flag = true ; index = i * n ; for ( int j = 0 ; j < n ; j ++ , index ++ ) { if ( mVector . get ( index ) == 3 || mVector . get ( index ) == 1 ) { flag = false ; break ; } } if ( flag ) { ansVector . add ( i + 1 ) ; } } System . out . println ( ansVector . size ( ) ) ; if ( ansVector . size ( ) != 0 ) { for ( Integer integer : ansVector ) { System . out . print ( integer + \" \u2581 \" ) ; } } }", "python": "def sol ( arr ) :\n    ans = [ ]\n    for i in range ( len ( arr ) ) :\n        if 1 in arr [ i ] or 3 in arr [ i ] :\n            continue\n        ans . append ( i + 1 )\n    return ans\n"}
{"java": "private static int get ( int [ ] arr , int x ) { int y = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] == x ) { y = i ; arr [ i ] = - 1 ; break ; } } return y + 1 ; }", "python": "def solution ( ) :\n    file = open ( \" input . txt \" , \" r \" )\n    _ , k = map ( int , file . readline ( ) . split ( ) )\n    arr = list ( map ( int , file . readline ( ) . split ( ) ) )\n    minheap = [ ]\n    for i , val in enumerate ( arr ) :\n        heappush ( minheap , ( val , i + 1 ) )\n        if len ( minheap ) > k :\n            heappop ( minheap )\n    file . close ( )\n    file = open ( \" output . txt \" , \" w \" )\n    file . write ( str ( minheap [ 0 ] [ 0 ] ) + \" \\n \" )\n    file . write ( \" \u2581 \" . join ( map ( str , [ i for _ , i in minheap ] ) ) + \" \\n \" )\n"}
{"java": "static int maxPartitions ( int arr [ ] , int n ) { int ans = 0 , max_so_far = 0 ; for ( int i = 0 ; i < n ; ++ i ) { max_so_far = Math . max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) ans ++ ; } return ans ; }", "python": "def maxPartitions ( arr , n ) :\n    ans = 0 ; max_so_far = 0\n    for i in range ( 0 , n ) :\n        max_so_far = max ( max_so_far , arr [ i ] )\n        if ( max_so_far == i ) :\n            ans += 1\n    return ans\n"}
{"java": "public static int firstSetBit ( int n ) { int x = n & ( n - 1 ) ; return ( n ^ x ) ; }", "python": "def firstSetBit ( n ) :\n    x = n & ( n - 1 )\n    return ( n ^ x )\n"}
{"java": "private static long cmmdc ( long P , long Q ) { return Q == 0 ? P : cmmdc ( Q , P % Q ) ; }", "python": "def debug ( * args ) :\n    print ( * args , file = sys . stderr )\n"}
{"java": "static int maxWeight ( int arr [ ] , int n , int w1_r , int w2_r , int i ) { if ( i == n ) return 0 ; if ( dp [ i ] [ w1_r ] [ w2_r ] != - 1 ) return dp [ i ] [ w1_r ] [ w2_r ] ; int fill_w1 = 0 , fill_w2 = 0 , fill_none = 0 ; if ( w1_r >= arr [ i ] ) fill_w1 = arr [ i ] + maxWeight ( arr , n , w1_r - arr [ i ] , w2_r , i + 1 ) ; if ( w2_r >= arr [ i ] ) fill_w2 = arr [ i ] + maxWeight ( arr , n , w1_r , w2_r - arr [ i ] , i + 1 ) ; fill_none = maxWeight ( arr , n , w1_r , w2_r , i + 1 ) ; dp [ i ] [ w1_r ] [ w2_r ] = Math . max ( fill_none , Math . max ( fill_w1 , fill_w2 ) ) ; return dp [ i ] [ w1_r ] [ w2_r ] ; }", "python": "def maxWeight ( arr , n , w1_r , w2_r , i ) :\n    if i == n :\n        return 0\n    if dp [ i ] [ w1_r ] [ w2_r ] != - 1 :\n        return dp [ i ] [ w1_r ] [ w2_r ]\n    fill_w1 , fill_w2 , fill_none = 0 , 0 , 0\n    if w1_r >= arr [ i ] :\n        fill_w1 = arr [ i ] + maxWeight ( arr , n , w1_r - arr [ i ] , w2_r , i + 1 )\n    if w2_r >= arr [ i ] :\n        fill_w2 = arr [ i ] + maxWeight ( arr , n , w1_r , w2_r - arr [ i ] , i + 1 )\n    fill_none = maxWeight ( arr , n , w1_r , w2_r , i + 1 )\n    dp [ i ] [ w1_r ] [ w2_r ] = max ( fill_none , max ( fill_w1 , fill_w2 ) )\n    return dp [ i ] [ w1_r ] [ w2_r ]\n"}
{"java": "static int minItems ( int k , int r ) { for ( int i = 1 ; i < 10 ; i ++ ) if ( ( i * k - r ) % 10 == 0 || ( i * k ) % 10 == 0 ) return i ; return 10 ; }", "python": "def minItems ( k , r ) :\n    for i in range ( 1 , 10 ) :\n        if ( ( i * k - r ) % 10 == 0 or ( i * k ) % 10 == 0 ) :\n            return i\n    return 10 ;\n"}
{"java": "static int waysToKAdjacentSetBits ( int n , int k , int currentIndex , int adjacentSetBits , int lastBit ) { if ( currentIndex == n ) { if ( adjacentSetBits == k ) return 1 ; return 0 ; } int noOfWays = 0 ; if ( lastBit == 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } else if ( lastBit == 0 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } return noOfWays ; }", "python": "def waysToKAdjacentSetBits ( n , k , currentIndex , adjacentSetBits , lastBit ) :\n    if ( currentIndex == n ) :\n        if ( adjacentSetBits == k ) :\n            return 1 ;\n        return 0\n    noOfWays = 0\n    if ( lastBit == 1 ) :\n        noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ;\n        noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ;\n    elif ( lastBit != 1 ) :\n        noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ;\n        noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ;\n    return noOfWays ;\n"}
{"java": "static int nCr ( int n , int r ) { int fac [ ] = new int [ 100 ] ; for ( int i = 0 ; i < n ; i ++ ) fac [ i ] = 1 ; for ( int i = 1 ; i < n + 1 ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i ; } int ans = fac [ n ] / ( fac [ n - r ] * fac [ r ] ) ; return ans ; }", "python": "def nCr ( n , r ) :\n    fac = list ( )\n    fac . append ( 1 )\n    for i in range ( 1 , n + 1 ) :\n        fac . append ( fac [ i - 1 ] * i )\n    ans = fac [ n ] / ( fac [ n - r ] * fac [ r ] )\n    return ans\n"}
{"java": "public static void printLastOccurrence ( int a [ ] , int n ) { HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) map . put ( a [ i ] , i ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( a [ i ] ) == i ) System . out . print ( a [ i ] + \" \u2581 \" ) ; } }", "python": "def printLastOccurrence ( a , n ) :\n    mp = { i : 0 for i in range ( 7 ) }\n    for i in range ( n ) :\n        mp [ a [ i ] ] = i\n    for i in range ( n ) :\n        if ( mp [ a [ i ] ] == i ) :\n            print ( a [ i ] , end = \" \u2581 \" )\n"}
{"java": "static String solve ( int a , int b , int c ) { return String . format ( \" % d \u2581 % d \" , ( a < c ) ? 1 : - 1 , ( c < ( long ) a * b ) ? b : - 1 ) ; }", "python": "def solve ( a , b , c ) :\n    def solve1 ( a , b , c ) :\n        if c < a :\n            return - 1\n        if a == c :\n            return - 1\n        count = 1\n        box = 1\n        cost1 = a\n        cost2 = c\n        while cost1 > cost2 :\n            cost1 = cost1 + a\n            count += 1\n            if count % b != 0 :\n                cost2 = ( box * c )\n            elif count % b == 0 :\n                box += 1\n                cost2 = ( box * c )\n        ans1 = count\n        return ans1\n    def solve2 ( a , b , c ) :\n        if ( c / b ) >= a :\n            return - 1\n        count = b\n        cost1 = ( a * b )\n        cost2 = c\n        while cost2 > cost1 :\n            cost1 = cost1 + ( a * b )\n            if cost2 < cost1 :\n                break\n            else :\n                count += b\n                cost2 = count * c\n        ans2 = count\n        return ans2\n    ans1 = solve1 ( a , b , c )\n    ans2 = solve2 ( a , b , c )\n    return ans1 , ans2\n"}
{"java": "static boolean isPossible ( int a [ ] , int n ) { int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != i + 1 ) k ++ ; } if ( k <= 2 ) return true ; return false ; }", "python": "def isPossible ( a , n ) :\n    k = 0 ;\n    for i in range ( n ) :\n        if ( a [ i ] != i + 1 ) :\n            k += 1 ;\n    if ( k <= 2 ) :\n        return True ;\n    return False ;\n"}
{"java": "private static String decoding ( List < String > list ) { StringBuilder sb = new StringBuilder ( ) ; String s = \" \" ; int roop = 0 ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { s = list . get ( i ) ; if ( \" @ \" . equals ( s ) ) { roop = Integer . parseInt ( list . get ( i + 1 ) ) ; i ++ ; for ( int j = 0 ; j < roop ; j ++ ) { sb . append ( list . get ( i + 1 ) ) ; } i ++ ; } else { sb . append ( s ) ; } } return sb . toString ( ) ; }", "python": "def solve ( ) :\n    for line in readlines ( ) :\n        s = line . strip ( )\n        ans = [ ]\n        L = len ( s )\n        i = 0\n        while i < L :\n            if s [ i ] == \" @ \" :\n                k = int ( s [ i + 1 ] )\n                i += 2\n            else :\n                k = 1\n            c = s [ i ]\n            ans . append ( c * k )\n            i += 1\n        write ( \" \" . join ( ans ) )\n        write ( \" \\n \" )\n"}
{"java": "static long findSum ( int n ) { long sum2 , sum5 , sum10 ; sum2 = ( ( n / 2 ) * ( 4 + ( n / 2 - 1 ) * 2 ) ) / 2 ; sum5 = ( ( n / 5 ) * ( 10 + ( n / 5 - 1 ) * 5 ) ) / 2 ; sum10 = ( ( n / 10 ) * ( 20 + ( n / 10 - 1 ) * 10 ) ) / 2 ; return sum2 + sum5 - sum10 ; }", "python": "def findSum ( n ) :\n    sum2 = ( ( n // 2 ) * ( 4 + ( n // 2 - 1 ) * 2 ) ) // 2\n    sum5 = ( ( n // 5 ) * ( 10 + ( n // 5 - 1 ) * 5 ) ) // 2\n    sum10 = ( ( n // 10 ) * ( 20 + ( n // 10 - 1 ) * 10 ) ) // 2\n    return sum2 + sum5 - sum10 ;\n"}
{"java": "public static int [ ] calcMem ( String s ) { int [ ] arr = new int [ s . length ( ) + 1 ] ; for ( int i = 1 ; i < arr . length - 1 ; i ++ ) { if ( s . charAt ( i - 1 ) == s . charAt ( i ) ) arr [ i ] = arr [ i - 1 ] + 1 ; else arr [ i ] = arr [ i - 1 ] ; } return arr ; }", "python": "def ilya_queries ( s : str ) :\n    counter = 0\n    l = [ 0 ] * 100005\n    for i in range ( 1 , len ( s ) ) :\n        if s [ i ] == s [ i - 1 ] :\n            counter += 1\n        l [ i ] = counter\n    m = int ( input ( ) )\n    for _ in range ( m ) :\n        lo , r = map ( int , input ( ) . split ( ) )\n        print ( l [ r - 1 ] - l [ lo - 1 ] )\n"}
{"java": "static double average ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum / n ; }", "python": "def average ( a , n ) :\n    sum = 0\n    for i in range ( n ) :\n        sum += a [ i ]\n    return sum / n ;\n"}
{"java": "static int returnWinner ( String s , int l ) { int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < l ; i ++ ) { freq [ s . charAt ( i ) - ' a ' ] ++ ; } int cnt = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( freq [ i ] % 2 != 0 ) cnt ++ ; } if ( ( cnt == 0 ) || ( cnt & 1 ) == 1 ) return 1 ; else return 2 ; }", "python": "def returnWinner ( s , l ) :\n    freq = [ 0 for i in range ( 26 ) ]\n    for i in range ( 0 , l , 1 ) :\n        freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1\n    cnt = 0\n    for i in range ( 26 ) :\n        if ( freq [ i ] % 2 != 0 ) :\n            cnt += 1\n    if ( cnt == 0 or cnt & 1 == 1 ) :\n        return 1\n    else :\n        return 2\n"}
{"java": "static void divide ( int n , int m ) { System . out . println ( \" Remainder \u2581 = \u2581 \" + ( ( n ) & ( m - 1 ) ) ) ; System . out . println ( \" Quotient \u2581 = \u2581 \" + ( n >> ( int ) ( Math . log ( m ) / Math . log ( 2 ) ) ) ) ; }", "python": "def divide ( n , m ) :\n    print ( \" Remainder \u2581 = \u2581 \" , ( ( n ) & ( m - 1 ) ) )\n    print ( \" Quotient \u2581 = \u2581 \" , ( n >> ( int ) ( math . log2 ( m ) ) ) )\n"}
{"java": "private static void solve ( ) { int n = s . nextInt ( ) ; long x = s . nextLong ( ) ; Map < Long , Integer > countMap = new HashMap < > ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . nextLong ( ) ; if ( countMap . containsKey ( arr [ i ] ) ) { countMap . put ( arr [ i ] , countMap . get ( arr [ i ] ) + 1 ) ; } else { countMap . put ( arr [ i ] , 1 ) ; } } Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( countMap . containsKey ( arr [ i ] ) && countMap . get ( arr [ i ] ) > 0 ) { long temp = arr [ i ] * x ; if ( countMap . containsKey ( temp ) && countMap . get ( temp ) > 0 ) { countMap . put ( arr [ i ] , countMap . get ( arr [ i ] ) - 1 ) ; countMap . put ( temp , countMap . get ( temp ) - 1 ) ; } } } int ans = 0 ; for ( Long key : countMap . keySet ( ) ) { ans += countMap . get ( key ) ; } System . out . println ( ans ) ; }", "python": "def solve ( ) :\n    pass\n"}
{"java": "static float areaOfKite ( int d1 , int d2 ) { float area = ( d1 * d2 ) / 2 ; return area ; }", "python": "def areaOfKite ( d1 , d2 ) :\n    area = ( d1 * d2 ) / 2 ;\n    return area ;\n"}
{"java": "static boolean isValid ( int c [ ] [ ] , int n ) { int X [ ] = { 0 , - 1 , 0 , 1 } ; int Y [ ] = { 1 , 0 , - 1 , 0 } ; boolean isValid = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { int newX = i + X [ k ] ; int newY = j + Y [ k ] ; if ( newX < n && newY < n && newX >= 0 && newY >= 0 && c [ newX ] [ newY ] == c [ i ] [ j ] ) { isValid = false ; } } } } return isValid ; }", "python": "def isValid ( c , n ) :\n    X = [ 0 , - 1 , 0 , 1 ]\n    Y = [ 1 , 0 , - 1 , 0 ]\n    isValid = True\n    for i in range ( n ) :\n        for j in range ( n ) :\n            for k in range ( n ) :\n                newX = i + X [ k ]\n                newY = j + Y [ k ]\n                if ( newX < n and newY < n and newX >= 0 and newY >= 0 and c [ newX ] [ newY ] == c [ i ] [ j ] ) :\n                    isValid = false\n    return isValid\n"}
{"java": "static double innerCirclearea ( double radius ) { if ( radius < 0 ) { return - 1 ; } double r = radius / 2 ; double Area = ( 3.14 * Math . pow ( r , 2 ) ) ; return Area ; }", "python": "def innerCirclearea ( radius ) :\n    if ( radius < 0 ) :\n        return - 1 ;\n    r = radius / 2 ;\n    Area = ( 3.14 * pow ( r , 2 ) ) ;\n    return Area ;\n"}
{"java": "static void printCombination ( int n ) { System . out . print ( 1 + \" \u2581 \" ) ; if ( ( n - 2 ) % 3 == 0 ) System . out . print ( 2 + \" \u2581 \" + ( n - 3 ) ) ; else System . out . print ( 1 + \" \u2581 \" + ( n - 2 ) ) ; }", "python": "def printCombination ( n ) :\n    print ( \"1 \u2581 \" , end = \" \" ) ;\n    if ( ( n - 2 ) % 3 == 0 ) :\n        print ( \"2\" , n - 3 , end = \" \" ) ;\n    else :\n        print ( \"1\" , ( n - 2 ) , end = \" \" ) ;\n"}
{"java": "static void subsetSums ( int [ ] arr , int l , int r , int sum ) { if ( l > r ) { System . out . print ( sum + \" \u2581 \" ) ; return ; } subsetSums ( arr , l + 1 , r , sum + arr [ l ] ) ; subsetSums ( arr , l + 1 , r , sum ) ; }", "python": "def subsetSums ( arr , l , r , sum = 0 ) :\n    if l > r :\n        print ( sum , end = \" \u2581 \" )\n        return\n    subsetSums ( arr , l + 1 , r , sum + arr [ l ] )\n    subsetSums ( arr , l + 1 , r , sum )\n"}
{"java": "static int numofstring ( int n , int m ) { if ( n == 1 ) return m ; if ( n == 2 ) return m * ( m - 1 ) ; return m * ( m - 1 ) * ( int ) Math . pow ( m - 2 , n - 2 ) ; }", "python": "def numofstring ( n , m ) :\n    if n == 1 :\n        return m\n    if n == 2 :\n        return m * ( m - 1 )\n    return m * ( m - 1 ) * pow ( m - 2 , n - 2 )\n"}
{"java": "static Vector < Long > getArray ( int n ) { Vector < Long > ans = new Vector < Long > ( ) ; long p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) ans . add ( p2 ) ; n >>= 1 ; p2 *= 2 ; } return ans ; }", "python": "def getArray ( n ) :\n    ans = [ ] ;\n    p2 = 1 ;\n    while ( n > 0 ) :\n        if ( n & 1 ) :\n            ans . append ( p2 ) ;\n        n >>= 1 ;\n        p2 *= 2 ;\n    return ans ;\n"}
{"java": "static void dfs ( ) { }", "python": "def equalizer ( ls ) :\n    big = max ( ls )\n    small = min ( ls )\n    steps = big - small\n    return steps\n"}
{"java": "public static int oddSum ( int n ) { return ( n * n ) ; }", "python": "def oddSum ( n ) :\n    return ( n * n ) ;\n"}
{"java": "static void printVec ( Vector vec ) { Iterator it = vec . iterator ( ) ; StringBuffer sb = new StringBuffer ( ) ; while ( it . hasNext ( ) ) { sb . append ( it . next ( ) ) ; if ( it . hasNext ( ) ) { sb . append ( \" \u2581 \" ) ; } } System . out . println ( sb ) ; }", "python": "def run ( ) :\n    n , q = [ int ( x ) for x in input ( ) . split ( ) ]\n    ls = [ [ ] for _ in range ( n ) ]\n    for _ in range ( q ) :\n        command = input ( )\n        if command . startswith ( '0' ) :\n            i , j = [ int ( x ) for x in command [ 2 : ] . split ( ) ]\n            ls [ i ] . append ( j )\n        elif command . startswith ( '1' ) :\n            i = int ( command [ 2 : ] )\n            print ( \" \u2581 \" . join ( [ str ( x ) for x in ls [ i ] ] ) )\n        elif command . startswith ( '2' ) :\n            i = int ( command [ 2 : ] )\n            ls [ i ] = [ ]\n        else :\n            raise ValueError ( ' invalid \u2581 command ' )\n"}
{"java": "static void printPartition ( int n , int m ) { int k = n / m ; int ct = n % m ; int i ; for ( i = 1 ; i <= ct ; i ++ ) System . out . print ( k + 1 + \" \u2581 \" ) ; for ( ; i <= m ; i ++ ) System . out . print ( k + \" \u2581 \" ) ; }", "python": "def printPartition ( n , m ) :\n    k = int ( n / m )\n    ct = n % m\n    for i in range ( 1 , ct + 1 , 1 ) :\n        print ( k + 1 , end = \" \u2581 \" )\n    count = i\n    for i in range ( count , m , 1 ) :\n        print ( k , end = \" \u2581 \" )\n"}
{"java": "public static boolean canBeMapped ( String s1 , int l1 , String s2 , int l2 ) { if ( l1 != l2 ) return false ; int [ ] freq1 = new int [ MAX ] ; int [ ] freq2 = new int [ MAX ] ; for ( int i = 0 ; i < l1 ; i ++ ) freq1 [ s1 . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < l2 ; i ++ ) freq2 [ s2 . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq1 [ i ] == 0 ) continue ; boolean found = false ; for ( int j = 0 ; j < MAX ; j ++ ) { if ( freq1 [ i ] == freq2 [ j ] ) { freq2 [ j ] = - 1 ; found = true ; break ; } } if ( ! found ) return false ; } return true ; }", "python": "def canBeMapped ( s1 , l1 , s2 , l2 ) :\n    if ( l1 != l2 ) :\n        return False\n    freq1 = [ 0 for i in range ( MAX ) ]\n    freq2 = [ 0 for i in range ( MAX ) ]\n    for i in range ( l1 ) :\n        freq1 [ ord ( s1 [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( l2 ) :\n        freq2 [ ord ( s2 [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( MAX ) :\n        if ( freq1 [ i ] == 0 ) :\n            continue\n        found = False\n        for j in range ( MAX ) :\n            if ( freq1 [ i ] == freq2 [ j ] ) :\n                freq2 [ j ] = - 1\n                found = True\n                break\n        if ( found == False ) :\n            return False\n    return True\n"}
{"java": "static boolean check ( String s ) { int [ ] freq = new int [ 26 ] ; int n = s . length ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { freq [ ( s . charAt ( i ) ) - 97 ] += 1 ; } for ( int i = 0 ; i < freq . length ; i ++ ) { if ( freq [ i ] % 2 == 1 ) { return false ; } } return true ; }", "python": "def check ( s ) :\n    freq = [ 0 ] * 26\n    n = len ( s )\n    for i in range ( n ) :\n        freq [ ord ( s [ i ] ) - 97 ] += 1\n    for i in range ( 26 ) :\n        if ( freq [ i ] % 2 == 1 ) :\n            return False\n    return True\n"}
{"java": "private static int solve ( int N , int [ ] A ) { Arrays . sort ( A ) ; int max = - 1 ; int prev2 = 0 ; int prev1 = 0 ; int current = 0 ; int current_a = - 1 ; for ( int i = 0 ; i < N ; i ++ ) { int a = A [ i ] ; if ( a != current_a ) { max = Math . max ( prev2 + prev1 + current , max ) ; if ( current_a + 1 == a ) { prev2 = prev1 ; prev1 = current ; } else if ( current_a + 2 == a ) { prev2 = current ; prev1 = 0 ; } else { prev2 = 0 ; prev1 = 0 ; } current_a = a ; current = 1 ; } else { current ++ ; } } max = Math . max ( prev2 + prev1 + current , max ) ; return max ; }", "python": "def main ( ) :\n    _ = int ( input ( ) )\n    d = defaultdict ( lambda : 0 )\n    for a in [ int ( i ) for i in input ( ) . split ( ) ] :\n        d [ a - 1 ] += 1\n        d [ a ] += 1\n        d [ a + 1 ] += 1\n    print ( sorted ( d . items ( ) , key = lambda x : x [ 1 ] , reverse = True ) [ 0 ] [ 1 ] )\n"}
{"java": "static int sumOfElements ( int arr [ ] , int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; int i , j ; HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( m . get ( arr [ i ] ) == null ) m . put ( arr [ i ] , 1 ) ; else m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } int sum = 0 ; Iterator hmIterator = m . entrySet ( ) . iterator ( ) ; while ( hmIterator . hasNext ( ) ) { Map . Entry mapElement = ( Map . Entry ) hmIterator . next ( ) ; if ( ( ( int ) mapElement . getValue ( ) ) >= ( ( int ) mapElement . getKey ( ) ) ) { sum += ( ( int ) mapElement . getKey ( ) ) ; } } return sum ; }", "python": "def sumOfElements ( arr , n ) :\n    m = dict . fromkeys ( arr , 0 )\n    for i in range ( n ) :\n        m [ arr [ i ] ] += 1\n    sum = 0\n    for key , value in m . items ( ) :\n        if value >= key :\n            sum += key\n    return sum\n"}
{"java": "public static int getMinimumNumberOfMoves ( int n ) { if ( n == 1 ) { return 0 ; } if ( n == 2 ) { return - 1 ; } int countOfFactor2 = 0 ; int countOfFactor3 = 0 ; while ( n % 2 == 0 ) { n /= 2 ; countOfFactor2 ++ ; } while ( n % 3 == 0 ) { n /= 3 ; countOfFactor3 ++ ; } if ( countOfFactor2 > countOfFactor3 ) { return - 1 ; } return n == 1 && countOfFactor3 >= countOfFactor2 ? 2 * countOfFactor3 - countOfFactor2 : - 1 ; }", "python": "def explode ( d ) :\n    result = 0\n    while ( True ) :\n        if ( d == 1 ) :\n            return result\n        if ( d % 6 == 1 or d % 6 == 2 or d % 6 == 4 or d % 6 == 5 ) :\n            return - 1\n        if ( d % 6 == 0 ) :\n            d /= 6\n            result += 1\n        else :\n            d *= 2\n            result += 1\n"}
{"java": "public static void rearrange ( int [ ] arr ) { if ( arr == null || arr . length % 2 == 1 ) return ; int currIdx = ( arr . length - 1 ) / 2 ; while ( currIdx > 0 ) { int count = currIdx , swapIdx = currIdx ; while ( count -- > 0 ) { int temp = arr [ swapIdx + 1 ] ; arr [ swapIdx + 1 ] = arr [ swapIdx ] ; arr [ swapIdx ] = temp ; swapIdx ++ ; } currIdx -- ; } }", "python": "def rearrange ( n ) :\n    global arr\n    if ( n % 2 == 1 ) :\n        return\n    currIdx = int ( ( n - 1 ) / 2 )\n    while ( currIdx > 0 ) :\n        count = currIdx\n        swapIdx = currIdx\n        while ( count > 0 ) :\n            temp = arr [ swapIdx + 1 ]\n            arr [ swapIdx + 1 ] = arr [ swapIdx ]\n            arr [ swapIdx ] = temp\n            swapIdx = swapIdx + 1\n            count = count - 1\n        currIdx = currIdx - 1\n"}
{"java": "static int noOfBinaryStrings ( int N , int k ) { int dp [ ] = new int [ 100002 ] ; for ( int i = 1 ; i <= k - 1 ; i ++ ) { dp [ i ] = 1 ; } dp [ k ] = 2 ; for ( int i = k + 1 ; i <= N ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - k ] ) % mod ; } return dp [ N ] ; }", "python": "def noOfBinaryStrings ( N , k ) :\n    dp = [ 0 ] * 100002 ;\n    for i in range ( 1 , K ) :\n        dp [ i ] = 1 ;\n    dp [ k ] = 2 ;\n    for i in range ( k + 1 , N + 1 ) :\n        dp [ i ] = ( dp [ i - 1 ] + dp [ i - k ] ) % mod ;\n    return dp [ N ] ;\n"}
{"java": "static float hexagonside ( float a ) { if ( a < 0 ) return - 1 ; float x = a / 3 ; return x ; }", "python": "def hexagonside ( a ) :\n    if a < 0 :\n        return - 1\n    x = a // 3\n    return x\n"}
{"java": "static void precompute ( ) { F [ 1 ] = 2 ; F [ 2 ] = 3 ; F [ 3 ] = 4 ; for ( int i = 4 ; i < N ; i ++ ) F [ i ] = ( F [ i - 1 ] + F [ i - 2 ] ) % MOD ; }", "python": "def precompute ( ) :\n    F [ 1 ] = 2 ;\n    F [ 2 ] = 3 ;\n    F [ 3 ] = 4 ;\n    for i in range ( 4 , N ) :\n        F [ i ] = ( F [ i - 1 ] + F [ i - 2 ] ) % MOD ;\n"}
{"java": "static long oddNumSum ( int n ) { return ( n * ( 2 * n + 1 ) * ( 24 * n * n * n - 12 * n * n - 14 * n + 7 ) ) / 15 ; }", "python": "def oddNumSum ( n ) :\n    return ( n * ( 2 * n + 1 ) * ( 24 * n * n * n - 12 * n * n - 14 * n + 7 ) ) / 15\n"}
{"java": "static int count ( int x , int y ) { int ans = 0 ; Map < Integer , Integer > m = new HashMap < > ( ) ; while ( x % y != 0 ) { x = x % y ; ans ++ ; if ( m . containsKey ( x ) ) return - 1 ; m . put ( x , 1 ) ; x = x * 10 ; } return ans ; }", "python": "def count ( x , y ) :\n    ans = 0\n    m = dict ( )\n    while x % y != 0 :\n        x %= y\n        ans += 1\n        if x in m :\n            return - 1\n        m [ x ] = 1\n        x *= 10\n    return ans\n"}
{"java": "static void min_visible_bottles ( int [ ] arr , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } ans = Math . max ( ans , mp . get ( arr [ i ] ) ) ; } System . out . print ( \" Minimum \u2581 number \u2581 of \u2581 \" + \" Visible \u2581 Bottles \u2581 are : \u2581 \" + ans + \" \\n \" ) ; }", "python": "def min_visible_bottles ( arr , n ) :\n    m = dict ( )\n    ans = 0\n    for i in range ( n ) :\n        m [ arr [ i ] ] = m . get ( arr [ i ] , 0 ) + 1\n        ans = max ( ans , m [ arr [ i ] ] )\n    print ( \" Minimum \u2581 number \u2581 of \" , \" Visible \u2581 Bottles \u2581 are : \u2581 \" , ans )\n"}
{"java": "static int countEvenSum ( int arr [ ] , int n ) { int temp [ ] = { 1 , 0 } ; int result = 0 , sum = 0 ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { sum = ( ( sum + arr [ i ] ) % 2 + 2 ) % 2 ; temp [ sum ] ++ ; } result = result + ( temp [ 0 ] * ( temp [ 0 ] - 1 ) / 2 ) ; result = result + ( temp [ 1 ] * ( temp [ 1 ] - 1 ) / 2 ) ; return ( result ) ; }", "python": "def countEvenSum ( arr , n ) :\n    temp = [ 1 , 0 ]\n    result = 0\n    sum = 0\n    for i in range ( n ) :\n        sum = ( ( sum + arr [ i ] ) % 2 + 2 ) % 2\n        temp [ sum ] += 1\n    result = result + ( temp [ 0 ] * ( temp [ 0 ] - 1 ) // 2 )\n    result = result + ( temp [ 1 ] * ( temp [ 1 ] - 1 ) // 2 )\n    return ( result )\n"}
{"java": "public static int operation ( List < Integer > values ) { if ( values . get ( 0 ) == values . get ( 2 ) ) { return 0 ; } if ( values . get ( 0 ) == values . get ( 1 ) ) { int result = values . get ( 2 ) - values . get ( 1 ) ; values . set ( 0 , values . get ( 2 ) ) ; values . set ( 1 , values . get ( 2 ) ) ; return result ; } if ( ( values . get ( 1 ) - values . get ( 0 ) ) % 2 == 0 ) { int result = ( values . get ( 1 ) - values . get ( 0 ) ) / 2 ; values . set ( 0 , values . get ( 1 ) ) ; return result ; } else { int result = ( values . get ( 1 ) + 1 - values . get ( 0 ) ) / 2 ; values . set ( 0 , values . get ( 1 ) ) ; values . set ( 1 , values . get ( 1 ) + 1 ) ; return result ; } }", "python": "def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LS ( ) : return sys . stdin . readline ( ) . split ( )\ndef I ( ) : return int ( sys . stdin . readline ( ) )\ndef F ( ) : return float ( sys . stdin . readline ( ) )\ndef S ( ) : return input ( )\ndef pf ( s ) : return print ( s , flush = True )\ndef main ( ) :\n    a = LI ( )\n    a . sort ( )\n    r = 0\n    while a [ 0 ] != a [ 2 ] :\n        r += 1\n        if a [ 0 ] < a [ 1 ] :\n            a [ 0 ] += 2\n        else :\n            a [ 0 ] += 1\n            a [ 1 ] += 1\n        a . sort ( )\n    return r\n"}
{"java": "static int countSolutions ( int a ) { int count = Integer . bitCount ( a ) ; count = ( int ) Math . pow ( 2 , count ) ; return count ; }", "python": "def countSolutions ( a ) :\n    count = bin ( a ) . count ( '1' )\n    return 2 ** count\n"}
{"java": "static int findNumberOfEvenCells ( int n , int q [ ] [ ] , int size ) { int row [ ] = new int [ n ] ; int col [ ] = new int [ n ] ; for ( int i = 0 ; i < size ; i ++ ) { int x = q [ i ] [ 0 ] ; int y = q [ i ] [ 1 ] ; row [ x - 1 ] ++ ; col [ y - 1 ] ++ ; } int r1 = 0 , r2 = 0 ; int c1 = 0 , c2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( row [ i ] % 2 == 0 ) { r1 ++ ; } if ( row [ i ] % 2 == 1 ) { r2 ++ ; } if ( col [ i ] % 2 == 0 ) { c1 ++ ; } if ( col [ i ] % 2 == 1 ) { c2 ++ ; } } int count = r1 * c1 + r2 * c2 ; return count ; }", "python": "def findNumberOfEvenCells ( n , q , size ) :\n    row = [ 0 ] * n ;\n    col = [ 0 ] * n\n    for i in range ( size ) :\n        x = q [ i ] [ 0 ] ;\n        y = q [ i ] [ 1 ] ;\n        row [ x - 1 ] += 1 ;\n        col [ y - 1 ] += 1 ;\n    r1 = 0 ;\n    r2 = 0 ;\n    c1 = 0 ;\n    c2 = 0 ;\n    for i in range ( n ) :\n        if ( row [ i ] % 2 == 0 ) :\n            r1 += 1 ;\n        if ( row [ i ] % 2 == 1 ) :\n            r2 += 1 ;\n        if ( col [ i ] % 2 == 0 ) :\n            c1 += 1 ;\n        if ( col [ i ] % 2 == 1 ) :\n            c2 += 1 ;\n    count = r1 * c1 + r2 * c2 ;\n    return count ;\n"}
{"java": "public static void solve ( BufferedReader br , PrintWriter pr ) throws IOException { int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] nums = new int [ n ] ; String [ ] temp = br . readLine ( ) . split ( \" \u2581 \" ) ; if ( n == 2 ) { pr . println ( 0 ) ; return ; } long sum = 0 ; long res = Long . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { nums [ i ] = Integer . parseInt ( temp [ i ] ) ; if ( i - 1 >= 0 ) { sum += Math . abs ( nums [ i ] - nums [ i - 1 ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { int num = nums [ i ] ; long tempRes = sum - ( i >= 1 ? Math . abs ( nums [ i ] - nums [ i - 1 ] ) : 0 ) - ( i + 1 < n ? Math . abs ( nums [ i + 1 ] - nums [ i ] ) : 0 ) ; if ( i >= 1 ) { long tempRes1 = tempRes + ( i + 1 < n ? Math . abs ( nums [ i + 1 ] - nums [ i - 1 ] ) : 0 ) ; res = Math . min ( res , tempRes1 ) ; } if ( i + 1 < n ) { long tempRes2 = tempRes + ( i - 1 >= 0 ? Math . abs ( nums [ i + 1 ] - nums [ i - 1 ] ) : 0 ) ; res = Math . min ( res , tempRes2 ) ; } } pr . println ( res ) ; }", "python": "def input ( ) :\n    return sys . stdin . readline ( ) . rstrip ( )\n"}
{"java": "static int centeredoctagonalNumber ( int n ) { return 4 * n * ( n - 1 ) + 1 ; }", "python": "def cen_octagonalnum ( n ) :\n    return ( 4 * n * n - 4 * n + 1 )\n"}
{"java": "public static void printMultiples ( int N ) { for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( ( i * j ) + \" \u2581 \" ) ; } System . out . println ( ) ; } }", "python": "def prMultiples ( N ) :\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , i + 1 ) :\n            print ( ( i * j ) , end = \" \u2581 \" )\n        print ( )\n"}
{"java": "public static int [ ] countSum ( int arr [ ] , int n ) { int result = 0 ; int [ ] countODD = new int [ n + 1 ] ; int [ ] countEVEN = new int [ n + 1 ] ; countODD [ 0 ] = 0 ; countEVEN [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( arr [ i - 1 ] % 2 == 0 ) { countEVEN [ i ] = countEVEN [ i - 1 ] + countEVEN [ i - 1 ] + 1 ; countODD [ i ] = countODD [ i - 1 ] + countODD [ i - 1 ] ; } else { countEVEN [ i ] = countEVEN [ i - 1 ] + countODD [ i - 1 ] ; countODD [ i ] = countODD [ i - 1 ] + countEVEN [ i - 1 ] + 1 ; } } int [ ] ans = new int [ 2 ] ; ans [ 0 ] = countEVEN [ n ] ; ans [ 1 ] = countODD [ n ] ; return ans ; }", "python": "def countSum ( arr , n ) :\n    result = 0\n    count_odd = 0\n    count_even = 0\n    for i in range ( n ) :\n        if arr [ i - 1 ] % 2 == 0 :\n            count_even = count_even + count_even + 1\n            count_odd = count_odd + count_odd\n        else :\n            temp = count_even\n            count_even = count_even + count_odd\n            count_odd = count_odd + temp + 1\n    return [ count_even , count_odd ]\n"}
{"java": "static void findMaximumBefore ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int currAns = - 1 ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( arr [ j ] > currAns && arr [ j ] < arr [ i ] ) { currAns = arr [ j ] ; } } System . out . print ( currAns + \" \u2581 \" ) ; } }", "python": "def findMaximumBefore ( arr , n ) :\n    for i in range ( n ) :\n        currAns = - 1\n        for j in range ( i - 1 , - 1 , - 1 ) :\n            if ( arr [ j ] > currAns and arr [ j ] < arr [ i ] ) :\n                currAns = arr [ j ]\n        print ( currAns , end = \" \u2581 \" )\n"}
{"java": "public static int getDays ( int d , int m ) { int days = 7 - d + 1 ; int res = ( int ) Math . ceil ( ( ( m - days ) * 1.0 ) / 7.0 ) ; return res + 1 ; }", "python": "def solution ( m , d ) :\n    total_days = [ 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ]\n    remaining_days = total_days [ m - 1 ] - ( 8 - d )\n    ans = 1 + remaining_days // 7 + ( 1 if remaining_days % 7 != 0 else 0 )\n    return ans\n"}
{"java": "static int distribution ( int arr [ ] , int n ) { Set < Integer > resources = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) resources . add ( arr [ i ] ) ; return Math . min ( resources . size ( ) , n / 2 ) ; }", "python": "def distribution ( arr , n ) :\n    resources = set ( )\n    for i in range ( n ) :\n        resources . add ( arr [ i ] ) ;\n    return min ( len ( resources ) , n // 2 ) ;\n"}
{"java": "static int countgroup ( int a [ ] , int n ) { int xs = 0 ; for ( int i = 0 ; i < n ; i ++ ) xs = xs ^ a [ i ] ; if ( xs == 0 ) return ( 1 << ( n - 1 ) ) - 1 ; return 0 ; }", "python": "def countgroup ( a , n ) :\n    xs = 0\n    for i in range ( n ) :\n        xs = xs ^ a [ i ]\n    if xs == 0 :\n        return ( 1 << ( n - 1 ) ) - 1\n    return 0\n"}
{"java": "static String solve ( String str ) { int c = 1 ; if ( str . length ( ) < 7 ) return \" NO \" ; for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ ) { char ch1 = str . charAt ( i ) ; char ch2 = str . charAt ( i + 1 ) ; if ( ch1 == ch2 ) { c ++ ; } else { if ( c >= 7 ) return \" YES \" ; c = 1 ; } } if ( c >= 7 ) return \" YES \" ; return \" NO \" ; }", "python": "def main ( ) :\n    s = input ( )\n    if s . count ( '0000000' ) or s . count ( '1111111' ) :\n        print ( ' YES ' )\n    else :\n        print ( ' NO ' )\n"}
{"java": "static int countUnsetBits ( int n ) { int x = n ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; return Integer . bitCount ( x ^ n ) ; }", "python": "def countUnsetBits ( n ) :\n    x = n\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    t = math . log ( x ^ n , 2 )\n    return math . floor ( t )\n"}
{"java": "private static ArrayList < Integer > func ( ArrayList < Integer > A ) { ArrayList < Integer > a = A ; int min = 0 ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( a . get ( i ) == 0 ) { a . remove ( i ) ; i -- ; } else { if ( min != 0 ) { a . set ( i , a . get ( i ) % min ) ; if ( a . get ( i ) == 1 ) { System . out . println ( 1 ) ; System . exit ( 0 ) ; } } else { min = a . get ( i ) ; } } } Collections . sort ( a ) ; return a ; }", "python": "def solve ( string ) :\n    n , * a = map ( int , string . split ( ) )\n    return str ( reduce ( gcd , a ) )\n"}
{"java": "static void printArray ( int N , int SUM , int K ) { int minSum = ( N * ( N + 1 ) ) / 2 ; int maxSum = ( N * K ) - ( N * ( N - 1 ) ) / 2 ; if ( minSum > SUM || maxSum < SUM ) { System . out . println ( \" Not \u2581 Possible \" ) ; return ; } int arr [ ] = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) arr [ i ] = i ; int sum = minSum ; for ( int i = N ; i >= 1 ; i -- ) { int x = sum + ( K - i ) ; if ( x < SUM ) { sum = sum + ( K - i ) ; arr [ i ] = K ; K -- ; } else { arr [ i ] += ( SUM - sum ) ; sum = SUM ; break ; } } for ( int i = 1 ; i <= N ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def printArray ( N , SUM , K ) :\n    minSum = ( N * ( N + 1 ) ) / 2\n    maxSum = ( N * K ) - ( N * ( N - 1 ) ) / 2\n    if ( minSum > SUM or maxSum < SUM ) :\n        print ( \" Not \u2581 Possible \" )\n        return\n    arr = [ 0 for i in range ( N + 1 ) ]\n    for i in range ( 1 , N + 1 , 1 ) :\n        arr [ i ] = i\n    sum = minSum\n    i = N\n    while ( i >= 1 ) :\n        x = sum + ( K - i )\n        if ( x < SUM ) :\n            sum = sum + ( K - i )\n            arr [ i ] = K\n            K -= 1\n        else :\n            arr [ i ] += ( SUM - sum )\n            sum = SUM\n            break\n        i -= 1\n    for i in range ( 1 , N + 1 , 1 ) :\n        print ( int ( arr [ i ] ) , end = \" \u2581 \" )\n"}
{"java": "static int maximum_one ( String s , int n ) { int cnt_one = 0 ; int max_cnt = 0 , temp = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { cnt_one ++ ; temp ++ ; } else { max_cnt = Math . max ( max_cnt , temp ) ; temp = 0 ; } } max_cnt = Math . max ( max_cnt , temp ) ; int [ ] left = new int [ n ] ; int right [ ] = new int [ n ] ; if ( s . charAt ( 0 ) == '1' ) left [ 0 ] = 1 ; else left [ 0 ] = 0 ; if ( s . charAt ( n - 1 ) == '1' ) right [ n - 1 ] = 1 ; else right [ n - 1 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) left [ i ] = left [ i - 1 ] + 1 ; else left [ i ] = 0 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '1' ) right [ i ] = right [ i + 1 ] + 1 ; else right [ i ] = 0 ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == '0' ) { int sum = left [ i - 1 ] + right [ i + 1 ] ; if ( sum < cnt_one ) max_cnt = Math . max ( max_cnt , sum + 1 ) ; else max_cnt = Math . max ( max_cnt , sum ) ; } } return max_cnt ; }", "python": "def maximum_one ( s , n ) :\n    cnt_one = 0\n    cnt , max_cnt = 0 , 0\n    for i in range ( n ) :\n        if ( s [ i ] == '1' ) :\n            cnt_one += 1\n            cnt += 1\n        else :\n            max_cnt = max ( max_cnt , cnt )\n            cnt = 0\n    max_cnt = max ( max_cnt , cnt )\n    left = [ 0 ] * n\n    right = [ 0 ] * n\n    if ( s [ 0 ] == '1' ) :\n        left [ 0 ] = 1\n    else :\n        left [ 0 ] = 0\n    if ( s [ n - 1 ] == '1' ) :\n        right [ n - 1 ] = 1\n    else :\n        right [ n - 1 ] = 0\n    for i in range ( 1 , n ) :\n        if ( s [ i ] == '1' ) :\n            left [ i ] = left [ i - 1 ] + 1\n        else :\n            left [ i ] = 0\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( s [ i ] == '1' ) :\n            right [ i ] = right [ i + 1 ] + 1\n        else :\n            right [ i ] = 0\n    for i in range ( 1 , n ) :\n        if ( s [ i ] == '0' ) :\n            sum = left [ i - 1 ] + right [ i + 1 ]\n            if ( sum < cnt_one ) :\n                max_cnt = max ( max_cnt , sum + 1 )\n            else :\n                max_cnt = max ( max_cnt , sum )\n    return max_cnt\n"}
{"java": "public static int getSum ( int arr [ ] , int n ) { int i , sum = 0 ; Set < Integer > hashSet = new HashSet < > ( ) ; for ( i = 0 ; i < n ; i ++ ) hashSet . add ( arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { double sqrtCurrent = Math . sqrt ( arr [ i ] ) ; if ( Math . floor ( sqrtCurrent ) != Math . ceil ( sqrtCurrent ) ) continue ; if ( hashSet . contains ( ( int ) sqrtCurrent ) ) { sum += ( sqrtCurrent * sqrtCurrent ) ; } } return sum ; }", "python": "def getSum ( arr , n ) :\n    sum = 0 ;\n    hashSet = set ( ) ;\n    for i in range ( n ) :\n        hashSet . add ( arr [ i ] ) ;\n    for i in range ( n ) :\n        sqrtCurrent = math . sqrt ( arr [ i ] ) ;\n        if ( math . floor ( sqrtCurrent ) != math . ceil ( sqrtCurrent ) ) :\n            continue ;\n        if ( int ( sqrtCurrent ) in hashSet ) :\n            sum += int ( sqrtCurrent * sqrtCurrent ) ;\n    return sum ;\n"}
{"java": "private static long rec ( int current ) { if ( current == n ) return 1 ; if ( current > n ) return 0 ; if ( b [ current ] == 1 ) return 0 ; if ( dp [ current ] == MOD ) { dp [ current ] = ( rec ( current + 1 ) + rec ( current + 2 ) ) % MOD ; } return dp [ current ] ; }", "python": "def Fib ( n ) :\n    a , b = 0 , 1\n    if n == 1 :\n        return a\n    elif n == 2 :\n        return b\n    else :\n        for i in range ( n - 2 ) :\n            a , b = b , a + b\n        return b\n"}
{"java": "static int fib ( int n ) { int a = 0 , b = 1 , c ; if ( n == 0 ) return a ; for ( int i = 2 ; i <= n ; i ++ ) { c = a + b ; a = b ; b = c ; } return b ; }", "python": "def fibonacci ( n ) :\n    a = 0\n    b = 1\n    if n < 0 :\n        print ( \" Incorrect \u2581 input \" )\n    elif n == 0 :\n        return a\n    elif n == 1 :\n        return b\n    else :\n        for i in range ( 2 , n + 1 ) :\n            c = a + b\n            a = b\n            b = c\n        return b\n"}
{"java": "public static void print ( char a [ ] , int n , int ind ) { char [ ] b = new char [ ( 2 * n ) ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = b [ n + i ] = a [ i ] ; for ( int i = ind ; i < n + ind ; i ++ ) System . out . print ( b [ i ] + \" \u2581 \" ) ; }", "python": "def prints ( a , n , ind ) :\n    b = [ None ] * 2 * n\n    i = 0\n    while i < n :\n        b [ i ] = b [ n + i ] = a [ i ]\n        i = i + 1\n    i = ind\n    while i < n + ind :\n        print ( b [ i ] , end = \" \u2581 \" ) ;\n        i = i + 1\n"}
{"java": "static int minOperations ( int n , int m ) { int a = 0 , k = 1 ; int p = Math . max ( n , m ) ; while ( n != m ) { float s = ( float ) ( p - n + p - m ) ; float q = ( float ) ( ( - 1 + Math . sqrt ( 8 * s + 1 ) ) / 2 ) ; if ( q - Math . floor ( q ) == 0 ) { a = ( int ) q ; n = m ; } p = p + 1 ; } return a ; }", "python": "def minOperations ( n , m ) :\n    a = 0 ; k = 1 ;\n    p = max ( n , m ) ;\n    while ( n != m ) :\n        s = float ( p - n + p - m ) ;\n        q = ( - 1 + sqrt ( 8 * s + 1 ) ) / 2 ;\n        if ( q - floor ( q ) == 0 ) :\n            a = q ;\n            n = m ;\n        p = p + 1 ;\n    return a ;\n"}
{"java": "static int two_sets ( int a [ ] , int n ) { Arrays . sort ( a ) ; return a [ n / 2 ] - a [ ( n / 2 ) - 1 ] ; }", "python": "def two_sets ( a , n ) :\n    a . sort ( ) ;\n    return ( a [ n // 2 ] - a [ ( n // 2 ) - 1 ] ) ;\n"}
{"java": "static void printNonSquare ( int n ) { int curr_count = 2 , num = 2 , count = 0 ; while ( count < n ) { for ( int i = 0 ; i < curr_count && count < n ; i ++ ) { System . out . print ( num + \" \u2581 \" ) ; count ++ ; num ++ ; } num ++ ; curr_count += 2 ; } }", "python": "def printNonSquare ( n ) :\n    curr_count = 2\n    num = 2\n    count = 0\n    while ( count < n ) :\n        i = 0\n        while ( i < curr_count and count < n ) :\n            print ( num , end = \" \u2581 \" )\n            count = count + 1\n            num = num + 1\n            i = i + 1\n        num = num + 1\n        curr_count = curr_count + 2\n"}
{"java": "static float findRadiusOfcircumcircle ( float n , float a ) { if ( n < 0 || a < 0 ) return - 1 ; float radius = ( float ) ( a / Math . sqrt ( 2 - ( 2 * Math . cos ( 360 / n ) ) ) ) ; return radius ; }", "python": "def findRadiusOfcircumcircle ( n , a ) :\n    if n < 0 or a < 0 :\n        return - 1\n    radius = a / sqrt ( 2 - ( 2 * cos ( 360 / n ) ) )\n    return radius\n"}
{"java": "static int countPairs ( int a [ ] [ ] ) { int sumr [ ] = new int [ N ] ; int sumc [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) { sumr [ i ] += a [ i ] [ j ] ; sumc [ j ] += a [ i ] [ j ] ; } int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) if ( sumc [ i ] > sumr [ j ] ) count ++ ; return count ; }", "python": "def countPairs ( a ) :\n    sumr = [ 0 for i in range ( N ) ]\n    sumc = [ 0 for i in range ( N ) ]\n    for i in range ( N ) :\n        for j in range ( N ) :\n            sumr [ i ] += a [ i ] [ j ]\n            sumc [ j ] += a [ i ] [ j ]\n    count = 0\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( sumc [ i ] > sumr [ j ] ) :\n                count += 1\n    return count\n"}
{"java": "static void printRepeating ( Integer [ ] arr , int size ) { SortedSet < Integer > s = new TreeSet < > ( ) ; Collections . addAll ( s , arr ) ; System . out . print ( s ) ; }", "python": "def printRepeating ( arr , size ) :\n    s = set ( )\n    for i in range ( size ) :\n        if arr [ i ] not in s :\n            s . add ( arr [ i ] )\n    for i in s :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "static void PowerOfTwo ( int [ ] x , int n ) { Arrays . sort ( x ) ; ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 1 ; j < 31 ; ++ j ) { int lx = x [ i ] - ( 1 << j ) ; int rx = x [ i ] + ( 1 << j ) ; boolean isl = Arrays . binarySearch ( x , lx ) < 0 ? false : true ; boolean isr = Arrays . binarySearch ( x , rx ) < 0 ? false : true ; if ( isl && isr && res . size ( ) < 3 ) { res . clear ( ) ; res . add ( lx ) ; res . add ( x [ i ] ) ; res . add ( rx ) ; } if ( isl && res . size ( ) < 2 ) { res . clear ( ) ; res . add ( lx ) ; res . add ( x [ i ] ) ; } if ( isr && res . size ( ) < 2 ) { res . clear ( ) ; res . add ( x [ i ] ) ; res . add ( rx ) ; } } } if ( res . size ( ) == 0 ) { System . out . println ( \" - 1\" ) ; return ; } for ( int i = 0 ; i < res . size ( ) ; i ++ ) System . out . print ( res . get ( i ) + \" \u2581 \" ) ; }", "python": "def PowerOfTwo ( x , n ) :\n    x . sort ( )\n    res = [ ]\n    for i in range ( n ) :\n        for j in range ( 1 , 31 ) :\n            lx = x [ i ] - ( 1 << j )\n            rx = x [ i ] + ( 1 << j )\n            if lx in x :\n                isl = True\n            else :\n                isl = False\n            if rx in x :\n                isr = True\n            else :\n                isr = False\n            if ( isl and isr and len ( res ) < 3 ) :\n                res = [ lx , x [ i ] , rx ]\n            if ( isl and len ( res ) < 2 ) :\n                res = [ lx , x [ i ] ]\n            if ( isr and len ( res ) < 2 ) :\n                res = [ x [ i ] , rx ]\n    if ( not len ( res ) ) :\n        print ( - 1 )\n        return\n    for it in res :\n        print ( it , end = \" \u2581 \" )\n"}
{"java": "static double e ( int x , int n ) { double r ; if ( n == 0 ) return 1 ; r = e ( x , n - 1 ) ; p = p * x ; f = f * n ; return ( r + p / f ) ; }", "python": "def e ( x , n ) :\n    global p , f\n    if ( n == 0 ) :\n        return 1\n    r = e ( x , n - 1 )\n    p = p * x\n    f = f * n\n    return ( r + p / f )\n"}
{"java": "static void printMatrix ( int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) System . out . print ( k + \" \u2581 \" ) ; else System . out . print ( \"0 \u2581 \" ) ; } System . out . print ( \" \\n \" ) ; } }", "python": "def printMatrix ( n , k ) :\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if ( i == j ) :\n                print ( k , end = \" \u2581 \" ) ;\n            else :\n                print ( \"0\" , end = \" \u2581 \" ) ;\n        print ( ) ;\n"}
{"java": "static float area ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float A = a * b ; return A ; }", "python": "def area ( a , b ) :\n    if ( a < 0 or b < 0 ) :\n        return - 1\n    A = a * b\n    return A\n"}
{"java": "static int centeredHexagonalNumber ( int n ) { return 3 * n * ( n - 1 ) + 1 ; }", "python": "def centeredHexagonalNumber ( n ) :\n    return 3 * n * ( n - 1 ) + 1\n"}
{"java": "static float SellingPrice ( float CP , float PP ) { float P_decimal = 1 + ( PP / 100 ) ; float res = P_decimal * CP ; return res ; }", "python": "def SellingPrice ( CP , PP ) :\n    Pdecimal = 1 + ( PP / 100 )\n    res = Pdecimal * CP\n    return res\n"}
{"java": "static double Area ( int b1 , int b2 , int h ) { return ( ( b1 + b2 ) / 2 ) * h ; }", "python": "def Area ( b1 , b2 , h ) :\n    return ( ( b1 + b2 ) / 2 ) * h\n"}
{"java": "static int MaxNumbers ( int a [ ] , int n ) { int [ ] fre = { 0 , 0 , 0 } ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] %= 3 ; fre [ a [ i ] ] ++ ; } int ans = fre [ 0 ] ; int k = Math . min ( fre [ 1 ] , fre [ 2 ] ) ; ans += k ; fre [ 1 ] -= k ; fre [ 2 ] -= k ; ans += fre [ 1 ] / 3 + fre [ 2 ] / 3 ; return ans ; }", "python": "def MaxNumbers ( a , n ) :\n    fre = [ 0 for i in range ( 3 ) ]\n    for i in range ( n ) :\n        a [ i ] %= 3\n        fre [ a [ i ] ] += 1\n    ans = fre [ 0 ]\n    k = min ( fre [ 1 ] , fre [ 2 ] )\n    ans += k\n    fre [ 1 ] -= k\n    fre [ 2 ] -= k\n    ans += fre [ 1 ] // 3 + fre [ 2 ] // 3\n    return ans\n"}
{"java": "private static int leastDistance ( int money , int destination , int [ ] prices ) { int minimumDistance = 10000 ; for ( int i = 0 ; i < prices . length ; i ++ ) { if ( prices [ i ] > 0 && prices [ i ] <= money && Math . abs ( destination - i ) < minimumDistance ) { minimumDistance = Math . abs ( destination - i ) ; } } return minimumDistance ; }", "python": "def solve ( ) :\n    n , m , k = list ( map ( int , input ( ) . split ( ) ) )\n    arr = list ( map ( int , input ( ) . split ( ) ) )\n    ans = 10 * 10\n    for i in range ( n ) :\n        if arr [ i ] <= k and arr [ i ] != 0 and abs ( m - 1 - i ) < ans :\n            ans = abs ( m - 1 - i )\n    print ( ans * 10 )\n"}
{"java": "static void mul_table ( int N , int i ) { if ( i > 10 ) return ; System . out . println ( N + \" \u2581 * \u2581 \" + i + \" \u2581 = \u2581 \" + N * i ) ; mul_table ( N , i + 1 ) ; }", "python": "def mul_table ( N , i ) :\n    if ( i > 10 ) :\n        return\n    print ( N , \" * \" , i , \" = \" , N * i )\n    return mul_table ( N , i + 1 )\n"}
{"java": "static void pattern ( ) { int i , j , k = 0 , spaces = 1 , n = 7 ; for ( i = n ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( i ) ; } if ( i != n ) { for ( k = 1 ; k <= spaces ; k ++ ) { System . out . print ( \" \u2581 \" ) ; } spaces = spaces + 2 ; } for ( j = i ; j >= 1 ; j -- ) { if ( j != n ) System . out . print ( i ) ; } System . out . println ( ) ; } spaces = spaces - 4 ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( i ) ; } if ( i != n ) { for ( k = 1 ; k <= spaces ; k ++ ) { System . out . printf ( \" \u2581 \" ) ; } spaces = spaces - 2 ; } for ( j = i ; j >= 1 ; j -- ) { if ( j != n ) System . out . print ( i ) ; } System . out . println ( ) ; } }", "python": "def pattern ( ) :\n    k = 0\n    spaces = 1\n    n = 7\n    for i in range ( n , 0 , - 1 ) :\n        for j in range ( 1 , i + 1 ) :\n            print ( i , end = \" \" )\n        if ( i != n ) :\n            for k in range ( 1 , spaces + 1 ) :\n                print ( end = \" \u2581 \" )\n            spaces = spaces + 2\n        for j in range ( i , 0 , - 1 ) :\n            if ( j != n ) :\n                print ( i , end = \" \" )\n        print ( )\n    spaces = spaces - 4\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 1 , i + 1 ) :\n            print ( i , end = \" \" )\n        if ( i != n ) :\n            for k in range ( 1 , spaces + 1 ) :\n                print ( end = \" \u2581 \" )\n            spaces = spaces - 2\n        for j in range ( i , 0 , - 1 ) :\n            if ( j != n ) :\n                print ( i , end = \" \" )\n        print ( )\n"}
{"java": "static void checkSolution ( int a , int b , int c ) { if ( ( ( b * b ) - ( 4 * a * c ) ) > 0 ) System . out . println ( \"2 \u2581 solutions \" ) ; else if ( ( ( b * b ) - ( 4 * a * c ) ) == 0 ) System . out . println ( \"1 \u2581 solution \" ) ; else System . out . println ( \" No \u2581 solutions \" ) ; }", "python": "def checkSolution ( a , b , c ) :\n    if ( ( b * b ) - ( 4 * a * c ) ) > 0 :\n        print ( \"2 \u2581 solutions \" )\n    elif ( ( b * b ) - ( 4 * a * c ) ) == 0 :\n        print ( \"1 \u2581 solution \" )\n    else :\n        print ( \" No \u2581 solutions \" )\n"}
{"java": "static double polyarea ( double n , double r ) { if ( r < 0 && n < 0 ) return - 1 ; double A = ( ( r * r * n ) * Math . sin ( ( 360 / n ) * 3.14159 / 180 ) ) / 2 ; return A ; }", "python": "def polyarea ( n , r ) :\n    if ( r < 0 and n < 0 ) :\n        return - 1\n    A = ( ( ( r * r * n ) * sin ( ( 360 / n ) * 3.14159 / 180 ) ) / 2 ) ;\n    return round ( A , 3 )\n"}
{"java": "static int Count ( String s , int pos ) { int c = s . charAt ( pos - 1 ) ; int counter = 0 ; for ( int i = 0 ; i < pos - 1 ; i ++ ) { if ( s . charAt ( i ) == c ) counter = counter + 1 ; } return counter ; }", "python": "def Count ( s , pos ) :\n    c = s [ pos - 1 ]\n    counter = 0\n    for i in range ( pos - 1 ) :\n        if s [ i ] == c :\n            counter = counter + 1\n    return counter\n"}
{"java": "private static long factorialsModBillion ( int n , int m ) { long result = 1 ; for ( long i = 1 ; i <= n ; i ++ ) { result = ( result * i ) % 1000000007L ; } for ( long i = 1 ; i <= m ; i ++ ) { result = ( result * i ) % 1000000007L ; } return result ; }", "python": "def cumprod ( L , mod = mod ) :\n    A = np . arange ( L , dtype = np . int64 )\n    A [ 0 ] = 1\n    Lsq = int ( L ** .5 + 1 )\n    A = np . resize ( A , Lsq ** 2 ) . reshape ( Lsq , Lsq )\n    for n in range ( 1 , Lsq ) :\n        A [ : , n ] *= A [ : , n - 1 ]\n        A [ : , n ] %= mod\n    for n in range ( 1 , Lsq ) :\n        A [ n ] *= A [ n - 1 , - 1 ]\n        A [ n ] %= mod\n    return A . ravel ( ) [ : L ]\n"}
{"java": "static void isPossible ( int [ ] A , int n , int k ) { int countOfTwo = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( A [ i ] % 2 == 0 ) { countOfTwo ++ ; } } if ( k == 0 && countOfTwo == n ) System . out . print ( \" NO \" ) ; else if ( countOfTwo >= k ) { System . out . print ( \" YES \" ) ; } else System . out . print ( \" No \" ) ; }", "python": "def isPossible ( A , n , k ) :\n    countOfTwo = 0\n    for i in range ( n ) :\n        if ( A [ i ] % 2 == 0 ) :\n            countOfTwo += 1\n    if ( k == 0 and countOfTwo == n ) :\n        print ( \" NO \\n \" )\n    elif ( countOfTwo >= k ) :\n        print ( \" Yes \\n \" )\n    else :\n        print ( \" No \\n \" )\n"}
{"java": "static int maxFreq ( String s ) { String binary = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { binary += bin [ s . charAt ( i ) - '0' ] ; } binary = binary . substring ( 0 , binary . length ( ) - 1 ) ; int count = 1 , prev = - 1 , i , j = 0 ; for ( i = binary . length ( ) - 1 ; i >= 0 ; i -- , j ++ ) if ( binary . charAt ( i ) == '1' ) { count = Math . max ( count , j - prev ) ; prev = j ; } return count ; }", "python": "def maxFreq ( s ) :\n    binary = \" \" ;\n    for i in range ( len ( s ) ) :\n        binary += bin [ ord ( s [ i ] ) - ord ( '0' ) ] ;\n    binary = binary [ 0 : len ( binary ) - 1 ] ;\n    count = 1 ; prev = - 1 ; j = 0 ;\n    for i in range ( len ( binary ) - 1 , - 1 , - 1 ) :\n        if ( binary [ i ] == '1' ) :\n            count = max ( count , j - prev ) ;\n            prev = j ;\n        j += 1 ;\n    return count ;\n"}
{"java": "static void removeDuplicates ( int arr [ ] , int n ) { int st = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < n - 2 && arr [ i ] == arr [ i + 1 ] && arr [ i ] == arr [ i + 2 ] ) continue ; else { arr [ st ] = arr [ i ] ; st ++ ; } } System . out . print ( \" { \" ) ; for ( int i = 0 ; i < st ; i ++ ) { System . out . print ( arr [ i ] ) ; if ( i != st - 1 ) System . out . print ( \" , \u2581 \" ) ; } System . out . print ( \" } \" ) ; }", "python": "def removeDuplicates ( arr , n ) :\n    st = 0 ;\n    for i in range ( n ) :\n        if ( i < n - 2 and arr [ i ] == arr [ i + 1 ] and arr [ i ] == arr [ i + 2 ] ) :\n            continue ;\n        else :\n            arr [ st ] = arr [ i ] ;\n            st += 1 ;\n    print ( \" { \" , end = \" \" )\n    for i in range ( st ) :\n        print ( arr [ i ] , end = \" \" ) ;\n        if ( i != st - 1 ) :\n            print ( \" , \u2581 \" , end = \" \" ) ;\n    print ( \" } \" , end = \" \" ) ;\n"}
{"java": "private static long f ( int [ ] arr , int median ) { long res = 0 ; for ( int value : arr ) { res += Math . abs ( value - median ) ; } return res ; }", "python": "def main ( ) :\n    N = int ( input ( ) )\n    strs = input ( )\n    As = [ int ( num ) for num in strs . split ( ) ]\n    nums = [ a - i for i , a in enumerate ( As , 1 ) ]\n    m = int ( median ( nums ) )\n    print ( sum ( [ abs ( a - m ) for a in nums ] ) )\n"}
{"java": "static int countWays ( int n , int l , int r ) { int tL = l , tR = r ; int [ ] L = new int [ 3 ] ; int [ ] R = new int [ 3 ] ; L [ l % 2 ] = l ; R [ r % 2 ] = r ; l ++ ; r -- ; if ( l <= tR && r >= tL ) { L [ l % 2 ] = l ; R [ r % 2 ] = r ; } int cnt0 = 0 , cnt1 = 0 ; if ( R [ 0 ] > 0 && L [ 0 ] > 0 ) cnt0 = ( R [ 0 ] - L [ 0 ] ) / 2 + 1 ; if ( R [ 1 ] > 0 && L [ 1 ] > 0 ) cnt1 = ( R [ 1 ] - L [ 1 ] ) / 2 + 1 ; int [ ] [ ] dp = new int [ n + 1 ] [ 3 ] ; dp [ 1 ] [ 0 ] = cnt0 ; dp [ 1 ] [ 1 ] = cnt1 ; for ( int i = 2 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = ( cnt0 * dp [ i - 1 ] [ 0 ] + cnt1 * dp [ i - 1 ] [ 1 ] ) ; dp [ i ] [ 1 ] = ( cnt0 * dp [ i - 1 ] [ 1 ] + cnt1 * dp [ i - 1 ] [ 0 ] ) ; } return dp [ n ] [ 0 ] ; }", "python": "def countWays ( n , l , r ) :\n    tL , tR = l , r\n    L = [ 0 for i in range ( 2 ) ]\n    R = [ 0 for i in range ( 2 ) ]\n    L [ l % 2 ] = l\n    R [ r % 2 ] = r\n    l += 1\n    r -= 1\n    if ( l <= tR and r >= tL ) :\n        L [ l % 2 ] , R [ r % 2 ] = l , r\n    cnt0 , cnt1 = 0 , 0\n    if ( R [ 0 ] and L [ 0 ] ) :\n        cnt0 = ( R [ 0 ] - L [ 0 ] ) // 2 + 1\n    if ( R [ 1 ] and L [ 1 ] ) :\n        cnt1 = ( R [ 1 ] - L [ 1 ] ) // 2 + 1\n    dp = [ [ 0 for i in range ( 2 ) ] for i in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] = cnt0\n    dp [ 1 ] [ 1 ] = cnt1\n    for i in range ( 2 , n + 1 ) :\n        dp [ i ] [ 0 ] = ( cnt0 * dp [ i - 1 ] [ 0 ] + cnt1 * dp [ i - 1 ] [ 1 ] )\n        dp [ i ] [ 1 ] = ( cnt0 * dp [ i - 1 ] [ 1 ] + cnt1 * dp [ i - 1 ] [ 0 ] )\n    return dp [ n ] [ 0 ]\n"}
{"java": "static void findMostOccurringChar ( Vector < String > str ) { int [ ] hash = new int [ 26 ] ; for ( int i = 0 ; i < str . size ( ) ; i ++ ) { for ( int j = 0 ; j < str . get ( i ) . length ( ) ; j ++ ) { hash [ str . get ( i ) . charAt ( j ) - 97 ] ++ ; } } int max = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { max = hash [ i ] > hash [ max ] ? i : max ; } System . out . print ( ( char ) ( max + 97 ) + \" \\n \" ) ; }", "python": "def findMostOccurringChar ( string ) :\n    hash = [ 0 ] * 26 ;\n    for i in range ( len ( string ) ) :\n        for j in range ( len ( string [ i ] ) ) :\n            hash [ ord ( string [ i ] [ j ] ) - ord ( ' a ' ) ] += 1 ;\n    max = 0 ;\n    for i in range ( 26 ) :\n        max = i if hash [ i ] > hash [ max ] else max ;\n    print ( ( chr ) ( max + 97 ) ) ;\n"}
{"java": "static int sum_of_series ( int n ) { int result = 0 ; if ( n % 2 == 0 ) { result = - ( n * ( n + 1 ) ) / 2 ; } else { result = ( n * ( n + 1 ) ) / 2 ; } return result ; }", "python": "def sum_of_series ( n ) :\n    result = 0\n    if ( n % 2 == 0 ) :\n        result = - ( n * ( n + 1 ) ) // 2\n    else :\n        result = ( n * ( n + 1 ) ) // 2\n    return result\n"}
{"java": "static int MinimumCost ( int a [ ] , int n , int x ) { for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = Math . min ( a [ i ] , 2 * a [ i - 1 ] ) ; } int ind = 0 ; int sum = 0 ; while ( x > 0 ) { if ( x != 0 ) sum += a [ ind ] ; ind ++ ; x = x >> 1 ; } return sum ; }", "python": "def MinimumCost ( a , n , x ) :\n    for i in range ( 1 , n , 1 ) :\n        a [ i ] = min ( a [ i ] , 2 * a [ i - 1 ] )\n    ind = 0\n    sum = 0\n    while ( x ) :\n        if ( x & 1 ) :\n            sum += a [ ind ]\n        ind += 1\n        x = x >> 1\n    return sum\n"}
{"java": "static String makePalindrome ( char [ ] str ) { int i = 0 , j = str . length - 1 ; while ( i <= j ) { if ( str [ i ] == ' * ' && str [ j ] == ' * ' ) { str [ i ] = ' a ' ; str [ j ] = ' a ' ; } else if ( str [ j ] == ' * ' ) str [ j ] = str [ i ] ; else if ( str [ i ] == ' * ' ) str [ i ] = str [ j ] ; else if ( str [ i ] != str [ j ] ) return \" - 1\" ; i ++ ; j -- ; } return String . valueOf ( str ) ; }", "python": "def makePalindrome ( str1 ) :\n    i = 0\n    j = len ( str1 ) - 1\n    str1 = list ( str1 )\n    while ( i <= j ) :\n        if ( str1 [ i ] == ' * ' and str1 [ j ] == ' * ' ) :\n            str1 [ i ] = ' a '\n            str1 [ j ] = ' a '\n        elif ( str1 [ j ] == ' * ' ) :\n            str1 [ j ] = str1 [ i ]\n        elif ( str1 [ i ] == ' * ' ) :\n            str1 [ i ] = str1 [ j ]\n        elif ( str1 [ i ] != str1 [ j ] ) :\n            str1 = ' ' . join ( str1 )\n            return \" - 1\"\n        i += 1\n        j -= 1\n    str1 = ' ' . join ( str1 )\n    return str1\n"}
{"java": "public static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; Integer n = sc . nextInt ( ) ; Integer a = sc . nextInt ( ) ; sc . close ( ) ; out . println ( n * n - a ) ; out . flush ( ) ; }", "python": "def main ( ) :\n    n = int ( input ( ) )\n    a = int ( input ( ) )\n    print ( n * n - a )\n"}
{"java": "static void difference ( int arr [ ] , int n ) { int largest = arr [ 0 ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( largest < arr [ i ] ) largest = arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) arr [ i ] = largest - arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def difference ( arr , n ) :\n    largest = arr [ 0 ] ;\n    i = 0 ;\n    for i in range ( n ) :\n        if ( largest < arr [ i ] ) :\n            largest = arr [ i ] ;\n    for i in range ( n ) :\n        arr [ i ] = largest - arr [ i ] ;\n    for i in range ( n ) :\n        print ( arr [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "static int maxEvenSubarray ( int array [ ] , int N ) { int ans = 0 ; int count = 0 ; for ( int i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] % 2 == 0 ) { count ++ ; ans = Math . max ( ans , count ) ; } else { count = 0 ; } } ans = Math . max ( ans , count ) ; return ans ; }", "python": "def maxEvenSubarray ( array , N ) :\n    ans = 0\n    count = 0\n    for i in range ( 0 , N ) :\n        if array [ i ] % 2 == 0 :\n            count += 1\n            ans = max ( ans , count )\n        else :\n            count = 0\n    ans = max ( ans , count )\n    return ans\n"}
{"java": "static void reverse ( String str , int x ) { int n = ( str . length ( ) - x ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( str . charAt ( i ) ) ; for ( int i = n + x - 1 ; i >= n ; i -- ) System . out . print ( str . charAt ( i ) ) ; for ( int i = n + x ; i < str . length ( ) ; i ++ ) System . out . print ( str . charAt ( i ) ) ; }", "python": "def reverse ( str1 , x ) :\n    n = ( len ( str1 ) - x ) // 2\n    for i in range ( n ) :\n        print ( str1 [ i ] , end = \" \" )\n    for i in range ( n + x - 1 , n - 1 , - 1 ) :\n        print ( str1 [ i ] , end = \" \" )\n    for i in range ( n + x , len ( str1 ) ) :\n        print ( str1 [ i ] , end = \" \" )\n"}
{"java": "static int ways ( int n ) { return n / 2 ; }", "python": "def ways ( n ) :\n    return n // 2\n"}
{"java": "static int findLength ( int [ ] arr , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) x = Math . max ( x , arr [ i ] ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != x ) continue ; int j = i ; while ( arr [ j ] == x ) { j ++ ; if ( j >= n ) break ; } ans = Math . max ( ans , j - i ) ; } return ans ; }", "python": "def findLength ( arr , n ) :\n    x = 0 ;\n    for i in range ( n ) :\n        x = max ( x , arr [ i ] ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] != x ) :\n            continue ;\n        j = i ;\n        while ( arr [ j ] == x ) :\n            j += 1 ;\n            if j >= n :\n                break\n        ans = max ( ans , j - i ) ;\n    return ans ;\n"}
{"java": "static void printCubes ( int a , int b ) { for ( int i = a ; i <= b ; i ++ ) { for ( int j = 1 ; j * j * j <= i ; j ++ ) { if ( j * j * j == i ) { System . out . print ( j * j * j + \" \u2581 \u2581 \" ) ; break ; } } } }", "python": "def printCubes ( a , b ) :\n    for i in range ( a , b + 1 ) :\n        j = 1\n        for j in range ( j ** 3 , i + 1 ) :\n            if ( j ** 3 == i ) :\n                print ( j ** 3 , end = \" \u2581 \" )\n                break\n"}
{"java": "static float findWater ( int i , int j , float X ) { if ( j > i ) { System . out . println ( \" Incorrect \u2581 Input \" ) ; System . exit ( 0 ) ; } int ll = Math . round ( ( i * ( i + 1 ) ) ) ; float [ ] glass = new float [ ll + 2 ] ; int index = 0 ; glass [ index ] = X ; for ( int row = 1 ; row <= i ; ++ row ) { for ( int col = 1 ; col <= row ; ++ col , ++ index ) { X = glass [ index ] ; glass [ index ] = ( X >= 1.0f ) ? 1.0f : X ; X = ( X >= 1.0f ) ? ( X - 1 ) : 0.0f ; glass [ index + row ] += X / 2 ; glass [ index + row + 1 ] += X / 2 ; } } return glass [ ( int ) ( i * ( i - 1 ) / 2 + j - 1 ) ] ; }", "python": "def findWater ( i , j , X ) :\n    if ( j > i ) :\n        print ( \" Incorrect \u2581 Input \" ) ;\n        return ;\n    glass = [ 0 ] * int ( i * ( i + 1 ) / 2 ) ;\n    index = 0 ;\n    glass [ index ] = X ;\n    for row in range ( 1 , i ) :\n        for col in range ( 1 , row + 1 ) :\n            X = glass [ index ] ;\n            glass [ index ] = 1.0 if ( X >= 1.0 ) else X ;\n            X = ( X - 1 ) if ( X >= 1.0 ) else 0.0 ;\n            glass [ index + row ] += ( X / 2 ) ;\n            glass [ index + row + 1 ] += ( X / 2 ) ;\n            index += 1 ;\n    return glass [ int ( i * ( i - 1 ) / 2 + j - 1 ) ] ;\n"}
{"java": "static int nearest ( int n ) { int prevSquare = ( int ) Math . sqrt ( n ) ; int nextSquare = prevSquare + 1 ; prevSquare = prevSquare * prevSquare ; nextSquare = nextSquare * nextSquare ; int ans = ( n - prevSquare ) < ( nextSquare - n ) ? ( prevSquare - n ) : ( nextSquare - n ) ; return ans ; }", "python": "def nearest ( n ) :\n    prevSquare = int ( sqrt ( n ) ) ;\n    nextSquare = prevSquare + 1 ;\n    prevSquare = prevSquare * prevSquare ;\n    nextSquare = nextSquare * nextSquare ;\n    ans = ( prevSquare - n ) if ( n - prevSquare ) < ( nextSquare - n ) else ( nextSquare - n ) ;\n    return ans ;\n"}
{"java": "static boolean checkPattern ( String str , String pattern ) { int len = pattern . length ( ) ; if ( str . length ( ) < len ) { return false ; } for ( int i = 0 ; i < len - 1 ; i ++ ) { char x = pattern . charAt ( i ) ; char y = pattern . charAt ( i + 1 ) ; int last = str . lastIndexOf ( x ) ; int first = str . indexOf ( y ) ; if ( last == - 1 || first == - 1 || last > first ) { return false ; } } return true ; }", "python": "def checkPattern ( string , pattern ) :\n    l = len ( pattern )\n    if len ( string ) < l :\n        return False\n    for i in range ( l - 1 ) :\n        x = pattern [ i ]\n        y = pattern [ i + 1 ]\n        last = string . rindex ( x )\n        first = string . index ( y )\n        if last == - 1 or first == - 1 or last > first :\n            return False\n    return True\n"}
{"java": "static int findNumber ( int n ) { int num = n - 1 ; num = 2 * ( int ) Math . pow ( 4 , num ) ; num = ( int ) Math . floor ( num / 3.0 ) ; return num ; }", "python": "def findNumber ( n ) :\n    num = n - 1 ;\n    num = 2 * ( 4 ** num ) ;\n    num = num // 3 ;\n    return num ;\n"}
{"java": "static String find_number ( int N , int K ) { String r ; if ( N % 100 == 0 ) { N += 1 ; r = String . valueOf ( N ) ; } else { r = String . valueOf ( N ) ; } for ( int i = 1 ; i <= K ; i ++ ) r += \"00\" ; return r ; }", "python": "def find_number ( N , K ) :\n    r = \" \"\n    if ( N % 100 == 0 ) :\n        N += 1 ;\n        r = str ( N )\n    else :\n        r = str ( N )\n    for i in range ( 1 , K + 1 ) :\n        r += \"00\"\n    return r\n"}
{"java": "static float Area ( float a ) { if ( a < 0 ) return - 1 ; float x = 0.464f * a ; float A = 0.70477f * ( float ) Math . pow ( x , 2 ) ; return A ; }", "python": "def Area ( a ) :\n    if ( a < 0 ) :\n        return - 1\n    x = 0.464 * a\n    A = 0.70477 * pow ( x , 2 )\n    return A\n"}
{"java": "public static double sumOfTheSeries ( int n ) { return ( double ) n / ( n + 1 ) ; }", "python": "def sumOfTheSeries ( n ) :\n    return ( float ( n ) / ( n + 1 ) )\n"}
{"java": "static int countDigits ( int n ) { double ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ans += Math . log10 ( i ) ; ans = ans * n ; return 1 + ( int ) Math . floor ( ans ) ; }", "python": "def countDigits ( n ) :\n    ans = 0\n    for i in range ( 1 , n + 1 ) :\n        ans += math . log10 ( i )\n    ans = ans * n\n    return 1 + math . floor ( ans )\n"}
{"java": "public static void solve ( Scanner sc ) { int n = sc . nextInt ( ) ; HashMap < String , Node > map1 = new HashMap < > ( ) ; HashMap < String , Node > map2 = new HashMap < > ( ) ; Node start = new Node ( \" start \" ) ; Node end = new Node ( \" end \" ) ; for ( int i = 0 ; i < n ; i ++ ) { String firstWord = sc . next ( ) ; String secondWord = sc . next ( ) ; if ( ! map1 . containsKey ( firstWord ) ) { Node node = new Node ( firstWord ) ; map1 . put ( firstWord , node ) ; PushRelabelNodeEdge . addDirectedEdge ( start , node , 1 ) ; } if ( ! map2 . containsKey ( secondWord ) ) { Node node = new Node ( secondWord ) ; map2 . put ( secondWord , node ) ; PushRelabelNodeEdge . addDirectedEdge ( node , end , 1 ) ; } PushRelabelNodeEdge . addDirectedEdge ( map1 . get ( firstWord ) , map2 . get ( secondWord ) , 1 ) ; } ArrayList < Node > nodes = new ArrayList < > ( ) ; nodes . add ( start ) ; nodes . add ( end ) ; nodes . addAll ( map1 . values ( ) ) ; nodes . addAll ( map2 . values ( ) ) ; int flow = PushRelabelNodeEdge . getMaxFlow ( nodes , start , end ) ; int greedy = nodes . size ( ) - 2 - 2 * flow ; System . out . println ( n - flow - greedy ) ; }", "python": "def case ( ) :\n    N , = ints ( )\n    titles = [ line ( ) . split ( ) for i in range ( N ) ]\n    for t in titles :\n        a , b = t\n        t [ : ] = [ ' a : ' + a , ' b : ' + b ]\n    pprint ( titles )\n    source = 0\n    sink = 1\n    node2id = dict ( source = source , sink = sink )\n    wordcounts = { }\n    for a , b in titles :\n        for x in a , b :\n            node2id . setdefault ( x , len ( node2id ) )\n            wordcounts . setdefault ( x , 0 )\n            wordcounts [ x ] += 1\n    pprint ( node2id )\n    pprint ( wordcounts )\n    N = len ( node2id )\n    capacity = [ [ 0 ] * N for i in range ( N ) ]\n    for word , count in wordcounts . items ( ) :\n        if word . startswith ( ' a ' ) :\n            capacity [ source ] [ node2id [ word ] ] = count - 1\n        else :\n            capacity [ node2id [ word ] ] [ sink ] = count - 1\n    for a , b in titles :\n        assert capacity [ node2id [ a ] ] [ node2id [ b ] ] == 0\n        capacity [ node2id [ a ] ] [ node2id [ b ] ] = 1\n    def dfs ( pos , visited ) :\n        if pos == sink :\n            return True\n        for t in range ( N ) :\n            if capacity [ pos ] [ t ] :\n                if t in visited : continue\n                visited . add ( t )\n                capacity [ pos ] [ t ] -= 1\n                capacity [ t ] [ pos ] += 1\n                res = dfs ( t , visited )\n                if res :\n                    return res\n                capacity [ t ] [ pos ] -= 1\n                capacity [ pos ] [ t ] += 1\n    n = 0\n    while True :\n        res = dfs ( source , set ( ) )\n        if not res : break\n        n += 1\n    return n\n"}
{"java": "static int calculateSum ( int n ) { return ( int ) Math . pow ( n * ( n + 1 ) / 2 , 2 ) ; }", "python": "def calculateSum ( n ) :\n    return ( n * ( n + 1 ) / 2 ) ** 2\n"}
{"java": "static int calculateSum ( int n ) { return ( int ) ( ( 2 * Math . pow ( ( n * ( n + 1 ) / 2 ) , 2 ) ) ) + ( ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ) ; }", "python": "def calculateSum ( n ) :\n    return ( ( 2 * ( n * ( n + 1 ) / 2 ) ** 2 ) + ( ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ) )\n"}
{"java": "static int calculateSum ( int n ) { return n * ( n + 1 ) / 2 + ( int ) Math . pow ( ( n * ( n + 1 ) / 2 ) , 2 ) ; }", "python": "def calculateSum ( n ) :\n    return ( n * ( n + 1 ) // 2 + pow ( ( n * ( n + 1 ) // 2 ) , 2 ) )\n"}
{"java": "static int calculateSum ( int n ) { return n * ( int ) ( Math . pow ( n , 2 ) + 3 * n + 5 ) / 3 ; }", "python": "def calculateSum ( n ) :\n    return n * ( pow ( n , 2 ) + 3 * n + 5 ) / 3\n"}
{"java": "static int calculateSum ( int n ) { return ( ( int ) Math . pow ( 10 , n + 1 ) * ( 9 * n - 1 ) + 10 ) / ( int ) Math . pow ( 9 , 3 ) - n * ( n + 1 ) / 18 ; }", "python": "def solve_sum ( n ) :\n    return ( pow ( 10 , n + 1 ) * ( 9 * n - 1 ) + 10 ) / pow ( 9 , 3 ) - n * ( n + 1 ) / 18\n"}
{"java": "public static double calculateSum ( double n ) { return 2 * ( Math . pow ( n , 6 ) + 15 * Math . pow ( n , 4 ) + 15 * Math . pow ( n , 2 ) + 1 ) ; }", "python": "def calculateSum ( n ) :\n    a = int ( n )\n    return ( 2 * ( pow ( n , 6 ) + 15 * pow ( n , 4 ) + 15 * pow ( n , 2 ) + 1 ) )\n"}
{"java": "static int calculateSum ( int n ) { return ( n * ( ( int ) Math . pow ( n , 2 ) + 3 * n + 5 ) ) / 3 ; }", "python": "def findSum ( n ) :\n    return ( n * ( pow ( n , 2 ) + 3 * n + 5 ) ) / 3\n"}
{"java": "static String balancedBrackets ( String str ) { int dep = 0 ; int minDep = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' ( ' ) dep ++ ; else dep -- ; if ( minDep > dep ) minDep = dep ; } if ( minDep < 0 ) { for ( int i = 0 ; i < Math . abs ( minDep ) ; i ++ ) str = ' ( ' + str ; } dep = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' ( ' ) dep ++ ; else dep -- ; } if ( dep != 0 ) { for ( int i = 0 ; i < dep ; i ++ ) str = str + ' ) ' ; } return str ; }", "python": "def balancedBrackets ( Str ) :\n    dep = 0\n    minDep = 0\n    for i in Str :\n        if ( i == ' ( ' ) :\n            dep += 1\n        else :\n            dep -= 1\n        if ( minDep > dep ) :\n            minDep = dep\n    if ( minDep < 0 ) :\n        for i in range ( abs ( minDep ) ) :\n            Str = ' ( ' + Str\n    dep = 0\n    for i in Str :\n        if ( i == ' ( ' ) :\n            dep += 1\n        else :\n            dep -= 1\n    if ( dep != 0 ) :\n        for i in range ( dep ) :\n            Str = Str + ' ) '\n    return Str\n"}
{"java": "public static long find ( int i , boolean f , boolean o , boolean s ) { if ( i == str . length ( ) ) return 0 ; if ( f && o && s ) { System . out . println ( \" we \u2581 are \u2581 here \" ) ; return 1 ; } long ans = 0 ; if ( str . charAt ( i ) == ' w ' ) { if ( ! f ) { ans = find ( i + 1 , true , false , false ) + find ( i + 1 , f , o , s ) ; } else if ( f && o ) { ans = find ( i + 1 , true , true , true ) + find ( i + 1 , true , false , false ) + find ( i + 1 , false , false , false ) ; } } else if ( str . charAt ( i ) == ' o ' ) { System . out . println ( \" ooo \" ) ; if ( f ) { ans = find ( i + 1 , f , true , false ) + find ( i + 1 , false , false , false ) ; } } return ans ; }", "python": "def get_ints ( ) : return map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) )\ndef get_arr ( ) : return list ( map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) ) )\ndef get_string ( ) : return sys . stdin . readline ( ) . strip ( )\ns = input ( )\nn = len ( s )\na = [ ]\nfor i in range ( 0 , len ( s ) - 1 ) :\n    if s [ i ] == ' v ' and s [ i + 1 ] == ' v ' :\n        a . append ( int ( 1 ) )\n    else :\n        a . append ( int ( 0 ) )\n"}
{"java": "static int countSubArrays ( int arr [ ] , int n , int x ) { int len = 0 ; int count = 0 ; int binaryArr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= x ) binaryArr [ i ] = 1 ; else binaryArr [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( binaryArr [ i ] == 1 ) { int j ; for ( j = i + 1 ; j < n ; j ++ ) if ( binaryArr [ j ] != 1 ) break ; len = j - i ; count += ( len ) * ( len + 1 ) / 2 ; i = j ; } } return count ; }", "python": "def countSubArrays ( arr , n , x ) :\n    len = 0\n    count = 0\n    binaryArr = [ 0 for i in range ( n ) ]\n    for i in range ( 0 , n , 1 ) :\n        if ( arr [ i ] <= x ) :\n            binaryArr [ i ] = 1\n        else :\n            binaryArr [ i ] = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( binaryArr [ i ] == 1 ) :\n            for j in range ( i + 1 , n , 1 ) :\n                if ( binaryArr [ j ] != 1 ) :\n                    break\n            len = j - i\n            count += ( len ) * ( int ) ( ( len + 1 ) / 2 )\n            i = j\n    return count\n"}
{"java": "static int countMultiples ( int n ) { return n / 3 + n / 7 - n / 21 ; }", "python": "def countMultiples ( n ) :\n    return n / 3 + n / 7 - n / 21 ;\n"}
{"java": "static int findOddPair ( int A [ ] , int N ) { int i , j ; int oddPair = 0 ; for ( i = 0 ; i < N ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { if ( ( A [ i ] ^ A [ j ] ) % 2 != 0 ) oddPair ++ ; } } return oddPair ; }", "python": "def findOddPair ( A , N ) :\n    oddPair = 0\n    for i in range ( 0 , N ) :\n        for j in range ( i + 1 , N ) :\n            if ( ( A [ i ] ^ A [ j ] ) % 2 != 0 ) :\n                oddPair += 1\n    return oddPair\n"}
{"java": "static int longestAlternatingSubarray ( int a [ ] , int n ) { int longest = 1 ; int cnt = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] * a [ i - 1 ] < 0 ) { cnt ++ ; longest = Math . max ( longest , cnt ) ; } else cnt = 1 ; } return longest ; }", "python": "def longestAlternatingSubarray ( a , n ) :\n    longest = 1\n    cnt = 1\n    i = 1\n    while i < n :\n        if ( a [ i ] * a [ i - 1 ] < 0 ) :\n            cnt = cnt + 1\n            longest = max ( longest , cnt )\n        else :\n            cnt = 1\n        i = i + 1\n    return longest\n"}
{"java": "static void minSwaps ( String str1 , String str2 ) { int count = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) count ++ ; } if ( count % 2 == 0 ) System . out . println ( count / 2 ) ; else System . out . println ( \" Not \u2581 Possible \" ) ; }", "python": "def minSwaps ( str1 , str2 ) :\n    count = 0\n    for i in range ( len ( str1 ) ) :\n        if str1 [ i ] != str2 [ i ] :\n            count += 1\n    if count % 2 == 0 :\n        print ( count // 2 )\n    else :\n        print ( \" Not \u2581 Possible \" )\n"}
{"java": "static void pattern ( int N ) { int i , j , k = 0 , space = 1 , rows = N ; for ( i = rows ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( \" * \" ) ; } if ( i != rows ) { for ( k = 1 ; k <= space ; k ++ ) { System . out . print ( \" \u2581 \" ) ; } space = space + 2 ; } for ( j = i ; j >= 1 ; j -- ) { if ( j != rows ) System . out . print ( \" * \" ) ; } System . out . print ( \" \\n \" ) ; } System . out . print ( \" \\n \" ) ; }", "python": "def pattern ( N ) :\n    k , space , rows = 0 , 1 , N\n    for i in range ( rows , 0 , - 1 ) :\n        for j in range ( 1 , i + 1 ) :\n            print ( ' * ' , end = ' ' )\n        if i != rows :\n            for k in range ( 1 , space + 1 ) :\n                print ( ' \u2581 ' , end = ' ' )\n            space += 2\n        for j in range ( i , 0 , - 1 ) :\n            if j != rows :\n                print ( ' * ' , end = ' ' )\n        print ( )\n    print ( )\n"}
{"java": "static int FindMinNum ( int arr [ ] , int n ) { int pre [ ] = new int [ n ] ; pre [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + arr [ i ] ; int k = Integer . MAX_VALUE ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int rightSum = pre [ n - 1 ] - pre [ i ] ; if ( rightSum >= pre [ i ] ) k = Math . min ( k , rightSum - pre [ i ] ) ; } if ( k != Integer . MAX_VALUE ) return k ; return - 1 ; }", "python": "def FindMinNum ( arr , n ) :\n    pre = [ 0 for i in range ( n ) ]\n    pre [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n , 1 ) :\n        pre [ i ] = pre [ i - 1 ] + arr [ i ]\n    k = sys . maxsize\n    for i in range ( n - 1 ) :\n        rightSum = pre [ n - 1 ] - pre [ i ]\n        if ( rightSum >= pre [ i ] ) :\n            k = min ( k , rightSum - pre [ i ] )\n    if ( k != sys . maxsize ) :\n        return k\n    return - 1\n"}
{"java": "static int numberOfMen ( int D , int m , int d ) { int Men = ( m * ( D - d ) ) / d ; return Men ; }", "python": "def numberOfMen ( D , m , d ) :\n    Men = ( m * ( D - d ) ) / d ;\n    return int ( Men ) ;\n"}
{"java": "static int NthSmallest ( int K ) { Queue < Integer > Q = new LinkedList < > ( ) ; int x = 0 ; for ( int i = 1 ; i < 10 ; i ++ ) Q . add ( i ) ; for ( int i = 1 ; i <= K ; i ++ ) { x = Q . peek ( ) ; Q . remove ( ) ; if ( x % 10 != 0 ) { Q . add ( x * 10 + x % 10 - 1 ) ; } Q . add ( x * 10 + x % 10 ) ; if ( x % 10 != 9 ) { Q . add ( x * 10 + x % 10 + 1 ) ; } } return x ; }", "python": "def NthSmallest ( K ) :\n    Q = [ ]\n    for i in range ( 1 , 10 ) :\n        Q . append ( i )\n    for i in range ( 1 , K + 1 ) :\n        x = Q [ 0 ]\n        Q . remove ( Q [ 0 ] )\n        if ( x % 10 != 0 ) :\n            Q . append ( x * 10 + x % 10 - 1 )\n        Q . append ( x * 10 + x % 10 )\n        if ( x % 10 != 9 ) :\n            Q . append ( x * 10 + x % 10 + 1 )\n    return x\n"}
{"java": "static int nthElement ( int a , int b , int n ) { ArrayList < Integer > seq = new ArrayList < Integer > ( n * n + 1 ) ; for ( int i = 1 ; i <= n ; i ++ ) seq . add ( a * i ) ; Collections . sort ( seq ) ; for ( int i = 1 , k = n ; i <= n && k > 0 ; i ++ ) { if ( seq . indexOf ( b * i ) == - 1 ) { seq . add ( b * i ) ; Collections . sort ( seq ) ; k -- ; } } return seq . get ( n - 1 ) ; }", "python": "def nthElement ( a , b , n ) :\n    seq = [ ] ;\n    for i in range ( 1 , n + 1 ) :\n        seq . append ( a * i ) ;\n    seq . sort ( ) ;\n    i = 1 ;\n    k = n ;\n    while ( i <= n and k > 0 ) :\n        try :\n            z = seq . index ( b * i ) ;\n        except ValueError :\n            seq . append ( b * i ) ;\n            seq . sort ( ) ;\n            k -= 1 ;\n        i += 1 ;\n    return seq [ n - 1 ] ;\n"}
{"java": "static void complement ( String number1 ) { char [ ] number = number1 . toCharArray ( ) ; for ( int i = 0 ; i < number . length ; i ++ ) if ( number [ i ] != ' . ' ) number [ i ] = ( char ) ( ( int ) ( '9' ) - ( int ) ( number [ i ] ) + ( int ) ( '0' ) ) ; System . out . println ( \"9 ' s \u2581 complement \u2581 is \u2581 : \u2581 \" + String . valueOf ( number ) ) ; }", "python": "def complement ( number ) :\n    for i in range ( 0 , len ( number ) ) :\n        if ( number [ i ] != ' . ' ) :\n            a = 9 - int ( number [ i ] )\n            number = ( number [ : i ] + str ( a ) + number [ i + 1 : ] )\n    print ( \"9 ' s \u2581 complement \u2581 is \u2581 : \u2581 \" , number )\n"}
{"java": "static void K_multiple ( int a [ ] , int n , int k ) { Arrays . sort ( a ) ; HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] % k == 0 && ! s . contains ( a [ i ] / k ) ) || a [ i ] % k != 0 ) s . add ( a [ i ] ) ; } for ( Integer i : s ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def K_multiple ( a , n , k ) :\n    a . sort ( ) ;\n    s = set ( ) ;\n    for i in range ( n ) :\n        if ( ( a [ i ] % k == 0 and a [ i ] // k not in s ) or a [ i ] % k != 0 ) :\n            s . add ( a [ i ] ) ;\n    for i in s :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "static boolean checkPermutation ( int [ ] arr , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; int [ ] prefix = new int [ n + 1 ] ; Arrays . fill ( prefix , 0 ) ; prefix [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) prefix [ i ] = prefix [ i - 1 ] + arr [ i ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int lsum = prefix [ i ] ; int rsum = sum - prefix [ i ] ; int l_len = i + 1 , r_len = n - i - 1 ; if ( ( ( 2 * lsum ) == ( l_len * ( l_len + 1 ) ) ) && ( ( 2 * rsum ) == ( r_len * ( r_len + 1 ) ) ) ) return true ; } return false ; }", "python": "def checkPermutation ( arr , n ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += arr [ i ] ;\n    prefix = [ 0 ] * ( n + 1 ) ;\n    prefix [ 0 ] = arr [ 0 ] ;\n    for i in range ( n ) :\n        prefix [ i ] = prefix [ i - 1 ] + arr [ i ] ;\n    for i in range ( n - 1 ) :\n        lsum = prefix [ i ] ;\n        rsum = sum - prefix [ i ] ;\n        l_len = i + 1\n        r_len = n - i - 1 ;\n        if ( ( ( 2 * lsum ) == ( l_len * ( l_len + 1 ) ) ) and ( ( 2 * rsum ) == ( r_len * ( r_len + 1 ) ) ) ) :\n            return True ;\n    return False ;\n"}
{"java": "static int countDigit ( int n ) { boolean prime [ ] = new boolean [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) prime [ i ] = false ; prime [ 2 ] = prime [ 3 ] = true ; prime [ 5 ] = prime [ 7 ] = true ; int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp /= 10 ; if ( d > 0 && n % d == 0 && prime [ d ] == true ) count ++ ; } return count ; }", "python": "def countDigit ( n ) :\n    prime = [ False ] * 10\n    prime [ 2 ] = True\n    prime [ 3 ] = True ;\n    prime [ 5 ] = True\n    prime [ 7 ] = True ;\n    temp = n\n    count = 0 ;\n    while ( temp != 0 ) :\n        d = temp % 10 ;\n        temp //= 10 ;\n        if ( d > 0 and n % d == 0 and prime [ d ] ) :\n            count += 1\n    return count\n"}
{"java": "static void findNthTerm ( int n ) { n = n * 2 ; int a = 1 , b = 1 , c = - 1 * n ; int d = b * b - 4 * a * c ; double sqrt_val = Math . sqrt ( Math . abs ( d ) ) ; int x1 = ( int ) ( ( - b + sqrt_val ) / ( 2 * a ) ) ; int x2 = ( int ) ( ( - b - sqrt_val ) / ( 2 * a ) ) ; if ( x1 >= 1 ) System . out . println ( ( char ) ( ' a ' + x1 ) ) ; else if ( x2 >= 1 ) System . out . println ( ( char ) ( ' a ' + x2 ) ) ; }", "python": "def findNthTerm ( n ) :\n    n = n * 2\n    a = 1\n    b = 1\n    c = - 1 * n\n    d = b * b - 4 * a * c\n    sqrt_val = math . sqrt ( abs ( d ) )\n    x1 = ( - b + sqrt_val ) // ( 2 * a )\n    x2 = ( - b - sqrt_val ) // ( 2 * a )\n    x1 = int ( x1 )\n    x2 = int ( x2 )\n    if ( x1 >= 1 ) :\n        print ( chr ( 97 + x1 ) )\n    elif ( x2 >= 1 ) :\n        print ( chr ( 97 + x2 ) )\n"}
{"java": "static void Maximum_xor_Triplet ( int n , int a [ ] ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { s . add ( a [ i ] ^ a [ j ] ) ; } } int ans = 0 ; for ( Integer i : s ) { for ( int j = 0 ; j < n ; j ++ ) { ans = Math . max ( ans , i ^ a [ j ] ) ; } } System . out . println ( ans ) ; }", "python": "def Maximum_xor_Triplet ( n , a ) :\n    s = set ( )\n    for i in range ( 0 , n ) :\n        for j in range ( i , n ) :\n            s . add ( a [ i ] ^ a [ j ] )\n    ans = 0\n    for i in s :\n        for j in range ( 0 , n ) :\n            ans = max ( ans , i ^ a [ j ] )\n    print ( ans )\n"}
{"java": "public static void read ( ) { String vec [ ] , line = \" \" ; int cases ; BufferedReader buffer = new BufferedReader ( new InputStreamReader ( System . in ) ) ; long n , m , rel ; try { cases = Integer . parseInt ( buffer . readLine ( ) ) ; for ( int i = 0 ; i < cases ; i ++ ) { line = buffer . readLine ( ) ; vec = line . split ( \" \u2581 \" ) ; n = Long . parseLong ( vec [ 0 ] ) ; m = Long . parseLong ( vec [ 1 ] ) ; if ( n > m ) { n = n + m ; m = n - m ; n = n - m ; } if ( m > 2 && n == 1 ) System . out . println ( - 1 ) ; else if ( m == 2 && n == 1 ) System . out . println ( 1 ) ; else if ( n == 1 && m == 1 ) System . out . println ( 0 ) ; else { rel = m - n - 1 ; if ( rel % 2 == 0 ) System . out . println ( m * 2 - 3 ) ; else System . out . println ( m * 2 - 2 ) ; } } buffer . close ( ) ; } catch ( NullPointerException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }", "python": "def solution ( n , m ) :\n    if ( n > 2 and m == 1 ) or ( m > 2 and n == 1 ) :\n        return - 1\n    if abs ( n - m ) % 2 == 0 :\n        return n - 1 + m - 1 + abs ( m - n )\n    return n - 1 + m - 1 + abs ( m - n ) - 1\n"}
{"java": "static void CountingEvenOdd ( int arr [ ] , int arr_size ) { int even_count = 0 ; int odd_count = 0 ; for ( int i = 0 ; i < arr_size ; i ++ ) { if ( ( arr [ i ] & 1 ) == 1 ) odd_count ++ ; else even_count ++ ; } System . out . println ( \" Number \u2581 of \u2581 even \" + \" \u2581 elements \u2581 = \u2581 \" + even_count + \" \u2581 Number \u2581 of \u2581 odd \u2581 elements \u2581 = \u2581 \" + odd_count ) ; }", "python": "def CountingEvenOdd ( arr , arr_size ) :\n    even_count = 0\n    odd_count = 0\n    for i in range ( arr_size ) :\n        if ( arr [ i ] & 1 == 1 ) :\n            odd_count += 1\n        else :\n            even_count += 1\n    print ( \" Number \u2581 of \u2581 even \u2581 elements \u2581 = \u2581 \" , even_count )\n    print ( \" Number \u2581 of \u2581 odd \u2581 elements \u2581 = \u2581 \" , odd_count )\n"}
{"java": "public static long cal ( long width , long height ) { if ( width * height == 0 ) { return - Math . max ( width , height ) ; } else if ( width == height ) { return width ; } else if ( width > height ) { return width / height * height * 2 + cal ( width % height , height ) ; } else { return height / width * width * 2 + cal ( width , height % width ) ; } }", "python": "def f ( x , y ) :\n    a = min ( x , y )\n    b = max ( x , y )\n    if a == 0 :\n        return 0\n    elif b % a == 0 :\n        return 2 * b - a\n    else :\n        return 2 * a * math . floor ( b / a ) + f ( a , b % a )\n"}
{"java": "public static boolean isLeft ( Point2D . Double p , Point2D . Double q , Point2D . Double x ) { double dx1 = q . x - p . x ; double dy1 = q . y - p . y ; double dx2 = x . x - p . x ; double dy2 = x . y - p . y ; if ( 0 < dx1 * dy2 - dx2 * dy1 ) { return true ; } else { return false ; } }", "python": "def paint ( start_i , is_right , is_up ) :\n    x_start = X [ start_i ]\n    y_start = Y [ start_i ]\n    visited [ start_i ] = True\n    if is_right :\n        dir_sign = 1\n    else :\n        dir_sign = - 1\n    if ( is_up and is_right ) or ( not is_up and not is_right ) :\n        min_max_sign = 1\n    else :\n        min_max_sign = - 1\n    tangent_min_i = None\n    tangent_min = None\n    for i , x in enumerate ( X ) :\n        if dir_sign * ( x - x_start ) > 0 :\n            y = Y [ i ]\n            tangent = ( y - y_start ) / ( x - x_start )\n            if tangent_min is None :\n                tangent_min = tangent\n                tangent_min_i = i\n            else :\n                if min_max_sign * ( tangent_min - tangent ) > 0 :\n                    tangent_min = tangent\n                    tangent_min_i = i\n    if tangent_min_i is not None :\n        paint ( tangent_min_i , is_right , is_up )\n"}
{"java": "static int countNumbers ( int n ) { return n - n / 2 - n / 3 - n / 5 - n / 7 + n / 6 + n / 10 + n / 14 + n / 15 + n / 21 + n / 35 - n / 30 - n / 42 - n / 70 - n / 105 + n / 210 ; }", "python": "def countNumbers ( n ) :\n    return ( n - n // 2 - n // 3 - n // 5 - n // 7 + n // 6 + n // 10 + n // 14 + n // 15 + n // 21 + n // 35 - n // 30 - n // 42 - n // 70 - n // 105 + n // 210 )\n"}
{"java": "static void printPattern ( int n ) { int j , k = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) { for ( j = k + 1 ; j < k + i ; j ++ ) System . out . print ( j + \" * \" ) ; System . out . println ( j ++ ) ; k = j ; } else { k = k + i - 1 ; for ( j = k ; j > k - i + 1 ; j -- ) System . out . print ( j + \" * \" ) ; System . out . println ( j ) ; } } }", "python": "def printPattern ( n ) :\n    j , k = 0 , 0\n    for i in range ( 1 , n + 1 ) :\n        if i % 2 != 0 :\n            for j in range ( k + 1 , k + i ) :\n                print ( str ( j ) + \" * \" , end = \" \" )\n            j = k + i\n            print ( j )\n            j += 1\n            k = j\n        else :\n            k = k + i - 1\n            for j in range ( k , k - i + 1 , - 1 ) :\n                print ( str ( j ) + \" * \" , end = \" \" )\n            j = k - i + 1\n            print ( j )\n"}
{"java": "static int SquareCube ( long N ) { int cnt = 0 , i = 1 ; while ( ( int ) ( Math . pow ( i , 6 ) ) <= N ) { ++ cnt ; ++ i ; } return cnt ; }", "python": "def SquareCube ( N ) :\n    cnt , i = 0 , 1\n    while ( i ** 6 <= N ) :\n        cnt += 1\n        i += 1\n    return cnt\n"}
{"java": "static int xorPairCount ( int arr [ ] , int n , int x ) { int result = 0 ; Map < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int curr_xor = x ^ arr [ i ] ; if ( m . containsKey ( curr_xor ) ) result += m . get ( curr_xor ) ; if ( m . containsKey ( arr [ i ] ) ) { m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } else { m . put ( arr [ i ] , 1 ) ; } } return result ; }", "python": "def xorPairCount ( arr , n , x ) :\n    result = 0\n    m = dict ( )\n    for i in range ( n ) :\n        curr_xor = x ^ arr [ i ]\n        if ( curr_xor in m . keys ( ) ) :\n            result += m [ curr_xor ]\n        if arr [ i ] in m . keys ( ) :\n            m [ arr [ i ] ] += 1\n        else :\n            m [ arr [ i ] ] = 1\n    return result\n"}
{"java": "public static void largestInColumn ( int cols , int [ ] [ ] arr ) { for ( int i = 0 ; i < cols ; i ++ ) { int maxm = arr [ 0 ] [ i ] ; for ( int j = 1 ; j < arr [ i ] . length ; j ++ ) if ( arr [ j ] [ i ] > maxm ) maxm = arr [ j ] [ i ] ; System . out . println ( maxm ) ; } }", "python": "def largestInColumn ( mat , rows , cols ) :\n    for i in range ( cols ) :\n        maxm = mat [ 0 ] [ i ]\n        for j in range ( rows ) :\n            if mat [ j ] [ i ] > maxm :\n                maxm = mat [ j ] [ i ]\n        print ( maxm )\n"}
{"java": "static void shortestDistance ( String S , char X ) { int prev = Integer . MAX_VALUE ; Vector < Integer > ans = new Vector < > ( ) ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { if ( S . charAt ( i ) == X ) prev = i ; ans . add ( i - prev ) ; } prev = Integer . MAX_VALUE ; for ( int i = S . length ( ) - 1 ; i >= 0 ; i -- ) { if ( S . charAt ( i ) == X ) prev = i ; ans . set ( i , Math . min ( ans . get ( i ) , prev - i ) ) ; } for ( Integer val : ans ) System . out . print ( val + \" \u2581 \" ) ; }", "python": "def shortestDistance ( S , X ) :\n    prev = float ( ' - inf ' )\n    ans = [ ]\n    for i , j in enumerate ( S ) :\n        if j == X :\n            prev = i\n        ans . append ( i - prev )\n    prev = float ( ' inf ' )\n    for i in range ( len ( S ) - 1 , - 1 , - 1 ) :\n        if S [ i ] == X :\n            prev = i\n        ans [ i ] = min ( ans [ i ] , prev - i )\n    return ans\n"}
{"java": "static int findMax ( int num ) { byte size_of_int = 4 ; int num_copy = num ; int j = size_of_int * 8 - 1 ; int i = 0 ; while ( i < j ) { int m = ( num_copy >> i ) & 1 ; int n = ( num_copy >> j ) & 1 ; if ( m > n ) { int x = ( 1 << i | 1 << j ) ; num = num ^ x ; } i ++ ; j -- ; } return num ; }", "python": "def findMax ( num ) :\n    num_copy = num\n    j = 4 * 8 - 1 ;\n    i = 0\n    while ( i < j ) :\n        m = ( num_copy >> i ) & 1\n        n = ( num_copy >> j ) & 1\n        if ( m > n ) :\n            x = ( 1 << i | 1 << j )\n            num = num ^ x\n        i += 1\n        j -= 1\n    return num\n"}
{"java": "static int findSum ( int arr [ ] , int N ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > maxFreq ) { maxFreq = entry . getValue ( ) ; } } int sum = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) == maxFreq ) { sum += entry . getKey ( ) * entry . getValue ( ) ; } } return sum ; }", "python": "def findSum ( arr , N ) :\n    mp = dict ( )\n    for i in range ( N ) :\n        mp [ arr [ i ] ] = mp . get ( arr [ i ] , 0 ) + 1\n    maxFreq = 0\n    for itr in mp :\n        if ( mp [ itr ] > maxFreq ) :\n            maxFreq = mp [ itr ]\n    Sum = 0\n    for itr in mp :\n        if ( mp [ itr ] == maxFreq ) :\n            Sum += itr * mp [ itr ]\n    return Sum\n"}
{"java": "public static long SubArraySum ( int arr [ ] , int n ) { long result = 0 ; for ( int i = 0 ; i < n ; i ++ ) result += ( arr [ i ] * ( i + 1 ) * ( n - i ) ) ; return result ; }", "python": "def SubArraySum ( arr , n ) :\n    result = 0\n    for i in range ( 0 , n ) :\n        result += ( arr [ i ] * ( i + 1 ) * ( n - i ) )\n    return result\n"}
{"java": "private static int search ( ) { for ( int i = 0 ; i <= S . length ( ) - T . length ( ) ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < T . length ( ) ; j ++ ) { String s_i = S . substring ( i + j , i + j + 1 ) ; String t_i = T . substring ( j , j + 1 ) ; if ( ! s_i . equals ( t_i ) ) count ++ ; } sub = Math . min ( sub , count ) ; } return sub ; }", "python": "def main ( ) :\n    s_long = input ( )\n    s_shor = input ( )\n    ans = len ( s_shor )\n    max_len = len ( s_long ) - len ( s_shor ) + 1\n    for i in range ( max_len ) :\n        cnt = 0\n        for j in range ( len ( s_shor ) ) :\n            short = s_shor [ j ]\n            longg = s_long [ i + j ]\n            if ( short != longg ) :\n                cnt += 1\n        ans = min ( ans , cnt )\n    print ( ans )\n"}
{"java": "static void pattern ( int n ) { int i , j , k = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j > k ; j -- ) { System . out . print ( \" \u2581 \" ) ; } System . out . print ( ( char ) ( i + 65 ) ) ; for ( j = 1 ; j < ( k * 2 ) ; j ++ ) System . out . print ( \" \u2581 \" ) ; if ( i < n - 1 ) System . out . print ( ( char ) ( i + 65 ) ) ; System . out . print ( \" \\n \" ) ; k ++ ; } }", "python": "def pattern ( n ) :\n    k = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( n - 1 , k , - 1 ) :\n            print ( ' \u2581 ' , end = ' ' )\n        print ( chr ( i + 65 ) , end = ' ' )\n        for j in range ( 1 , k * 2 ) :\n            print ( ' \u2581 ' , end = ' ' )\n        if i < n - 1 :\n            print ( chr ( i + 65 ) , end = ' ' )\n        print ( )\n        k += 1\n"}
{"java": "static void pattern ( int n ) { int i , j ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j > i ; j -- ) { System . out . print ( \" \u2581 \" ) ; } System . out . print ( ( char ) ( i + 65 ) ) ; for ( j = 1 ; j < ( i * 2 ) ; j ++ ) System . out . print ( \" \u2581 \" ) ; if ( i >= 1 ) System . out . print ( ( char ) ( i + 65 ) ) ; System . out . print ( \" \\n \" ) ; } }", "python": "def pattern ( n ) :\n    i = n - 1\n    j = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( n - 1 , i , - 1 ) :\n            print ( ' \u2581 ' , end = ' ' )\n        print ( chr ( i + 65 ) , end = ' ' )\n        for j in range ( 1 , i * 2 ) :\n            print ( ' \u2581 ' , end = ' ' )\n        if ( i >= 1 ) :\n            print ( chr ( i + 65 ) , end = ' ' )\n        print ( )\n"}
{"java": "static void KthCharacter ( int m , int n , int k ) { int distance = ( int ) Math . pow ( 2 , n ) ; int Block_number = k / distance ; int remaining = k % distance ; int s [ ] = new int [ 32 ] ; int x = 0 ; for ( ; m > 0 ; x ++ ) { s [ x ] = m % 2 ; m = m / 2 ; } int root = s [ x - 1 - Block_number ] ; if ( remaining == 0 ) { System . out . println ( root ) ; return ; } Boolean flip = true ; while ( remaining > 1 ) { if ( ( remaining & 1 ) > 0 ) { flip = ! flip ; } remaining = remaining >> 1 ; } if ( flip ) { System . out . println ( ( root > 0 ) ? 0 : 1 ) ; } else { System . out . println ( root ) ; } }", "python": "def KthCharacter ( m , n , k ) :\n    distance = pow ( 2 , n )\n    Block_number = int ( k / distance )\n    remaining = k % distance\n    s = [ 0 ] * 32\n    x = 0\n    while ( m > 0 ) :\n        s [ x ] = m % 2\n        m = int ( m / 2 )\n        x += 1\n    root = s [ x - 1 - Block_number ]\n    if ( remaining == 0 ) :\n        print ( root )\n        return\n    flip = True\n    while ( remaining > 1 ) :\n        if ( remaining & 1 ) :\n            flip = not ( flip )\n        remaining = remaining >> 1\n    if ( flip ) :\n        print ( not ( root ) )\n    else :\n        print ( root )\n"}
{"java": "public static String findstem ( String arr [ ] ) { int n = arr . length ; String s = arr [ 0 ] ; int len = s . length ( ) ; String res = \" \" ; for ( int i = 0 ; i < len ; i ++ ) { for ( int j = i + 1 ; j <= len ; j ++ ) { String stem = s . substring ( i , j ) ; int k = 1 ; for ( k = 1 ; k < n ; k ++ ) if ( ! arr [ k ] . contains ( stem ) ) break ; if ( k == n && res . length ( ) < stem . length ( ) ) res = stem ; } } return res ; }", "python": "def findstem ( arr ) :\n    n = len ( arr )\n    s = arr [ 0 ]\n    l = len ( s )\n    res = \" \"\n    for i in range ( l ) :\n        for j in range ( i + 1 , l + 1 ) :\n            stem = s [ i : j ]\n            k = 1\n            for k in range ( 1 , n ) :\n                if stem not in arr [ k ] :\n                    break\n            if ( k + 1 == n and len ( res ) < len ( stem ) ) :\n                res = stem\n    return res\n"}
{"java": "static int maxSumPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 ) { int max1 = Integer . MIN_VALUE ; int max2 = Integer . MIN_VALUE ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( arr1 [ i ] > max1 ) max1 = arr1 [ i ] ; } for ( int i = 0 ; i < n2 ; i ++ ) { if ( arr2 [ i ] > max2 ) max2 = arr2 [ i ] ; } return max1 + max2 ; }", "python": "def maxSumPair ( arr1 , n1 , arr2 , n2 ) :\n    max1 = - sys . maxsize - 1\n    max2 = - sys . maxsize - 1\n    for i in range ( 0 , n1 ) :\n        if ( arr1 [ i ] > max1 ) :\n            max1 = arr1 [ i ]\n    for i in range ( 0 , n2 ) :\n        if ( arr2 [ i ] > max2 ) :\n            max2 = arr2 [ i ]\n    return max1 + max2\n"}
{"java": "public static int sumDigit ( int num ) { int sum = 0 ; int n = num ; while ( n > 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; }", "python": "def calc_digit_sum ( num ) :\n    length = len ( str ( num ) )\n    digit_sum = 0\n    for i in range ( 1 , length + 1 ) :\n        digit_sum += num % 10\n        num //= 10\n    return digit_sum\n"}
{"java": "static void getmax ( int arr [ ] , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = s + arr [ i ] ; } System . out . print ( Math . min ( s , x ) ) ; }", "python": "def getmax ( arr , n , x ) :\n    s = 0\n    for i in range ( n ) :\n        s = s + arr [ i ]\n    print ( min ( s , x ) )\n"}
{"java": "static int minimumMoves ( int n , int a [ ] , int s , int t ) { int i , x ; x = s ; for ( i = 1 ; i <= n ; i ++ ) { if ( x == t ) break ; x = a [ x ] ; } if ( x == t ) return i - 1 ; else return - 1 ; }", "python": "def minimumMoves ( n , a , s , t ) :\n    x = s\n    for i in range ( 1 , n + 1 ) :\n        if x == t :\n            return i - 1\n        x = a [ x ]\n    return - 1\n"}
{"java": "static int countPairs ( int arr [ ] , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( ( arr [ i ] | arr [ j ] ) <= Math . max ( arr [ i ] , arr [ j ] ) ) cnt ++ ; return cnt ; }", "python": "def countPairs ( arr , n ) :\n    cnt = 0\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n , 1 ) :\n            if ( ( arr [ i ] | arr [ j ] ) <= max ( arr [ i ] , arr [ j ] ) ) :\n                cnt += 1\n    return cnt\n"}
{"java": "static long countSubstr ( String s , int k ) { int n = s . length ( ) ; int l = n - 1 ; int r = n - 1 ; int [ ] arr = new int [ n ] ; int last_indexof1 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { arr [ i ] = i ; last_indexof1 = i ; } else { arr [ i ] = last_indexof1 ; } } long no_of_substr = 0 ; for ( r = n - 1 ; r >= 0 ; r -- ) { l = r ; while ( l >= 0 && ( r - l + 1 ) <= 64 && Integer . valueOf ( s . substring ( l , r + 1 ) , 2 ) < k ) { l -- ; } if ( r - l + 1 <= 64 ) no_of_substr += l + 1 ; else { no_of_substr += arr [ l + 1 ] + 1 ; } } return no_of_substr ; }", "python": "def countSubstr ( s , k ) :\n    n = len ( s )\n    l = n - 1\n    r = n - 1\n    arr = [ 0 ] * n\n    last_indexof1 = - 1\n    for i in range ( n ) :\n        if ( s [ i ] == '1' ) :\n            arr [ i ] = i\n            last_indexof1 = i\n        else :\n            arr [ i ] = last_indexof1\n    no_of_substr = 0\n    for r in range ( n - 1 , - 1 , - 1 ) :\n        l = r\n        while ( l >= 0 and ( r - l + 1 ) <= 64 and int ( s [ l : r + 1 ] , 2 ) < k ) :\n            l -= 1\n        if ( r - l + 1 <= 64 ) :\n            no_of_substr += l + 1\n        else :\n            no_of_substr += arr [ l + 1 ] + 1\n    return no_of_substr\n"}
{"java": "static int count_minimum_operations ( long n ) { int count = 0 ; while ( n > 1 ) { if ( n % 3 == 0 ) n /= 3 ; else if ( n % 3 == 1 ) n -- ; else { if ( n == 2 ) n -- ; else n ++ ; } count ++ ; } return count ; }", "python": "def count_minimum_operations ( n ) :\n    count = 0\n    while ( n > 1 ) :\n        if ( n % 3 == 0 ) :\n            n //= 3\n        elif ( n % 3 == 1 ) :\n            n -= 1\n        else :\n            if ( n == 2 ) :\n                n -= 1\n            else :\n                n += 1\n        count += 1\n    return count\n"}
{"java": "static String replaceConsonants ( String str ) { String res = \" \" ; int i = 0 , count = 0 ; while ( i < str . length ( ) ) { if ( str . charAt ( i ) != ' a ' && str . charAt ( i ) != ' e ' && str . charAt ( i ) != ' i ' && str . charAt ( i ) != ' o ' && str . charAt ( i ) != ' u ' ) { i ++ ; count ++ ; } else { if ( count > 0 ) res += count ; res += str . charAt ( i ) ; i ++ ; count = 0 ; } } if ( count > 0 ) res += count ; return res ; }", "python": "def replaceConsonants ( string ) :\n    res = \" \" ;\n    i = 0 ; count = 0 ;\n    while ( i < len ( string ) ) :\n        if ( string [ i ] != ' a ' and string [ i ] != ' e ' and string [ i ] != ' i ' and string [ i ] != ' o ' and string [ i ] != ' u ' ) :\n            i += 1 ;\n            count += 1 ;\n        else :\n            if ( count > 0 ) :\n                res += str ( count ) ;\n            res += string [ i ] ;\n            i += 1\n            count = 0 ;\n    if ( count > 0 ) :\n        res += str ( count ) ;\n    return res ;\n"}
{"java": "static boolean Div_by_8 ( int n ) { return ( ( ( n >> 3 ) << 3 ) == n ) ; }", "python": "def Div_by_8 ( n ) :\n    return ( ( ( n >> 3 ) << 3 ) == n )\n"}
{"java": "static void printArray ( int X , int d , int first_ele ) { while ( X > 0 ) { int count_ele = 0 , pow_of_two = 2 ; while ( X - pow_of_two + 1 >= 0 ) { count_ele ++ ; pow_of_two *= 2 ; } X = X - ( pow_of_two / 2 ) + 1 ; for ( int j = 0 ; j < count_ele ; j ++ ) System . out . print ( first_ele + \" \u2581 \" ) ; first_ele += d ; } }", "python": "def printArray ( X , d , first_ele ) :\n    while ( X > 0 ) :\n        count_ele , pow_of_two = 0 , 2\n        while ( X - pow_of_two + 1 >= 0 ) :\n            count_ele += 1\n            pow_of_two *= 2\n        X = X - ( pow_of_two / 2 ) + 1\n        for j in range ( count_ele ) :\n            print ( first_ele , end = \" \u2581 \" )\n        first_ele += d\n"}
{"java": "static int min_sum ( int n , int k , int a [ ] ) { Arrays . sort ( a ) ; if ( a [ 0 ] < 0 ) return - 1 ; if ( k == 0 ) { if ( a [ 0 ] == a [ n - 1 ] ) return ( n * a [ 0 ] ) ; else return - 1 ; } else { int f = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int p = a [ i ] - a [ 0 ] ; if ( p % k == 0 ) continue ; else { f = 1 ; break ; } } if ( f > 0 ) return - 1 ; else { if ( k == 1 ) return n ; else return ( n * ( a [ 0 ] % k ) ) ; } } }", "python": "def min_sum ( n , k , a ) :\n    a . sort ( reverse = False )\n    if ( a [ 0 ] < 0 ) :\n        return - 1\n    if ( k == 0 ) :\n        if ( a [ 0 ] == a [ n - 1 ] ) :\n            return ( n * a [ 0 ] )\n        else :\n            return - 1\n    else :\n        f = 0\n        for i in range ( 1 , n , 1 ) :\n            p = a [ i ] - a [ 0 ]\n            if ( p % k == 0 ) :\n                continue\n            else :\n                f = 1\n                break\n        if ( f ) :\n            return - 1\n        else :\n            if ( k == 1 ) :\n                return n\n            else :\n                return ( n * ( a [ 0 ] % k ) )\n"}
{"java": "static int countDivisors ( int n , int k ) { int count = 0 , i ; for ( i = 1 ; i < Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( i % k == 0 ) { count ++ ; } if ( ( n / i ) % k == 0 ) { count ++ ; } } } if ( ( i * i == n ) && ( i % k == 0 ) ) { count -- ; } return count ; }", "python": "def countDivisors ( n , k ) :\n    count = 0\n    for i in range ( 1 , int ( math . sqrt ( n ) ) + 1 ) :\n        if ( n % i == 0 ) :\n            if ( i % k == 0 ) :\n                count += 1\n            if ( ( n // i ) % k == 0 ) :\n                count += 1\n    if ( ( i * i == n ) and ( i % k == 0 ) ) :\n        count -= 1\n    return count\n"}
{"java": "public static void balancedString ( String str ) { int count = 0 , i ; int n = str . length ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == ' ( ' ) { System . out . print ( str . charAt ( i ) ) ; count ++ ; } else if ( str . charAt ( i ) == ' ) ' && count != 0 ) { System . out . print ( str . charAt ( i ) ) ; count -- ; } else if ( str . charAt ( i ) != ' ) ' ) System . out . print ( str . charAt ( i ) ) ; } if ( count != 0 ) for ( i = 0 ; i < count ; i ++ ) System . out . print ( \" ) \" ) ; }", "python": "def balancedString ( str ) :\n    count , i = 0 , 0\n    n = len ( str )\n    for i in range ( n ) :\n        if ( str [ i ] == ' ( ' ) :\n            print ( str [ i ] , end = \" \" )\n            count += 1\n        elif ( str [ i ] == ' ) ' and count != 0 ) :\n            print ( str [ i ] , end = \" \" )\n            count -= 1\n        elif ( str [ i ] != ' ) ' ) :\n            print ( str [ i ] , end = \" \" )\n    if ( count != 0 ) :\n        for i in range ( count ) :\n            print ( \" ) \" , end = \" \" )\n"}
{"java": "public static long solve ( long n ) { long ans = 0 ; if ( n == 1 ) ans = 1 ; else if ( n == 2 ) ans = 2 ; else if ( n == 3 ) ans = 6 ; else if ( n % 2 == 0 ) { if ( n % 3 == 0 ) ans = ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ; else ans = n * ( n - 1 ) * ( n - 3 ) ; } else ans = n * ( n - 1 ) * ( n - 2 ) ; return ans ; }", "python": "def main ( ) :\n    def gcd ( a , b ) :\n        if b == 0 :\n            return a\n        else :\n            return gcd ( b , a % b )\n    n = int ( input ( ) )\n    if n < 3 :\n        print ( n )\n        exit ( )\n    if n % 2 :\n        print ( n * ( n - 1 ) * ( n - 2 ) )\n    elif gcd ( n , n - 3 ) == 1 :\n        print ( n * ( n - 1 ) * ( n - 3 ) )\n    else :\n        print ( ( n - 1 ) * ( n - 2 ) * ( n - 3 ) )\n"}
{"java": "static int Rank ( int Edges , int Vertices ) { int result = 0 ; result = Edges - Vertices + 1 ; return result ; }", "python": "def Rank ( Edges , Vertices ) :\n    result = Edges - Vertices + 1\n    return result\n"}
{"java": "public static void solve ( Scanner sc ) { int n = sc . nextInt ( ) ; int [ ] arrivalTime = new int [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int spentTime = sc . nextInt ( ) ; int startTime = sc . nextInt ( ) ; int frequentTime = sc . nextInt ( ) ; for ( int j = 0 ; j <= i ; j ++ ) { if ( arrivalTime [ j ] < startTime ) { arrivalTime [ j ] = startTime ; } if ( arrivalTime [ j ] % frequentTime != 0 ) { arrivalTime [ j ] += frequentTime - ( arrivalTime [ j ] % frequentTime ) ; } arrivalTime [ j ] += spentTime ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( arrivalTime [ i ] ) ; } }", "python": "def dfs ( eki , t ) :\n    if eki == n - 1 :\n        return t\n    cc = c [ eki ]\n    ss = s [ eki ]\n    ff = f [ eki ]\n    if t <= ss :\n        return dfs ( eki + 1 , ss + cc )\n    else :\n        return dfs ( eki + 1 , - ( - t // ff ) * ff + cc )\n"}
{"java": "static double increaseInVol ( double l , double b , double h ) { double percentInc = ( 1 + ( l / 100 ) ) * ( 1 + ( b / 100 ) ) * ( 1 + ( h / 100 ) ) ; percentInc -= 1 ; percentInc *= 100 ; return percentInc ; }", "python": "def increaseInVol ( l , b , h ) :\n    percentInc = ( ( 1 + ( l / 100 ) ) * ( 1 + ( b / 100 ) ) * ( 1 + ( h / 100 ) ) )\n    percentInc -= 1\n    percentInc *= 100\n    return percentInc\n"}
{"java": "private static int sum ( List < Integer > a , int startInd , int endInd ) { int res = 0 ; for ( int j = startInd ; j < endInd ; j ++ ) { res += a . get ( j ) ; } return res ; }", "python": "def solve ( n , a ) :\n    a . sort ( )\n    i = 1\n    j = n - 1\n    firstSum = a [ 0 ]\n    secondSum = 0\n    while i < j :\n        firstSum += a [ i ]\n        secondSum += a [ j ]\n        i += 1\n        j -= 1\n        if firstSum < secondSum :\n            return ' YES '\n    return ' NO '\n"}
{"java": "static int KthMinValAfterMconcatenate ( int [ ] A , int N , int M , int K ) { ArrayList V = new ArrayList ( ) ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { V . add ( A [ j ] ) ; } } Collections . sort ( V ) ; return ( ( int ) V . get ( K - 1 ) ) ; }", "python": "def KthMinValAfterMconcatenate ( A , N , M , K ) :\n    V = [ ]\n    for i in range ( 0 , M ) :\n        for j in range ( 0 , N ) :\n            V . append ( A [ j ] )\n    V . sort ( )\n    return V [ K - 1 ]\n"}
{"java": "public static void removeDuplicates ( int [ ] arr ) { LinkedHashSet < Integer > set = new LinkedHashSet < Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) set . add ( arr [ i ] ) ; System . out . print ( set ) ; }", "python": "def removeDulipcates ( arr ) :\n    s = dict ( )\n    d = [ ]\n    for i in arr :\n        if i not in s . keys ( ) :\n            d . append ( i )\n            s [ i ] = 1\n    print ( d )\n"}
{"java": "public static int repUnitValue ( int n ) { if ( n % 2 == 0 || n % 5 == 0 ) return 0 ; int rem = 1 ; int power = 1 ; int k = 1 ; while ( rem % n != 0 ) { k ++ ; power = power * 10 % n ; rem = ( rem + power ) % n ; } return k ; }", "python": "def repUnitValue ( n ) :\n    if ( n % 2 == 0 or n % 5 == 0 ) :\n        return 0\n    rem = 1\n    power = 1\n    k = 1\n    while ( rem % n != 0 ) :\n        k += 1\n        power = power * 10 % n\n        rem = ( rem + power ) % n\n    return k\n"}
{"java": "static void FindRank ( int arr [ ] , int length ) { System . out . print ( \"1\" + \" \u2581 \" ) ; for ( int i = 1 ; i < arr . length ; i ++ ) { int rank = 1 ; for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) rank ++ ; } System . out . print ( rank + \" \u2581 \" ) ; } }", "python": "def FindRank ( arr , length ) :\n    print ( 1 , end = \" \u2581 \" )\n    for i in range ( 1 , length ) :\n        rank = 1\n        for j in range ( 0 , i ) :\n            if ( arr [ j ] > arr [ i ] ) :\n                rank = rank + 1\n        print ( rank , end = \" \u2581 \" )\n"}
{"java": "static boolean bitsAreInAltPatrnInGivenTRange ( int n , int l , int r ) { int num , prev , curr ; num = n >> ( l - 1 ) ; prev = num & 1 ; num = num >> 1 ; for ( int i = 1 ; i <= ( r - l ) ; i ++ ) { curr = num & 1 ; if ( curr == prev ) return false ; prev = curr ; num = num >> 1 ; } return true ; }", "python": "def bitsAreInAltPatrnInGivenTRange ( n , l , r ) :\n    num = n >> ( l - 1 ) ;\n    prev = num & 1 ;\n    num = num >> 1 ;\n    for i in range ( 1 , ( r - l ) ) :\n        curr = num & 1 ;\n        if ( curr == prev ) :\n            return False ;\n        prev = curr ;\n        num = num >> 1 ;\n    return True ;\n"}
{"java": "static void printPattern ( int n ) { int line_no = 1 ; int curr_star = 0 ; for ( line_no = 1 ; line_no <= n ; ) { if ( curr_star < line_no ) { System . out . print ( \" * \u2581 \" ) ; curr_star ++ ; continue ; } if ( curr_star == line_no ) { System . out . println ( \" \" ) ; line_no ++ ; curr_star = 0 ; } } }", "python": "def printPattern ( n ) :\n    line_no = 1\n    curr_star = 0\n    line_no = 1\n    while ( line_no <= n ) :\n        if ( curr_star < line_no ) :\n            print ( \" * \u2581 \" , end = \" \" )\n            curr_star += 1\n            continue\n        if ( curr_star == line_no ) :\n            print ( \" \" )\n            line_no += 1\n            curr_star = 0\n"}
{"java": "static boolean isBinary ( int number ) { while ( number > 0 ) { int digit = number % 10 ; if ( digit > 1 ) return false ; number /= 10 ; } return true ; }", "python": "def isBinary ( number ) :\n    while ( number > 0 ) :\n        digit = number % 10\n        if ( digit > 1 ) :\n            return False\n        number //= 10\n    return True\n"}
{"java": "static long getClosest ( int a , int b , int x ) { long num = ( long ) Math . pow ( a , b ) ; int floor = ( int ) ( num / x ) ; long numOnLeft = x * floor ; long numOnRight = x * ( floor + 1 ) ; if ( ( num - numOnLeft ) < ( numOnRight - num ) ) { return numOnLeft ; } else { return numOnRight ; } }", "python": "def getClosest ( a , b , x ) :\n    num = pow ( a , b )\n    floor = num // x\n    numOnLeft = x * floor\n    numOnRight = x * ( floor + 1 )\n    if ( ( num - numOnLeft ) < ( numOnRight - num ) ) :\n        return numOnLeft\n    else :\n        return numOnRight\n"}
{"java": "static void printRLE ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int count = 1 ; while ( i + 1 < s . length ( ) && s . charAt ( i ) == s . charAt ( i + 1 ) ) { i ++ ; count ++ ; } System . out . print ( s . charAt ( i ) + \" \" + count + \" \u2581 \" ) ; } System . out . println ( ) ; }", "python": "def printRLE ( s ) :\n    i = 0\n    while ( i < len ( s ) - 1 ) :\n        count = 1\n        while s [ i ] == s [ i + 1 ] :\n            i += 1\n            count += 1\n            if i + 1 == len ( s ) :\n                break\n        print ( str ( s [ i ] ) + str ( count ) , end = \" \u2581 \" )\n        i += 1\n    print ( )\n"}
{"java": "static int MaxTraceSub ( int mat [ ] [ ] ) { int max_trace = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { int r = i , s = j , trace = 0 ; while ( r < N && s < N ) { trace += mat [ r ] [ s ] ; r ++ ; s ++ ; max_trace = Math . max ( trace , max_trace ) ; } } } return max_trace ; }", "python": "def MaxTraceSub ( mat ) :\n    max_trace = 0\n    for i in range ( N ) :\n        for j in range ( N ) :\n            r = i\n            s = j\n            trace = 0\n            while ( r < N and s < N ) :\n                trace += mat [ r ]\n                r += 1\n                s += 1\n                max_trace = max ( trace , max_trace )\n    return max_trace\n"}
{"java": "static void calculate ( int a [ ] , int b [ ] , int n , int m ) { int mul = 1 ; for ( int i = 0 ; i < m ; i ++ ) if ( b [ i ] != 0 ) mul = mul * b [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = ( int ) Math . floor ( a [ i ] / mul ) ; System . out . print ( x + \" \u2581 \" ) ; } }", "python": "def calculate ( a , b , n , m ) :\n    mul = 1\n    for i in range ( m ) :\n        if ( b [ i ] != 0 ) :\n            mul = mul * b [ i ]\n    for i in range ( n ) :\n        x = math . floor ( a [ i ] / mul )\n        print ( x , end = \" \u2581 \" )\n"}
{"java": "public static void A ( Scanner sc ) { int m = sc . nextInt ( ) ; out . println ( 24 - m + 24 ) ; }", "python": "def new_year ( M : int ) -> int :\n    return 48 - M\n"}
{"java": "static boolean EqualNumbers ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { while ( a [ i ] % 2 == 0 ) { a [ i ] /= 2 ; } while ( a [ i ] % 3 == 0 ) { a [ i ] /= 3 ; } if ( a [ i ] != a [ 0 ] ) { return false ; } } return true ; }", "python": "def EqualNumbers ( a , n ) :\n    for i in range ( 0 , n ) :\n        while a [ i ] % 2 == 0 :\n            a [ i ] //= 2\n        while a [ i ] % 3 == 0 :\n            a [ i ] //= 3\n        if a [ i ] != a [ 0 ] :\n            return False\n    return True\n"}
{"java": "static float ellipse ( float l , float b ) { if ( l < 0 || b < 0 ) return - 1 ; float x = ( float ) ( 3.14 * l * b ) / 4 ; return x ; }", "python": "def ellipse ( l , b ) :\n    if l < 0 or b < 0 :\n        return - 1\n    x = ( 3.14 * l * b ) / 4\n    return x\n"}
{"java": "private static void solver ( int [ ] [ ] data ) { int ans = Integer . MAX_VALUE ; int diffX = Integer . MAX_VALUE ; Arrays . parallelSort ( data , new Comparator < int [ ] > ( ) { @ Override public int compare ( int [ ] o1 , int [ ] o2 ) { return Integer . compare ( o1 [ 0 ] , o2 [ 0 ] ) ; } } ) ; for ( int i = 0 ; i < data . length ; i ++ ) { for ( int j = i + 1 ; j < data . length ; j ++ ) { if ( diffX < Math . abs ( data [ i ] [ 0 ] - data [ j ] [ 0 ] ) ) { break ; } int tmp = ( data [ i ] [ 0 ] - data [ j ] [ 0 ] ) * ( data [ i ] [ 0 ] - data [ j ] [ 0 ] ) + ( data [ i ] [ 1 ] - data [ j ] [ 1 ] ) * ( data [ i ] [ 1 ] - data [ j ] [ 1 ] ) ; if ( ans > tmp ) { ans = tmp ; diffX = ( int ) Math . sqrt ( ans ) ; } } } System . out . println ( ans ) ; }", "python": "def solve ( a : list , sorted_axis : int = - 1 ) :\n    length = len ( a )\n    if length <= 3 :\n        return min ( ( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2 for ( x1 , y1 ) , ( x2 , y2 ) in combinations ( a , 2 ) )\n    x_set_len = len ( set ( x for x , _ in a ) )\n    axis1 = 0 if x_set_len > length / 2 else 1\n    if sorted_axis != axis1 :\n        a . sort ( key = itemgetter ( axis1 ) )\n    mid_index = length // 2\n    left , right = a [ : mid_index ] , a [ mid_index : ]\n    delta = min ( solve ( left , axis1 ) , solve ( right , axis1 ) )\n    axis2 = not axis1\n    median = a [ mid_index ] [ axis1 ]\n    mid_a = sorted ( [ p for _iter in ( ( takewhile ( lambda p : median - sqrt ( delta ) < p [ axis1 ] , left [ : : - 1 ] ) ) , ( takewhile ( lambda p : p [ axis1 ] < median + sqrt ( delta ) , right ) ) ) for p in _iter ] , key = itemgetter ( axis2 ) )\n    for i , ( x1 , y1 ) in enumerate ( mid_a ) :\n        ub = ( x1 if axis1 else y1 ) + sqrt ( delta )\n        for x2 , y2 in takewhile ( lambda p : p [ axis2 ] < ub , mid_a [ i + 1 : ] ) :\n            delta = min ( delta , ( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2 )\n    return delta\n"}
{"java": "static void printUniqueElementsInSuffix ( int [ ] arr , int n , int [ ] q , int m ) { int [ ] aux = new int [ MAX ] ; int [ ] mark = new int [ MAX ] ; aux [ n - 1 ] = 1 ; mark [ arr [ n - 1 ] ] = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( mark [ arr [ i ] ] == 0 ) { aux [ i ] = aux [ i + 1 ] + 1 ; mark [ arr [ i ] ] = 1 ; } else { aux [ i ] = aux [ i + 1 ] ; } } for ( int i = 0 ; i < m ; i ++ ) { System . out . println ( aux [ q [ i ] - 1 ] ) ; } }", "python": "def printUniqueElementsInSuffix ( arr , n , q , m ) :\n    aux = [ 0 ] * MAX ;\n    mark = [ 0 ] * MAX ;\n    aux [ n - 1 ] = 1 ;\n    mark [ arr [ n - 1 ] ] = 1 ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( mark [ arr [ i ] ] == 0 ) :\n            aux [ i ] = aux [ i + 1 ] + 1 ;\n            mark [ arr [ i ] ] = 1 ;\n        else :\n            aux [ i ] = aux [ i + 1 ] ;\n    for i in range ( m ) :\n        print ( aux [ q [ i ] - 1 ] ) ;\n"}
{"java": "static String find_Square_369 ( String num ) { char a , b , c , d ; if ( num . charAt ( 0 ) == '3' ) { a = '1' ; b = '0' ; c = '8' ; d = '9' ; } else if ( num . charAt ( 0 ) == '6' ) { a = '4' ; b = '3' ; c = '5' ; d = '6' ; } else { a = '9' ; b = '8' ; c = '0' ; d = '1' ; } String result = \" \" ; int size = num . length ( ) ; for ( int i = 1 ; i < size ; i ++ ) result += a ; result += b ; for ( int i = 1 ; i < size ; i ++ ) result += c ; result += d ; return result ; }", "python": "def find_Square_369 ( num ) :\n    if ( num [ 0 ] == '3' ) :\n        a = '1'\n        b = '0'\n        c = '8'\n        d = '9'\n    elif ( num [ 0 ] == '6' ) :\n        a = '4'\n        b = '3'\n        c = '5'\n        d = '6'\n    else :\n        a = '9'\n        b = '8'\n        c = '0'\n        d = '1'\n    result = \" \"\n    size = len ( num )\n    for i in range ( 1 , size ) :\n        result += a\n    result += b\n    for i in range ( 1 , size ) :\n        result += c\n    result += d\n    return result\n"}
{"java": "static int findevenPair ( int [ ] A , int N ) { int i , j ; int evenPair = 0 ; for ( i = 0 ; i < N ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { if ( ( A [ i ] & A [ j ] ) % 2 == 0 ) evenPair ++ ; } } return evenPair ; }", "python": "def findevenPair ( A , N ) :\n    evenPair = 0\n    for i in range ( 0 , N ) :\n        for j in range ( i + 1 , N ) :\n            if ( ( A [ i ] & A [ j ] ) % 2 == 0 ) :\n                evenPair += 1\n    return evenPair\n"}
{"java": "static int findElement ( int arr [ ] , int n ) { int [ ] prefixSum = new int [ n ] ; prefixSum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) prefixSum [ i ] = prefixSum [ i - 1 ] + arr [ i ] ; int [ ] suffixSum = new int [ n ] ; suffixSum [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) suffixSum [ i ] = suffixSum [ i + 1 ] + arr [ i ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) if ( prefixSum [ i ] == suffixSum [ i ] ) return arr [ i ] ; return - 1 ; }", "python": "def findElement ( arr , n ) :\n    prefixSum = [ 0 ] * n\n    prefixSum [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        prefixSum [ i ] = prefixSum [ i - 1 ] + arr [ i ]\n    suffixSum = [ 0 ] * n\n    suffixSum [ n - 1 ] = arr [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        suffixSum [ i ] = suffixSum [ i + 1 ] + arr [ i ]\n    for i in range ( 1 , n - 1 , 1 ) :\n        if prefixSum [ i ] == suffixSum [ i ] :\n            return arr [ i ]\n    return - 1\n"}
{"java": "static void solve ( char [ ] a , char [ ] b ) { int l = a . length ; int min = 0 , max = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( a [ i ] == ' + ' || b [ i ] == ' + ' || a [ i ] != b [ i ] ) max ++ ; if ( a [ i ] != ' + ' && b [ i ] != ' + ' && a [ i ] != b [ i ] ) min ++ ; } System . out . print ( min + max + \" \\n \" ) ; }", "python": "def solve ( a , b ) :\n    l = len ( a )\n    min = 0\n    max = 0\n    for i in range ( l ) :\n        if ( a [ i ] == ' + ' or b [ i ] == ' + ' or a [ i ] != b [ i ] ) :\n            max += 1\n        if ( a [ i ] != ' + ' and b [ i ] != ' + ' and a [ i ] != b [ i ] ) :\n            min += 1\n    print ( min + max )\n"}
{"java": "static void solve ( Scanner sc ) { int n = sc . nextInt ( ) ; for ( int j = 1 ; j <= n ; j ++ ) { System . out . print ( j ) ; for ( int x = n ; x > 0 ; x -- ) { if ( x != j ) { System . out . print ( \" \u2581 \" + x ) ; } } System . out . println ( ) ; } }", "python": "def _input ( ) : return map ( int , input ( ) . split ( ) )\ndef _list ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef _int ( ) : return int ( input ( ) )\ndef solves ( ) :\n    n = int ( input ( ) )\n    ans = [ i for i in range ( n , 0 , - 1 ) ]\n    if n % 2 == 0 :\n        for i in range ( n ) :\n            print ( * ans )\n            if i != n - 1 :\n                ans [ i ] , ans [ i + 1 ] = ans [ i + 1 ] , ans [ i ]\n    else :\n        for i in range ( n - 1 ) :\n            print ( * ans )\n            if i != n - 2 :\n                ans [ i + 1 ] , ans [ i + 2 ] = ans [ i + 2 ] , ans [ i + 1 ]\n        ans [ 0 ] , ans [ 1 ] = ans [ 1 ] , ans [ 0 ]\n        print ( * ans )\n"}
{"java": "static void pattern ( int n ) { int i , j ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 2 * n ) ; j ++ ) { if ( i > ( n - j + 1 ) ) System . out . print ( \" \u2581 \" ) ; else System . out . print ( \" * \" ) ; if ( ( i + n ) > j ) System . out . print ( \" \u2581 \" ) ; else System . out . print ( \" * \" ) ; } System . out . println ( \" \" ) ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 2 * n ) ; j ++ ) { if ( i < j ) System . out . print ( \" \u2581 \" ) ; else System . out . print ( \" * \" ) ; if ( i <= ( ( 2 * n ) - j ) ) System . out . print ( \" \u2581 \" ) ; else System . out . print ( \" * \" ) ; } System . out . println ( \" \" ) ; } }", "python": "def pattern ( n ) :\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , 2 * n ) :\n            if i > ( n - j + 1 ) :\n                print ( \" \" , end = ' \u2581 ' ) ;\n            else :\n                print ( \" * \" , end = ' ' ) ;\n            if i + n - 1 > j :\n                print ( \" \" , end = ' \u2581 ' ) ;\n            else :\n                print ( \" * \" , end = ' ' ) ;\n        print ( \" \" ) ;\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , 2 * n ) :\n            if i < j :\n                print ( \" \" , end = ' \u2581 ' ) ;\n            else :\n                print ( \" * \" , end = ' ' ) ;\n            if i < 2 * n - j :\n                print ( \" \" , end = ' \u2581 ' ) ;\n            else :\n                print ( \" * \" , end = ' ' ) ;\n        print ( \" \" ) ;\n"}
{"java": "static void pattern ( int n ) { int i , j ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 2 * n ) ; j ++ ) { if ( i < j ) System . out . print ( \" \u2581 \" ) ; else System . out . print ( \" * \" ) ; if ( i <= ( ( 2 * n ) - j ) ) System . out . print ( \" \u2581 \" ) ; else System . out . print ( \" * \" ) ; } System . out . println ( \" \" ) ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 2 * n ) ; j ++ ) { if ( i > ( n - j + 1 ) ) System . out . print ( \" \u2581 \" ) ; else System . out . print ( \" * \" ) ; if ( ( i + n ) > j ) System . out . print ( \" \u2581 \" ) ; else System . out . print ( \" * \" ) ; } System . out . println ( \" \" ) ; } }", "python": "def pattern ( n ) :\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , 2 * n + 1 ) :\n            if ( i < j ) :\n                print ( \" \" , end = \" \u2581 \" ) ;\n            else :\n                print ( \" * \" , end = \" \" ) ;\n            if ( i <= ( ( 2 * n ) - j ) ) :\n                print ( \" \" , end = \" \u2581 \" ) ;\n            else :\n                print ( \" * \" , end = \" \" ) ;\n        print ( \" \" ) ;\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , 2 * n + 1 ) :\n            if ( i > ( n - j + 1 ) ) :\n                print ( \" \" , end = \" \u2581 \" ) ;\n            else :\n                print ( \" * \" , end = \" \" ) ;\n            if ( ( i + n ) > j ) :\n                print ( \" \" , end = \" \u2581 \" ) ;\n            else :\n                print ( \" * \" , end = \" \" ) ;\n        print ( \" \" ) ;\n"}
{"java": "static void vowelOrConsonant ( char x ) { if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' ) System . out . println ( \" Vowel \" ) ; else System . out . println ( \" Consonant \" ) ; }", "python": "def vowelOrConsonant ( x ) :\n    if ( x == ' a ' or x == ' e ' or x == ' i ' or x == ' o ' or x == ' u ' ) :\n        print ( \" Vowel \" )\n    else :\n        print ( \" Consonant \" )\n"}
{"java": "static void CountWords ( String str , int k ) { int sum = 0 ; int NumberOfWords = 0 ; int counter = 0 ; int len = str . length ( ) ; for ( int i = 0 ; i < len ; ++ i ) { if ( str . charAt ( i ) == ' \u2581 ' ) { if ( sum < k ) { counter ++ ; } sum = 0 ; NumberOfWords ++ ; } else { sum += str . charAt ( i ) ; } } NumberOfWords ++ ; if ( sum < k ) { counter ++ ; } System . out . println ( \" Number \u2581 of \u2581 words \u2581 having \u2581 sum \u2581 \" + \" of \u2581 ASCII \u2581 values \u2581 less \u2581 than \u2581 k \u2581 = \u2581 \" + counter ) ; System . out . println ( \" Number \u2581 of \u2581 words \u2581 having \u2581 sum \u2581 of \u2581 \" + \" ASCII \u2581 values \u2581 greater \u2581 than \u2581 or \u2581 equal \u2581 to \u2581 k \u2581 = \u2581 \" + ( NumberOfWords - counter ) ) ; }", "python": "def CountWords ( str , k ) :\n    sum = 0\n    NumberOfWords = 0\n    counter = 0\n    l = len ( str )\n    for i in range ( l ) :\n        if ( str [ i ] == ' \u2581 ' ) :\n            if ( sum < k ) :\n                counter += 1\n            sum = 0\n            NumberOfWords += 1\n        else :\n            sum += ord ( str [ i ] )\n    NumberOfWords += 1\n    if ( sum < k ) :\n        counter += 1\n    print ( \" Number \u2581 of \u2581 words \u2581 having \u2581 sum \u2581 of \u2581 ASCII \" , \" values \u2581 less \u2581 than \u2581 k \u2581 = \" , counter )\n    print ( \" Number \u2581 of \u2581 words \u2581 having \u2581 sum \u2581 of \u2581 ASCII \u2581 values \" , \" greater \u2581 than \u2581 or \u2581 equal \u2581 to \u2581 k \u2581 = \" , NumberOfWords - counter )\n"}
{"java": "static void FermatFactors ( int n ) { if ( n <= 0 ) { System . out . print ( \" [ \" + n + \" ] \" ) ; return ; } if ( ( n & 1 ) == 0 ) { System . out . print ( \" [ \" + n / 2.0 + \" , \" + 2 + \" ] \" ) ; return ; } int a = ( int ) Math . ceil ( Math . sqrt ( n ) ) ; if ( a * a == n ) { System . out . print ( \" [ \" + a + \" , \" + a + \" ] \" ) ; return ; } int b ; while ( true ) { int b1 = a * a - n ; b = ( int ) ( Math . sqrt ( b1 ) ) ; if ( b * b == b1 ) break ; else a += 1 ; } System . out . print ( \" [ \" + ( a - b ) + \" , \" + ( a + b ) + \" ] \" ) ; return ; }", "python": "def FermatFactors ( n ) :\n    if ( n <= 0 ) :\n        return [ n ]\n    if ( n & 1 ) == 0 :\n        return [ n / 2 , 2 ]\n    a = ceil ( sqrt ( n ) )\n    if ( a * a == n ) :\n        return [ a , a ]\n    while ( True ) :\n        b1 = a * a - n\n        b = int ( sqrt ( b1 ) )\n        if ( b * b == b1 ) :\n            break\n        else :\n            a += 1\n    return [ a - b , a + b ]\n"}
{"java": "static int maxSubStrings ( String s , int k ) { int maxSubStr = 0 , n = s . length ( ) ; for ( int c = 0 ; c < 26 ; c ++ ) { char ch = ( char ) ( ( int ) ' a ' + c ) ; int curr = 0 ; for ( int i = 0 ; i <= n - k ; i ++ ) { if ( s . charAt ( i ) != ch ) continue ; int cnt = 0 ; while ( i < n && s . charAt ( i ) == ch && cnt != k ) { i ++ ; cnt ++ ; } i -- ; if ( cnt == k ) curr ++ ; } maxSubStr = Math . max ( maxSubStr , curr ) ; } return maxSubStr ; }", "python": "def maxSubStrings ( s , k ) :\n    maxSubStr = 0\n    n = len ( s )\n    for c in range ( 27 ) :\n        ch = chr ( ord ( ' a ' ) + c )\n        curr = 0\n        for i in range ( n - k ) :\n            if ( s [ i ] != ch ) :\n                continue\n            cnt = 0\n            while ( i < n and s [ i ] == ch and cnt != k ) :\n                i += 1\n                cnt += 1\n            i -= 1\n            if ( cnt == k ) :\n                curr += 1\n        maxSubStr = max ( maxSubStr , curr )\n    return maxSubStr\n"}
{"java": "static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( \" Invalid \u2581 Input \" ) ; return - 1 ; } int sum = 0 , count = 0 ; while ( n >= 1 ) { count ++ ; sum += n ; n = n - 2 ; } return sum / count ; }", "python": "def averageOdd ( n ) :\n    if ( n % 2 == 0 ) :\n        print ( \" Invalid \u2581 Input \" )\n        return - 1\n    sm = 0\n    count = 0\n    while ( n >= 1 ) :\n        count = count + 1\n        sm = sm + n\n        n = n - 2\n    return sm // count\n"}
{"java": "static int cntSquares ( int n ) { int squares = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { squares += Math . pow ( i , 2 ) ; } return squares ; }", "python": "def cntSquares ( n ) :\n    squares = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        squares += i ** 2 ;\n    return squares ;\n"}
{"java": "static boolean isDivisible ( int n ) { int d ; while ( ( n / 100 ) <= 0 ) { d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 7 ) ) ; } return ( n % 71 == 0 ) ; }", "python": "def isDivisible ( n ) :\n    while n // 100 :\n        d = n % 10\n        n //= 10\n        n = abs ( n - ( d * 7 ) )\n    return ( n % 71 == 0 )\n"}
{"java": "static boolean isDivisible ( int n ) { int d ; while ( ( n / 100 ) > 0 ) { d = n % 10 ; n /= 10 ; n = Math . abs ( n + ( d * 13 ) ) ; } return ( n % 43 == 0 ) ; }", "python": "def isDivisible ( n ) :\n    while n // 100 :\n        d = n % 10\n        n //= 10\n        n = abs ( n + ( d * 13 ) )\n    return ( n % 43 == 0 )\n"}
{"java": "static boolean isDivisible ( int n ) { int d ; while ( ( n / 100 ) > 0 ) { d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; }", "python": "def isDivisible ( n ) :\n    while n // 100 :\n        d = n % 10\n        n //= 10\n        n = abs ( n - ( d * 14 ) )\n    return ( n % 47 == 0 )\n"}
{"java": "static boolean isDivisible ( int n ) { int d ; while ( ( n / 100 ) > 0 ) { d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 3 ) ) ; } return ( n % 31 == 0 ) ; }", "python": "def isDivisible ( n ) :\n    while n // 100 :\n        d = n % 10\n        n //= 10\n        n = abs ( n - ( d * 3 ) )\n    return ( n % 31 == 0 )\n"}
{"java": "static void findMinimumOperation ( int n , int d , int arrays [ ] [ ] ) { int cnt = 0 ; int first = Integer . MIN_VALUE , end = Integer . MAX_VALUE ; while ( n > 0 ) { int arr [ ] = { arrays [ cnt ] [ 0 ] , arrays [ cnt ] [ 1 ] } ; Arrays . sort ( arr ) ; first = Math . max ( first , arr [ 0 ] ) ; end = Math . min ( end , arr [ 1 ] ) ; cnt ++ ; n -- ; } if ( first > end ) System . out . print ( \" - 1\" ) ; else { if ( d >= first && d <= end ) { System . out . print ( \"0\" ) ; } else System . out . print ( Math . min ( Math . abs ( first - d ) , Math . abs ( d - end ) ) ) ; } }", "python": "def findMinimumOperation ( n , d , arrays ) :\n    cnt = 0\n    first = - 10 ** 9\n    end = 10 ** 9\n    while ( n ) :\n        arr = [ arrays [ cnt ] [ 0 ] , arrays [ cnt ] [ 1 ] ]\n        arr = sorted ( arr )\n        first = max ( first , arr [ 0 ] )\n        end = min ( end , arr [ 1 ] )\n        cnt += 1\n        n -= 1\n    if ( first > end ) :\n        print ( \" - 1\" , end = \" \" )\n    else :\n        if ( d >= first and d <= end ) :\n            print ( \"0\" , end = \" \" )\n        else :\n            print ( min ( abs ( first - d ) , abs ( d - end ) ) , end = \" \" )\n"}
{"java": "static void partSort ( int [ ] arr , int N , int a , int b ) { int l = Math . min ( a , b ) ; int r = Math . max ( a , b ) ; int [ ] temp = new int [ r - l + 1 ] ; int j = 0 ; for ( int i = l ; i <= r ; i ++ ) { temp [ j ] = arr [ i ] ; j ++ ; } Arrays . sort ( temp ) ; j = 0 ; for ( int i = l ; i <= r ; i ++ ) { arr [ i ] = temp [ j ] ; j ++ ; } for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + \" \u2581 \" ) ; } }", "python": "def partSort ( arr , N , a , b ) :\n    l = min ( a , b )\n    r = max ( a , b )\n    temp = [ 0 for i in range ( r - l + 1 ) ]\n    j = 0\n    for i in range ( l , r + 1 , 1 ) :\n        temp [ j ] = arr [ i ]\n        j += 1\n    temp . sort ( reverse = False )\n    j = 0\n    for i in range ( l , r + 1 , 1 ) :\n        arr [ i ] = temp [ j ]\n        j += 1\n    for i in range ( 0 , N , 1 ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int maxCountAB ( String s [ ] , int n ) { int A = 0 , B = 0 , BA = 0 , ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String S = s [ i ] ; int L = S . length ( ) ; for ( int j = 0 ; j < L - 1 ; j ++ ) { if ( S . charAt ( j ) == ' A ' && S . charAt ( j + 1 ) == ' B ' ) { ans ++ ; } } if ( S . charAt ( 0 ) == ' B ' && S . charAt ( L - 1 ) == ' A ' ) BA ++ ; else if ( S . charAt ( 0 ) == ' B ' ) B ++ ; else if ( S . charAt ( L - 1 ) == ' A ' ) A ++ ; } if ( BA == 0 ) ans += Math . min ( B , A ) ; else if ( A + B == 0 ) ans += BA - 1 ; else ans += BA + Math . min ( B , A ) ; return ans ; }", "python": "def maxCountAB ( s , n ) :\n    A = 0\n    B = 0\n    BA = 0\n    ans = 0\n    for i in range ( n ) :\n        S = s [ i ]\n        L = len ( S )\n        for j in range ( L - 1 ) :\n            if ( S [ j ] == ' A ' and S [ j + 1 ] == ' B ' ) :\n                ans += 1\n        if ( S [ 0 ] == ' B ' and S [ L - 1 ] == ' A ' ) :\n            BA += 1\n        elif ( S [ 0 ] == ' B ' ) :\n            B += 1\n        elif ( S [ L - 1 ] == ' A ' ) :\n            A += 1\n    if ( BA == 0 ) :\n        ans += min ( B , A )\n    elif ( A + B == 0 ) :\n        ans += BA - 1\n    else :\n        ans += BA + min ( B , A )\n    return ans\n"}
{"java": "static void checkIfPowerIsolated ( int num ) { int input = num ; int count = 0 ; int [ ] factor = new int [ num + 1 ] ; if ( num % 2 == 0 ) { while ( num % 2 == 0 ) { ++ count ; num /= 2 ; } factor [ 2 ] = count ; } for ( int i = 3 ; i * i <= num ; i += 2 ) { count = 0 ; while ( num % i == 0 ) { ++ count ; num /= i ; } if ( count > 0 ) factor [ i ] = count ; } if ( num > 1 ) factor [ num ] = 1 ; int product = 1 ; for ( int i = 0 ; i < num + 1 ; i ++ ) { if ( factor [ i ] > 0 ) product = product * factor [ i ] * i ; } if ( product == input ) System . out . print ( \" Power - isolated \u2581 Integer \\n \" ) ; else System . out . print ( \" Not \u2581 a \u2581 Power - isolated \u2581 Integer \\n \" ) ; }", "python": "def checkIfPowerIsolated ( num ) :\n    input1 = num ;\n    count = 0 ;\n    factor = [ 0 ] * ( num + 1 ) ;\n    if ( num % 2 == 0 ) :\n        while ( num % 2 == 0 ) :\n            count += 1 ;\n            num //= 2 ;\n        factor [ 2 ] = count ;\n    i = 3 ;\n    while ( i * i <= num ) :\n        count = 0 ;\n        while ( num % i == 0 ) :\n            count += 1 ;\n            num //= i ;\n        if ( count > 0 ) :\n            factor [ i ] = count ;\n        i += 2 ;\n    if ( num > 1 ) :\n        factor [ num ] = 1 ;\n    product = 1 ;\n    for i in range ( 0 , len ( factor ) ) :\n        if ( factor [ i ] > 0 ) :\n            product = product * factor [ i ] * i ;\n    if ( product == input1 ) :\n        print ( \" Power - isolated \u2581 Integer \" ) ;\n    else :\n        print ( \" Not \u2581 a \u2581 Power - isolated \u2581 Integer \" ) ;\n"}
{"java": "static boolean isPower ( int a ) { if ( a == 1 ) return true ; for ( int i = 2 ; i * i <= a ; i ++ ) { double val = Math . log ( a ) / Math . log ( i ) ; if ( ( val - ( int ) val ) < 0.00000001 ) return true ; } return false ; }", "python": "def isPower ( a ) :\n    if a == 1 :\n        return True\n    for i in range ( 2 , int ( sqrt ( a ) ) + 1 ) :\n        val = log ( a ) / log ( i )\n        if ( round ( ( val - int ( val ) ) , 8 ) < 0.00000001 ) :\n            return True\n    return False\n"}
{"java": "public static void method ( List < Integer > arr1 , List < Integer > arr2 , int raznic ) { for ( int i = 0 ; i < raznic ; i ++ ) { for ( int j = 0 ; j < arr1 . size ( ) ; j ++ ) { if ( arr1 . get ( j ) == 0 ) { continue ; } else { arr1 . set ( j , arr1 . get ( j ) - 1 ) ; } } } }", "python": "def makeAtriangle ( x , y , z ) :\n    if x + y <= z :\n        return z - ( x + y ) + 1\n    elif x + z <= y :\n        return y - ( x + z ) + 1\n    elif y + z <= x :\n        return x - ( y + z ) + 1\n    else :\n        return 0\n"}
{"java": "public static void main ( String ... args ) { A . main ( ) ; }", "python": "def main ( ) :\n    A = list ( map ( int , input ( ) . split ( ) ) )\n    ans = abs ( A [ 0 ] + A [ 1 ] - A [ 2 ] - A [ 3 ] )\n    for i in range ( 4 ) :\n        for j in range ( 4 ) :\n            if i == j :\n                continue\n            now = 0\n            for t in range ( 4 ) :\n                if t == i or t == j :\n                    now += A [ t ]\n                else :\n                    now -= A [ t ]\n            if abs ( now ) < ans :\n                ans = abs ( now )\n    print ( ans )\n"}
{"java": "static int maxProduct ( int arr [ ] , int n ) { int minVal = arr [ 0 ] ; int maxVal = arr [ 0 ] ; int maxProduct = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { int temp = maxVal ; maxVal = minVal ; minVal = temp ; } maxVal = Math . max ( arr [ i ] , maxVal * arr [ i ] ) ; minVal = Math . min ( arr [ i ] , minVal * arr [ i ] ) ; maxProduct = Math . max ( maxProduct , maxVal ) ; } return maxProduct ; }", "python": "def maxProduct ( arr , n ) :\n    minVal = arr [ 0 ]\n    maxVal = arr [ 0 ]\n    maxProduct = arr [ 0 ]\n    for i in range ( 1 , n , 1 ) :\n        if ( arr [ i ] < 0 ) :\n            temp = maxVal\n            maxVal = minVal\n            minVal = temp\n        maxVal = max ( arr [ i ] , maxVal * arr [ i ] )\n        minVal = min ( arr [ i ] , minVal * arr [ i ] )\n        maxProduct = max ( maxProduct , maxVal )\n    return maxProduct\n"}
{"java": "static void findNums ( int arr [ ] , int n ) { int S = 0 , X = 0 ; for ( int i = 0 ; i < n ; i ++ ) { S += arr [ i ] ; X ^= arr [ i ] ; } System . out . println ( X + \" \u2581 \" + ( X + S ) ) ; }", "python": "def findNums ( arr , n ) :\n    S = 0 ; X = 0 ;\n    for i in range ( n ) :\n        S += arr [ i ] ;\n        X ^= arr [ i ] ;\n    print ( X , X + S ) ;\n"}
{"java": "static float calcProbability ( int M [ ] [ ] , int k ) { float dp [ ] [ ] = new float [ m ] [ n ] ; float sum [ ] = new float [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { dp [ 0 ] [ j ] = M [ 0 ] [ j ] ; sum [ 0 ] = sum [ 0 ] + dp [ 0 ] [ j ] ; } for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] += dp [ i - 1 ] [ j ] / sum [ i - 1 ] + M [ i ] [ j ] ; sum [ i ] += dp [ i ] [ j ] ; } } return dp [ n - 1 ] [ k - 1 ] / sum [ n - 1 ] ; }", "python": "def calcProbability ( M , k ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( m ) ]\n    Sum = [ 0 for i in range ( n ) ]\n    for j in range ( n ) :\n        dp [ 0 ] [ j ] = M [ 0 ] [ j ]\n        Sum [ 0 ] += dp [ 0 ] [ j ]\n    for i in range ( 1 , m ) :\n        for j in range ( n ) :\n            dp [ i ] [ j ] += ( dp [ i - 1 ] [ j ] / Sum [ i - 1 ] + M [ i ] [ j ] )\n            Sum [ i ] += dp [ i ] [ j ]\n    return dp [ n - 1 ] [ k - 1 ] / Sum [ n - 1 ]\n"}
{"java": "static int NumberOfRectangles ( int n , int m ) { if ( n % 2 == 0 ) return ( n / 2 ) * m ; else if ( m % 2 == 0 ) return ( m / 2 ) * n ; return ( n * m - 1 ) / 2 ; }", "python": "def NumberOfRectangles ( n , m ) :\n    if ( n % 2 == 0 ) :\n        return ( n / 2 ) * m\n    elif ( m % 2 == 0 ) :\n        return ( m // 2 ) * n\n    return ( n * m - 1 ) // 2\n"}
{"java": "static float geometricMean ( int [ ] arr , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( float ) Math . log ( arr [ i ] ) ; sum = sum / n ; return ( float ) Math . exp ( sum ) ; }", "python": "def geometricMean ( arr , n ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum = sum + math . log ( arr [ i ] ) ;\n    sum = sum / n ;\n    return math . exp ( sum ) ;\n"}
{"java": "public static int findLCM ( int a , int b ) { int lar = Math . max ( a , b ) ; int small = Math . min ( a , b ) ; for ( int i = lar ; ; i += lar ) { if ( i % small == 0 ) return i ; } }", "python": "def findLCM ( a , b ) :\n    lar = max ( a , b )\n    small = min ( a , b )\n    i = lar\n    while ( 1 ) :\n        if ( i % small == 0 ) :\n            return i\n        i += lar\n"}
{"java": "static void palindrome ( int arr [ ] , int n ) { int flag = 0 ; for ( int i = 0 ; i <= n / 2 && n != 0 ; i ++ ) { if ( arr [ i ] != arr [ n - i - 1 ] ) { flag = 1 ; break ; } } if ( flag == 1 ) System . out . println ( \" Not \u2581 Palindrome \" ) ; else System . out . println ( \" Palindrome \" ) ; }", "python": "def palindrome ( arr , n ) :\n    flag = 0 ;\n    i = 0 ;\n    while ( i <= n // 2 and n != 0 ) :\n        if ( arr [ i ] != arr [ n - i - 1 ] ) :\n            flag = 1 ;\n            break ;\n        i += 1 ;\n    if ( flag == 1 ) :\n        print ( \" Not \u2581 Palindrome \" ) ;\n    else :\n        print ( \" Palindrome \" ) ;\n"}
{"java": "static int numberSequence ( int n ) { int num = ( int ) ( Math . pow ( 4 , n ) - Math . pow ( 2 , n ) ) - 1 ; return num ; }", "python": "def numberSequence ( n ) :\n    num = pow ( 4 , n ) - pow ( 2 , n ) - 1\n    return num\n"}
{"java": "public static int find ( int k , int x ) { int low = 1 ; int up = k ; while ( low < up ) { int mid = ( low + up ) / 2 ; if ( a [ mid ] <= x ) low = mid + 1 ; else up = mid ; } return low ; }", "python": "def win ( x , y ) :\n    if x < y :\n        x , y = y , x\n    if x == y :\n        return False\n    if x >= 2 * y :\n        return True\n    return not win ( y , x - y )\n"}
{"java": "static void TwentyoneMatchstick ( int arr [ ] , int N ) { for ( int i = 0 ; i < N ; i += 1 ) { System . out . print ( 5 - arr [ i ] + \" \u2581 \" ) ; } System . out . println ( ) ; }", "python": "def TwentyoneMatchstick ( arr , N ) :\n    for i in range ( N ) :\n        print ( 5 - arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int Race ( int B , int C ) { int result = 0 ; result = ( ( C * 100 ) / B ) ; return 100 - result ; }", "python": "def Race ( B , C ) :\n    result = 0 ;\n    result = ( ( C * 100 ) // B )\n    return 100 - result\n"}
{"java": "public static void solve ( int k , int rest , int cost ) { if ( rest == 0 ) { min = Math . min ( min , cost ) ; return ; } if ( k == 3 || rest < 0 ) return ; for ( int i = 0 ; i <= 5000 / w [ k ] ; i ++ ) { solve ( k + 1 , rest - w [ k ] * i , cost + ( int ) ( ( i - i % e [ k ] ) * r [ k ] * p [ k ] + i % e [ k ] * p [ k ] ) ) ; } }", "python": "def main ( readline = stdin . readline ) :\n    price_table = ( 0 , 0 , 380 , 550 , 760 , 850 , 1100 , 1230 , 1400 , 1610 , 1520 , 1950 , 1870 , 2070 , 2250 , 2244 , 2620 , 2624 , 2794 , 3004 , 3040 , 3344 , 3390 , 3590 , 3740 , 3764 , 4120 , 4114 , 4314 , 4494 , 4488 , 4864 , 4868 , 5038 , 5248 , 5284 , 5588 , 5634 , 5834 , 5984 , 6008 , 6364 , 6358 , 6558 , 6738 , 6732 , 7108 , 7112 , 7282 , 7492 , 7528 )\n    while 1 :\n        weight = int ( readline ( ) )\n        if not weight :\n            exit ( )\n        print ( price_table [ weight // 100 ] )\n"}
{"java": "static float findRadiusOfcircumcircle ( float l , float b ) { if ( l < 0 || b < 0 ) return - 1 ; float radius = ( float ) Math . sqrt ( Math . pow ( l , 2 ) + Math . pow ( b , 2 ) ) / 2 ; return radius ; }", "python": "def findRadiusOfcircumcircle ( l , b ) :\n    if ( l < 0 or b < 0 ) :\n        return - 1 ;\n    radius = ( math . sqrt ( pow ( l , 2 ) + pow ( b , 2 ) ) / 2 ) ;\n    return radius ;\n"}
{"java": "static int freqPairs ( int arr [ ] , int n ) { int max = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int freq [ ] = new int [ max + 1 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 2 * arr [ i ] ; j <= max ; j += arr [ i ] ) { if ( freq [ j ] >= 1 ) { count += freq [ j ] ; } } if ( freq [ arr [ i ] ] > 1 ) { count += freq [ arr [ i ] ] - 1 ; freq [ arr [ i ] ] -- ; } } return count ; }", "python": "def freqPairs ( arr , n ) :\n    max = arr [ 0 ]\n    for i in range ( len ( arr ) ) :\n        if arr [ i ] > max :\n            max = arr [ i ]\n    freq = [ 0 for i in range ( max + 1 ) ]\n    count = 0\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    for i in range ( n ) :\n        for j in range ( 2 * arr [ i ] , max + 1 , arr [ i ] ) :\n            if ( freq [ j ] >= 1 ) :\n                count += freq [ j ]\n        if ( freq [ arr [ i ] ] > 1 ) :\n            count += freq [ arr [ i ] ] - 1\n            freq [ arr [ i ] ] -= 1\n    return count\n"}
{"java": "public static int min ( long a , long b ) { return a < b ? ( int ) a : ( int ) b ; }", "python": "def solve ( ) :\n    str , intelligence , exp = map ( int , input ( ) . split ( ) )\n    minAddS = max ( 0 , ( exp + intelligence - str + 2 ) // 2 )\n    print ( max ( 0 , exp - minAddS + 1 ) )\n"}
{"java": "static void firstNonRepeating ( int arr [ ] , int n ) { Map < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( arr [ i ] ) ) { m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } else { m . put ( arr [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > x : m . entrySet ( ) ) if ( x . getValue ( ) == 1 ) System . out . print ( x . getKey ( ) + \" \u2581 \" ) ; }", "python": "def firstNonRepeating ( arr , n ) :\n    mp = { }\n    for i in range ( n ) :\n        if arr [ i ] not in mp :\n            mp [ arr [ i ] ] = 0\n        mp [ arr [ i ] ] += 1\n    for x in mp :\n        if ( mp [ x ] == 1 ) :\n            print ( x , end = \" \u2581 \" )\n"}
{"java": "public static boolean possible ( int n ) { if ( n > 3 ) { int sum = ( n * ( n + 1 ) ) / 2 ; if ( sum % 3 == 0 ) { return true ; } } return false ; }", "python": "def possible ( n ) :\n    if ( n > 3 ) :\n        sum = ( n * ( n + 1 ) ) // 2 ;\n        if ( sum % 3 == 0 ) :\n            return True ;\n    return False ;\n"}
{"java": "static void greaterK ( int n , int k ) { int [ ] p = new int [ String . valueOf ( n ) . length ( ) + 2 ] ; int index = 0 ; int x = n ; while ( x > 0 ) { p [ index ] = ( int ) ( x % k ) ; x /= k ; index ++ ; } int idx = 0 ; for ( int i = 0 ; i < p . length - 1 ; ++ i ) { if ( p [ i ] >= 2 ) { p [ i ] = 0 ; p [ i + 1 ] ++ ; for ( int j = idx ; j < i ; ++ j ) { p [ j ] = 0 ; } idx = i + 1 ; } if ( p [ i ] == k ) { p [ i ] = 0 ; p [ i + 1 ] ++ ; } } int j = p . length - 1 ; if ( p [ j ] >= 2 ) { p [ index ] = 1 ; index ++ ; } int ans = 0 ; for ( int i = p . length - 1 ; i >= 0 ; -- i ) { ans = ans * k + p [ i ] ; } System . out . print ( ans + \" \\n \" ) ; }", "python": "def greaterK ( n , k ) :\n    index = 0\n    p = [ 0 for i in range ( n + 2 ) ]\n    x = n\n    while ( x > 0 ) :\n        p [ index ] = x % k\n        x //= k\n        index += 1\n    idx = 0\n    for i in range ( 0 , len ( p ) - 1 , 1 ) :\n        if ( p [ i ] >= 2 ) :\n            p [ i ] = 0\n            p [ i + 1 ] += 1\n            for j in range ( idx , i , 1 ) :\n                p [ j ] = 0\n            idx = i + 1\n        if ( p [ i ] == k ) :\n            p [ i ] = 0\n            p [ i + 1 ] += 1\n    j = len ( p ) - 1\n    if ( p [ j ] >= 2 ) :\n        p [ index ] = 1\n        index += 1\n    ans = 0\n    i = len ( p ) - 1\n    while ( i >= 0 ) :\n        ans = ans * k + p [ i ]\n        i -= 1\n    print ( ans )\n"}
{"java": "public static void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; sum += a [ i ] ; } double res = ( double ) sum / n ; if ( ( res - ( int ) res ) != 0 ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } }", "python": "def main ( ) :\n    s = sys . stdin . read ( ) . strip ( ) . split ( ' \\n ' )\n    r = [ ]\n    for i in s [ 2 : : 2 ] :\n        l = list ( map ( int , i . split ( ) ) )\n        r . append ( int ( bool ( sum ( l ) % len ( l ) ) ) )\n    return r\n"}
{"java": "private static long solve ( int N , long [ ] A ) { long area = 0 ; Arrays . sort ( A ) ; for ( int i = N - 2 ; i >= 0 ; i -- ) { if ( A [ i ] == A [ i + 1 ] ) { if ( area == 0 ) { area = A [ i ] ; i -= 1 ; } else { area *= A [ i ] ; return area ; } } } return 0 ; }", "python": "def main ( ) :\n    n = int ( input ( ) )\n    lst = list ( map ( int , input ( ) . rstrip ( ) . split ( ) ) )\n    cnt = sorted ( Counter ( lst ) . most_common ( ) , reverse = True )\n    ans = [ ]\n    for i , j in cnt :\n        if len ( ans ) >= 2 :\n            break\n        if j >= 4 :\n            ans += [ i ] + [ i ]\n        elif j >= 2 :\n            ans += [ i ]\n    print ( 0 if ans == [ ] else ans [ 0 ] * ans [ 1 ] )\n"}
{"java": "static boolean maxProduct ( int arr [ ] , int n , int p ) { int minVal = arr [ 0 ] ; int maxVal = arr [ 0 ] ; int maxProduct = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { int temp = maxVal ; maxVal = minVal ; minVal = temp ; } maxVal = Math . max ( arr [ i ] , maxVal * arr [ i ] ) ; minVal = Math . min ( arr [ i ] , minVal * arr [ i ] ) ; if ( minVal == p || maxVal == p ) { return true ; } maxProduct = Math . max ( maxProduct , maxVal ) ; } return false ; }", "python": "def maxProduct ( arr , n , p ) :\n    minVal = arr [ 0 ]\n    maxVal = arr [ 0 ]\n    maxProduct = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] < 0 ) :\n            maxVal , minVal = minVal , maxVal\n        maxVal = max ( arr [ i ] , maxVal * arr [ i ] )\n        minVal = min ( arr [ i ] , minVal * arr [ i ] )\n        if ( minVal == p or maxVal == p ) :\n            return True\n        maxProduct = max ( maxProduct , maxVal )\n    return False\n"}
{"java": "static boolean isTriPerfect ( int n ) { int sum = 1 + n ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) { if ( n / i == i ) sum = sum + i ; else sum = sum + i + n / i ; } i += 1 ; } if ( sum == 3 * n & n != 1 ) return true ; else return false ; }", "python": "def isTriPerfect ( n ) :\n    sum = 1 + n\n    i = 2\n    while i * i <= n :\n        if n % i == 0 :\n            if n / i == i :\n                sum = sum + i\n            else :\n                sum = sum + i + n / i\n        i += 1\n    return ( True if sum == 3 * n and n != 1 else False )\n"}
{"java": "static int maxPrimefactorNum ( int N ) { int arr [ ] = new int [ N + 5 ] ; Arrays . fill ( arr , 0 ) ; for ( int i = 2 ; i * i <= N ; i ++ ) { if ( arr [ i ] == 0 ) { for ( int j = 2 * i ; j <= N ; j += i ) { arr [ j ] ++ ; } } arr [ i ] = 1 ; } int maxval = 0 , maxint = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( arr [ i ] > maxval ) { maxval = arr [ i ] ; maxint = i ; } } return maxint ; }", "python": "def maxPrimefactorNum ( N ) :\n    arr = [ 0 for i in range ( N + 5 ) ]\n    for i in range ( 2 , int ( sqrt ( N ) ) + 1 , 1 ) :\n        if ( arr [ i ] == 0 ) :\n            for j in range ( 2 * i , N + 1 , i ) :\n                arr [ j ] += 1\n        arr [ i ] = 1\n    maxval = 0\n    maxint = 1\n    for i in range ( 1 , N + 1 , 1 ) :\n        if ( arr [ i ] > maxval ) :\n            maxval = arr [ i ]\n            maxint = i\n    return maxint\n"}
{"java": "static int trailing_zeros ( int N ) { int count_of_two = 0 , count_of_five = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int val = i ; while ( val % 2 == 0 && val > 0 ) { val /= 2 ; count_of_two += i ; } while ( val % 5 == 0 && val > 0 ) { val /= 5 ; count_of_five += i ; } } int ans = Math . min ( count_of_two , count_of_five ) ; return ans ; }", "python": "def trailing_zeros ( N ) :\n    count_of_two = 0\n    count_of_five = 0\n    for i in range ( 1 , N + 1 , 1 ) :\n        val = i\n        while ( val % 2 == 0 and val > 0 ) :\n            val /= 2\n            count_of_two += i\n        while ( val % 5 == 0 and val > 0 ) :\n            val /= 5\n            count_of_five += i\n    ans = min ( count_of_two , count_of_five )\n    return ans\n"}
{"java": "static void findTriangles ( int n ) { int num = n ; System . out . print ( num + \" \u2581 \" ) ; System . out . print ( num * ( num - 4 ) * ( num - 5 ) / 6 ) ; }", "python": "def findTriangles ( n ) :\n    num = n\n    print ( num , end = \" \u2581 \" )\n    print ( num * ( num - 4 ) * ( num - 5 ) // 6 )\n"}
{"java": "static void MinimumMaximumPairs ( int n , int m ) { int max_pairs = ( ( n - m + 1 ) * ( n - m ) ) / 2 ; int min_pairs = m * ( ( ( n - m ) / m + 1 ) * ( ( n - m ) / m ) ) / 2 + ( int ) Math . ceil ( ( double ) ( ( n - m ) / ( double ) ( m ) ) ) * ( ( n - m ) % m ) ; System . out . println ( \" Minimum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \" + min_pairs ) ; System . out . println ( \" Maximum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \" + max_pairs ) ; }", "python": "def MinimumMaximumPairs ( n , m ) :\n    max_pairs = ( ( n - m + 1 ) * ( n - m ) ) // 2 ;\n    min_pairs = ( m * ( ( ( n - m ) // m + 1 ) * ( ( n - m ) // m ) ) // 2 + ceil ( ( n - m ) / ( m ) ) * ( ( n - m ) % m ) )\n    print ( \" Minimum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \" , min_pairs )\n    print ( \" Maximum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \" , max_pairs )\n"}
{"java": "static int totalSubSets ( int n , int l , int r ) { int zero = ( int ) Math . floor ( ( double ) r / 3 ) - ( int ) Math . ceil ( ( double ) l / 3 ) + 1 ; int one = ( int ) Math . floor ( ( double ) ( r - 1 ) / 3 ) - ( int ) Math . ceil ( ( double ) ( l - 1 ) / 3 ) + 1 ; int two = ( int ) Math . floor ( ( double ) ( r - 2 ) / 3 ) - ( int ) Math . ceil ( ( double ) ( l - 2 ) / 3 ) + 1 ; int [ ] [ ] dp = new int [ n ] [ 3 ] ; dp [ 0 ] [ 0 ] = zero ; dp [ 0 ] [ 1 ] = one ; dp [ 0 ] [ 2 ] = two ; for ( int i = 1 ; i < n ; ++ i ) { dp [ i ] [ 0 ] = ( ( dp [ i - 1 ] [ 0 ] * zero ) + ( dp [ i - 1 ] [ 1 ] * two ) + ( dp [ i - 1 ] [ 2 ] * one ) ) % MOD ; dp [ i ] [ 1 ] = ( ( dp [ i - 1 ] [ 0 ] * one ) + ( dp [ i - 1 ] [ 1 ] * zero ) + ( dp [ i - 1 ] [ 2 ] * two ) ) % MOD ; dp [ i ] [ 2 ] = ( ( dp [ i - 1 ] [ 0 ] * two ) + ( dp [ i - 1 ] [ 1 ] * one ) + ( dp [ i - 1 ] [ 2 ] * zero ) ) % MOD ; } return dp [ n - 1 ] [ 0 ] ; }", "python": "def totalSubSets ( n , l , r ) :\n    MOD = 1000000007 ;\n    zero = ( math . floor ( r / 3 ) - math . ceil ( l / 3 ) + 1 ) ;\n    one = ( math . floor ( ( r - 1 ) / 3 ) - math . ceil ( ( l - 1 ) / 3 ) + 1 ) ;\n    two = ( math . floor ( ( r - 2 ) / 3 ) - math . ceil ( ( l - 2 ) / 3 ) + 1 ) ;\n    dp = [ [ 0 for x in range ( 3 ) ] for y in range ( n ) ]\n    dp [ 0 ] [ 0 ] = zero ;\n    dp [ 0 ] [ 1 ] = one ;\n    dp [ 0 ] [ 2 ] = two ;\n    for i in range ( 1 , n ) :\n        dp [ i ] [ 0 ] = ( ( dp [ i - 1 ] [ 0 ] * zero ) + ( dp [ i - 1 ] [ 1 ] * two ) + ( dp [ i - 1 ] [ 2 ] * one ) ) % MOD ;\n        dp [ i ] [ 1 ] = ( ( dp [ i - 1 ] [ 0 ] * one ) + ( dp [ i - 1 ] [ 1 ] * zero ) + ( dp [ i - 1 ] [ 2 ] * two ) ) % MOD ;\n        dp [ i ] [ 2 ] = ( ( dp [ i - 1 ] [ 0 ] * two ) + ( dp [ i - 1 ] [ 1 ] * one ) + ( dp [ i - 1 ] [ 2 ] * zero ) ) % MOD ;\n    return dp [ n - 1 ] [ 0 ] ;\n"}
{"java": "static int getLargestSum ( int N ) { int max_sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = i + 1 ; j <= N ; j ++ ) { if ( i * j % ( i + j ) == 0 ) max_sum = Math . max ( max_sum , i + j ) ; } } return max_sum ; }", "python": "def getLargestSum ( N ) :\n    max_sum = 0\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( i + 1 , N + 1 , 1 ) :\n            if ( i * j % ( i + j ) == 0 ) :\n                max_sum = max ( max_sum , i + j )\n    return max_sum\n"}
{"java": "static void print ( int n , int k ) { System . out . print ( k + \" \u2581 \" ) ; for ( int i = 2 ; i <= n ; i ++ ) { int x = ( int ) ( Math . pow ( k , i ) - Math . pow ( k , i - 1 ) ) ; System . out . print ( x + \" \u2581 \" ) ; } }", "python": "def printf ( n , k ) :\n    print ( int ( k ) , end = \" \u2581 \" )\n    for i in range ( 2 , n + 1 , 1 ) :\n        x = pow ( k , i ) - pow ( k , i - 1 )\n        print ( int ( x ) , end = \" \u2581 \" )\n"}
{"java": "static int countPairs ( int arr [ ] , int n ) { int twoCount = 0 , twoGrCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 2 ) twoCount ++ ; else if ( arr [ i ] > 2 ) twoGrCount ++ ; } return twoCount * twoGrCount + ( twoGrCount * ( twoGrCount - 1 ) ) / 2 ; }", "python": "def CountPairs ( arr , n ) :\n    twoCount = 0\n    twoGrCount = 0\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 2 ) :\n            twoCount += 1\n        elif ( arr [ i ] > 2 ) :\n            twoGrCount += 1\n    return ( ( twoCount * twoGrCount ) + ( twoGrCount * ( twoGrCount - 1 ) ) / 2 )\n"}
{"java": "static int sizeSubSet ( int a [ ] , int k , int n ) { Arrays . sort ( a ) ; HashMap < Integer , Integer > s = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % k != 0 || s . get ( a [ i ] / k ) == null ) s . put ( a [ i ] , s . get ( a [ i ] ) == null ? 1 : s . get ( a [ i ] ) + 1 ) ; } return s . size ( ) ; }", "python": "def sizeSubSet ( a , k , n ) :\n    a . sort ( )\n    s = set ( )\n    for i in range ( n ) :\n        if ( a [ i ] % k != 0 or a [ i ] // k not in s ) :\n            s . add ( a [ i ] )\n    return len ( s )\n"}
{"java": "static int countSubarray ( int arr [ ] , int n , int k ) { int start = 0 , end = 0 ; int count = 0 , sum = arr [ 0 ] ; while ( start < n && end < n ) { if ( sum < k ) { end ++ ; if ( end >= start ) count += end - start ; if ( end < n ) sum += arr [ end ] ; } else { sum -= arr [ start ] ; start ++ ; } } return count ; }", "python": "def countSubarrays ( arr , n , k ) :\n    start = 0\n    end = 0\n    count = 0\n    sum = arr [ 0 ]\n    while ( start < n and end < n ) :\n        if ( sum < k ) :\n            end += 1\n            if ( end >= start ) :\n                count += end - start\n            if ( end < n ) :\n                sum += arr [ end ]\n        else :\n            sum -= arr [ start ]\n            start += 1\n    return count\n"}
{"java": "public static String printVertically ( String s ) { String result = \" \" ; HashMap < Integer , String > map = new HashMap < > ( ) ; Scanner sc = new Scanner ( s ) ; int max = Integer . MIN_VALUE ; while ( sc . hasNext ( ) ) { String st = sc . next ( ) ; max = Math . max ( max , st . length ( ) ) ; } sc = new Scanner ( s ) ; while ( sc . hasNext ( ) ) { String st = sc . next ( ) ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st . charAt ( i ) ; map . put ( i , map . getOrDefault ( i , \" \" ) + ch ) ; } for ( int i = st . length ( ) ; i < max ; i ++ ) { map . put ( i , map . getOrDefault ( i , \" \" ) + \" $ \" ) ; } } for ( int i = 0 ; i < max ; i ++ ) { String a = map . get ( i ) ; result += a + \" \u2581 \" ; } return result ; }", "python": "def printVertically ( s ) :\n    s = s . split ( \" \u2581 \" )\n    result = \" \"\n    map = dict ( )\n    mx = 0\n    for i in s :\n        mx = max ( mx , len ( i ) )\n    n = mx\n    i = 0\n    while ( i < mx ) :\n        for j in s :\n            if i >= len ( j ) :\n                map [ i ] = map . get ( i , \" \" ) + \" $ \"\n            else :\n                map [ i ] = map . get ( i , \" \" ) + j [ i ]\n        i += 1\n    for j in range ( mx ) :\n        result += map [ j ] + \" \u2581 \"\n    return result\n"}
{"java": "static boolean pronic_check ( int n ) { int x = ( int ) ( Math . sqrt ( n ) ) ; if ( x * ( x + 1 ) == n ) return true ; else return false ; }", "python": "def pronic_check ( n ) :\n    x = ( int ) ( math . sqrt ( n ) )\n    if ( x * ( x + 1 ) == n ) :\n        return True\n    else :\n        return False\n"}
{"java": "static int countSegments ( int a [ ] , int n , int x ) { boolean flag = false ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) { flag = true ; } else { if ( flag ) count += 1 ; flag = false ; } } if ( flag ) count += 1 ; return count ; }", "python": "def countSegments ( a , n , x ) :\n    flag = False\n    count = 0\n    for i in range ( n ) :\n        if ( a [ i ] > x ) :\n            flag = True\n        else :\n            if ( flag ) :\n                count += 1\n            flag = False\n    if ( flag ) :\n        count += 1\n    return count\n"}
{"java": "static int printPattern ( int i , int j , int n ) { if ( j >= n ) { return 0 ; } if ( i >= n ) { return 1 ; } if ( j == i || j == n - 1 - i ) { if ( i == n - 1 - j ) { System . out . print ( \" / \" ) ; } else { System . out . print ( \" \\ \\\" ) ; } } else { System . out . print ( \" * \" ) ; } if ( printPattern ( i , j + 1 , n ) == 1 ) { return 1 ; } System . out . println ( ) ; return printPattern ( i + 1 , 0 , n ) ; }", "python": "def printPattern ( i , j , n ) :\n    if ( j >= n ) :\n        return 0\n    if ( i >= n ) :\n        return 1\n    if ( j == i or j == n - 1 - i ) :\n        if ( i == n - 1 - j ) :\n            print ( \" / \" , end = \" \" )\n        else :\n            print ( \" \\ \\ \" , end = \" \" )\n    else :\n        print ( \" * \" , end = \" \" )\n    if ( printPattern ( i , j + 1 , n ) == 1 ) :\n        return 1\n    print ( )\n    return printPattern ( i + 1 , 0 , n )\n"}
{"java": "static void printPattern ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) System . out . print ( i ) ; System . out . print ( \" \\n \" ) ; } for ( int i = n - 1 ; i > 0 ; i -- ) { for ( int j = i ; j > 0 ; j -- ) System . out . print ( i ) ; System . out . print ( \" \\n \" ) ; } }", "python": "def printPattern ( n ) :\n    for i in range ( n + 1 ) :\n        for j in range ( 1 , i + 1 ) :\n            print ( i , end = \" \" )\n        print ( \" \" )\n    for i in range ( n - 1 , 0 , - 1 ) :\n        for j in range ( i , 0 , - 1 ) :\n            print ( i , end = \" \" )\n        print ( \" \" )\n"}
{"java": "static void ladder_pattern ( int N ) { for ( int i = 0 ; i <= N ; i ++ ) { System . out . println ( \" * \u2581 \u2581 \u2581 * \" ) ; System . out . println ( \" * \u2581 \u2581 \u2581 * \" ) ; if ( i < N ) { System . out . println ( \" * * * * * \" ) ; } } }", "python": "def ladder_pattern ( N ) :\n    for i in range ( N + 1 ) :\n        print ( \" * \u2581 \u2581 \u2581 * \" ) ;\n        print ( \" * \u2581 \u2581 \u2581 * \" ) ;\n        if ( i < N ) :\n            print ( \" * * * * * \" ) ;\n"}
{"java": "static int noOfDeletions ( String str , char k ) { int ans = 0 , cnt = 0 , pos = 0 ; while ( pos < str . length ( ) && str . charAt ( pos ) != k ) { pos ++ ; } int i = pos ; while ( i < str . length ( ) ) { while ( i < str . length ( ) && str . charAt ( i ) == k ) { i = i + 1 ; } ans = ans + cnt ; cnt = 0 ; while ( i < str . length ( ) && str . charAt ( i ) != k ) { i = i + 1 ; cnt = cnt + 1 ; } } return ans ; }", "python": "def noOfDeletions ( string , k ) :\n    ans = 0 ; cnt = 0 ; pos = 0 ;\n    while ( pos < len ( string ) and string [ pos ] != k ) :\n        pos += 1 ;\n    i = pos ;\n    while ( i < len ( string ) ) :\n        while ( i < len ( string ) and string [ i ] == k ) :\n            i = i + 1 ;\n        ans = ans + cnt ;\n        cnt = 0 ;\n        while ( i < len ( string ) and string [ i ] != k ) :\n            i = i + 1 ;\n            cnt = cnt + 1 ;\n    return ans ;\n"}
{"java": "private static String id ( int x ) { StringBuilder sb = new StringBuilder ( ) ; int n = x / 100 ; sb . append ( \" ai1333\" ) ; for ( int t = 0 ; t < n ; t ++ ) { sb . append ( \"3\" ) ; } return sb . toString ( ) ; }", "python": "def f ( n ) :\n    if n == 0 :\n        return ' ai1333'\n    else :\n        a = f ( n - 1 )\n        b = a + '3'\n        return b\n"}
{"java": "static void justDoIt ( ) { int n = sc . nextInt ( ) , k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; for ( int i = k ; i < n ; i ++ ) { if ( arr [ i ] != arr [ k - 1 ] ) { System . out . println ( - 1 ) ; return ; } } int i = k - 2 ; while ( i >= 0 && arr [ i ] == arr [ k - 1 ] ) i -- ; System . out . println ( i + 1 ) ; }", "python": "def main ( ) :\n    n , k = list ( map ( int , input ( ) . split ( ' \u2581 ' ) ) )\n    elems = list ( map ( int , input ( ) . split ( ' \u2581 ' ) ) )\n    all_same = lambda arr : all ( [ x == arr [ 0 ] for x in arr ] )\n    if all_same ( elems ) :\n        print ( 0 )\n        return\n    if k == 1 :\n        print ( - 1 )\n        return\n    if not all_same ( elems [ k - 1 : ] ) :\n        print ( - 1 )\n        return\n    target = elems [ - 1 ]\n    to_delete = elems [ 0 : k - 1 ]\n    while to_delete and to_delete [ - 1 ] == target :\n        to_delete . pop ( )\n    print ( len ( to_delete ) )\n"}
{"java": "static long calc ( long a , long b ) { long x = ( a / 3 ) * b ; long y = ( ( a - a / 3 ) / 2 ) * b ; long z = ( a - ( a / 3 ) - ( a - a / 3 ) / 2 ) * b ; ArrayList < Long > vals = new ArrayList < > ( ) ; vals . add ( x ) ; vals . add ( y ) ; vals . add ( z ) ; Collections . sort ( vals ) ; long min = vals . get ( 2 ) - vals . get ( 0 ) ; for ( long i = 1 ; i < a ; i ++ ) { x = i * b ; y = ( a - i ) * ( b / 2 ) ; z = ( a - i ) * ( b - b / 2 ) ; vals = new ArrayList < > ( ) ; vals . add ( x ) ; vals . add ( y ) ; vals . add ( z ) ; Collections . sort ( vals ) ; min = Long . min ( min , vals . get ( 2 ) - vals . get ( 0 ) ) ; } return min ; }", "python": "def main ( ) :\n    H , W = map ( int , input ( ) . split ( ) )\n    ans = [ ]\n    target = H * W / 3\n    if ( H % 3 ) * ( W % 3 ) == 0 :\n        ans . append ( 0 )\n    else :\n        ans . append ( H )\n        ans . append ( W )\n        a1 = math . floor ( H / 3 ) * W\n        a2 = ( W // 2 ) * ( H - math . floor ( H / 3 ) )\n        a3 = H * W - a1 - a2\n        ans . append ( max ( a1 , a2 , a3 ) - min ( a1 , a2 , a3 ) )\n        a1 = math . ceil ( H / 3 ) * W\n        a2 = ( W // 2 ) * ( H - math . ceil ( H / 3 ) )\n        a3 = H * W - a1 - a2\n        ans . append ( max ( a1 , a2 , a3 ) - min ( a1 , a2 , a3 ) )\n        H , W = W , H\n        a1 = math . floor ( H / 3 ) * W\n        a2 = ( W // 2 ) * ( H - math . floor ( H / 3 ) )\n        a3 = H * W - a1 - a2\n        ans . append ( max ( a1 , a2 , a3 ) - min ( a1 , a2 , a3 ) )\n        a1 = math . ceil ( H / 3 ) * W\n        a2 = ( W // 2 ) * ( H - math . ceil ( H / 3 ) )\n        a3 = H * W - a1 - a2\n        ans . append ( max ( a1 , a2 , a3 ) - min ( a1 , a2 , a3 ) )\n    print ( min ( ans ) )\n"}
{"java": "static int countString ( int m , int n , String [ ] arr , int i ) { if ( m < 0 || n < 0 ) { return Integer . MIN_VALUE ; } if ( i >= arr . length ) { return 0 ; } if ( dp [ m ] [ n ] [ i ] != - 1 ) { return dp [ m ] [ n ] [ i ] ; } int zero = 0 , one = 0 ; for ( char c : arr [ i ] . toCharArray ( ) ) { if ( c == '0' ) { zero ++ ; } else { one ++ ; } } int x = 1 + countString ( m - zero , n - one , arr , i + 1 ) ; int y = countString ( m , n , arr , i + 1 ) ; return dp [ m ] [ n ] [ i ] = Math . max ( x , y ) ; }", "python": "def countString ( m , n , arr , i ) :\n    if ( m < 0 or n < 0 ) :\n        return - sys . maxsize - 1\n    if ( i >= len ( arr ) ) :\n        return 0\n    if ( dp [ m ] [ n ] [ i ] != - 1 ) :\n        return dp [ m ] [ n ] [ i ]\n    zero = 0\n    one = 0\n    for c in arr [ i ] :\n        if ( c == '0' ) :\n            zero += 1\n        else :\n            one += 1\n    x = 1 + countString ( m - zero , n - one , arr , i + 1 )\n    y = countString ( m , n , arr , i + 1 )\n    dp [ m ] [ n ] [ i ] = max ( x , y )\n    return dp [ m ] [ n ] [ i ]\n"}
{"java": "static int minSum ( int arr [ ] , int n ) { int sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { int j = i ; while ( j < n && arr [ j ] <= arr [ j - 1 ] ) { arr [ j ] = arr [ j ] + 1 ; j ++ ; } } sum = sum + arr [ i ] ; } return sum ; }", "python": "def minSum ( arr , n ) :\n    sm = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if arr [ i ] == arr [ i - 1 ] :\n            j = i\n            while j < n and arr [ j ] <= arr [ j - 1 ] :\n                arr [ j ] = arr [ j ] + 1\n                j += 1\n        sm = sm + arr [ i ]\n    return sm\n"}
{"java": "static void noOfMoves ( int arr [ ] , int n ) { int cnt = 0 ; int maxCnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { cnt ++ ; } else { if ( cnt != 0 ) { maxCnt = Math . max ( maxCnt , cnt ) ; cnt = 0 ; } } } System . out . print ( maxCnt + \" \\n \" ) ; }", "python": "def noOfMoves ( arr , n ) :\n    cnt = 0\n    maxCnt = 0\n    for i in range ( n ) :\n        if ( arr [ i ] == 1 ) :\n            cnt += 1\n        else :\n            if ( cnt != 0 ) :\n                maxCnt = max ( maxCnt , cnt )\n                cnt = 0\n    print ( maxCnt )\n"}
{"java": "static void printChar ( String str , int n ) { int [ ] freq = new int [ SIZE ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 0 ) { System . out . print ( str . charAt ( i ) ) ; } } }", "python": "def printChar ( string , n ) :\n    freq = [ 0 ] * SIZE\n    for i in range ( 0 , n ) :\n        freq [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( 0 , n ) :\n        if ( freq [ ord ( string [ i ] ) - ord ( ' a ' ) ] % 2 == 0 ) :\n            print ( string [ i ] , end = \" \" )\n"}
{"java": "public static void printChar ( String str , int n ) { int [ ] freq = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 1 ) { System . out . print ( str . charAt ( i ) ) ; } } }", "python": "def printChar ( str_ , n ) :\n    freq = [ 0 ] * 26\n    for i in range ( n ) :\n        freq [ ord ( str_ [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( n ) :\n        if ( freq [ ord ( str_ [ i ] ) - ord ( ' a ' ) ] ) % 2 == 1 :\n            print ( \" { } \" . format ( str_ [ i ] ) , end = \" \" )\n"}
{"java": "public static void solution ( int n , ArrayList < Integer > heights ) { int min = 1000 ; int current = 0 ; int ind = 0 ; int ind2 = 0 ; for ( int i = 0 ; i < heights . size ( ) - 1 ; i ++ ) { current = Math . abs ( heights . get ( i ) - heights . get ( i + 1 ) ) ; if ( current < min ) { min = current ; ind = i + 1 ; ind2 = i + 2 ; } } current = Math . abs ( heights . get ( heights . size ( ) - 1 ) - heights . get ( 0 ) ) ; if ( current < min ) { min = current ; ind = n ; ind2 = 1 ; } System . out . println ( ind + \" \u2581 \" + ind2 ) ; }", "python": "def sur ( a ) :\n    h = [ f \" { len ( a ) } \u2581 1\" ]\n    m = [ abs ( a [ 0 ] - a [ - 1 ] ) ]\n    for i in range ( 1 , len ( a ) ) :\n        m . append ( abs ( a [ i - 1 ] - a [ i ] ) )\n        h . append ( f \" { i } \u2581 { i + 1 } \" )\n    return h [ m . index ( min ( m ) ) ]\n"}
{"java": "static void findCount ( int n ) { long a = 1 , b = 0 , c = 0 ; int x = n / 60 ; a = ( long ) Math . pow ( 32 , x ) ; x = 60 * x ; for ( int i = x + 1 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { b += a ; a = 0 ; } if ( i % 5 == 0 ) { c += b ; b = 0 ; } if ( i % 12 == 0 ) { a += ( 2 * c ) ; c = 0 ; } } System . out . println ( \" a \u2581 = \u2581 \" + a + \" , \u2581 b \u2581 = \u2581 \" + b + \" , \u2581 c \u2581 = \u2581 \" + c ) ; }", "python": "def findCount ( n ) :\n    a , b , c = 1 , 0 , 0 ;\n    x = ( int ) ( n / 60 ) ;\n    a = int ( math . pow ( 32 , x ) ) ;\n    x = 60 * x ;\n    for i in range ( x + 1 , n + 1 ) :\n        if ( i % 2 == 0 ) :\n            b += a ;\n            a = 0 ;\n        if ( i % 5 == 0 ) :\n            c += b ;\n            b = 0 ;\n        if ( i % 12 == 0 ) :\n            a += ( 2 * c ) ;\n            c = 0 ;\n    print ( \" a \u2581 = \" , a , end = \" , \u2581 \" ) ;\n    print ( \" b \u2581 = \" , b , end = \" , \u2581 \" ) ;\n    print ( \" c \u2581 = \" , c ) ;\n"}
{"java": "static void shufleArray ( int [ ] a , int n ) { int temp ; n = n / 2 ; for ( int start = n + 1 , j = n + 1 , done = 0 , i ; done < 2 * n - 2 ; done ++ ) { if ( start == j ) { start -- ; j -- ; } i = j > n ? j - n : j ; j = j > n ? 2 * i : 2 * i - 1 ; temp = a [ start ] ; a [ start ] = a [ j ] ; a [ j ] = temp ; } }", "python": "def shufleArray ( a , n ) :\n    n = n // 2\n    start = n + 1\n    j = n + 1\n    for done in range ( 2 * n - 2 ) :\n        if ( start == j ) :\n            start -= 1\n            j -= 1\n        i = j - n if j > n else j\n        j = 2 * i if j > n else 2 * i - 1\n        a [ start ] , a [ j ] = a [ j ] , a [ start ]\n"}
{"java": "static public int LongestSubarray ( int arr [ ] , int n , int k ) { int count = 1 ; int max_length = 1 ; int prev_mod = arr [ 0 ] % k ; for ( int i = 1 ; i < n ; i ++ ) { int curr_mod = arr [ i ] % k ; if ( curr_mod == prev_mod ) { count ++ ; } else { max_length = Math . max ( max_length , count ) ; count = 1 ; prev_mod = curr_mod ; } } return max_length ; }", "python": "def LongestSubarray ( arr , n , k ) :\n    count = 1\n    max_lenght = 1\n    prev_mod = arr [ 0 ] % k\n    for i in range ( 1 , n ) :\n        curr_mod = arr [ i ] % k\n        if curr_mod == prev_mod :\n            count += 1\n        else :\n            max_lenght = max ( max_lenght , count )\n            count = 1\n            prev_mod = curr_mod\n    return max_lenght\n"}
{"java": "static int findMissing ( int arr [ ] , int n , int k , int avg ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } int num = ( avg * ( n + k ) ) - sum ; int den = k ; if ( num % den != 0 ) return - 1 ; return ( int ) ( num / den ) ; }", "python": "def findMissing ( arr , n , k , avg ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += arr [ i ] ;\n    num = ( avg * ( n + k ) ) - sum ;\n    den = k ;\n    if ( num % den != 0 ) :\n        return - 1 ;\n    return ( int ) ( num / den ) ;\n"}
{"java": "static double [ ] find_Centroid ( double v [ ] [ ] ) { double [ ] ans = new double [ 2 ] ; int n = v . length ; double signedArea = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double x0 = v [ i ] [ 0 ] , y0 = v [ i ] [ 1 ] ; double x1 = v [ ( i + 1 ) % n ] [ 0 ] , y1 = v [ ( i + 1 ) % n ] [ 1 ] ; double A = ( x0 * y1 ) - ( x1 * y0 ) ; signedArea += A ; ans [ 0 ] += ( x0 + x1 ) * A ; ans [ 1 ] += ( y0 + y1 ) * A ; } signedArea *= 0.5 ; ans [ 0 ] = ( ans [ 0 ] ) / ( 6 * signedArea ) ; ans [ 1 ] = ( ans [ 1 ] ) / ( 6 * signedArea ) ; return ans ; }", "python": "def find_Centroid ( v ) :\n    ans = [ 0 , 0 ]\n    n = len ( v )\n    signedArea = 0\n    for i in range ( len ( v ) ) :\n        x0 = v [ i ] [ 0 ]\n        y0 = v [ i ] [ 1 ]\n        x1 = v [ ( i + 1 ) % n ] [ 0 ]\n        y1 = v [ ( i + 1 ) % n ] [ 1 ]\n        A = ( x0 * y1 ) - ( x1 * y0 )\n        signedArea += A\n        ans [ 0 ] += ( x0 + x1 ) * A\n        ans [ 1 ] += ( y0 + y1 ) * A\n    signedArea *= 0.5\n    ans [ 0 ] = ( ans [ 0 ] ) / ( 6 * signedArea )\n    ans [ 1 ] = ( ans [ 1 ] ) / ( 6 * signedArea )\n    return ans\n"}
{"java": "static boolean LiesInsieRectangle ( int a , int b , int x , int y ) { if ( x - y - b <= 0 && x - y + b >= 0 && x + y - 2 * a + b <= 0 && x + y - b >= 0 ) return true ; return false ; }", "python": "def LiesInsieRectangle ( a , b , x , y ) :\n    if ( x - y - b <= 0 and x - y + b >= 0 and x + y - 2 * a + b <= 0 and x + y - b >= 0 ) :\n        return True\n    return False\n"}
{"java": "static Boolean areConsecutives ( int arr [ ] , int n ) { int first_term = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] < first_term ) first_term = arr [ j ] ; } int ap_sum = ( n * ( 2 * first_term + ( n - 1 ) * 1 ) ) / 2 ; int arr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) arr_sum += arr [ i ] ; return ap_sum == arr_sum ; }", "python": "def areConsecutives ( arr , n ) :\n    first_term = sys . maxsize\n    for i in range ( n ) :\n        if arr [ i ] < first_term :\n            first_term = arr [ i ]\n    ap_sum = ( ( n * ( 2 * first_term + ( n - 1 ) * 1 ) ) // 2 )\n    arr_sum = 0\n    for i in range ( n ) :\n        arr_sum += arr [ i ]\n    return ap_sum == arr_sum\n"}
{"java": "static int maxIncSubarr ( int a [ ] , int n ) { int pre [ ] = new int [ n ] ; int pos [ ] = new int [ n ] ; pre [ 0 ] = 1 ; pos [ n - 1 ] = 1 ; int l = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) pre [ i ] = pre [ i - 1 ] + 1 ; else pre [ i ] = 1 ; } l = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] < a [ i + 1 ] ) pos [ i ] = pos [ i + 1 ] + 1 ; else pos [ i ] = 1 ; } int ans = 0 ; l = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) l ++ ; else l = 1 ; ans = Math . max ( ans , l ) ; } for ( int i = 1 ; i <= n - 2 ; i ++ ) { if ( a [ i - 1 ] < a [ i + 1 ] ) ans = Math . max ( pre [ i - 1 ] + pos [ i + 1 ] , ans ) ; } return ans ; }", "python": "def maxIncSubarr ( a , n ) :\n    pre = [ 0 ] * n ;\n    pos = [ 0 ] * n ;\n    pre [ 0 ] = 1 ;\n    pos [ n - 1 ] = 1 ;\n    l = 0 ;\n    for i in range ( 1 , n ) :\n        if ( a [ i ] > a [ i - 1 ] ) :\n            pre [ i ] = pre [ i - 1 ] + 1 ;\n        else :\n            pre [ i ] = 1 ;\n    l = 1 ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( a [ i ] < a [ i + 1 ] ) :\n            pos [ i ] = pos [ i + 1 ] + 1 ;\n        else :\n            pos [ i ] = 1 ;\n    ans = 0 ;\n    l = 1 ;\n    for i in range ( 1 , n ) :\n        if ( a [ i ] > a [ i - 1 ] ) :\n            l += 1 ;\n        else :\n            l = 1 ;\n        ans = max ( ans , l ) ;\n    for i in range ( 1 , n - 3 ) :\n        if ( a [ i - 1 ] < a [ i + 1 ] ) :\n            ans = max ( pre [ i - 1 ] + pos [ i + 1 ] , ans ) ;\n    return ans ;\n"}
{"java": "public static void printTriangle ( int n ) { int tri [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) tri [ n - 1 ] [ i ] = arr [ i ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) for ( int j = 0 ; j <= i ; j ++ ) tri [ i ] [ j ] = tri [ i + 1 ] [ j ] + tri [ i + 1 ] [ j + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) System . out . print ( tri [ i ] [ j ] + \" \u2581 \" ) ; System . out . println ( ) ; } }", "python": "def printTriangle ( arr , n ) :\n    tri = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    for i in range ( n ) :\n        tri [ n - 1 ] [ i ] = arr [ i ]\n    i = n - 2\n    while ( i >= 0 ) :\n        for j in range ( 0 , i + 1 , 1 ) :\n            tri [ i ] [ j ] = ( tri [ i + 1 ] [ j ] + tri [ i + 1 ] [ j + 1 ] )\n        i -= 1\n    for i in range ( 0 , n , 1 ) :\n        for j in range ( 0 , i + 1 , 1 ) :\n            print ( tri [ i ] [ j ] , end = \" \u2581 \" )\n        print ( \" \\n \" , end = \" \" )\n"}
{"java": "static int cntSubSeq ( int arr [ ] , int n ) { int pos_count = 0 ; int neg_count = 0 ; int result ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) pos_count ++ ; if ( arr [ i ] < 0 ) neg_count ++ ; } result = ( int ) Math . pow ( 2 , pos_count ) ; if ( neg_count > 0 ) result *= Math . pow ( 2 , neg_count - 1 ) ; result -= 1 ; return result ; }", "python": "def cntSubSeq ( arr , n ) :\n    pos_count = 0 ;\n    neg_count = 0\n    for i in range ( n ) :\n        if ( arr [ i ] > 0 ) :\n            pos_count += 1\n        if ( arr [ i ] < 0 ) :\n            neg_count += 1\n    result = int ( math . pow ( 2 , pos_count ) )\n    if ( neg_count > 0 ) :\n        result *= int ( math . pow ( 2 , neg_count - 1 ) )\n    result -= 1\n    return result\n"}
{"java": "static int cntSubSeq ( int arr [ ] , int n ) { int pos_count = 0 ; int neg_count = 0 ; int result ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) pos_count ++ ; if ( arr [ i ] < 0 ) neg_count ++ ; } result = ( int ) Math . pow ( 2 , pos_count ) ; if ( neg_count > 0 ) result *= Math . pow ( 2 , neg_count - 1 ) ; else result = 0 ; return result ; }", "python": "def cntSubSeq ( arr , n ) :\n    pos_count = 0 ;\n    neg_count = 0\n    for i in range ( n ) :\n        if ( arr [ i ] > 0 ) :\n            pos_count += 1\n        if ( arr [ i ] < 0 ) :\n            neg_count += 1\n    result = int ( math . pow ( 2 , pos_count ) )\n    if ( neg_count > 0 ) :\n        result *= int ( math . pow ( 2 , neg_count - 1 ) )\n    else :\n        result = 0\n    return result\n"}
{"java": "static void niceIndices ( int A [ ] , int n ) { int sum = 0 ; Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { m . put ( A [ i ] , ( m . get ( A [ i ] ) == null ) ? 0 : m . get ( A [ i ] ) + 1 ) ; sum += A [ i ] ; } for ( int i = 0 ; i < n ; ++ i ) { int k = sum - A [ i ] ; if ( k % 2 == 0 ) { k = k >> 1 ; if ( m . containsKey ( k ) ) { if ( ( A [ i ] == k && m . get ( k ) > 1 ) || ( A [ i ] != k ) ) System . out . print ( ( i + 1 ) + \" \u2581 \" ) ; } } } }", "python": "def niceIndices ( A , n ) :\n    Sum = 0\n    m = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        m [ A [ i ] ] += 1\n        Sum += A [ i ]\n    for i in range ( n ) :\n        k = Sum - A [ i ]\n        if k % 2 == 0 :\n            k = k >> 1\n            if k in m :\n                if ( ( A [ i ] == k and m [ k ] > 1 ) or ( A [ i ] != k ) ) :\n                    print ( ( i + 1 ) , end = \" \u2581 \" )\n"}
{"java": "static void solve ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! m . containsKey ( arr [ i ] ) ) m . put ( arr [ i ] , 0 ) ; m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . get ( arr [ i ] ) == k && max == Integer . MIN_VALUE ) { max = arr [ i ] ; } else if ( m . get ( arr [ i ] ) == k && max < arr [ i ] ) { max = arr [ i ] ; } } if ( max == Integer . MIN_VALUE ) System . out . println ( \" No \u2581 such \u2581 element \" ) ; else System . out . println ( max ) ; }", "python": "def solve ( arr , n , k ) :\n    m = { } ;\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] in m . keys ( ) ) :\n            m [ arr [ i ] ] += 1 ;\n        else :\n            m [ arr [ i ] ] = 1 ;\n        i += 1 ;\n    max = sys . maxsize ;\n    for i in range ( 0 , n - 1 ) :\n        if ( m [ arr [ i ] ] == k and max == sys . maxsize ) :\n            max = arr [ i ] ;\n        elif ( m [ arr [ i ] ] == k and max < arr [ i ] ) :\n            max = arr [ i ] ;\n        i += 1\n    if ( max == sys . maxsize ) :\n        print ( \" No \u2581 such \u2581 element \" ) ;\n    else :\n        print ( max ) ;\n"}
{"java": "static float ellipsearea ( float r ) { if ( r < 0 ) return - 1 ; float a = ( float ) ( ( 3.14f * r * r ) / 4 ) ; return a ; }", "python": "def ellipsearea ( r ) :\n    if ( r < 0 ) :\n        return - 1 ;\n    a = ( 3.14 * r * r ) / 4 ;\n    return a ;\n"}
{"java": "static int geometricMean ( int n ) { return ( int ) Math . sqrt ( n ) ; }", "python": "def geometricMean ( n ) :\n    return int ( sqrt ( n ) ) ;\n"}
{"java": "static int MinimumX ( int a , int b , int c , int k ) { int x = Integer . MAX_VALUE ; if ( k <= c ) return 0 ; int h = k - c ; int l = 0 ; while ( l <= h ) { int m = ( l + h ) / 2 ; if ( ( a * m * m ) + ( b * m ) > ( k - c ) ) { x = Math . min ( x , m ) ; h = m - 1 ; } else if ( ( a * m * m ) + ( b * m ) < ( k - c ) ) l = m + 1 ; else return m ; } return x ; }", "python": "def MinimumX ( a , b , c , k ) :\n    x = 10 ** 9\n    if ( k <= c ) :\n        return 0\n    h = k - c\n    l = 0\n    while ( l <= h ) :\n        m = ( l + h ) // 2\n        if ( ( a * m * m ) + ( b * m ) > ( k - c ) ) :\n            x = min ( x , m )\n            h = m - 1\n        elif ( ( a * m * m ) + ( b * m ) < ( k - c ) ) :\n            l = m + 1\n        else :\n            return m\n    return x\n"}
{"java": "static void minimumColors ( int N , int E , int U [ ] , int V [ ] ) { Vector < Integer > [ ] adj = new Vector [ N ] ; int [ ] count = new int [ N ] ; int [ ] colors = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { adj [ i ] = new Vector < Integer > ( ) ; colors [ i ] = 1 ; } for ( int i = 0 ; i < N ; i ++ ) { adj [ V [ i ] - 1 ] . add ( U [ i ] - 1 ) ; count [ U [ i ] - 1 ] ++ ; } Queue < Integer > Q = new LinkedList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( count [ i ] == 0 ) { Q . add ( i ) ; } } while ( ! Q . isEmpty ( ) ) { int u = Q . peek ( ) ; Q . remove ( ) ; for ( int x : adj [ u ] ) { count [ x ] -- ; if ( count [ x ] == 0 ) { Q . add ( x ) ; } if ( colors [ x ] <= colors [ u ] ) { colors [ x ] = 1 + colors [ u ] ; } } } int minColor = - 1 ; for ( int i = 0 ; i < N ; i ++ ) { minColor = Math . max ( minColor , colors [ i ] ) ; } System . out . print ( minColor + \" \\n \" ) ; }", "python": "def minimumColors ( N , E , U , V ) :\n    adj = [ [ ] for i in range ( N ) ]\n    count = [ 0 ] * N\n    colors = [ 1 ] * ( N )\n    for i in range ( N ) :\n        adj [ V [ i ] - 1 ] . append ( U [ i ] - 1 )\n        count [ U [ i ] - 1 ] += 1\n    Q = deque ( )\n    for i in range ( N ) :\n        if ( count [ i ] == 0 ) :\n            Q . append ( i )\n    while len ( Q ) > 0 :\n        u = Q . popleft ( )\n        for x in adj [ u ] :\n            count [ x ] -= 1\n            if ( count [ x ] == 0 ) :\n                Q . append ( x )\n            if ( colors [ x ] <= colors [ u ] ) :\n                colors [ x ] = 1 + colors [ u ]\n    minColor = - 1\n    for i in range ( N ) :\n        minColor = max ( minColor , colors [ i ] )\n    print ( minColor )\n"}
{"java": "public static double sumOfSeries ( double num ) { double res = 0 , fact = 1 ; for ( int i = 1 ; i <= num ; i ++ ) { fact = fact * i ; res = res + ( i / fact ) ; } return ( res ) ; }", "python": "def sumOfSeries ( num ) :\n    res = 0\n    fact = 1\n    for i in range ( 1 , num + 1 ) :\n        fact *= i\n        res = res + ( i / fact )\n    return res\n"}
{"java": "static void solve ( ) throws IOException { n = sc . nextInt ( ) ; m = sc . nextInt ( ) ; Set < Integer > set = new HashSet < > ( ) ; a = new int [ n + 1 ] ; int not [ ] = new int [ n + 1 ] , is [ ] = new int [ n + 1 ] , sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] < 0 ) { not [ - a [ i ] ] ++ ; ++ sum ; } else is [ a [ i ] ] ++ ; } for ( int i = 1 ; i <= n ; ++ i ) if ( sum - not [ i ] + is [ i ] == m ) set . add ( i ) ; for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] > 0 ) { if ( set . contains ( a [ i ] ) && set . size ( ) == 1 ) out . println ( \" Truth \" ) ; else if ( set . contains ( a [ i ] ) ) out . println ( \" Not \u2581 defined \" ) ; else out . println ( \" Lie \" ) ; } else { if ( set . contains ( - a [ i ] ) && set . size ( ) == 1 ) out . println ( \" Lie \" ) ; else if ( set . contains ( - a [ i ] ) ) out . println ( \" Not \u2581 defined \" ) ; else out . println ( \" Truth \" ) ; } } }", "python": "def read_int_list ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef read_int_tuple ( ) : return tuple ( map ( int , input ( ) . split ( ) ) )\ndef read_int ( ) : return int ( input ( ) )\ndef main ( ) :\n    for _ in range ( 1 ) :\n        n , m = read_int_tuple ( )\n        yes , no = [ 0 ] * ( n + 1 ) , [ 0 ] * ( n + 1 )\n        res = [ ]\n        for _ in range ( n ) :\n            x = read_int ( )\n            res . append ( x )\n            [ no , yes ] [ x > 0 ] [ abs ( x ) ] += 1\n        yes_cnt , no_cnt = sum ( yes ) , sum ( no )\n        crimers = set ( )\n        for i in range ( 1 , n + 1 ) :\n            true_cnt = yes [ i ] + no_cnt - no [ i ]\n            if true_cnt == m :\n                crimers . add ( i )\n        for x in res :\n            if len ( crimers ) == 1 :\n                print ( [ [ ' Truth ' , ' Lie ' ] , [ ' Lie ' , ' Truth ' ] ] [ x > 0 ] [ abs ( x ) in crimers ] )\n            else :\n                print ( [ [ ' Truth ' , ' Not \u2581 defined ' ] , [ ' Lie ' , ' Not \u2581 defined ' ] ] [ x > 0 ] [ abs ( x ) in crimers ] )\n"}
{"java": "static long ispowerof2 ( long num ) { if ( ( num & ( num - 1 ) ) == 0 ) return 1 ; return 0 ; }", "python": "def ispowerof2 ( num ) :\n    if ( ( num & ( num - 1 ) ) == 0 ) :\n        return 1\n    return 0\n"}
{"java": "static String FirstAndLast ( String str ) { String [ ] arrOfStr = str . split ( \" \u2581 \" ) ; String res = \" \" ; for ( String a : arrOfStr ) { res += a . substring ( 1 , a . length ( ) - 1 ) + \" \u2581 \" ; } return res ; }", "python": "def FirstAndLast ( string ) :\n    arrOfStr = string . split ( ) ;\n    res = \" \" ;\n    for a in arrOfStr :\n        res += a [ 1 : len ( a ) - 1 ] + \" \u2581 \" ;\n    return res ;\n"}
{"java": "static boolean checkSame ( int n ) { int set = 0 ; int unset = 0 ; while ( n > 0 ) { if ( ( n & 1 ) == 1 ) set ++ ; else unset ++ ; n = n >> 1 ; } if ( set == unset ) return true ; else return false ; }", "python": "def checkSame ( n ) :\n    set , unset = 0 , 0\n    while ( n ) :\n        if ( n and 1 ) :\n            set + 1\n        else :\n            unset += 1\n        n = n >> 1\n    if ( set == unset ) :\n        return True\n    else :\n        return False\n"}
{"java": "static long solve ( int i , boolean tight , int sum_so_far , int Sum , String number , int len ) { if ( i == len ) { if ( sum_so_far == Sum ) return 1 ; else return 0 ; } long ans = dp [ i ] [ 1 ] [ sum_so_far ] ; if ( ans != - 1 ) { return ans ; } ans = 0 ; boolean ntight ; int nsum_so_far ; for ( char currdigit = '0' ; currdigit <= '9' ; currdigit ++ ) { if ( ! tight && currdigit > number . charAt ( i ) ) { break ; } ntight = tight || currdigit < number . charAt ( i ) ; nsum_so_far = sum_so_far + ( currdigit - '0' ) ; ans += solve ( i + 1 , ntight , nsum_so_far , Sum , number , len ) ; } return ans ; }", "python": "def solve ( i , tight , sum_so_far , Sum , number , length ) :\n    if i == length :\n        if sum_so_far == Sum :\n            return 1\n        else :\n            return 0\n    ans = dp [ i ] [ tight ] [ sum_so_far ]\n    if ans != - 1 :\n        return ans\n    ans = 0\n    for currdigit in range ( 0 , 10 ) :\n        currdigitstr = str ( currdigit )\n        if not tight and currdigitstr > number [ i ] :\n            break\n        ntight = tight or currdigitstr < number [ i ]\n        nsum_so_far = sum_so_far + currdigit\n        ans += solve ( i + 1 , ntight , nsum_so_far , Sum , number , length )\n    return ans\n"}
{"java": "static int countPalindrome ( String str ) { int n = str . length ( ) ; int sum = 0 ; int hashTable [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { hashTable [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( hashTable [ i ] != 0 ) { sum += ( hashTable [ i ] * ( hashTable [ i ] + 1 ) / 2 ) ; } } return sum ; }", "python": "def countPalindrome ( str ) :\n    n = len ( str )\n    sum = 0\n    hashTable = [ 0 ] * MAX_CHAR\n    for i in range ( n ) :\n        hashTable [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( 26 ) :\n        if ( hashTable [ i ] ) :\n            sum += ( hashTable [ i ] * ( hashTable [ i ] + 1 ) // 2 )\n    return sum\n"}
{"java": "static int findSumofEle ( int arr1 [ ] , int m , int arr2 [ ] , int n ) { int hash [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { hash [ arr2 [ i ] ] ++ ; } for ( int i = 1 ; i < MAX ; i ++ ) { hash [ i ] = hash [ i ] + hash [ i - 1 ] ; } int maximumFreq = 0 ; for ( int i = 0 ; i < m ; i ++ ) { maximumFreq = Math . max ( maximumFreq , hash [ arr1 [ i ] ] ) ; } int sumOfElements = 0 ; for ( int i = 0 ; i < m ; i ++ ) { sumOfElements += ( maximumFreq == hash [ arr1 [ i ] ] ) ? arr1 [ i ] : 0 ; } return sumOfElements ; }", "python": "def findSumofEle ( arr1 , m , arr2 , n ) :\n    hash = [ 0 for i in range ( MAX ) ]\n    for i in range ( n ) :\n        hash [ arr2 [ i ] ] += 1\n    for i in range ( 1 , MAX , 1 ) :\n        hash [ i ] = hash [ i ] + hash [ i - 1 ]\n    maximumFreq = 0\n    for i in range ( m ) :\n        maximumFreq = max ( maximumFreq , hash [ arr1 [ i ] ] )\n    sumOfElements = 0\n    for i in range ( m ) :\n        if ( maximumFreq == hash [ arr1 [ i ] ] ) :\n            sumOfElements += arr1 [ i ]\n    return sumOfElements\n"}
{"java": "static int get ( int x , int y , int z ) { if ( x > z ) return - 1 ; int val = z - x ; int div = ( z - x ) / y ; int ans = div * y + x ; return ans ; }", "python": "def get ( x , y , z ) :\n    if ( x > z ) :\n        return - 1\n    val = z - x\n    div = ( z - x ) // y\n    ans = div * y + x\n    return ans\n"}
{"java": "public static int getSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double sqrtCurrent = Math . sqrt ( arr [ i ] ) ; for ( int j = 0 ; j < n ; j ++ ) { double x = arr [ j ] ; if ( x == sqrtCurrent ) { sum += ( sqrtCurrent * sqrtCurrent ) ; break ; } } } return sum ; }", "python": "def getSum ( arr , n ) :\n    sum = 0\n    for i in range ( 0 , n ) :\n        sqrtCurrent = math . sqrt ( arr [ i ] )\n        for j in range ( 0 , n ) :\n            x = arr [ j ]\n            if ( x == sqrtCurrent ) :\n                sum += ( sqrtCurrent * sqrtCurrent )\n                break\n    return int ( sum )\n"}
{"java": "static void find ( int [ ] arr , int length , int s ) { for ( int i = 1 ; i <= ( Math . pow ( 2 , length ) ) ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < length ; j ++ ) if ( ( ( i >> j ) & 1 ) % 2 == 1 ) sum += arr [ j ] ; if ( sum == s ) { System . out . println ( \" YES \" ) ; return ; } } System . out . println ( \" NO \" ) ; }", "python": "def find ( lst , n ) :\n    print ( ' YES ' if [ 1 for r in range ( 1 , len ( lst ) + 1 ) for subset in combinations ( lst , r ) if sum ( subset ) == n ] else ' NO ' )\n"}
{"java": "static void sieve ( ) { int arr [ ] = new int [ N + 1 ] ; arr [ 0 ] = 1 ; arr [ 1 ] = 1 ; for ( int i = 2 ; i <= Math . sqrt ( N ) ; i ++ ) if ( arr [ i ] == 0 ) for ( int j = i * i ; j <= N ; j += i ) arr [ j ] = 1 ; long runningPrimeSum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( arr [ i ] == 0 ) runningPrimeSum += i ; dp [ i ] = runningPrimeSum ; } }", "python": "def seive ( ) :\n    array = [ 0 ] * ( N + 1 )\n    array [ 0 ] = 1\n    array [ 1 ] = 1\n    for i in range ( 2 , math . ceil ( math . sqrt ( N ) + 1 ) ) :\n        if array [ i ] == 0 :\n            for j in range ( i * i , N + 1 , i ) :\n                array [ j ] = 1\n    runningPrimeSum = 0\n    for i in range ( 1 , N + 1 ) :\n        if array [ i ] == 0 :\n            runningPrimeSum += i\n        dp [ i ] = runningPrimeSum\n"}
{"java": "static int min_modulo ( int l , int r ) { if ( r - l >= MOD ) return 0 ; else { int ans = MOD - 1 ; for ( int i = l ; i <= r ; i ++ ) { for ( int j = i + 1 ; j <= r ; j ++ ) { ans = Math . min ( ans , ( i * j ) % MOD ) ; } } return ans ; } }", "python": "def min_modulo ( l , r ) :\n    if ( r - l >= MOD ) :\n        return 0 ;\n    else :\n        ans = MOD - 1 ;\n        for i in range ( l , r + 1 ) :\n            for j in range ( i + 1 , r + 1 ) :\n                ans = min ( ans , ( i * j ) % MOD ) ;\n        return ans ;\n"}
{"java": "static int countDistinct ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) { i ++ ; } res ++ ; } return res ; }", "python": "def countDistinct ( arr , n ) :\n    arr . sort ( ) ;\n    res = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        while ( i < n - 1 and arr [ i ] == arr [ i + 1 ] ) :\n            i += 1 ;\n        res += 1 ;\n        i += 1 ;\n    return res ;\n"}
{"java": "static int countways ( int n ) { if ( n == 1 ) return 0 ; else if ( n % 2 == 0 ) return 1 + countways ( n / 2 ) ; else return 1 + Math . min ( countways ( n - 1 ) , countways ( n + 1 ) ) ; }", "python": "def countways ( n ) :\n    if ( n == 1 ) :\n        return 0 ;\n    elif ( n % 2 == 0 ) :\n        return 1 + countways ( n / 2 ) ;\n    else :\n        return 1 + min ( countways ( n - 1 ) , countways ( n + 1 ) ) ;\n"}
{"java": "static void removeSpecialCharacter ( String str ) { char [ ] s = str . toCharArray ( ) ; int j = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) || ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) ) { s [ j ] = s [ i ] ; j ++ ; } } System . out . println ( String . valueOf ( s ) . substring ( 0 , j ) ) ; }", "python": "def removeSpecialCharacter ( s ) :\n    t = \" \"\n    for i in s :\n        if ( i >= ' A ' and i <= ' Z ' ) or ( i >= ' a ' and i <= ' z ' ) :\n            t += i\n    print ( t )\n"}
{"java": "static void ReplaceElementsByFrequency ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( mp . get ( arr [ i ] ) == null ) { mp . put ( arr [ i ] , 1 ) ; } else { mp . put ( arr [ i ] , ( mp . get ( arr [ i ] ) + 1 ) ) ; } } for ( int i = 0 ; i < n ; ++ i ) { if ( mp . get ( arr [ i ] ) != null ) { arr [ i ] = mp . get ( arr [ i ] ) ; } } }", "python": "def ReplaceElementsByFrequency ( arr , n ) :\n    mp = { i : 0 for i in range ( len ( arr ) ) }\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += 1\n    for i in range ( n ) :\n        arr [ i ] = mp [ arr [ i ] ]\n"}
{"java": "static void printRoots ( long a , long b , long c ) { System . out . println ( 1 + \" , \u2581 \" + c / ( a * 1.0 ) ) ; }", "python": "def printRoots ( a , b , c ) :\n    print ( 1 , \" , \" , c / ( a * 1.0 ) )\n"}
{"java": "static long partitions ( int n ) { long p [ ] = new long [ n + 1 ] ; p [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { int k = 1 ; while ( ( k * ( 3 * k - 1 ) ) / 2 <= i ) { p [ i ] += ( k % 2 != 0 ? 1 : - 1 ) * p [ i - ( k * ( 3 * k - 1 ) ) / 2 ] ; if ( k > 0 ) { k *= - 1 ; } else { k = 1 - k ; } } } return p [ n ] ; }", "python": "def partitions ( n ) :\n    p = [ 0 ] * ( n + 1 )\n    p [ 0 ] = 1\n    for i in range ( 1 , n + 1 ) :\n        k = 1\n        while ( ( k * ( 3 * k - 1 ) ) / 2 <= i ) :\n            p [ i ] += ( ( 1 if k % 2 else - 1 ) * p [ i - ( k * ( 3 * k - 1 ) ) // 2 ] )\n            if ( k > 0 ) :\n                k *= - 1\n            else :\n                k = 1 - k\n    return p [ n ]\n"}
{"java": "static String check ( int [ ] arr , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) != 0 ) count ++ ; } if ( ( count & 1 ) != 0 ) return \" Odd \" ; else return \" Even \" ; }", "python": "def check ( arr , n ) :\n    count = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] & 1 ) :\n            count = count + 1 ;\n    if ( count & 1 ) :\n        return \" Odd \" ;\n    else :\n        return \" Even \" ;\n"}
{"java": "static int comb ( int m , int n ) { int res = 1 ; if ( n > m - n ) n = m - n ; for ( int i = 0 ; i < n ; i ++ ) { res *= ( m - i ) ; res /= ( i + 1 ) ; } return res ; }", "python": "def main ( ) :\n    N , M = map ( int , input ( ) . split ( ) )\n    ans = ( N * ( N - 1 ) ) // 2 + ( M * ( M - 1 ) ) // 2\n    print ( ans )\n"}
{"java": "static long nthTermOfTheSeries ( int n ) { long nthTerm ; if ( n % 2 == 0 ) nthTerm = ( long ) Math . pow ( n - 1 , 2 ) + n ; else nthTerm = ( long ) Math . pow ( n + 1 , 2 ) + n ; return nthTerm ; }", "python": "def nthTermOfTheSeries ( n ) :\n    if ( n % 2 == 0 ) :\n        nthTerm = pow ( n - 1 , 2 ) + n\n    else :\n        nthTerm = pow ( n + 1 , 2 ) + n\n    return nthTerm\n"}
{"java": "static int countNumbers ( int x , int n ) { if ( x > n ) return 0 ; return 1 + countNumbers ( x * 10 , n ) + countNumbers ( x * 10 + 1 , n ) ; }", "python": "def countNumbers ( x , n ) :\n    if x > n :\n        return 0\n    return ( 1 + countNumbers ( x * 10 , n ) + countNumbers ( x * 10 + 1 , n ) )\n"}
{"java": "static boolean arePermutations ( int a [ ] , int b [ ] , int n , int m ) { int sum1 = 0 , sum2 = 0 , mul1 = 1 , mul2 = 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += a [ i ] ; mul1 *= a [ i ] ; } for ( int i = 0 ; i < m ; i ++ ) { sum2 += b [ i ] ; mul2 *= b [ i ] ; } return ( ( sum1 == sum2 ) && ( mul1 == mul2 ) ) ; }", "python": "def arePermutations ( a , b , n , m ) :\n    sum1 , sum2 , mul1 , mul2 = 0 , 0 , 1 , 1\n    for i in range ( n ) :\n        sum1 += a [ i ]\n        mul1 *= a [ i ]\n    for i in range ( m ) :\n        sum2 += b [ i ]\n        mul2 *= b [ i ]\n    return ( ( sum1 == sum2 ) and ( mul1 == mul2 ) )\n"}
{"java": "static boolean productEqual ( int n ) { if ( n < 10 ) return false ; int prodOdd = 1 , prodEven = 1 ; while ( n > 0 ) { int digit = n % 10 ; prodOdd *= digit ; n /= 10 ; if ( n == 0 ) break ; digit = n % 10 ; prodEven *= digit ; n /= 10 ; } if ( prodEven == prodOdd ) return true ; return false ; }", "python": "def productEqual ( n ) :\n    if n < 10 :\n        return False\n    prodOdd = 1 ; prodEven = 1\n    while n > 0 :\n        digit = n % 10\n        prodOdd *= digit\n        n = n // 10\n        if n == 0 :\n            break ;\n        digit = n % 10\n        prodEven *= digit\n        n = n // 10\n    if prodOdd == prodEven :\n        return True\n    return False\n"}
{"java": "public static void findIndices ( int arr [ ] , int n ) { int leftMin = 0 , rightMin = 0 ; int leftMax = 0 , rightMax = 0 ; int min = arr [ 0 ] , max = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { leftMin = rightMin = i ; min = arr [ i ] ; } else if ( arr [ i ] == min ) rightMin = i ; if ( arr [ i ] > max ) { leftMax = rightMax = i ; max = arr [ i ] ; } else if ( arr [ i ] == max ) rightMax = i ; } System . out . println ( \" Minimum \u2581 left \u2581 : \u2581 \" + leftMin ) ; System . out . println ( \" Minimum \u2581 right \u2581 : \u2581 \" + rightMin ) ; System . out . println ( \" Maximum \u2581 left \u2581 : \u2581 \" + leftMax ) ; System . out . println ( \" Maximum \u2581 right \u2581 : \u2581 \" + rightMax ) ; }", "python": "def findIndices ( arr , n ) :\n    leftMin , rightMin = 0 , 0\n    leftMax , rightMax = 0 , 0\n    min_element = arr [ 0 ]\n    max_element = arr [ 0 ]\n    for i in range ( n ) :\n        if ( arr [ i ] < min_element ) :\n            leftMin = rightMin = i\n            min_element = arr [ i ]\n        elif ( arr [ i ] == min_element ) :\n            rightMin = i\n        if ( arr [ i ] > max_element ) :\n            leftMax = rightMax = i\n            max_element = arr [ i ]\n        elif ( arr [ i ] == max_element ) :\n            rightMax = i\n    print ( \" Minimum \u2581 left \u2581 : \u2581 \" , leftMin )\n    print ( \" Minimum \u2581 right \u2581 : \u2581 \" , rightMin )\n    print ( \" Maximum \u2581 left \u2581 : \u2581 \" , leftMax )\n    print ( \" Maximum \u2581 right \u2581 : \u2581 \" , rightMax )\n"}
{"java": "static int maxLines ( int n , int x1 [ ] , int y1 [ ] , int x2 [ ] , int y2 [ ] ) { Set < Double > s = new HashSet < Double > ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) slope = Integer . MAX_VALUE ; else slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) * 1.0 ; s . add ( slope ) ; } return s . size ( ) ; }", "python": "def maxLines ( n , x1 , y1 , x2 , y2 ) :\n    s = [ ] ;\n    slope = sys . maxsize ;\n    for i in range ( n ) :\n        if ( x1 [ i ] == x2 [ i ] ) :\n            slope = sys . maxsize ;\n        else :\n            slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) * 1.0 ;\n        s . append ( slope ) ;\n    return len ( s ) ;\n"}
{"java": "static int findLength ( String s , int k ) { int ans = INT_MAX ; int l = 0 ; int r = 0 ; int cnt_zero = 0 , cnt_one = 0 ; while ( l < s . length ( ) && r <= s . length ( ) ) { if ( cnt_zero >= k && cnt_one >= 1 ) { ans = Math . min ( ans , r - l ) ; l ++ ; if ( s . charAt ( l - 1 ) == '0' ) cnt_zero -- ; else cnt_one -- ; } else { if ( r == s . length ( ) ) break ; if ( s . charAt ( r ) == '0' ) cnt_zero ++ ; else cnt_one ++ ; r ++ ; } } if ( ans == INT_MAX ) return - 1 ; return ans ; }", "python": "def findLength ( s , k ) :\n    ans = 10 ** 9\n    l = 0\n    r = 0\n    cnt_zero = 0\n    cnt_one = 0\n    while ( l < len ( s ) and r <= len ( s ) ) :\n        if ( cnt_zero >= k and cnt_one >= 1 ) :\n            ans = min ( ans , r - l )\n            l += 1\n            if ( s [ l - 1 ] == '0' ) :\n                cnt_zero -= 1\n            else :\n                cnt_one -= 1\n        else :\n            if ( r == len ( s ) ) :\n                break\n            if ( s [ r ] == '0' ) :\n                cnt_zero += 1\n            else :\n                cnt_one += 1\n            r += 1\n    if ( ans == 10 ** 9 ) :\n        return - 1\n    return ans\n"}
{"java": "static void findMaxFrequency ( String s ) { int arr [ ] = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) arr [ s . charAt ( i ) - ' a ' ] ++ ; HashMap < Integer , Integer > hash = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < 26 ; i ++ ) if ( arr [ i ] != 0 ) { if ( hash . containsKey ( arr [ i ] ) ) { hash . put ( arr [ i ] , hash . get ( arr [ i ] ) + 1 ) ; } else { hash . put ( arr [ i ] , 1 ) ; } } int max_count = 0 , res = - 1 ; for ( Map . Entry < Integer , Integer > i : hash . entrySet ( ) ) { if ( max_count < i . getValue ( ) ) { res = i . getKey ( ) ; max_count = i . getValue ( ) ; } } System . out . println ( \" Frequency \u2581 \" + res + \" \u2581 is \u2581 repeated \u2581 \" + max_count + \" \u2581 times \" ) ; }", "python": "def findMaxFrequency ( s ) :\n    arr = [ 0 ] * 26\n    for i in range ( len ( s ) ) :\n        arr [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1\n    hash = { }\n    for i in range ( 26 ) :\n        if ( arr [ i ] != 0 ) :\n            if arr [ i ] not in hash :\n                hash [ arr [ i ] ] = 0\n            hash [ arr [ i ] ] += 1\n    max_count = 0\n    res = - 1\n    for i in hash :\n        if ( max_count < hash [ i ] ) :\n            res = i\n            max_count = hash [ i ]\n    print ( \" Frequency \" , res , \" is \u2581 repeated \" , max_count , \" times \" )\n"}
{"java": "static int CountTheElements ( int arr [ ] , int n , int k ) { int counter = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) counter ++ ; } return counter ; }", "python": "def CountTheElements ( arr , n , k ) :\n    counter = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( arr [ i ] % k == 0 ) :\n            counter = counter + 1\n    return counter\n"}
{"java": "static float heightCalculate ( int H , int n , int m ) { float N = ( float ) ( n * 1.0 ) ; float M = ( float ) ( m * 1.0 ) ; float h = H * ( float ) Math . sqrt ( N / ( N + M ) ) ; return h ; }", "python": "def heightCalculate ( H , n , m ) :\n    N = n * 1.0\n    M = m * 1.0\n    h = H * sqrt ( N / ( N + M ) )\n    return h\n"}
{"java": "public static void solve ( int n , int m ) { int l1 = 1 , r1 = n / 2 ; int l2 = n / 2 + 1 , r2 = n ; while ( l1 < r1 && m > 0 ) { System . out . println ( l1 + \" \u2581 \" + r1 ) ; ++ l1 ; -- r1 ; -- m ; } while ( l2 < r2 && m > 0 ) { System . out . println ( l2 + \" \u2581 \" + r2 ) ; ++ l2 ; -- r2 ; -- m ; } }", "python": "def LI ( ) : return list ( map ( int , sys . stdin . buffer . readline ( ) . split ( ) ) )\ndef I ( ) : return int ( sys . stdin . buffer . readline ( ) )\ndef LS ( ) : return sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( ' utf - 8' ) . split ( )\ndef S ( ) : return sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( ' utf - 8' )\ndef IR ( n ) : return [ I ( ) for i in range ( n ) ]\ndef LIR ( n ) : return [ LI ( ) for i in range ( n ) ]\ndef SR ( n ) : return [ S ( ) for i in range ( n ) ]\ndef LSR ( n ) : return [ LS ( ) for i in range ( n ) ]\ndef SRL ( n ) : return [ list ( S ( ) ) for i in range ( n ) ]\ndef MSRL ( n ) : return [ [ int ( j ) for j in list ( S ( ) ) ] for i in range ( n ) ]\nmod = 1000000007\nn , m = LI ( )\nif m == 1 :\n    print ( 1 , 2 )\n"}
{"java": "static boolean isKAlternating ( String s , int k ) { if ( s . length ( ) < k ) return false ; int checker = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int bitAtIndex = s . charAt ( i ) - ' a ' ; if ( ( checker & ( 1 << bitAtIndex ) ) > 0 ) { return false ; } checker = checker | ( 1 << bitAtIndex ) ; } for ( int i = k ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i - k ) != s . charAt ( i ) ) return false ; return true ; }", "python": "def isKAlternating ( s , k ) :\n    if ( len ( s ) < k ) :\n        return False\n    checker = 0\n    for i in range ( k ) :\n        bitAtIndex = ord ( s [ i ] ) - ord ( ' a ' )\n        if ( ( checker & ( 1 << bitAtIndex ) ) > 0 ) :\n            return False\n        checker = checker | ( 1 << bitAtIndex )\n    for i in range ( k , len ( s ) ) :\n        if ( s [ i - k ] != s [ i ] ) :\n            return False\n    return True\n"}
{"java": "static int findCount ( int m , int n ) { int num1 = 0 ; for ( int i = 0 ; i < m ; i ++ ) num1 = ( num1 * 10 ) + 9 ; int num2 = 0 ; for ( int i = 0 ; i < ( m - 1 ) ; i ++ ) num2 = ( num2 * 10 ) + 9 ; return ( ( num1 / n ) - ( num2 / n ) ) ; }", "python": "def findCount ( m , n ) :\n    num1 = 0\n    for i in range ( 0 , m ) :\n        num1 = ( num1 * 10 ) + 9\n    num2 = 0\n    for i in range ( 0 , ( m - 1 ) ) :\n        num2 = ( num2 * 10 ) + 9\n    return int ( ( num1 / n ) - ( num2 / n ) )\n"}
{"java": "static boolean containsElement ( int [ ] arr , int n ) { int xorArr = 0 ; for ( int i = 0 ; i < n ; ++ i ) xorArr ^= arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { int x = xorArr ^ arr [ i ] ; if ( arr [ i ] == x ) return true ; } return false ; }", "python": "def containsElement ( arr , n ) :\n    xorArr = 0\n    for i in range ( n ) :\n        xorArr ^= arr [ i ]\n    for i in range ( n ) :\n        x = xorArr ^ arr [ i ]\n        if ( arr [ i ] == x ) :\n            return True\n    return False\n"}
{"java": "static int frequency ( int a [ ] , int n , int x ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == x ) count ++ ; return count ; }", "python": "def frequency ( a , x ) :\n    count = 0\n    for i in a :\n        if i == x : count += 1\n    return count\n"}
{"java": "static void findGeometricTriplets ( int arr [ ] , int n ) { for ( int j = 1 ; j < n - 1 ; j ++ ) { int i = j - 1 , k = j + 1 ; while ( i >= 0 && k <= n - 1 ) { while ( i >= 0 && arr [ j ] % arr [ i ] == 0 && arr [ k ] % arr [ j ] == 0 && arr [ j ] / arr [ i ] == arr [ k ] / arr [ j ] ) { System . out . println ( arr [ i ] + \" \u2581 \" + arr [ j ] + \" \u2581 \" + arr [ k ] ) ; k ++ ; i -- ; } if ( i >= 0 && arr [ j ] % arr [ i ] == 0 && arr [ k ] % arr [ j ] == 0 ) { if ( i >= 0 && arr [ j ] / arr [ i ] < arr [ k ] / arr [ j ] ) i -- ; else k ++ ; } else if ( i >= 0 && arr [ j ] % arr [ i ] == 0 ) k ++ ; else i -- ; } } }", "python": "def findGeometricTriplets ( arr , n ) :\n    for j in range ( 1 , n - 1 ) :\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            while ( arr [ j ] % arr [ i ] == 0 and arr [ k ] % arr [ j ] == 0 and arr [ j ] // arr [ i ] == arr [ k ] // arr [ j ] ) :\n                print ( arr [ i ] , \" \u2581 \" , arr [ j ] , \" \u2581 \" , arr [ k ] )\n                k += 1\n                i -= 1\n            if ( arr [ j ] % arr [ i ] == 0 and arr [ k ] % arr [ j ] == 0 ) :\n                if ( arr [ j ] // arr [ i ] < arr [ k ] // arr [ j ] ) :\n                    i -= 1\n                else :\n                    k += 1\n            elif ( arr [ j ] % arr [ i ] == 0 ) :\n                k += 1\n            else :\n                i -= 1\n"}
{"java": "static long LCM ( int arr [ ] , int n ) { int max_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max_num < arr [ i ] ) { max_num = arr [ i ] ; } } long res = 1 ; int x = 2 ; while ( x <= max_num ) { Vector < Integer > indexes = new Vector < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] % x == 0 ) { indexes . add ( indexes . size ( ) , j ) ; } } if ( indexes . size ( ) >= 2 ) { for ( int j = 0 ; j < indexes . size ( ) ; j ++ ) { arr [ indexes . get ( j ) ] = arr [ indexes . get ( j ) ] / x ; } res = res * x ; } else { x ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { res = res * arr [ i ] ; } return res ; }", "python": "def LCM ( arr , n ) :\n    max_num = 0 ;\n    for i in range ( n ) :\n        if ( max_num < arr [ i ] ) :\n            max_num = arr [ i ] ;\n    res = 1 ;\n    x = 2 ;\n    while ( x <= max_num ) :\n        indexes = [ ] ;\n        for j in range ( n ) :\n            if ( arr [ j ] % x == 0 ) :\n                indexes . append ( j ) ;\n        if ( len ( indexes ) >= 2 ) :\n            for j in range ( len ( indexes ) ) :\n                arr [ indexes [ j ] ] = int ( arr [ indexes [ j ] ] / x ) ;\n            res = res * x ;\n        else :\n            x += 1 ;\n    for i in range ( n ) :\n        res = res * arr [ i ] ;\n    return res ;\n"}
{"java": "static int MinOfCubed ( int k ) { if ( k < 8 ) return k ; int res = k ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ( i * i * i ) > k ) return res ; res = Math . min ( res , MinOfCubed ( k - ( i * i * i ) ) + 1 ) ; } return res ; }", "python": "def MinOfCubed ( k ) :\n    if ( k < 8 ) :\n        return k ;\n    res = k ;\n    for i in range ( 1 , k + 1 ) :\n        if ( ( i * i * i ) > k ) :\n            return res ;\n        res = min ( res , MinOfCubed ( k - ( i * i * i ) ) + 1 ) ;\n    return res ;\n"}
{"java": "static long andOperator ( long a , long b ) { while ( a < b ) { b -= ( b & - b ) ; } return b ; }", "python": "def andOperator ( a , b ) :\n    while ( a < b ) :\n        b -= ( b & - b )\n    return b\n"}
{"java": "public static int Valid ( int a , int b , int c , int d ) { if ( a + b + c + d == 360 ) return 1 ; return 0 ; }", "python": "def Valid ( a , b , c , d ) :\n    if ( a + b + c + d == 360 ) :\n        return True ;\n    return False ;\n"}
{"java": "static float Area ( float a ) { if ( a < 0 ) return - 1 ; float h = ( float ) 1.268 * a ; float A = ( float ) ( 0.70477 * Math . pow ( h , 2 ) ) ; return A ; }", "python": "def Area ( a ) :\n    if ( a < 0 ) :\n        return - 1\n    h = 1.268 * a\n    A = 0.70477 * math . pow ( h , 2 )\n    return A\n"}
{"java": "static boolean isMultipleof5 ( int n ) { if ( ( n & 1 ) == 1 ) n <<= 1 ; float x = n ; x = ( ( int ) ( x * 0.1 ) ) * 10 ; if ( ( int ) x == n ) return true ; return false ; }", "python": "def isMultipleof5 ( n ) :\n    if ( ( n & 1 ) == 1 ) :\n        n <<= 1 ;\n    x = n\n    x = ( ( int ) ( x * 0.1 ) ) * 10\n    if ( x == n ) :\n        return 1\n    return 0\n"}
{"java": "static int countways ( int a [ ] , int n ) { int cnt [ ] = new int [ n ] ; int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s += a [ i ] ; } if ( s % 3 != 0 ) return 0 ; s /= 3 ; int ss = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { ss += a [ i ] ; if ( ss == s ) cnt [ i ] = 1 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) cnt [ i ] += cnt [ i + 1 ] ; int ans = 0 ; ss = 0 ; for ( int i = 0 ; i + 2 < n ; i ++ ) { ss += a [ i ] ; if ( ss == s ) ans += cnt [ i + 2 ] ; } return ans ; }", "python": "def countways ( a , n ) :\n    cnt = [ 0 for i in range ( n ) ]\n    s = 0\n    s = sum ( a )\n    if ( s % 3 != 0 ) :\n        return 0\n    s //= 3\n    ss = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        ss += a [ i ]\n        if ( ss == s ) :\n            cnt [ i ] = 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        cnt [ i ] += cnt [ i + 1 ]\n    ans = 0\n    ss = 0\n    for i in range ( 0 , n - 2 ) :\n        ss += a [ i ]\n        if ( ss == s ) :\n            ans += cnt [ i + 2 ]\n    return ans\n"}
{"java": "static int MinimizeleftOverSum ( int a [ ] , int n ) { Vector < Integer > v1 = new Vector < Integer > ( ) , v2 = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) v1 . add ( a [ i ] ) ; else v2 . add ( a [ i ] ) ; } if ( v1 . size ( ) > v2 . size ( ) ) { Collections . sort ( v1 ) ; Collections . sort ( v2 ) ; int x = v1 . size ( ) - v2 . size ( ) - 1 ; int sum = 0 ; int i = 0 ; while ( i < x ) { sum += v1 . get ( i ++ ) ; } return sum ; } else if ( v2 . size ( ) > v1 . size ( ) ) { Collections . sort ( v1 ) ; Collections . sort ( v2 ) ; int x = v2 . size ( ) - v1 . size ( ) - 1 ; int sum = 0 ; int i = 0 ; while ( i < x ) { sum += v2 . get ( i ++ ) ; } return sum ; } else return 0 ; }", "python": "def MinimizeleftOverSum ( a , n ) :\n    v1 , v2 = [ ] , [ ] ;\n    for i in range ( n ) :\n        if ( a [ i ] % 2 ) :\n            v1 . append ( a [ i ] ) ;\n        else :\n            v2 . append ( a [ i ] ) ;\n    if ( len ( v1 ) > len ( v2 ) ) :\n        v1 . sort ( ) ;\n        v2 . sort ( ) ;\n        x = len ( v1 ) - len ( v2 ) - 1 ;\n        sum = 0 ;\n        i = 0 ;\n        while ( i < x ) :\n            sum += v1 [ i ] ;\n            i += 1\n        return sum ;\n    elif ( len ( v2 ) > len ( v1 ) ) :\n        v1 . sort ( ) ;\n        v2 . sort ( ) ;\n        x = len ( v2 ) - len ( v1 ) - 1 ;\n        sum = 0 ;\n        i = 0 ;\n        while ( i < x ) :\n            sum += v2 [ i ] ;\n            i += 1\n        return sum ;\n    else :\n        return 0 ;\n"}
{"java": "static int number_of_digits ( int n ) { int i ; int res ; int sum = 0 ; for ( i = 4 , res = 1 ; ; i *= 4 , res ++ ) { sum += i ; if ( sum >= n ) break ; } return res ; }", "python": "def number_of_digits ( n ) :\n    i = 4 ;\n    res = 1 ;\n    sum = 0 ;\n    while ( True ) :\n        i *= 4 ;\n        res += 1 ;\n        sum += i ;\n        if ( sum >= n ) :\n            break ;\n    return res ;\n"}
{"java": "static void half ( int arr [ ] , int n ) { int i ; int flag = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) System . out . print ( arr [ i ] / 2 + \" \u2581 \" ) ; else { if ( flag == 0 ) { System . out . print ( arr [ i ] / 2 - 1 + \" \u2581 \" ) ; flag = 1 ; } else { int q = arr [ i ] / 2 ; System . out . print ( q + \" \u2581 \" ) ; flag = 0 ; } } } }", "python": "def half ( arr , n ) :\n    flag = 0\n    for i in range ( n ) :\n        if arr [ i ] % 2 == 0 :\n            print ( arr [ i ] // 2 , end = \" \u2581 \" )\n        else :\n            if flag == 0 :\n                print ( arr [ i ] // 2 , end = \" \u2581 \" )\n                flag = 1\n            else :\n                q = arr [ i ] // 2\n                q += 1\n                print ( q , end = \" \u2581 \" )\n                flag = 0\n"}
{"java": "static int minOperations ( int n , int m ) { if ( m % n != 0 ) return - 1 ; int minOperations = 0 ; int q = m / n ; while ( q % 2 == 0 ) { q = q / 2 ; minOperations ++ ; } while ( q % 3 == 0 ) { q = q / 3 ; minOperations ++ ; } if ( q == 1 ) return minOperations ; return - 1 ; }", "python": "def minOperations ( n , m ) :\n    if ( m % n != 0 ) :\n        return - 1\n    minOperations = 0\n    q = int ( m / n )\n    while ( q % 2 == 0 ) :\n        q = int ( q / 2 )\n        minOperations += 1\n    while ( q % 3 == 0 ) :\n        q = int ( q / 3 )\n        minOperations += 1\n    if ( q == 1 ) :\n        return minOperations\n    return - 1\n"}
{"java": "static float cyl ( float r , float R , float h ) { if ( h < 0 && r < 0 && R < 0 ) return - 1 ; float r1 = r ; float h1 = h ; float V = ( float ) ( 3.14 * Math . pow ( r1 , 2 ) * h1 ) ; return V ; }", "python": "def cyl ( r , R , h ) :\n    if ( h < 0 and r < 0 and R < 0 ) :\n        return - 1\n    r1 = r\n    h1 = h\n    V = 3.14 * pow ( r1 , 2 ) * h1\n    return round ( V , 2 )\n"}
{"java": "static boolean IsPossible ( String s ) { int n = s . length ( ) ; HashSet < Character > count = new HashSet < > ( ) ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { count . add ( s . charAt ( i ) ) ; map . put ( s . charAt ( i ) , map . get ( s . charAt ( i ) ) == null ? 1 : map . get ( s . charAt ( i ) ) + 1 ) ; } if ( count . size ( ) == 1 ) return true ; if ( count . size ( ) > 2 ) return false ; String newString = count . toArray ( ) . toString ( ) ; int j = 0 ; char it = newString . charAt ( j ) ; int x = 0 , y = 0 ; x = map . get ( it ) == null ? 0 : map . get ( it ) ; j ++ ; it = newString . charAt ( j ) ; y = map . get ( it ) == null ? 0 : map . get ( it ) ; if ( Math . abs ( x - y ) <= 1 ) return true ; return false ; }", "python": "def IsPossible ( s ) :\n    n = len ( s ) ;\n    count = set ( ) ;\n    map = dict . fromkeys ( s , 0 ) ;\n    for i in range ( n ) :\n        count . add ( s [ i ] ) ;\n        map [ s [ i ] ] += 1 ;\n    if ( len ( count ) == 1 ) :\n        return True ;\n    if ( len ( count ) > 2 ) :\n        return False ;\n    j = 0\n    it = list ( count ) [ j ] ;\n    x = 0 ; y = 0 ;\n    x = map [ it ] ;\n    j += 1\n    it = list ( count ) [ j ] ;\n    y = map [ it ] ;\n    if ( abs ( x - y ) <= 1 ) :\n        return True ;\n    return False ;\n"}
{"java": "static void findSubSeq ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int count [ ] = new int [ n ] ; int prev [ ] = new int [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) count [ i ] = 1 ; for ( j = 0 ; j < n ; j ++ ) prev [ j ] = - 1 ; int max = 0 ; int maxprev = - 1 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] % arr [ j ] == 0 && count [ j ] + 1 > count [ i ] ) { count [ i ] = count [ j ] + 1 ; prev [ i ] = j ; } } if ( max < count [ i ] ) { max = count [ i ] ; maxprev = i ; } } i = maxprev ; while ( i >= 0 ) { if ( arr [ i ] != - 1 ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; i = prev [ i ] ; } }", "python": "def findSubSeq ( arr , n ) :\n    arr . sort ( ) ;\n    count = [ 1 ] * n ;\n    prev = [ - 1 ] * n ;\n    max = 0 ;\n    maxprev = - 1 ;\n    for i in range ( n ) :\n        for j in range ( i - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] % arr [ j ] == 0 and count [ j ] + 1 > count [ i ] ) :\n                count [ i ] = count [ j ] + 1 ;\n                prev [ i ] = j ;\n        if ( max < count [ i ] ) :\n            max = count [ i ] ;\n            maxprev = i ;\n    i = maxprev ;\n    while ( i >= 0 ) :\n        if ( arr [ i ] != - 1 ) :\n            print ( arr [ i ] , end = \" \u2581 \" ) ;\n        i = prev [ i ] ;\n"}
{"java": "static int properDivisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j * j <= i ; ++ j ) { if ( i % j == 0 ) { if ( i / j == j ) sum += j ; else sum += j + i / j ; } } sum = sum - i ; } return sum ; }", "python": "def properDivisorSum ( n ) :\n    sum = 0\n    for i in range ( n + 1 ) :\n        for j in range ( 1 , i + 1 ) :\n            if j * j > i :\n                break\n            if ( i % j == 0 ) :\n                if ( i // j == j ) :\n                    sum += j\n                else :\n                    sum += j + i // j\n        sum = sum - i\n    return sum\n"}
{"java": "public static int solve ( int [ ] A , int n ) { int [ ] [ ] dp = new int [ 2000 ] [ 2000 ] ; int flag = 1 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += A [ i ] ; for ( int i = - sum ; i <= sum ; i ++ ) { try { dp [ 0 ] [ i ] = Integer . MAX_VALUE ; } catch ( Exception e ) { } } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= sum ; j ++ ) { try { dp [ flag ] [ j ] = Integer . MAX_VALUE ; if ( j - A [ i - 1 ] <= sum && j - A [ i - 1 ] >= - sum ) dp [ flag ] [ j ] = dp [ flag ^ 1 ] [ j - A [ i - 1 ] ] ; if ( j + A [ i - 1 ] <= sum && j + A [ i - 1 ] >= - sum && dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] != Integer . MAX_VALUE ) dp [ flag ] [ j ] = Math . min ( dp [ flag ] [ j ] , dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] + 1 ) ; } catch ( Exception e ) { } } flag = flag ^ 1 ; } for ( int i = 0 ; i <= sum ; i ++ ) { if ( dp [ flag ^ 1 ] [ i ] != Integer . MAX_VALUE ) return dp [ flag ^ 1 ] [ i ] ; } return n - 1 ; }", "python": "def solve ( A , n ) :\n    dp = [ [ 0 for i in range ( 2000 ) ] for i in range ( 2000 ) ]\n    flag = 1\n    sum = 0\n    for i in range ( n ) :\n        sum += A [ i ]\n    for i in range ( - sum , sum + 1 ) :\n        dp [ 0 ] [ i ] = 10 ** 9\n    dp [ 0 ] [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( - sum , sum + 1 ) :\n            dp [ flag ] [ j ] = 10 ** 9\n            if ( j - A [ i - 1 ] <= sum and j - A [ i - 1 ] >= - sum ) :\n                dp [ flag ] [ j ] = dp [ flag ^ 1 ] [ j - A [ i - 1 ] ]\n            if ( j + A [ i - 1 ] <= sum and j + A [ i - 1 ] >= - sum and dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] != 10 ** 9 ) :\n                dp [ flag ] [ j ] = min ( dp [ flag ] [ j ] , dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] + 1 )\n        flag = flag ^ 1\n    for i in range ( sum + 1 ) :\n        if ( dp [ flag ^ 1 ] [ i ] != 10 ** 9 ) :\n            return dp [ flag ^ 1 ] [ i ]\n    return n - 1\n"}
{"java": "static int CountAllPairs ( int N , int K ) { int count = 0 ; if ( N > K ) { count = N - K ; for ( int i = K + 1 ; i <= N ; i ++ ) count = count + ( ( N - K ) / i ) ; } return count ; }", "python": "def CountAllPairs ( N , K ) :\n    count = 0\n    if ( N > K ) :\n        count = N - K\n        for i in range ( K + 1 , N + 1 ) :\n            count = count + ( ( N - K ) // i )\n    return count\n"}
{"java": "static String findMinLenStr ( String str , int k ) { int n = str . length ( ) ; int st = 0 ; int end = 0 ; int cnt [ ] = new int [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) cnt [ i ] = 0 ; int distEle = 0 ; int currlen ; int minlen = n ; int startInd = - 1 ; while ( end < n ) { cnt [ str . charAt ( end ) - ' a ' ] ++ ; if ( cnt [ str . charAt ( end ) - ' a ' ] == 1 ) distEle ++ ; if ( distEle > k ) { while ( st < end && distEle > k ) { if ( cnt [ str . charAt ( st ) - ' a ' ] == 1 ) distEle -- ; cnt [ str . charAt ( st ) - ' a ' ] -- ; st ++ ; } } if ( distEle == k ) { while ( st < end && cnt [ str . charAt ( st ) - ' a ' ] > 1 ) { cnt [ str . charAt ( st ) - ' a ' ] -- ; st ++ ; } currlen = end - st + 1 ; if ( currlen < minlen ) { minlen = currlen ; startInd = st ; } } end ++ ; } return str . substring ( startInd , startInd + minlen ) ; }", "python": "def findMinLenStr ( str , k ) :\n    n = len ( str )\n    st = 0\n    end = 0\n    cnt = [ 0 ] * 26\n    distEle = 0\n    currlen = 0\n    minlen = n\n    startInd = - 1\n    while ( end < n ) :\n        cnt [ ord ( str [ end ] ) - ord ( ' a ' ) ] += 1\n        if ( cnt [ ord ( str [ end ] ) - ord ( ' a ' ) ] == 1 ) :\n            distEle += 1\n        if ( distEle > k ) :\n            while ( st < end and distEle > k ) :\n                if ( cnt [ ord ( str [ st ] ) - ord ( ' a ' ) ] == 1 ) :\n                    distEle -= 1\n                cnt [ ord ( str [ st ] ) - ord ( ' a ' ) ] -= 1\n                st += 1\n        if ( distEle == k ) :\n            while ( st < end and cnt [ ord ( str [ st ] ) - ord ( ' a ' ) ] > 1 ) :\n                cnt [ ord ( str [ st ] ) - ord ( ' a ' ) ] -= 1\n                st += 1\n            currlen = end - st + 1\n            if ( currlen < minlen ) :\n                minlen = currlen\n                startInd = st\n        end += 1\n    return str [ startInd : startInd + minlen ]\n"}
{"java": "static int findMaxOddSubarraySum ( int arr [ ] , int n ) { int min_odd = Integer . MAX_VALUE ; boolean isOdd = false ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) sum = sum + arr [ i ] ; if ( arr [ i ] % 2 != 0 ) { isOdd = true ; if ( min_odd > Math . abs ( arr [ i ] ) ) min_odd = Math . abs ( arr [ i ] ) ; } } if ( isOdd == false ) return - 1 ; if ( sum % 2 == 0 ) sum = sum - min_odd ; return sum ; }", "python": "def findMaxOddSubarraySum ( arr , n ) :\n    min_odd = + 2147483647\n    isOdd = False\n    sum = 0\n    for i in range ( n ) :\n        if ( arr [ i ] > 0 ) :\n            sum = sum + arr [ i ]\n        if ( arr [ i ] % 2 != 0 ) :\n            isOdd = True\n            if ( min_odd > abs ( arr [ i ] ) ) :\n                min_odd = abs ( arr [ i ] )\n    if ( isOdd == False ) :\n        return - 1\n    if ( sum % 2 == 0 ) :\n        sum = sum - m\n    return sum\n"}
{"java": "static float trianglearea ( float l , float b ) { if ( l < 0 || b < 0 ) return - 1 ; float area = ( l * b ) / 2 ; return area ; }", "python": "def trianglearea ( l , b ) :\n    if ( l < 0 or b < 0 ) :\n        return - 1\n    area = ( l * b ) / 2\n    return area\n"}
{"java": "static int findCount ( int N ) { Vector list = new Vector ( ) ; int sum = 0 ; int i ; for ( i = 0 ; i < 20 ; i ++ ) { sum += Math . pow ( 2 , i ) ; list . add ( sum ) ; } for ( i = 0 ; i < 20 ; i ++ ) { if ( ( int ) list . get ( i ) > N ) return ( list . indexOf ( list . get ( i ) ) + 1 ) ; } return 0 ; }", "python": "def findCount ( N ) :\n    list = [ ]\n    sum = 0\n    for i in range ( 0 , 20 ) :\n        sum += 2 ** i\n        list . append ( sum )\n    for value in list :\n        if ( value > N ) :\n            return ( list . index ( value ) + 1 )\n"}
{"java": "static int Min_Replace ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; Integer [ ] freq = new Integer [ MAX ] ; Arrays . fill ( freq , 0 ) ; int p = 0 ; freq [ p ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) ++ freq [ p ] ; else ++ freq [ ++ p ] ; } Arrays . sort ( freq , Collections . reverseOrder ( ) ) ; int ans = 0 ; for ( int i = k ; i <= p ; i ++ ) ans += freq [ i ] ; return ans ; }", "python": "def Min_Replace ( arr , n , k ) :\n    arr . sort ( reverse = False )\n    freq = [ 0 for i in range ( MAX ) ]\n    p = 0\n    freq [ p ] = 1\n    for i in range ( 1 , n , 1 ) :\n        if ( arr [ i ] == arr [ i - 1 ] ) :\n            freq [ p ] += 1\n        else :\n            p += 1\n            freq [ p ] += 1\n    freq . sort ( reverse = True )\n    ans = 0\n    for i in range ( k , p + 1 , 1 ) :\n        ans += freq [ i ]\n    return ans\n"}
{"java": "static void remove_row_col ( int arr [ ] [ ] , int n , int x ) { for ( int i = x ; i < n ; i ++ ) { for ( int j = x ; j < n ; j ++ ) { System . out . print ( arr [ i ] [ j ] + \" \u2581 \" ) ; } System . out . println ( ) ; } }", "python": "def remove_row_col ( arr , n , x ) :\n    for i in range ( x , n ) :\n        for j in range ( x , n ) :\n            print ( arr [ i ] [ j ] , end = \" \u2581 \" )\n        print ( )\n"}
{"java": "static int SUM ( int n , int m ) { if ( m == 1 ) return ( n * ( n + 1 ) / 2 ) ; int sum = SUM ( n , m - 1 ) ; return ( sum * ( sum + 1 ) / 2 ) ; }", "python": "def SUM ( n , m ) :\n    if ( m == 1 ) :\n        return ( n * ( n + 1 ) / 2 )\n    sum = SUM ( n , m - 1 )\n    return int ( sum * ( sum + 1 ) / 2 )\n"}
{"java": "static int countSquares ( int m , int n ) { if ( n < m ) { int temp = m ; m = n ; n = temp ; } return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; }", "python": "def countSquares ( m , n ) :\n    if ( n < m ) :\n        temp = m\n        m = n\n        n = temp\n    return ( ( m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ) )\n"}
{"java": "static void printGP ( int a , int r , int n ) { int curr_term ; for ( int i = 0 ; i < n ; i ++ ) { curr_term = a * ( int ) Math . pow ( r , i ) ; System . out . print ( curr_term + \" \u2581 \" ) ; } }", "python": "def printGP ( a , r , n ) :\n    for i in range ( 0 , n ) :\n        curr_term = a * pow ( r , i )\n        print ( curr_term , end = \" \u2581 \" )\n"}
{"java": "static float Calculate_GST ( float org_cost , float N_price ) { return ( ( ( N_price - org_cost ) * 100 ) / org_cost ) ; }", "python": "def Calculate_GST ( org_cost , N_price ) :\n    return ( ( ( N_price - org_cost ) * 100 ) / org_cost ) ;\n"}
{"java": "static int LucasSum ( int N ) { int sum = 0 ; int a = 2 , b = 1 , c ; sum += a ; while ( b <= N ) { sum += b ; c = a + b ; a = b ; b = c ; } return sum ; }", "python": "def LucasSum ( N ) :\n    Sum = 0\n    a = 2\n    b = 1\n    c = 0\n    Sum += a\n    while ( b <= N ) :\n        Sum += b\n        c = a + b\n        a = b\n        b = c\n    return Sum\n"}
{"java": "static int sumofproduct ( int n ) { int ans = 0 ; for ( int x = 1 ; x <= n ; x ++ ) { int y = n / x ; ans += ( y * x ) ; } return ans ; }", "python": "def sumofproduct ( n ) :\n    ans = 0\n    for x in range ( 1 , n + 1 ) :\n        y = int ( n / x )\n        ans += ( y * x )\n    return ans\n"}
{"java": "public static int check ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int x4 , int y4 ) { if ( x1 == x2 ) { if ( x3 == x4 ) return 2 ; else if ( y3 == y4 ) return 1 ; else return 0 ; } else if ( x3 == x4 ) { if ( y1 == y2 ) return 1 ; else return 0 ; } else { if ( ( double ) ( y2 - y1 ) / ( x2 - x1 ) == ( double ) ( y4 - y3 ) / ( x4 - x3 ) ) return 2 ; else if ( ( y1 - y2 ) * ( y4 - y3 ) == ( x2 - x1 ) * ( x4 - x3 ) ) return 1 ; else return 0 ; } }", "python": "def judge ( lst ) :\n    x0 , y0 , x1 , y1 , x2 , y2 , x3 , y3 = lst\n    v0 = ( x1 - x0 , y1 - y0 )\n    v1 = ( x3 - x2 , y3 - y2 )\n    dot = v0 [ 0 ] * v1 [ 0 ] + v0 [ 1 ] * v1 [ 1 ]\n    cross = v0 [ 0 ] * v1 [ 1 ] - v0 [ 1 ] * v1 [ 0 ]\n    if dot == 0 :\n        print ( 1 )\n    elif cross == 0 :\n        print ( 2 )\n    else :\n        print ( 0 )\n"}
{"java": "static double extrapolate ( double [ ] [ ] d , double x ) { double y = d [ 0 ] [ 1 ] + ( x - d [ 0 ] [ 0 ] ) / ( d [ 1 ] [ 0 ] - d [ 0 ] [ 0 ] ) * ( d [ 1 ] [ 1 ] - d [ 0 ] [ 1 ] ) ; return y ; }", "python": "def extrapolate ( d , x ) :\n    y = ( d [ 0 ] [ 1 ] + ( x - d [ 0 ] [ 0 ] ) / ( d [ 1 ] [ 0 ] - d [ 0 ] [ 0 ] ) * ( d [ 1 ] [ 1 ] - d [ 0 ] [ 1 ] ) ) ;\n    return y ;\n"}
{"java": "static void twoWaySort ( Integer arr [ ] , int n ) { int l = 0 , r = n - 1 ; int k = 0 ; while ( l < r ) { while ( arr [ l ] % 2 != 0 ) { l ++ ; k ++ ; } while ( arr [ r ] % 2 == 0 && l < r ) r -- ; if ( l < r ) { int temp = arr [ l ] ; arr [ l ] = arr [ r ] ; arr [ r ] = temp ; } } Arrays . sort ( arr , 0 , k , Collections . reverseOrder ( ) ) ; Arrays . sort ( arr , k , n ) ; }", "python": "def two_way_sort ( arr , arr_len ) :\n    l , r = 0 , arr_len - 1\n    k = 0\n    while ( l < r ) :\n        while ( arr [ l ] % 2 != 0 ) :\n            l += 1\n            k += 1\n        while ( arr [ r ] % 2 == 0 and l < r ) :\n            r -= 1\n        if ( l < r ) :\n            arr [ l ] , arr [ r ] = arr [ r ] , arr [ l ]\n    odd = arr [ : k ]\n    even = arr [ k : ]\n    odd . sort ( reverse = True )\n    even . sort ( )\n    odd . extend ( even )\n    return odd\n"}
{"java": "static boolean isMultipleof5 ( int n ) { char str [ ] = new char [ MAX ] ; int len = str . length ; if ( str [ len - 1 ] == '5' || str [ len - 1 ] == '0' ) return true ; return false ; }", "python": "def isMultipleof5 ( n ) :\n    s = str ( n ) ;\n    l = len ( s ) ;\n    if ( s [ l - 1 ] == '5' or s [ l - 1 ] == '0' ) :\n        return True ;\n    return False ;\n"}
{"java": "static int maxOnesIndex ( boolean arr [ ] , int n ) { int i = 0 ; int leftCnt = 0 ; int rightCnt = 0 ; int maxIndex = - 1 ; int lastInd = - 1 ; int maxCnt = 0 ; while ( i < n ) { if ( arr [ i ] ) { rightCnt ++ ; } else { if ( lastInd != - 1 ) { if ( rightCnt + leftCnt + 1 > maxCnt ) { maxCnt = leftCnt + rightCnt + 1 ; maxIndex = lastInd ; } } lastInd = i ; leftCnt = rightCnt ; rightCnt = 0 ; } i ++ ; } if ( lastInd != - 1 ) { if ( leftCnt + rightCnt + 1 > maxCnt ) { maxCnt = leftCnt + rightCnt + 1 ; maxIndex = lastInd ; } } return maxIndex ; }", "python": "def maxOnesIndex ( arr , n ) :\n    i = 0\n    leftCnt = 0\n    rightCnt = 0\n    maxIndex = - 1\n    lastInd = - 1\n    maxCnt = 0\n    while i < n :\n        if arr [ i ] == 1 :\n            rightCnt += 1\n        else :\n            if lastInd != - 1 :\n                if rightCnt + leftCnt + 1 > maxCnt :\n                    maxCnt = leftCnt + rightCnt + 1\n                    maxIndex = lastInd\n            lastInd = i\n            leftCnt = rightCnt\n            rightCnt = 0\n        i += 1\n    if lastInd != - 1 :\n        if leftCnt + rightCnt + 1 > maxCnt :\n            maxCnt = leftCnt + rightCnt + 1\n            maxIndex = lastInd\n    return maxIndex\n"}
{"java": "static String OctToBin ( String octnum ) { long i = 0 ; String binary = \" \" ; while ( i < octnum . length ( ) ) { char c = octnum . charAt ( ( int ) i ) ; switch ( c ) { case '0' : binary += \"000\" ; break ; case '1' : binary += \"001\" ; break ; case '2' : binary += \"010\" ; break ; case '3' : binary += \"011\" ; break ; case '4' : binary += \"100\" ; break ; case '5' : binary += \"101\" ; break ; case '6' : binary += \"110\" ; break ; case '7' : binary += \"111\" ; break ; default : System . out . println ( \" \\n Invalid \u2581 Octal \u2581 Digit \u2581 \" + octnum . charAt ( ( int ) i ) ) ; break ; } i ++ ; } return binary ; }", "python": "def OctToBin ( octnum ) :\n    binary = \" \"\n    while octnum != 0 :\n        d = int ( octnum % 10 )\n        if d == 0 :\n            binary = \" \" . join ( [ \"000\" , binary ] )\n        elif d == 1 :\n            binary = \" \" . join ( [ \"001\" , binary ] )\n        elif d == 2 :\n            binary = \" \" . join ( [ \"010\" , binary ] )\n        elif d == 3 :\n            binary = \" \" . join ( [ \"011\" , binary ] )\n        elif d == 4 :\n            binary = \" \" . join ( [ \"100\" , binary ] )\n        elif d == 5 :\n            binary = \" \" . join ( [ \"101\" , binary ] )\n        elif d == 6 :\n            binary = \" \" . join ( [ \"110\" , binary ] )\n        elif d == 7 :\n            binary = \" \" . join ( [ \"111\" , binary ] )\n        else :\n            binary = \" Invalid \u2581 Octal \u2581 Digit \"\n            break\n        octnum = int ( octnum / 10 )\n    return binary\n"}
{"java": "static boolean checking ( String s ) { int c = 0 ; int n = s . length ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) c ++ ; if ( c >= 6 && s . charAt ( i ) == '1' ) return true ; } return false ; }", "python": "def checking ( s ) :\n    c = 0\n    n = len ( s )\n    i = n - 1\n    while ( i >= 0 ) :\n        if ( s [ i ] == '0' ) :\n            c += 1\n        if ( c >= 6 and s [ i ] == '1' ) :\n            return True\n        i -= 1\n    return False\n"}
{"java": "static double sumOfSeries ( int n ) { double res = 0.0 ; int sum = 0 , prod = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; res += ( ( double ) sum / prod ) ; } return res ; }", "python": "def sumOfSeries ( n ) :\n    res = 0.0\n    sum = 0\n    prod = 1\n    for i in range ( 1 , n + 1 ) :\n        sum = sum + i\n        prod = prod * i\n        res = res + ( sum / prod )\n    return res\n"}
{"java": "public static void calc ( double x1 , double y1 , double x2 , double y2 , double px , double py ) { if ( y1 == y2 ) System . out . println ( px + \" \u2581 \" + y1 ) ; else if ( x1 == x2 ) System . out . println ( x1 + \" \u2581 \" + py ) ; else { double katamuki1 = ( y2 - y1 ) / ( x2 - x1 ) ; double seppen1 = - katamuki1 * x1 + y1 ; double katamuki2 = - 1.0 / katamuki1 ; double seppen2 = - katamuki2 * px + py ; double ansx = ( seppen2 - seppen1 ) / ( katamuki1 - katamuki2 ) ; double ansy = ansx * katamuki1 + seppen1 ; System . out . println ( ansx + \" \u2581 \" + ansy ) ; } }", "python": "def dot ( a , b ) : return a [ 0 ] * b [ 0 ] + a [ 1 ] * b [ 1 ]\ndef projection ( a , b ) : return [ x * dot ( a , b ) / dot ( a , a ) for x in a ]\nx1 , y1 , x2 , y2 = [ int ( i ) for i in input ( ) . split ( ) ]\na = [ x2 - x1 , y2 - y1 ]\nq = int ( input ( ) )\nfor i in range ( q ) :\n    x , y = [ int ( i ) for i in input ( ) . split ( ) ]\n    b = [ x - x1 , y - y1 ]\n    c = projection ( a , b )\n    print ( c [ 0 ] + x1 , c [ 1 ] + y1 )\n"}
{"java": "public static void calc ( double x1 , double y1 , double x2 , double y2 , double px , double py ) { if ( y1 == y2 ) System . out . println ( px + \" \u2581 \" + ( py - 2 * ( py - y1 ) ) ) ; else if ( x1 == x2 ) System . out . println ( ( px - 2 * ( px - x1 ) ) + \" \u2581 \" + py ) ; else { double katamuki1 = ( y2 - y1 ) / ( x2 - x1 ) ; double seppen1 = - 1.0 * katamuki1 * x1 + y1 ; double katamuki2 = - 1.0 / katamuki1 ; double seppen2 = - 1.0 * katamuki2 * px + py ; double ansx = ( seppen2 - seppen1 ) / ( katamuki1 - katamuki2 ) ; double ansy = ansx * katamuki1 + seppen1 ; System . out . println ( ( px - 2 * ( px - ansx ) ) + \" \u2581 \" + ( py - 2 * ( py - ansy ) ) ) ; } }", "python": "def dot ( a , b ) :\n    return a . real * b . real + a . imag * b . imag\n"}
{"java": "static int findCount ( int mat [ ] [ ] , int i , int j , int m ) { if ( i == 0 && j == 0 ) { if ( m == mat [ 0 ] [ 0 ] ) return 1 ; else return 0 ; } if ( m < 0 ) return 0 ; if ( i < 0 || j < 0 ) return 0 ; if ( v [ i ] [ j ] [ m ] ) return dp [ i ] [ j ] [ m ] ; v [ i ] [ j ] [ m ] = true ; dp [ i ] [ j ] [ m ] = findCount ( mat , i - 1 , j , m - mat [ i ] [ j ] ) + findCount ( mat , i , j - 1 , m - mat [ i ] [ j ] ) ; return dp [ i ] [ j ] [ m ] ; }", "python": "def findCount ( mat , i , j , m ) :\n    if ( i == 0 and j == 0 ) :\n        if ( m == mat [ 0 ] [ 0 ] ) :\n            return 1\n        else :\n            return 0\n    if ( m < 0 ) :\n        return 0\n    if ( i < 0 or j < 0 ) :\n        return 0\n    if ( v [ i ] [ j ] [ m ] > 0 ) :\n        return dp [ i ] [ j ] [ m ]\n    v [ i ] [ j ] [ m ] = True\n    dp [ i ] [ j ] [ m ] = ( findCount ( mat , i - 1 , j , m - mat [ i ] [ j ] ) + findCount ( mat , i , j - 1 , m - mat [ i ] [ j ] ) )\n    return dp [ i ] [ j ] [ m ]\n"}
{"java": "static int nextPerfectSquare ( int N ) { int nextN = ( int ) Math . floor ( Math . sqrt ( N ) ) + 1 ; return nextN * nextN ; }", "python": "def nextPerfectSquare ( N ) :\n    nextN = math . floor ( math . sqrt ( N ) ) + 1\n    return nextN * nextN\n"}
{"java": "static int calculate ( int a [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int r = i + 1 ; for ( int j = r ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) r += 1 ; else break ; } int d = r - i ; ans += ( d * ( d + 1 ) / 2 ) ; i = r - 1 ; } return ans ; }", "python": "def calculate ( a , n ) :\n    ans = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        r = i + 1 ;\n        for j in range ( r , n ) :\n            if ( a [ i ] == a [ j ] ) :\n                r = r + 1 ;\n            else :\n                break ;\n        d = r - i ;\n        ans = ans + ( d * ( d + 1 ) / 2 ) ;\n        i = r - 1 ;\n        i = i + 1 ;\n    return int ( ans ) ;\n"}
{"java": "static int maxSum ( int p0 , int p1 , int a [ ] , int pos , int n ) { if ( pos == n ) { if ( p0 == p1 ) return p0 ; else return 0 ; } int ans = maxSum ( p0 , p1 , a , pos + 1 , n ) ; ans = Math . max ( ans , maxSum ( p0 + a [ pos ] , p1 , a , pos + 1 , n ) ) ; ans = Math . max ( ans , maxSum ( p0 , p1 + a [ pos ] , a , pos + 1 , n ) ) ; return ans ; }", "python": "def maxSum ( p0 , p1 , a , pos , n ) :\n    if ( pos == n ) :\n        if ( p0 == p1 ) :\n            return p0 ;\n        else :\n            return 0 ;\n    ans = maxSum ( p0 , p1 , a , pos + 1 , n ) ;\n    ans = max ( ans , maxSum ( p0 + a [ pos ] , p1 , a , pos + 1 , n ) ) ;\n    ans = max ( ans , maxSum ( p0 , p1 + a [ pos ] , a , pos + 1 , n ) ) ;\n    return ans ;\n"}
{"java": "static int maxOperations ( String str ) { int i , g , gk , gks ; i = g = gk = gks = 0 ; for ( i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' g ' ) { g ++ ; } else if ( str . charAt ( i ) == ' k ' ) { if ( g > 0 ) { g -- ; gk ++ ; } } else if ( str . charAt ( i ) == ' s ' ) { if ( gk > 0 ) { gk -- ; gks ++ ; } } } return gks ; }", "python": "def maxOperations ( str ) :\n    i , g , gk , gks = 0 , 0 , 0 , 0\n    for i in range ( len ( str ) ) :\n        if ( str [ i ] == ' g ' ) :\n            g += 1\n        elif ( str [ i ] == ' k ' ) :\n            if ( g > 0 ) :\n                g -= 1\n                gk += 1\n        elif ( str [ i ] == ' s ' ) :\n            if ( gk > 0 ) :\n                gk -= 1\n                gks += 1\n    return gks\n"}
{"java": "static void findIndex ( int a [ ] , int n , int key ) { int start = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == key ) { start = i ; break ; } } if ( start == - 1 ) { System . out . println ( \" Key \u2581 not \u2581 present \u2581 in \u2581 array \" ) ; return ; } int end = start ; for ( int i = n - 1 ; i >= start ; i -- ) { if ( a [ i ] == key ) { end = i ; break ; } } if ( start == end ) System . out . println ( \" Only \u2581 one \u2581 key \u2581 is \u2581 present \u2581 at \u2581 index \u2581 : \u2581 \" + start ) ; else { System . out . println ( \" Start \u2581 index : \u2581 \" + start ) ; System . out . println ( \" Last \u2581 index : \u2581 \" + end ) ; } }", "python": "def findIndex ( a , n , key ) :\n    start = - 1\n    for i in range ( n ) :\n        if a [ i ] == key :\n            start = i\n            break\n    if start == - 1 :\n        print ( \" Key \u2581 not \u2581 present \u2581 in \u2581 array \" )\n        return 0\n    end = start\n    for i in range ( n - 1 , start - 1 , - 1 ) :\n        if a [ i ] == key :\n            end = i\n            break\n    if start == end :\n        print ( \" Only \u2581 one \u2581 key \u2581 is \u2581 present \u2581 at \u2581 index \u2581 : \u2581 \" , start )\n    else :\n        print ( \" Start \u2581 index : \u2581 \" , start )\n        print ( \" Last \u2581 index : \u2581 \" , end )\n"}
{"java": "private static void solve ( ) { int n , m ; int [ ] rows , cols ; String [ ] arr ; String s ; n = sc . nextInt ( ) ; m = sc . nextInt ( ) ; rows = new int [ n ] ; cols = new int [ m ] ; arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s = sc . next ( ) ; arr [ i ] = s ; for ( int j = 0 ; j < m ; j ++ ) { if ( s . charAt ( j ) == ' * ' ) { rows [ i ] ++ ; cols [ j ] ++ ; } } } int min = Integer . MAX_VALUE ; int res ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { res = n - rows [ i ] + m - cols [ j ] ; if ( arr [ i ] . charAt ( j ) == ' . ' ) res -- ; if ( res < min ) min = res ; } } System . out . println ( min ) ; }", "python": "def main ( ) :\n    for i in range ( int ( input ( ) ) ) :\n        n , m = map ( int , input ( ) . split ( ) )\n        hlp = [ ]\n        for i in range ( n ) :\n            hlp . append ( input ( ) )\n        f = [ 0 ] * n\n        s = [ 0 ] * m\n        ans = 10 ** 10\n        for i in range ( n ) :\n            for j in range ( m ) :\n                if ( hlp [ i ] [ j ] == ' * ' ) :\n                    f [ i ] += 1\n                    s [ j ] += 1\n        for i in range ( n ) :\n            for j in range ( m ) :\n                tmp = 0\n                if ( hlp [ i ] [ j ] != ' * ' ) :\n                    tmp = - 1\n                tmp += ( n - f [ i ] ) + ( m - s [ j ] )\n                ans = min ( ans , tmp )\n        print ( ans )\n"}
{"java": "public static String fun ( long [ ] arr ) { long rem1 = 0 ; long rem2 = 0 ; long total = 0 ; if ( arr [ 3 ] > arr [ 0 ] ) { rem1 = arr [ 3 ] - arr [ 0 ] ; } if ( arr [ 4 ] > arr [ 1 ] ) { rem2 = arr [ 4 ] - arr [ 1 ] ; } total = rem1 + rem2 ; if ( total > arr [ 2 ] ) { return \" NO \" ; } else { return \" YES \" ; } }", "python": "def solve ( ) :\n    item = input ( ) . split ( )\n    a = int ( item [ 0 ] )\n    b = int ( item [ 1 ] )\n    c = int ( item [ 2 ] )\n    x = int ( item [ 3 ] )\n    y = int ( item [ 4 ] )\n    if a >= x :\n        if b + c >= y :\n            print ( \" Yes \" )\n        else :\n            print ( \" No \" )\n    else :\n        x -= a\n        if c < x :\n            print ( \" No \" )\n        else :\n            c -= x\n            if c + b < y :\n                print ( \" No \" )\n            else :\n                print ( \" Yes \" )\n"}
{"java": "static int frequencyOfSmallest ( int n , int arr [ ] ) { int mn = arr [ 0 ] , freq = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < mn ) { mn = arr [ i ] ; freq = 1 ; } else if ( arr [ i ] == mn ) freq ++ ; } return freq ; }", "python": "def frequencyOfSmallest ( n , arr ) :\n    mn = arr [ 0 ]\n    freq = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] < mn ) :\n            mn = arr [ i ]\n            freq = 1\n        elif ( arr [ i ] == mn ) :\n            freq += 1\n    return freq\n"}
{"java": "static int longest_substring ( String s , int k ) { int n = s . length ( ) ; if ( k > 1 ) { s += s ; n *= 2 ; } int ans = 0 ; int i = 0 ; while ( i < n ) { int x = 0 ; while ( i < n && s . charAt ( i ) == '0' ) { x ++ ; i ++ ; } ans = Math . max ( ans , x ) ; i ++ ; } if ( k == 1 || ans != n ) return ans ; else return ( ans / 2 ) * k ; }", "python": "def longest_substring ( s , k ) :\n    n = len ( s )\n    if ( k > 1 ) :\n        s += s\n        n *= 2\n    ans = 0\n    i = 0\n    while ( i < n ) :\n        x = 0\n        while ( i < n and s [ i ] == '0' ) :\n            x , i = x + 1 , i + 1\n        ans = max ( ans , x )\n        i += 1\n    if ( k == 1 or ans != n ) :\n        return ans\n    else :\n        return ( ans // 2 ) * k\n"}
{"java": "static int difference ( int n ) { int S , res ; S = ( n * ( n + 1 ) ) / 2 ; res = S * ( S - 1 ) ; return res ; }", "python": "def difference ( n ) :\n    S = ( n * ( n + 1 ) ) // 2 ;\n    res = S * ( S - 1 ) ;\n    return res ;\n"}
{"java": "static String removeChars ( String str , int k ) { int hash [ ] = new int [ MAX_CHAR ] ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; ++ i ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } String res = \" \" ; for ( int i = 0 ; i < n ; ++ i ) { if ( hash [ str . charAt ( i ) - ' a ' ] >= k ) { res += str . charAt ( i ) ; } } return res ; }", "python": "def removeChars ( str , k ) :\n    hash = [ 0 ] * ( MAX_CHAR )\n    n = len ( str )\n    for i in range ( n ) :\n        hash [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1\n    res = \" \"\n    for i in range ( n ) :\n        if ( hash [ ord ( str [ i ] ) - ord ( ' a ' ) ] >= k ) :\n            res += str [ i ]\n    return res\n"}
{"java": "static int countSquares ( int m , int n ) { if ( n < m ) { int temp = m ; m = n ; n = temp ; } return n * ( n + 1 ) * ( 3 * m - n + 1 ) / 6 ; }", "python": "def countSquares ( m , n ) :\n    if ( n < m ) :\n        temp = m\n        m = n\n        n = temp\n    return n * ( n + 1 ) * ( 3 * m - n + 1 ) // 6\n"}
{"java": "static void printSubstrings ( int n ) { int s = ( int ) Math . log10 ( n ) ; int d = ( int ) ( Math . pow ( 10 , s ) + 0.5 ) ; int k = d ; while ( n > 0 ) { while ( d > 0 ) { System . out . println ( n / d ) ; d = d / 10 ; } n = n % k ; k = k / 10 ; d = k ; } }", "python": "def printSubstrings ( n ) :\n    s = int ( math . log10 ( n ) ) ;\n    d = ( math . pow ( 10 , s ) ) ;\n    k = d ;\n    while ( n > 0 ) :\n        while ( d > 0 ) :\n            print ( int ( n // d ) ) ;\n            d = int ( d / 10 ) ;\n        n = int ( n % k ) ;\n        k = int ( k // 10 ) ;\n        d = k ;\n"}
{"java": "public static int [ ] sortArrays ( int [ ] arr ) { int length = arr . length ; for ( int j = 0 ; j < length - 1 ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { int temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; j = - 1 ; } } return arr ; }", "python": "def sortArrays ( arr ) :\n    length = len ( arr )\n    j = 0\n    while j < length - 1 :\n        if ( arr [ j ] > arr [ j + 1 ] ) :\n            temp = arr [ j ]\n            arr [ j ] = arr [ j + 1 ]\n            arr [ j + 1 ] = temp\n            j = - 1\n        j += 1\n    return arr\n"}
{"java": "static int rightmostNonZero ( int a [ ] , int n ) { int c5 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( a [ i ] > 0 && a [ i ] % 5 == 0 ) { a [ i ] /= 5 ; c5 ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { while ( c5 != 0 && a [ i ] > 0 && ( a [ i ] & 1 ) == 0 ) { a [ i ] >>= 1 ; c5 -- ; } } int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ans = ( ans * a [ i ] % 10 ) % 10 ; } if ( c5 != 0 ) ans = ( ans * 5 ) % 10 ; if ( ans != 0 ) return ans ; return - 1 ; }", "python": "def rightmostNonZero ( a , n ) :\n    c5 = 0\n    for i in range ( n ) :\n        while ( a [ i ] > 0 and a [ i ] % 5 == 0 ) :\n            a [ i ] //= 5\n            c5 += 1\n    for i in range ( n ) :\n        while ( c5 and a [ i ] > 0 and ( a [ i ] & 1 ) == 0 ) :\n            a [ i ] >>= 1\n            c5 -= 1\n    ans = 1\n    for i in range ( n ) :\n        ans = ( ans * a [ i ] % 10 ) % 10\n    if ( c5 ) :\n        ans = ( ans * 5 ) % 10\n    if ( ans ) :\n        return ans\n    return - 1\n"}
{"java": "static boolean isOsiris ( int n ) { int a = n % 10 ; int b = ( n / 10 ) % 10 ; int c = n / 100 ; int digit_sum = a + b + c ; if ( n == ( 2 * ( digit_sum ) * 11 ) ) { return true ; } return false ; }", "python": "def isOsiris ( n ) :\n    a = n % 10\n    b = ( n // 10 ) % 10\n    c = n // 100\n    digit_sum = a + b + c\n    if ( n == ( 2 * ( digit_sum ) * 11 ) ) :\n        return True\n    return False\n"}
{"java": "static void findNumbers ( int n ) { int odd = ( int ) Math . pow ( 10 , n ) - 1 ; int even = odd - 1 ; System . out . println ( \" Even \u2581 = \u2581 \" + even ) ; System . out . print ( \" Odd \u2581 = \u2581 \" + odd ) ; }", "python": "def findNumbers ( n ) :\n    odd = pow ( 10 , n ) - 1\n    even = odd - 1\n    print ( \" Even \u2581 = \u2581 \" , even )\n    print ( \" Odd \u2581 = \u2581 \" , odd )\n"}
{"java": "static int countPairs ( int arr [ ] , int k ) { Arrays . sort ( arr ) ; int pair = 0 ; int index = 0 ; while ( index < arr . length - 1 ) { if ( arr [ index + 1 ] - arr [ index ] <= k ) { pair += 1 ; index += 2 ; } else { index += 1 ; } } return pair ; }", "python": "def countPairs ( arr , k ) :\n    arr . sort ( )\n    pair = 0\n    index = 0\n    while ( index < len ( arr ) - 1 ) :\n        if arr [ index + 1 ] - arr [ index ] <= k :\n            pair += 1\n            index += 2\n        else :\n            index += 1\n    return pair\n"}
{"java": "static int countStaircases ( int N ) { int [ ] [ ] memo = new int [ N + 5 ] [ N + 5 ] ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { memo [ i ] [ j ] = 0 ; } } memo [ 3 ] [ 2 ] = memo [ 4 ] [ 2 ] = 1 ; for ( int i = 5 ; i <= N ; i ++ ) { for ( int j = 2 ; j <= i ; j ++ ) { if ( j == 2 ) { memo [ i ] [ j ] = memo [ i - j ] [ j ] + 1 ; } else { memo [ i ] [ j ] = memo [ i - j ] [ j ] + memo [ i - j ] [ j - 1 ] ; } } } int answer = 0 ; for ( int i = 1 ; i <= N ; i ++ ) answer = answer + memo [ N ] [ i ] ; return answer ; }", "python": "def countStaircases ( N ) :\n    memo = [ [ 0 for x in range ( N + 5 ) ] for y in range ( N + 5 ) ]\n    for i in range ( N + 1 ) :\n        for j in range ( N + 1 ) :\n            memo [ i ] [ j ] = 0\n    memo [ 3 ] [ 2 ] = memo [ 4 ] [ 2 ] = 1\n    for i in range ( 5 , N + 1 ) :\n        for j in range ( 2 , i + 1 ) :\n            if ( j == 2 ) :\n                memo [ i ] [ j ] = memo [ i - j ] [ j ] + 1\n            else :\n                memo [ i ] [ j ] = ( memo [ i - j ] [ j ] + memo [ i - j ] [ j - 1 ] )\n    answer = 0\n    for i in range ( 1 , N + 1 ) :\n        answer = answer + memo [ N ] [ i ]\n    return answer\n"}
{"java": "static int calculateSum ( int n ) { if ( n % 2 == 1 ) return ( n + 1 ) / 2 ; return - n / 2 ; }", "python": "def solve_sum ( n ) :\n    if ( n % 2 == 1 ) :\n        return ( n + 1 ) / 2\n    return - n / 2\n"}
{"java": "static int minSteps ( int i , int j , int arr [ ] [ ] ) { if ( i == n - 1 && j == n - 1 ) { return 0 ; } if ( i > n - 1 || j > n - 1 ) { return 9999999 ; } if ( v [ i ] [ j ] == 1 ) { return dp [ i ] [ j ] ; } v [ i ] [ j ] = 1 ; dp [ i ] [ j ] = 9999999 ; for ( int k = Math . max ( 0 , arr [ i ] [ j ] + j - n + 1 ) ; k <= Math . min ( n - i - 1 , arr [ i ] [ j ] ) ; k ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , minSteps ( i + k , j + arr [ i ] [ j ] - k , arr ) ) ; } dp [ i ] [ j ] ++ ; return dp [ i ] [ j ] ; }", "python": "def minSteps ( i , j , arr ) :\n    if ( i == n - 1 and j == n - 1 ) :\n        return 0 ;\n    if ( i > n - 1 or j > n - 1 ) :\n        return 9999999 ;\n    if ( v [ i ] [ j ] ) :\n        return dp [ i ] [ j ] ;\n    v [ i ] [ j ] = 1 ;\n    dp [ i ] [ j ] = 9999999 ;\n    for k in range ( max ( 0 , arr [ i ] [ j ] + j - n + 1 ) , min ( n - i - 1 , arr [ i ] [ j ] ) + 1 ) :\n        dp [ i ] [ j ] = min ( dp [ i ] [ j ] , minSteps ( i + k , j + arr [ i ] [ j ] - k , arr ) ) ;\n    dp [ i ] [ j ] += 1 ;\n    return dp [ i ] [ j ] ;\n"}
{"java": "static int leastValue ( int P , int A , int N , int a [ ] ) { int ans = - 1 ; float tmp = Float . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { float t = ( float ) ( P - a [ i ] * 0.006 ) ; if ( Math . abs ( t - A ) < tmp ) { tmp = Math . abs ( t - A ) ; ans = i ; } } return a [ ans ] ; }", "python": "def leastValue ( P , A , N , a ) :\n    ans = - 1\n    tmp = float ( ' inf ' )\n    for i in range ( N ) :\n        t = P - a [ i ] * 0.006\n        if abs ( t - A ) < tmp :\n            tmp = abs ( t - A )\n            ans = i\n    return a [ ans ]\n"}
{"java": "static void incrementVector ( Vector < Integer > a ) { int n = a . size ( ) ; a . set ( n - 1 , a . get ( n - 1 ) + 1 ) ; int carry = a . get ( n - 1 ) / 10 ; a . set ( n - 1 , a . get ( n - 1 ) % 10 ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( carry == 1 ) { a . set ( i , a . get ( i ) + 1 ) ; carry = a . get ( i ) / 10 ; a . set ( i , a . get ( i ) % 10 ) ; } } if ( carry == 1 ) a . add ( 0 , 1 ) ; }", "python": "def incrementVector ( a ) :\n    n = len ( a )\n    a [ n - 1 ] += 1\n    carry = a [ n - 1 ] / 10\n    a [ n - 1 ] = a [ n - 1 ] % 10\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( carry == 1 ) :\n            a [ i ] += 1\n            carry = a [ i ] / 10\n            a [ i ] = a [ i ] % 10\n    if ( carry == 1 ) :\n        a . insert ( 0 , 1 )\n"}
{"java": "static boolean checkPalindrome ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n / 2 ; ++ i ) if ( str . charAt ( i ) != str . charAt ( n - i - 1 ) ) ++ count ; return ( count <= 1 ) ; }", "python": "def checkPalindrome ( str ) :\n    n = len ( str )\n    count = 0\n    for i in range ( 0 , int ( n / 2 ) ) :\n        if ( str [ i ] != str [ n - i - 1 ] ) :\n            count = count + 1\n    if ( count <= 1 ) :\n        return True\n    else :\n        return False\n"}
{"java": "static void check ( int arr [ ] , int N ) { int even = 0 ; int odd = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { odd ++ ; } else { even ++ ; } } if ( even == N || odd == N ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; }", "python": "def check ( arr , N ) :\n    even = 0 ;\n    odd = 0 ;\n    for i in range ( N ) :\n        if ( arr [ i ] % 2 == 1 ) :\n            odd += 1 ;\n        else :\n            even += 1 ;\n    if ( even == N or odd == N ) :\n        print ( \" Yes \" ) ;\n    else :\n        print ( \" No \" ) ;\n"}
{"java": "static void sort ( int a [ ] ) { Random ran = new Random ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int r = ran . nextInt ( a . length ) ; int temp = a [ r ] ; a [ r ] = a [ i ] ; a [ i ] = temp ; } Arrays . sort ( a ) ; }", "python": "def main ( ) :\n    n = int ( input ( ) )\n    d1 = list ( map ( int , input ( ) . split ( ) ) )\n    d2 = list ( map ( int , input ( ) . split ( ) ) )\n    d3 = list ( map ( int , input ( ) . split ( ) ) )\n    choose1 = min ( n - d2 [ 0 ] - d3 [ 0 ] , d1 [ 1 ] )\n    choose2 = min ( n - choose1 - d3 [ 0 ] , d2 [ 1 ] )\n    choose3 = n - choose1 - choose2\n    print ( choose1 , choose2 , choose3 , sep = ' \u2581 ' )\n"}
{"java": "static void alternateFib ( int n ) { if ( n < 0 ) return ; int f1 = 0 ; int f2 = 1 ; System . out . print ( f1 + \" \u2581 \" ) ; for ( int i = 2 ; i <= n ; i ++ ) { int f3 = f2 + f1 ; if ( i % 2 == 0 ) System . out . print ( f3 + \" \u2581 \" ) ; f1 = f2 ; f2 = f3 ; } }", "python": "def alternateFib ( n ) :\n    if ( n < 0 ) :\n        return - 1 ;\n    f1 = 0 ;\n    f2 = 1 ;\n    print ( f1 , end = \" \u2581 \" ) ;\n    for i in range ( 2 , n + 1 ) :\n        f3 = f2 + f1 ;\n        if ( i % 2 == 0 ) :\n            print ( f3 , end = \" \u2581 \" ) ;\n        f1 = f2 ;\n        f2 = f3 ;\n"}
{"java": "static void rgb_to_hsv ( double r , double g , double b ) { r = r / 255.0 ; g = g / 255.0 ; b = b / 255.0 ; double cmax = Math . max ( r , Math . max ( g , b ) ) ; double cmin = Math . min ( r , Math . min ( g , b ) ) ; double diff = cmax - cmin ; double h = - 1 , s = - 1 ; if ( cmax == cmin ) h = 0 ; else if ( cmax == r ) h = ( 60 * ( ( g - b ) / diff ) + 360 ) % 360 ; else if ( cmax == g ) h = ( 60 * ( ( b - r ) / diff ) + 120 ) % 360 ; else if ( cmax == b ) h = ( 60 * ( ( r - g ) / diff ) + 240 ) % 360 ; if ( cmax == 0 ) s = 0 ; else s = ( diff / cmax ) * 100 ; double v = cmax * 100 ; System . out . println ( \" ( \" + h + \" \u2581 \" + s + \" \u2581 \" + v + \" ) \" ) ; }", "python": "def rgb_to_hsv ( r , g , b ) :\n    r , g , b = r / 255.0 , g / 255.0 , b / 255.0\n    cmax = max ( r , g , b )\n    cmin = min ( r , g , b )\n    diff = cmax - cmin\n    if cmax == cmin :\n        h = 0\n    elif cmax == r :\n        h = ( 60 * ( ( g - b ) / diff ) + 360 ) % 360\n    elif cmax == g :\n        h = ( 60 * ( ( b - r ) / diff ) + 120 ) % 360\n    elif cmax == b :\n        h = ( 60 * ( ( r - g ) / diff ) + 240 ) % 360\n    if cmax == 0 :\n        s = 0\n    else :\n        s = ( diff / cmax ) * 100\n    v = cmax * 100\n    return h , s , v\n"}
{"java": "static double sum ( int x , int n ) { double total = 1.0 ; double previous = 1.0 ; for ( int i = 1 ; i <= n ; i ++ ) { previous = ( previous * x ) / ( i + 1 ) ; total = total + previous ; } return total ; }", "python": "def sum ( x , n ) :\n    total = 1.0 ;\n    previous = 1.0 ;\n    for i in range ( 1 , n + 1 ) :\n        previous = ( previous * x ) / ( i + 1 ) ;\n        total = total + previous ;\n    return total ;\n"}
{"java": "static int minimumAdjacentDifference ( int a [ ] , int n , int k ) { int minDiff = Integer . MAX_VALUE ; for ( int i = 0 ; i <= k ; i ++ ) { int maxDiff = Integer . MIN_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { maxDiff = Math . max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = Math . min ( minDiff , maxDiff ) ; } return minDiff ; }", "python": "def minimumAdjacentDifference ( a , n , k ) :\n    minDiff = INT_MAX ;\n    for i in range ( k + 1 ) :\n        maxDiff = INT_MIN ;\n        for j in range ( n - k - 1 ) :\n            for p in range ( i , i + j + 1 ) :\n                maxDiff = max ( maxDiff , a [ p + 1 ] - a [ p ] ) ;\n        minDiff = min ( minDiff , maxDiff ) ;\n    return minDiff ;\n"}
{"java": "static int findMin ( int arr [ ] , int n ) { int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int j = i + 1 ; while ( j < n && arr [ j ] >= arr [ j - 1 ] ) j ++ ; ans = Math . max ( ans , j - i ) ; i = j - 1 ; } return n - ans ; }", "python": "def findMin ( arr , n ) :\n    ans = 1\n    for i in range ( n ) :\n        j = i + 1\n        while ( j < n and arr [ j ] >= arr [ j - 1 ] ) :\n            j += 1\n        ans = max ( ans , j - i )\n        i = j - 1\n    return n - ans\n"}
{"java": "static String conversion ( String charSet , char [ ] str1 ) { String s2 = \" \" ; for ( char i : str1 ) s2 += alphabets [ charSet . indexOf ( i ) ] ; return s2 ; }", "python": "def conversion ( charSet , str1 ) :\n    s2 = \" \"\n    for i in str1 :\n        s2 += alphabets [ charSet . index ( i ) ]\n    return s2\n"}
{"java": "static int andSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < BITS ; i ++ ) { int countSetBits = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) != 0 ) countSetBits ++ ; } int subset = ( 1 << countSetBits ) - 1 ; subset = ( subset * ( 1 << i ) ) ; ans += subset ; } return ans ; }", "python": "def andSum ( arr , n ) :\n    ans = 0\n    for i in range ( 0 , BITS ) :\n        countSetBits = 0\n        for j in range ( 0 , n ) :\n            if ( arr [ j ] & ( 1 << i ) ) :\n                countSetBits = ( countSetBits + 1 )\n        subset = ( ( 1 << countSetBits ) - 1 )\n        subset = ( subset * ( 1 << i ) )\n        ans = ans + subset\n    return ans\n"}
{"java": "static boolean search ( int mat [ ] [ ] , int m , int n , int x ) { int i = m - 1 , j = 0 ; while ( i >= 0 && j < n ) { if ( mat [ i ] [ j ] == x ) return true ; if ( mat [ i ] [ j ] > x ) i -- ; else j ++ ; } return false ; }", "python": "def search ( mat , m , n , x ) :\n    i , j = m - 1 , 0\n    while ( i >= 0 and j < n ) :\n        if ( mat [ i ] [ j ] == x ) :\n            return True ;\n        if ( mat [ i ] [ j ] > x ) :\n            i -= 1\n        else :\n            j += 1\n    return False\n"}
{"java": "static void solve ( Scanner scanner ) { int N = scanner . nextInt ( ) , M = scanner . nextInt ( ) ; scanner . nextLine ( ) ; int [ ] S = Arrays . stream ( scanner . nextLine ( ) . split ( \" \u2581 \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] T = Arrays . stream ( scanner . nextLine ( ) . split ( \" \u2581 \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; long [ ] [ ] dp = new long [ N + 1 ] [ M + 1 ] ; long [ ] [ ] sum = new long [ N + 1 ] [ M + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= M ; j ++ ) { if ( S [ i - 1 ] == T [ j - 1 ] ) { dp [ i ] [ j ] = ( sum [ i - 1 ] [ j - 1 ] + 1 ) % MOD ; } sum [ i ] [ j ] = ( sum [ i ] [ j - 1 ] + sum [ i - 1 ] [ j ] + ( MOD - sum [ i - 1 ] [ j - 1 ] ) + dp [ i ] [ j ] ) % MOD ; } } long ans = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= M ; j ++ ) { ans = ( ans + dp [ i ] [ j ] ) % MOD ; } } System . out . println ( ans ) ; }", "python": "def main ( ) :\n    N , M = map ( int , readline ( ) . split ( ) )\n    S = list ( map ( int , readline ( ) . split ( ) ) )\n    T = list ( map ( int , readline ( ) . split ( ) ) )\n    dp = [ [ 0 ] * ( M + 1 ) for _ in range ( N + 1 ) ]\n    for i in range ( N + 1 ) :\n        dp [ i ] [ 0 ] = 1\n    for j in range ( M + 1 ) :\n        dp [ 0 ] [ j ] = 1\n    for i in range ( N ) :\n        for j in range ( M ) :\n            if S [ i ] == T [ j ] :\n                dp [ i + 1 ] [ j + 1 ] = ( dp [ i ] [ j + 1 ] + dp [ i + 1 ] [ j ] ) % MOD\n            else :\n                dp [ i + 1 ] [ j + 1 ] = ( dp [ i ] [ j + 1 ] + dp [ i + 1 ] [ j ] - dp [ i ] [ j ] ) % MOD\n    print ( dp [ N ] [ M ] )\n    return\n"}
{"java": "static String get_maximum ( char [ ] s , int a [ ] ) { int n = s . length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] - '0' < a [ s [ i ] - '0' ] ) { int j = i ; while ( j < n && ( s [ j ] - '0' <= a [ s [ j ] - '0' ] ) ) { s [ j ] = ( char ) ( '0' + a [ s [ j ] - '0' ] ) ; j ++ ; } return String . valueOf ( s ) ; } } return String . valueOf ( s ) ; }", "python": "def get_maximum ( s , a ) :\n    s = list ( s )\n    n = len ( s )\n    for i in range ( n ) :\n        if ( ord ( s [ i ] ) - ord ( '0' ) < a [ ord ( s [ i ] ) - ord ( '0' ) ] ) :\n            j = i\n            while ( j < n and ( ord ( s [ j ] ) - ord ( '0' ) <= a [ ord ( s [ j ] ) - ord ( '0' ) ] ) ) :\n                s [ j ] = chr ( ord ( '0' ) + a [ ord ( s [ j ] ) - ord ( '0' ) ] )\n                j += 1\n            return \" \" . join ( s ) ;\n    return s\n"}
{"java": "static int CntDivbyX ( int arr [ ] , int n , int x ) { int number = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { number = number * 2 + arr [ i ] ; if ( ( number % x == 0 ) ) count += 1 ; } return count ; }", "python": "def CntDivbyX ( arr , n , x ) :\n    number = 0\n    count = 0\n    for i in range ( n ) :\n        number = number * 2 + arr [ i ]\n        if ( ( number % x == 0 ) ) :\n            count += 1\n    return count\n"}
{"java": "public static int CntDivbyX ( int arr [ ] , int n , int x ) { int number = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { number = ( number * 2 + arr [ i ] ) % x ; if ( number == 0 ) count += 1 ; } return count ; }", "python": "def CntDivbyX ( arr , n , x ) :\n    number = 0\n    count = 0\n    for i in range ( 0 , n ) :\n        number = ( number * 2 + arr [ i ] ) % x\n        if number == 0 :\n            count += 1\n    return count\n"}
{"java": "static int countNonIncreasing ( int arr [ ] , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( arr [ i + 1 ] >= arr [ i ] ) len ++ ; else { cnt += ( ( ( len + 1 ) * len ) / 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) / 2 ) ; return cnt ; }", "python": "def countNonIncreasing ( arr , n ) :\n    cnt = 0 ;\n    len = 1 ;\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i + 1 ] >= arr [ i ] ) :\n            len += 1 ;\n        else :\n            cnt += ( ( ( len + 1 ) * len ) / 2 ) ;\n            len = 1 ;\n    if ( len > 1 ) :\n        cnt += ( ( ( len - 1 ) * len ) / 2 ) ;\n    return int ( cnt ) ;\n"}
{"java": "static void func ( int n , int k , int [ ] xa ) { int min = Integer . MAX_VALUE ; for ( int i = 0 ; i <= n - k ; i ++ ) { min = Math . min ( min , Math . min ( Math . abs ( xa [ i ] ) , Math . abs ( xa [ i + k - 1 ] ) ) + xa [ i + k - 1 ] - xa [ i ] ) ; } System . out . println ( min ) ; }", "python": "def solve ( ) :\n    n , k = map ( int , input ( ) . split ( ) )\n    al = [ int ( i ) for i in input ( ) . split ( ) ]\n    ans = sum ( abs ( i ) for i in al )\n    flag0 = 0 in al\n    if flag0 :\n        k -= 1\n        n -= 1\n        if k == 0 :\n            print ( 0 )\n            return\n        al . remove ( 0 )\n    nc = bisect . bisect_left ( al , 0 )\n    for i in range ( n ) :\n        if i < 0 or i + k - 1 >= n :\n            break\n        if al [ i ] < 0 and al [ i + k - 1 ] < 0 :\n            t1 = abs ( al [ i ] )\n        else :\n            t1 = min ( abs ( al [ i ] ) * 2 + abs ( al [ i + k - 1 ] ) , abs ( al [ i ] ) + abs ( al [ i + k - 1 ] ) * 2 )\n        if al [ i ] > 0 and al [ i + k - 1 ] > 0 :\n            t2 = abs ( al [ i + k - 1 ] )\n        else :\n            t2 = min ( abs ( al [ i ] ) * 2 + abs ( al [ i + k - 1 ] ) , abs ( al [ i ] ) + abs ( al [ i + k - 1 ] ) * 2 )\n        t = min ( t1 , t2 )\n        ans = min ( ans , t )\n    print ( ans )\n"}
{"java": "static void alter ( long x , long y ) { while ( true ) { if ( x == 0 || y == 0 ) break ; if ( x >= 2 * y ) x = x % ( 2 * y ) ; else if ( y >= 2 * x ) y = y % ( 2 * x ) ; else break ; } System . out . println ( \" X \u2581 = \u2581 \" + x + \" , \u2581 \" + \" Y \u2581 = \u2581 \" + y ) ; }", "python": "def alter ( x , y ) :\n    while ( True ) :\n        if ( x == 0 or y == 0 ) :\n            break\n        if ( x >= 2 * y ) :\n            x = x % ( 2 * y )\n        elif ( y >= 2 * x ) :\n            y = y % ( 2 * x )\n        else :\n            break\n    print ( \" X \u2581 = \" , x , \" , \u2581 \" , \" Y \u2581 = \" , y )\n"}
{"java": "static void compressString ( String s , int n ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] == 0 ) continue ; System . out . print ( ( char ) ( i + ' a ' ) + \" \" + freq [ i ] ) ; } }", "python": "def compressString ( s , n ) :\n    freq = [ 0 ] * MAX ;\n    for i in range ( n ) :\n        freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1 ;\n    for i in range ( MAX ) :\n        if ( freq [ i ] == 0 ) :\n            continue ;\n        print ( ( chr ) ( i + ord ( ' a ' ) ) + str ( freq [ i ] ) , end = \" \" ) ;\n"}
{"java": "static int CountOfOddSum ( int a [ ] [ ] , int n ) { int [ ] [ ] dp = new int [ n ] [ 2 ] ; int [ ] [ ] cnt = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] % 2 == 0 ) { cnt [ i ] [ 0 ] ++ ; } else { cnt [ i ] [ 1 ] ++ ; } } } dp [ 0 ] [ 0 ] = cnt [ 0 ] [ 0 ] ; dp [ 0 ] [ 1 ] = cnt [ 0 ] [ 1 ] ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] * cnt [ i ] [ 0 ] + dp [ i - 1 ] [ 1 ] * cnt [ i ] [ 1 ] ) ; dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] * cnt [ i ] [ 1 ] + dp [ i - 1 ] [ 1 ] * cnt [ i ] [ 0 ] ) ; } return dp [ n - 1 ] [ 1 ] ; }", "python": "def CountOfOddSum ( a , n ) :\n    dp = [ [ 0 for i in range ( 2 ) ] for i in range ( n ) ]\n    cnt = [ [ 0 for i in range ( 2 ) ] for i in range ( n ) ]\n    for i in range ( n ) :\n        for j in range ( 2 ) :\n            if ( a [ i ] [ j ] % 2 == 0 ) :\n                cnt [ i ] [ 0 ] += 1\n            else :\n                cnt [ i ] [ 1 ] += 1\n    dp [ 0 ] [ 0 ] = cnt [ 0 ] [ 0 ]\n    dp [ 0 ] [ 1 ] = cnt [ 0 ] [ 1 ]\n    for i in range ( 1 , n ) :\n        dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] * cnt [ i ] [ 0 ] + dp [ i - 1 ] [ 1 ] * cnt [ i ] [ 1 ] )\n        dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] * cnt [ i ] [ 1 ] + dp [ i - 1 ] [ 1 ] * cnt [ i ] [ 0 ] )\n    return dp [ n - 1 ] [ 1 ]\n"}
{"java": "static void Find_Sequence ( int [ ] arr , int n ) { Vector < Integer > inc_arr = new Vector < > ( ) , dec_arr = new Vector < > ( ) ; int flag = 0 ; long inc = - 1 , dec = ( long ) 1e7 ; for ( int i = 0 ; i < n ; i ++ ) { if ( inc < arr [ i ] && arr [ i ] < dec ) { if ( arr [ i ] < arr [ i + 1 ] ) { inc = arr [ i ] ; inc_arr . add ( arr [ i ] ) ; } else { dec = arr [ i ] ; dec_arr . add ( arr [ i ] ) ; } } else if ( inc < arr [ i ] ) { inc = arr [ i ] ; inc_arr . add ( arr [ i ] ) ; } else if ( dec > arr [ i ] ) { dec = arr [ i ] ; dec_arr . add ( arr [ i ] ) ; } else { System . out . println ( - 1 ) ; flag = 1 ; break ; } } if ( flag == 0 ) { for ( int i : inc_arr ) System . out . print ( i + \" \u2581 \" ) ; System . out . println ( ) ; for ( int i : dec_arr ) System . out . print ( i + \" \u2581 \" ) ; System . out . println ( ) ; } }", "python": "def Find_Sequence ( array , n ) :\n    inc_arr , dec_arr = [ ] , [ ]\n    inc , dec = - 1 , 1e7\n    for i in range ( n ) :\n        if inc < array [ i ] < dec :\n            if array [ i ] < array [ i + 1 ] :\n                inc = array [ i ]\n                inc_arr . append ( array [ i ] )\n            else :\n                dec = array [ i ]\n                dec_arr . append ( array [ i ] )\n        elif inc < array [ i ] :\n            inc = array [ i ]\n            inc_arr . append ( array [ i ] )\n        elif dec > array [ i ] :\n            dec = array [ i ]\n            dec_arr . append ( array [ i ] )\n        else :\n            print ( ' - 1' )\n            break\n    else :\n        print ( inc_arr , dec_arr )\n"}
{"java": "static void solve ( long a , long b ) { if ( a > 0 && b > 0 ) { System . out . println ( \" Positive \" ) ; } else if ( a <= 0 && b >= 0 ) { System . out . println ( \" Zero \" ) ; } else { long n = Math . abs ( a - b ) + 1 ; if ( n % 2 == 0 ) { System . out . println ( \" Positive \" ) ; } else { System . out . println ( \" Negative \" ) ; } } }", "python": "def solve ( a , b ) :\n    if ( a > 0 and b > 0 ) :\n        print ( \" Positive \" )\n    elif ( a <= 0 and b >= 0 ) :\n        print ( \" Zero \" )\n    else :\n        n = abs ( a - b ) + 1\n        if ( n % 2 == 0 ) :\n            print ( \" Positive \" )\n        else :\n            print ( \" Negative \" )\n"}
{"java": "static boolean check ( int n , int k , int [ ] a , int [ ] b ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; boolean fl = false ; int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) { if ( fl == true ) { return false ; } fl = true ; ind = i ; } } if ( ind == - 1 | Math . abs ( a [ ind ] - b [ ind ] ) <= k ) { return true ; } return false ; }", "python": "def check ( n , k , a , b ) :\n    a . sort ( )\n    b . sort ( )\n    fl = False\n    ind = - 1\n    for i in range ( n ) :\n        if ( a [ i ] != b [ i ] ) :\n            if ( fl == True ) :\n                return False\n            fl = True\n            ind = i\n    if ( ind == - 1 or abs ( a [ ind ] - b [ ind ] ) <= k ) :\n        return True\n    return False\n"}
{"java": "public static int counLastDigitK ( int low , int high , int k ) { int count = 0 ; for ( int i = low ; i <= high ; i ++ ) if ( i % 10 == k ) count ++ ; return count ; }", "python": "def counLastDigitK ( low , high , k ) :\n    count = 0\n    for i in range ( low , high + 1 ) :\n        if ( i % 10 == k ) :\n            count += 1\n    return count\n"}
{"java": "static int distinctCount ( int arr [ ] , int n ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) s . add ( Math . abs ( arr [ i ] ) ) ; return s . size ( ) ; }", "python": "def distinctCount ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        s . add ( abs ( arr [ i ] ) )\n    return len ( s )\n"}
{"java": "static boolean isPerfectSquare ( int n ) { for ( int i = 1 ; i * i <= n ; i ++ ) { if ( ( n % i == 0 ) && ( n / i == i ) ) { return true ; } } return false ; }", "python": "def isPerfectSquare ( n ) :\n    i = 1\n    while ( i * i <= n ) :\n        if ( ( n % i == 0 ) and ( n / i == i ) ) :\n            return True\n        i = i + 1\n    return False\n"}
{"java": "static int countSubarrays ( int a [ ] , int n , int x ) { int count = 0 ; int number = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) { count += 1 ; } else { number += ( count ) * ( count + 1 ) / 2 ; count = 0 ; } } if ( count != 0 ) number += ( count ) * ( count + 1 ) / 2 ; return number ; }", "python": "def countSubarrays ( a , n , x ) :\n    count = 0\n    number = 0\n    for i in range ( n ) :\n        if ( a [ i ] > x ) :\n            count += 1\n        else :\n            number += ( count ) * ( count + 1 ) / 2\n            count = 0\n    if ( count ) :\n        number += ( count ) * ( count + 1 ) / 2\n    return int ( number )\n"}
{"java": "static int missingK ( int [ ] a , int k , int n ) { int difference = 0 , ans = 0 , count = k ; boolean flag = false ; for ( int i = 0 ; i < n - 1 ; i ++ ) { difference = 0 ; if ( ( a [ i ] + 1 ) != a [ i + 1 ] ) { difference += ( a [ i + 1 ] - a [ i ] ) - 1 ; if ( difference >= count ) { ans = a [ i ] + count ; flag = true ; break ; } else count -= difference ; } } if ( flag ) return ans ; else return - 1 ; }", "python": "def missingK ( a , k , n ) :\n    difference = 0\n    ans = 0\n    count = k\n    flag = 0\n    for i in range ( 0 , n - 1 ) :\n        difference = 0\n        if ( ( a [ i ] + 1 ) != a [ i + 1 ] ) :\n            difference += ( a [ i + 1 ] - a [ i ] ) - 1\n            if ( difference >= count ) :\n                ans = a [ i ] + count\n                flag = 1\n                break\n            else :\n                count -= difference\n    if ( flag ) :\n        return ans\n    else :\n        return - 1\n"}
{"java": "public static int maxSum ( int arr [ ] , int n , int k ) { if ( n < k ) { System . out . println ( \" Invalid \" ) ; return - 1 ; } int res = 0 ; for ( int i = 0 ; i < k ; i ++ ) res += arr [ i ] ; int curr_sum = res ; for ( int i = k ; i < n ; i ++ ) { curr_sum += arr [ i ] - arr [ i - k ] ; res = Math . max ( res , curr_sum ) ; } return res ; }", "python": "def maxSum ( arr , n , k ) :\n    if ( n < k ) :\n        print ( \" Invalid \" )\n        return - 1\n    res = 0\n    for i in range ( k ) :\n        res += arr [ i ]\n    curr_sum = res\n    for i in range ( k , n ) :\n        curr_sum += arr [ i ] - arr [ i - k ]\n        res = max ( res , curr_sum )\n    return res\n"}
{"java": "public static double area_inscribed ( double P , double B , double H ) { return ( ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) ) ; }", "python": "def area_inscribed ( P , B , H ) :\n    return ( ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) )\n"}
{"java": "static int substrDeletion ( String str , int len ) { int count0 = 0 , count1 = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == '0' ) count0 ++ ; else count1 ++ ; } return Math . min ( count0 , count1 ) ; }", "python": "def substrDeletion ( string , length ) :\n    count0 = 0 ;\n    count1 = 0 ;\n    for i in range ( length ) :\n        if ( string [ i ] == '0' ) :\n            count0 += 1 ;\n        else :\n            count1 += 1 ;\n    return min ( count0 , count1 ) ;\n"}
{"java": "static int maxSubseq ( int [ ] vec , int n ) { int suffix = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( vec [ i ] == 1 ) { suffix ++ ; vec [ i ] = suffix ; } } int res = 0 ; int zero = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vec [ i ] == 0 ) zero ++ ; if ( vec [ i ] > 0 ) res = Math . max ( res , zero + vec [ i ] ) ; } return Math . max ( res , zero ) ; }", "python": "def maxSubseq ( vec , n ) :\n    suffix = 0\n    i = n - 1\n    while ( i >= 0 ) :\n        if ( vec [ i ] == 1 ) :\n            suffix += 1\n            vec [ i ] = suffix\n        i -= 1\n    res = 0\n    zero = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( vec [ i ] == 0 ) :\n            zero += 1\n        if ( vec [ i ] > 0 ) :\n            res = max ( res , zero + vec [ i ] )\n    return max ( res , zero )\n"}
{"java": "static long solve ( long v ) { if ( v <= 10 ) return v ; int len = ( \" \" + v ) . length ( ) ; long mod = 1 ; for ( int i = 0 ; i < len / 2 ; ++ i ) { mod *= 10 ; } if ( v % mod == 0 ) return solve ( v - 1 ) + 1 ; long add = v % mod - 1 ; v -= add ; long rev = 0 ; long tmp = v ; while ( tmp > 0 ) { rev *= 10 ; rev += tmp % 10 ; tmp /= 10 ; } if ( rev != v ) return solve ( rev ) + add + 1 ; return solve ( v - 1 ) + add + 1 ; }", "python": "def f ( n ) :\n    if n == 1 :\n        return 1\n    if str ( n ) [ - 1 ] == \"0\" :\n        return 1 + f ( n - 1 )\n    s = str ( n )\n    k = int ( \"1\" + ( len ( s ) - 1 ) * \"0\" )\n    a = - k\n    b = 0\n    for i in range ( len ( s ) ) :\n        a += int ( s [ ~ i ] ) * 10 ** i\n        b += int ( s [ ~ i ] ) * 10 ** min ( i , len ( s ) - i - 1 )\n    return min ( a , b ) + f ( k )\n"}
{"java": "static int countWays ( int A , int B , int C ) { int minAddA = Math . max ( 0 , ( C + B - A + 2 ) / 2 ) ; int count_ways = Math . max ( C - minAddA + 1 , 0 ) ; return count_ways ; }", "python": "def countWays ( A , B , C ) :\n    minAddA = max ( 0 , ( C + B - A + 2 ) // 2 )\n    count_ways = max ( C - minAddA + 1 , 0 )\n    return count_ways\n"}
{"java": "static int centered_pentagonal_Num ( int n ) { return ( 5 * n * n - 5 * n + 2 ) / 2 ; }", "python": "def centered_pentagonal_Num ( n ) :\n    return ( 5 * n * n - 5 * n + 2 ) // 2\n"}
{"java": "public static int pythagoras ( int n ) { int answer = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { double num = Math . sqrt ( ( Math . pow ( i , 2 ) + Math . pow ( j , 2 ) ) ) ; if ( num % 1 == 0 && num <= n ) { answer ++ ; } } } return answer ; }", "python": "def issqr ( n ) :\n    return ( int ( m . sqrt ( n ) ) ** 2 == n )\n"}
{"java": "static StringBuilder findMaximumNum ( StringBuilder str , int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { if ( k < 1 ) break ; if ( str . charAt ( i ) != '9' ) { str . setCharAt ( i , '9' ) ; k -- ; } } return str ; }", "python": "def findMaximumNum ( st , n , k ) :\n    for i in range ( n ) :\n        if ( k < 1 ) :\n            break\n        if ( st [ i ] != '9' ) :\n            st = st [ 0 : i ] + '9' + st [ i + 1 : ]\n            k -= 1\n    return st\n"}
{"java": "static int smallestDivisor ( int n ) { if ( n % 2 == 0 ) return 2 ; for ( int i = 3 ; i * i <= n ; i += 2 ) { if ( n % i == 0 ) return i ; } return n ; }", "python": "def smallestDivisor ( n ) :\n    if ( n % 2 == 0 ) :\n        return 2 ;\n    i = 3 ;\n    while ( i * i <= n ) :\n        if ( n % i == 0 ) :\n            return i ;\n        i += 2 ;\n    return n ;\n"}
{"java": "static int countTriplets ( int arr [ ] , int n , int m ) { int count = 0 ; Arrays . sort ( arr ) ; int end , start , mid ; for ( end = n - 1 ; end >= 2 ; end -- ) { start = 0 ; mid = end - 1 ; while ( start < mid ) { long prod = arr [ end ] * arr [ start ] * arr [ mid ] ; if ( prod > m ) mid -- ; else if ( prod < m ) start ++ ; else if ( prod == m ) { count ++ ; mid -- ; start ++ ; } } } return count ; }", "python": "def countTriplets ( arr , n , m ) :\n    count = 0\n    arr . sort ( )\n    for end in range ( n - 1 , 1 , - 1 ) :\n        start = 0\n        mid = end - 1\n        while ( start < mid ) :\n            prod = ( arr [ end ] * arr [ start ] * arr [ mid ] )\n            if ( prod > m ) :\n                mid -= 1\n            elif ( prod < m ) :\n                start += 1\n            elif ( prod == m ) :\n                count += 1\n                mid -= 1\n                start += 1\n    return count\n"}
{"java": "static void EvenOddProduct ( int arr [ ] , int n ) { int even = 1 ; int odd = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) even *= arr [ i ] ; else odd *= arr [ i ] ; } System . out . println ( \" Even \u2581 Index \u2581 Product \u2581 : \u2581 \" + even ) ; System . out . println ( \" Odd \u2581 Index \u2581 Product \u2581 : \u2581 \" + odd ) ; }", "python": "def EvenOddProduct ( arr , n ) :\n    even = 1\n    odd = 1\n    for i in range ( 0 , n ) :\n        if ( i % 2 == 0 ) :\n            even *= arr [ i ]\n        else :\n            odd *= arr [ i ]\n    print ( \" Even \u2581 Index \u2581 Product \u2581 : \u2581 \" , even )\n    print ( \" Odd \u2581 Index \u2581 Product \u2581 : \u2581 \" , odd )\n"}
{"java": "static int countDigits ( int n ) { return ( int ) ( n * Math . log10 ( 2 ) + 1 ) ; }", "python": "def countDigits ( n ) :\n    return int ( n * math . log10 ( 2 ) + 1 ) ;\n"}
{"java": "static String solve ( char [ ] [ ] pixels ) { int H = pixels . length ; int W = pixels [ 0 ] . length ; char [ ] [ ] result = new char [ H + 2 ] [ W + 2 ] ; for ( int r = 0 ; r < result . length ; ++ r ) { for ( int c = 0 ; c < result [ r ] . length ; ++ c ) { result [ r ] [ c ] = ( r == 0 || r == H + 1 || c == 0 || c == W + 1 ) ? ' # ' : pixels [ r - 1 ] [ c - 1 ] ; } } return Arrays . stream ( result ) . map ( String :: new ) . collect ( Collectors . joining ( \" \\n \" ) ) ; }", "python": "def resolve ( ) :\n    H , W = map ( int , input ( ) . split ( ) )\n    A = [ str ( input ( ) ) for i in range ( H ) ]\n    for i in range ( H + 2 ) :\n        if i == 0 or i == H + 1 :\n            print ( ' ' . join ( [ ' # ' ] * ( W + 2 ) ) )\n        else :\n            print ( ' # ' + A [ i - 1 ] + ' # ' )\n"}
{"java": "static void solve ( ) { String s = sc . next ( ) ; Set < Character > ori = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { ori . add ( s . charAt ( i ) ) ; } if ( ori . size ( ) == 1 || ori . size ( ) == s . length ( ) ) { System . out . println ( \" Yes \" ) ; return ; } int n = ori . size ( ) ; ori . clear ( ) ; int i = 0 , j = 0 ; while ( j < s . length ( ) ) { ori . add ( s . charAt ( j ) ) ; if ( j - i + 1 == n ) { if ( ori . size ( ) < n ) { System . out . println ( \" no \" ) ; return ; } else { ori . remove ( s . charAt ( i ++ ) ) ; } } j ++ ; } System . out . println ( \" Yes \" ) ; }", "python": "def main ( ) :\n    for _ in range ( int ( input ( ) ) ) :\n        string = input ( )\n        n = len ( string )\n        mp = { }\n        flag = True\n        for i in string :\n            mp [ i ] = mp . get ( i , 0 ) + 1\n        count = len ( mp )\n        for i in range ( 0 , n - count ) :\n            if string [ i ] != string [ i + count ] :\n                flag = False\n        if flag :\n            print ( \" YES \" )\n        else :\n            print ( \" NO \" )\n"}
{"java": "static void getIndex ( int n , int shuffle [ ] [ ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { if ( shuffle [ i ] [ 0 ] == n ) n = shuffle [ i ] [ 1 ] ; else if ( shuffle [ i ] [ 1 ] == n ) n = shuffle [ i ] [ 0 ] ; } System . out . println ( n ) ; }", "python": "def getIndex ( n , shuffle ) :\n    for i in range ( 3 ) :\n        if ( shuffle [ i ] [ 0 ] == n ) :\n            n = shuffle [ i ] [ 1 ] ;\n        elif ( shuffle [ i ] [ 1 ] == n ) :\n            n = shuffle [ i ] [ 0 ] ;\n    print ( n ) ;\n"}
{"java": "static int gcd ( int a , int b ) { return b > 0 ? gcd ( b , a % b ) : a ; }", "python": "def main ( ) :\n    x = int ( ipt ( ) )\n    if x >= 30 :\n        print ( \" Yes \" )\n    else :\n        print ( \" No \" )\n    return None\n"}
{"java": "static int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; }", "python": "def gcd ( p , q ) :\n    if q == 0 :\n        return p\n    return gcd ( q , p % q )\n"}
{"java": "static long gcd ( long a , long b ) { return ( b == 0 ? a : gcd ( b , a % b ) ) ; }", "python": "def F ( A , B , C , D ) :\n    if D < B :\n        return False\n    if A < B :\n        return False\n    g = gcd ( D , B )\n    diff = A % g\n    A -= diff\n    C -= diff\n    C -= C % g\n    A //= g ; B //= g ; C //= g ; D //= g\n    return C + 1 >= B\n"}
{"java": "static int gcd ( int a , int b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; }", "python": "def co ( x , y , s ) :\n    if x == y : return 0\n    z = ( x == \" P \" and y == \" R \" ) or ( x == \" S \" and y == \" P \" ) or ( x == \" R \" and y == \" S \" )\n    if s : return int ( z )\n    return int ( not z )\n"}
{"java": "static int findX ( int A , int B ) { int j = 0 , x = 0 ; while ( A != 0 || B != 0 ) { if ( ( A % 2 == 1 ) && ( B % 2 == 1 ) ) { x += ( 1 << j ) ; } A >>= 1 ; B >>= 1 ; j += 1 ; } return x ; }", "python": "def findX ( A , B ) :\n    j = 0\n    x = 0\n    while ( A or B ) :\n        if ( ( A & 1 ) and ( B & 1 ) ) :\n            x += ( 1 << j )\n        A >>= 1\n        B >>= 1\n        j += 1\n    return x\n"}
{"java": "static int lagDuration ( int h1 , int m1 , int h2 , int m2 , int k ) { int lag , t1 , t2 ; t1 = ( h1 + k ) * 60 + m1 ; t2 = h2 * 60 + m2 ; lag = t1 - t2 ; return lag ; }", "python": "def lagDuration ( h1 , m1 , h2 , m2 , k ) :\n    lag , t1 , t2 = 0 , 0 , 0\n    t1 = ( h1 + k ) * 60 + m1\n    t2 = h2 * 60 + m2\n    lag = t1 - t2\n    return lag\n"}
{"java": "private static String triangularNumberChecker ( int a ) { a = 2 * a ; for ( int i = 1 ; i <= a ; i ++ ) { if ( ( a % i == 0 && a % ( i + 1 ) == 0 ) && ( a / i == a / ( i + 1 ) + 1 ) ) { return \" YES \" ; } } return \" NO \" ; }", "python": "def tr ( number ) :\n    x = ( number * ( number + 1 ) ) / 2\n    return x\n"}
{"java": "static int minOperations ( int [ ] arr , int n ) { int maxi , result = 0 ; int [ ] freq = new int [ 1000001 ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; freq [ x ] ++ ; } maxi = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; for ( int i = 1 ; i <= maxi ; i ++ ) { if ( freq [ i ] != 0 ) { for ( int j = i * 2 ; j <= maxi ; j = j + i ) { freq [ j ] = 0 ; } result ++ ; } } return result ; }", "python": "def minOperations ( arr , n ) :\n    result = 0\n    freq = [ 0 ] * 1000001\n    for i in range ( 0 , n ) :\n        freq [ arr [ i ] ] += 1\n    maxi = max ( arr )\n    for i in range ( 1 , maxi + 1 ) :\n        if freq [ i ] != 0 :\n            for j in range ( i * 2 , maxi + 1 , i ) :\n                freq [ j ] = 0\n            result += 1\n    return result\n"}
{"java": "static double distance ( int x1 , int y1 , int x2 , int y2 ) { return Math . sqrt ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) * 1.0 ) ; }", "python": "def distance ( x1 , y1 , x2 , y2 ) :\n    return math . sqrt ( math . pow ( x2 - x1 , 2 ) + math . pow ( y2 - y1 , 2 ) * 1.0 )\n"}
{"java": "static boolean productSumDivisible ( int n , int size ) { int sum = 0 , product = 1 ; while ( n > 0 ) { if ( size % 2 == 0 ) { product *= n % 10 ; } else { sum += n % 10 ; } n = n / 10 ; size -- ; } if ( product % sum == 0 ) { return true ; } return false ; }", "python": "def productSumDivisible ( n , size ) :\n    sum = 0\n    product = 1\n    while ( n > 0 ) :\n        if ( size % 2 == 0 ) :\n            product *= n % 10\n        else :\n            sum += n % 10\n        n = n // 10\n        size -= 1\n    if ( product % sum == 0 ) :\n        return True\n    return False\n"}
{"java": "static String solve ( String s ) { for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i + 1 ) ) { return String . format ( \" YES \\n % s \" , s . substring ( i , i + 2 ) ) ; } } return \" NO \" ; }", "python": "def f ( n , s ) :\n    for i in range ( n - 1 ) :\n        if s [ i ] != s [ i + 1 ] :\n            print ( ' YES ' )\n            print ( s [ i ] + s [ i + 1 ] )\n            return\n    print ( ' NO ' )\n    return\n"}
{"java": "static boolean canBeMadeEqual ( String str1 , String str2 ) { int len1 = str1 . length ( ) ; int len2 = str2 . length ( ) ; if ( len1 == len2 ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len1 ; i ++ ) { freq [ str1 . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < len2 ; i ++ ) { if ( freq [ str2 . charAt ( i ) - ' a ' ] > 0 ) return true ; } } return false ; }", "python": "def canBeMadeEqual ( str1 , str2 ) :\n    len1 = len ( str1 )\n    len2 = len ( str2 )\n    if ( len1 == len2 ) :\n        freq = [ 0 for i in range ( MAX ) ]\n        for i in range ( len1 ) :\n            freq [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] += 1\n        for i in range ( len2 ) :\n            if ( freq [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] > 0 ) :\n                return True\n    return False\n"}
{"java": "static boolean solve ( int n , int a , int b , int c , int d ) { int min = n * ( a - b ) ; int max = n * ( a + b ) ; return ! ( min > c + d || max < c - d ) ; }", "python": "def check ( n , a , b , c , d ) :\n    if n * ( a + b ) >= ( c - d ) and n * ( a - b ) <= ( c + d ) :\n        print ( \" yes \" )\n    else :\n        print ( \" no \" )\n"}
{"java": "static int printPermutation ( int n ) { if ( n % 2 != 0 ) { System . out . println ( \" - 1\" ) ; } else for ( int i = 1 ; i <= n / 2 ; i ++ ) { System . out . print ( 2 * i + \" \u2581 \" + ( ( 2 * i ) - 1 ) + \" \u2581 \" ) ; } return n ; }", "python": "def printPermutation ( n ) :\n    if ( n % 2 != 0 ) :\n        print ( - 1 ) ;\n    else :\n        for i in range ( 1 , ( n // 2 ) + 1 ) :\n            print ( ( 2 * i ) , ( 2 * i - 1 ) , end = \" \u2581 \" ) ;\n"}
{"java": "static int count ( String S , int X ) { int count = 0 ; int N = S . length ( ) ; for ( int i = 0 ; i < N ; ++ i ) { if ( S . charAt ( i ) != '0' ) { for ( int len = 1 ; ( i + len ) <= N ; ++ len ) { int num = Integer . parseInt ( S . substring ( i , i + len ) ) ; if ( num > X ) count ++ ; } } } return count ; }", "python": "def countSubStr ( S , X ) :\n    cnt = 0\n    N = len ( S )\n    for i in range ( 0 , N ) :\n        if ( S [ i ] != '0' ) :\n            j = 1\n            while ( ( j + i ) <= N ) :\n                num = int ( S [ i : i + j ] )\n                if ( num > X ) :\n                    cnt = cnt + 1\n                j = j + 1\n    return cnt ;\n"}
{"java": "static boolean check ( String s , int m ) { int l = s . length ( ) ; int c1 = 0 ; int c2 = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) == '0' ) { c2 = 0 ; c1 ++ ; } else { c1 = 0 ; c2 ++ ; } if ( c1 == m || c2 == m ) return true ; } return false ; }", "python": "def check ( s , m ) :\n    l = len ( s ) ;\n    c1 = 0 ;\n    c2 = 0 ;\n    for i in range ( 0 , l - 1 ) :\n        if ( s [ i ] == '0' ) :\n            c2 = 0 ;\n            c1 = c1 + 1 ;\n        else :\n            c1 = 0 ;\n            c2 = c2 + 1 ;\n        if ( c1 == m or c2 == m ) :\n            return True ;\n    return False ;\n"}
{"java": "public static String repeatStr ( String s , int n ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { sb . append ( s ) ; } return sb . toString ( ) ; }", "python": "def main ( ) :\n    sx , sy , tx , ty = map ( int , input ( ) . split ( ) )\nprint ( ' ' . join ( [ ' U ' * ( ty - sy ) , ' R ' * ( tx - sx ) , ' D ' * ( ty - sy ) , ' L ' * ( tx - sx + 1 ) , ' U ' * ( ty - sy + 1 ) , ' R ' * ( tx - sx + 1 ) , ' D ' , ' R ' , ' D ' * ( ty - sy + 1 ) , ' L ' * ( tx - sx + 1 ) , ] ) )"}
{"java": "static boolean checkArray ( int arr [ ] , int n ) { int zero = 0 , one = 0 , minusone = 0 , other = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) zero ++ ; else if ( arr [ i ] == 1 ) one ++ ; else if ( arr [ i ] == - 1 ) minusone ++ ; else other ++ ; } if ( other > 1 ) return false ; else if ( other != 0 && minusone != 0 ) return false ; else if ( minusone >= 1 && one == 0 ) return false ; return true ; }", "python": "def checkArray ( arr , n ) :\n    zero = 0 ; one = 0 ;\n    minusone = 0 ; other = 0\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            zero += 1\n        elif ( arr [ i ] == 1 ) :\n            one += 1\n        elif ( arr [ i ] == - 1 ) :\n            minusone += 1\n        else :\n            other += 1\n    if ( other > 1 ) :\n        return false\n    elif ( other != 0 and minusone != 0 ) :\n        return false\n    elif ( minusone >= 1 and one == 0 ) :\n        return false\n    return True\n"}
{"java": "public static double Min_glass ( int n , int k , int [ ] a ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += a [ i ] ; double ans = Math . ceil ( ( double ) sum / ( double ) 100 ) ; return ans ; }", "python": "def Min_glass ( n , k , a ) :\n    a . sort ( )\n    return ceil ( sum ( a [ : k ] ) / 100 )\n"}
{"java": "public static int maxUniqueNum ( int arr [ ] , int N , int M ) { int maxUnique = 0 ; for ( int i = 0 ; i < N - M ; i ++ ) { int currentUnique = 0 ; HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int k = i ; k < i + M ; k ++ ) { if ( ! map . containsKey ( arr [ k ] ) ) { map . put ( arr [ i ] , 1 ) ; currentUnique ++ ; continue ; } } if ( currentUnique > maxUnique ) maxUnique = currentUnique ; } return maxUnique ; }", "python": "def maxUniqueNum ( a , N , M ) :\n    maxUnique = 0\n    for i in range ( N - M ) :\n        s = set ( )\n        for j in range ( M ) :\n            s . add ( a [ i + j ] )\n        if ( len ( s ) > maxUnique ) :\n            maxUnique = len ( s )\n    return maxUnique\n"}
{"java": "static int countWays ( int index , int cnt , int dp [ ] [ ] , int n , int m , int k ) { if ( index == n ) { if ( cnt == k ) return 1 ; else return 0 ; } if ( dp [ index ] [ cnt ] != - 1 ) return dp [ index ] [ cnt ] ; int ans = 0 ; ans += countWays ( index + 1 , cnt , dp , n , m , k ) ; ans += ( m - 1 ) * countWays ( index + 1 , cnt + 1 , dp , n , m , k ) ; return dp [ index ] [ cnt ] = ans ; }", "python": "def countWays ( index , cnt , dp , n , m , k ) :\n    if ( index == n ) :\n        if ( cnt == k ) :\n            return 1\n        else :\n            return 0\n    if ( dp [ index ] [ cnt ] != - 1 ) :\n        return dp [ index ] [ cnt ]\n    ans = 0\n    ans += countWays ( index + 1 , cnt , dp , n , m , k )\n    ans += ( m - 1 ) * countWays ( index + 1 , cnt + 1 , dp , n , m , k )\n    dp [ index ] [ cnt ] = ans\n    return dp [ index ] [ cnt ]\n"}
{"java": "static void findNumbers ( int N ) { int i = 1 ; while ( i <= N ) { System . out . print ( ( i * i * i ) + \" \u2581 \" ) ; i ++ ; } }", "python": "def findNumbers ( N ) :\n    i = 1\n    while ( i <= N ) :\n        print ( ( i * i * i ) , end = \" \u2581 \" )\n        i += 1\n"}
{"java": "static int countPairs ( int N ) { int count = 0 ; for ( int i = 1 ; i <= Math . cbrt ( N ) ; i ++ ) { int cb = i * i * i ; int diff = N - cb ; int cbrtDiff = ( int ) Math . cbrt ( diff ) ; if ( cbrtDiff * cbrtDiff * cbrtDiff == diff ) count ++ ; } return count ; }", "python": "def countPairs ( N ) :\n    count = 0\n    for i in range ( 1 , int ( math . pow ( N , 1 / 3 ) + 1 ) ) :\n        cb = i * i * i\n        diff = N - cb\n        cbrtDiff = int ( math . pow ( diff , 1 / 3 ) )\n        if ( cbrtDiff * cbrtDiff * cbrtDiff == diff ) :\n            count += 1\n    return count\n"}
{"java": "static void printNonDivisible ( int [ ] A , int [ ] B , int n , int m ) { int maxB = 0 ; for ( int i = 0 ; i < m ; i ++ ) if ( B [ i ] > maxB ) maxB = B [ i ] ; int [ ] mark = new int [ maxB + 1 ] ; for ( int i = 0 ; i < maxB ; i ++ ) mark [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int x = A [ i ] ; x <= maxB ; x += A [ i ] ) mark [ x ] ++ ; for ( int i = 0 ; i < m ; i ++ ) if ( mark [ B [ i ] ] == 0 ) System . out . println ( B [ i ] ) ; }", "python": "def printNonDivisible ( A , B , n , m ) :\n    maxB = 0\n    for i in range ( 0 , m , 1 ) :\n        if ( B [ i ] > maxB ) :\n            maxB = B [ i ]\n    mark = [ 0 for i in range ( maxB ) ]\n    for i in range ( 0 , n , 1 ) :\n        for x in range ( A [ i ] , maxB , A [ i ] ) :\n            mark [ x ] += 1\n    for i in range ( 0 , m - 1 , 1 ) :\n        if ( mark [ B [ i ] ] == 0 ) :\n            print ( B [ i ] )\n"}
{"java": "static boolean lineExists ( int x [ ] , int y [ ] , int v [ ] , int n ) { int size = ( 2 * MAX ) + 1 ; long [ ] arr = new long [ size ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ x [ i ] + MAX ] += v [ i ] ; } for ( int i = 1 ; i < size ; i ++ ) arr [ i ] += arr [ i - 1 ] ; if ( arr [ size - 1 ] == 0 ) return true ; if ( arr [ size - 1 ] - arr [ 0 ] == 0 ) return true ; for ( int i = 1 ; i < size - 1 ; i ++ ) { if ( arr [ i - 1 ] == arr [ size - 1 ] - arr [ i - 1 ] ) return true ; if ( arr [ i - 1 ] == arr [ size - 1 ] - arr [ i ] ) return true ; if ( arr [ i ] == arr [ size - 1 ] - arr [ i ] ) return true ; } if ( arr [ size - 2 ] == 0 ) return true ; return false ; }", "python": "def lineExists ( x , y , v , n ) :\n    size = ( 2 * MAX ) + 1 ;\n    arr = [ 0 ] * size ;\n    for i in range ( n ) :\n        arr [ x [ i ] + MAX ] += v [ i ] ;\n    for i in range ( 1 , size ) :\n        arr [ i ] += arr [ i - 1 ] ;\n    if ( arr [ size - 1 ] == 0 ) :\n        return True ;\n    if ( arr [ size - 1 ] - arr [ 0 ] == 0 ) :\n        return True ;\n    for i in range ( 1 , size - 1 ) :\n        if ( arr [ i - 1 ] == arr [ size - 1 ] - arr [ i - 1 ] ) :\n            return True ;\n        if ( arr [ i - 1 ] == arr [ size - 1 ] - arr [ i ] ) :\n            return True ;\n        if ( arr [ i ] == arr [ size - 1 ] - arr [ i ] ) :\n            return True ;\n    if ( arr [ size - 2 ] == 0 ) :\n        return True ;\n    return False ;\n"}
{"java": "static void printModulus ( int X , int Y ) { int d = Math . abs ( X - Y ) ; int i = 1 ; while ( i * i <= d ) { if ( d % i == 0 ) { System . out . print ( i + \" \u2581 \" ) ; if ( d / i != i ) System . out . print ( d / i + \" \u2581 \" ) ; } i ++ ; } }", "python": "def printModulus ( X , Y ) :\n    d = abs ( X - Y ) ;\n    i = 1 ;\n    while ( i * i <= d ) :\n        if ( d % i == 0 ) :\n            print ( i , end = \" \" ) ;\n            if ( d // i != i ) :\n                print ( d // i , end = \" \u2581 \" ) ;\n        i += 1 ;\n"}
{"java": "static void countPairs ( int arr [ ] , int n ) { int even = 0 , odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } System . out . println ( ( even ) * ( n - 1 ) ) ; System . out . println ( ( odd ) * ( n - 1 ) ) ; }", "python": "def countPairs ( arr , n ) :\n    odd = 0\n    even = 0\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 == 0 ) :\n            even += 1\n        else :\n            odd += 1\n    odd_pairs = odd * ( n - 1 )\n    even_pairs = even * ( n - 1 )\n    print ( odd_pairs )\n    print ( even_pairs )\n"}
{"java": "static int solve ( int idx , int diff , int N , int M , int K ) { if ( idx > N ) { if ( diff == K ) return 1 ; return 0 ; } if ( dp [ idx ] [ diff ] != - 1 ) return dp [ idx ] [ diff ] ; int ans = solve ( idx + 1 , diff , N , M , K ) ; ans += ( M - 1 ) * solve ( idx + 1 , diff + 1 , N , M , K ) ; return dp [ idx ] [ diff ] = ans % MOD ; }", "python": "def solve ( idx , diff , N , M , K ) :\n    if ( idx > N ) :\n        if ( diff == K ) :\n            return 1\n        return 0\n    if ( dp [ idx ] [ diff ] != - 1 ) :\n        return dp [ idx ] ;\n    ans = solve ( idx + 1 , diff , N , M , K ) ;\n    ans += ( M - 1 ) * solve ( idx + 1 , diff + 1 , N , M , K ) ;\n    dp [ idx ] [ diff ] = ans % MOD ;\n    return dp [ idx ] [ diff ]\n"}
{"java": "static void solve ( int A , int B ) { double p = B / 2.0 ; double M = Math . ceil ( 4 * p ) ; int N = 1 ; int O = - 2 * A ; double Q = Math . ceil ( A * A + 4 * p * p ) ; System . out . println ( M + \" \u2581 \" + N + \" \u2581 \" + O + \" \u2581 \" + Q ) ; }", "python": "def solve ( A , B ) :\n    p = B / 2\n    M = int ( 4 * p )\n    N = 1\n    O = - 2 * A\n    Q = int ( A * A + 4 * p * p )\n    return [ M , N , O , Q ]\n"}
{"java": "public static int nthTerm ( int N ) { return Math . abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) ; }", "python": "def nthTerm ( N ) :\n    return ( abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) )\n"}
{"java": "static int GetMinSubarrayLength ( int a [ ] , int n ) { int ans = Math . max ( a [ 0 ] , a [ n - 1 ] ) ; int lo = 0 , hi = n - 1 ; while ( lo < n && a [ lo ] % ans == 0 ) lo ++ ; while ( hi > lo && a [ hi ] % ans == 0 ) hi -- ; return ( hi - lo + 1 ) ; }", "python": "def GetMinSubarrayLength ( a , n ) :\n    ans = max ( a [ 0 ] , a [ n - 1 ] )\n    lo = 0\n    hi = n - 1\n    while ( lo < n and a [ lo ] % ans == 0 ) :\n        lo += 1\n    while ( hi > lo and a [ hi ] % ans == 0 ) :\n        hi -= 1\n    return ( hi - lo + 1 )\n"}
{"java": "static void maxCircularSum ( int [ ] arr , int n , int k ) { if ( n < k ) { System . out . println ( \" Invalid \" ) ; return ; } int sum = 0 , start = 0 , end = k - 1 ; for ( int i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; int ans = sum ; for ( int i = k ; i < n + k ; i ++ ) { sum += arr [ i % n ] - arr [ ( i - k ) % n ] ; if ( sum > ans ) { ans = sum ; start = ( i - k + 1 ) % n ; end = i % n ; } } System . out . println ( \" max \u2581 circular \u2581 sum \u2581 = \u2581 \" + ans ) ; System . out . println ( \" start \u2581 index \u2581 = \u2581 \" + start + \" \\n end \u2581 index \u2581 = \u2581 \" + end ) ; }", "python": "def maxCircularSum ( arr , n , k ) :\n    if ( n < k ) :\n        print ( \" Invalid \" ) ;\n        return ;\n    sum = 0 ; start = 0 ; end = k - 1 ;\n    for i in range ( k ) :\n        sum += arr [ i ] ;\n    ans = sum ;\n    for i in range ( k , n + k ) :\n        sum += arr [ i % n ] - arr [ ( i - k ) % n ] ;\n        if ( sum > ans ) :\n            ans = sum ;\n            start = ( i - k + 1 ) % n ;\n            end = i % n ;\n    print ( \" max \u2581 circular \u2581 sum \u2581 = \u2581 \" , ans ) ;\n    print ( \" start \u2581 index \u2581 = \u2581 \" , start , \" \\n end \u2581 index \u2581 = \u2581 \" , end ) ;\n"}
{"java": "static void kthString ( int n , int k ) { int total = 0 ; int i = 1 ; while ( total < k ) { total = total + n - i ; i ++ ; } int first_y_position = i - 1 ; int second_y_position = k - ( total - n + first_y_position ) ; for ( int j = 1 ; j < first_y_position ; j ++ ) System . out . print ( \" x \" ) ; System . out . print ( \" y \" ) ; int j = first_y_position + 1 ; while ( second_y_position > 1 ) { System . out . print ( \" x \" ) ; second_y_position -- ; j ++ ; } System . out . print ( \" y \" ) ; while ( j < n ) { System . out . print ( \" x \" ) ; j ++ ; } }", "python": "def kthString ( n , k ) :\n    total = 0\n    i = 1\n    while ( total < k ) :\n        total = total + n - i\n        i += 1\n    first_y_position = i - 1\n    second_y_position = k - ( total - n + first_y_position )\n    for j in range ( 1 , first_y_position , 1 ) :\n        print ( \" x \" , end = \" \" )\n    print ( \" y \" , end = \" \" )\n    j = first_y_position + 1\n    while ( second_y_position > 1 ) :\n        print ( \" x \" , end = \" \" )\n        second_y_position -= 1\n        j += 1\n    print ( \" y \" , end = \" \" )\n    while ( j < n ) :\n        print ( \" x \" )\n        j += 1\n"}
{"java": "static String smallest ( String s ) { int l = s . length ( ) ; String ans = \" \" ; for ( int i = 0 ; i < l - 1 ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i + 1 ) ) { for ( int j = 0 ; j < l ; j ++ ) { if ( i != j ) { ans += s . charAt ( j ) ; } } return ans ; } } ans = s . substring ( 0 , l - 1 ) ; return ans ; }", "python": "def smallest ( s ) :\n    l = len ( s )\n    ans = \" \"\n    for i in range ( l ) :\n        if ( s [ i ] > s [ i + 1 ] ) :\n            for j in range ( l ) :\n                if ( i != j ) :\n                    ans += s [ j ]\n            return ans\n    ans = s [ 0 : l - 1 ]\n    return ans\n"}
{"java": "static int minMovesToSort ( int arr [ ] , int n ) { int moves = 0 ; int i , mn = arr [ n - 1 ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] > mn ) moves += arr [ i ] - mn ; mn = arr [ i ] ; } return moves ; }", "python": "def minMovesToSort ( arr , n ) :\n    moves = 0\n    mn = arr [ n - 1 ]\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( arr [ i ] > mn ) :\n            moves += arr [ i ] - mn\n        mn = arr [ i ]\n    return moves\n"}
{"java": "static boolean checkUnimodal ( int arr [ ] , int n ) { int i = 1 ; while ( i < n && arr [ i ] > arr [ i - 1 ] ) ++ i ; while ( i < n && arr [ i ] == arr [ i - 1 ] ) ++ i ; while ( i < n && arr [ i ] < arr [ i - 1 ] ) ++ i ; return ( i == n ) ; }", "python": "def checkUnimodal ( arr , n ) :\n    i = 1\n    while ( i < n and arr [ i ] > arr [ i - 1 ] ) :\n        i += 1\n    while ( i < n and arr [ i ] == arr [ i - 1 ] ) :\n        i += 1\n    while ( i < n and arr [ i ] < arr [ i - 1 ] ) :\n        i += 1\n    return ( i == n )\n"}
{"java": "public static String num2alphabet ( long num ) { long firstIndexAlpha = ( int ) ' a ' ; long sizeAlpha = 26 ; if ( num <= 0 ) { return \" \" ; } else if ( num <= sizeAlpha ) { return String . valueOf ( ( char ) ( firstIndexAlpha + num - 1 ) ) ; } else { long offset = num - 1 ; long tmp = offset ; String str = \" \" ; while ( true ) { long div = tmp / sizeAlpha ; long mod = tmp % sizeAlpha ; str = num2alphabet ( mod + 1 ) + str ; if ( div <= 0 ) { break ; } tmp = ( div - 1 ) ; } ; return str ; } }", "python": "def GetN_Hidari ( j ) :\n    tmp = 0\n    for k in range ( j + 1 ) :\n        tmp += 26 ** k\n    return tmp - 1\n"}
{"java": "static float Cel_To_Fah ( float n ) { return ( ( n * 9.0f / 5.0f ) + 32.0f ) ; }", "python": "def Cel_To_Fah ( n ) :\n    return ( n * 1.8 ) + 32\n"}
{"java": "static void reverseorder ( int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } for ( int i = n ; i >= 2 ; i -- ) if ( prime [ i ] == true ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def Reverseorder ( n ) :\n    prime = [ True ] * ( n + 1 ) ;\n    p = 2 ;\n    while ( p * p <= n ) :\n        if ( prime [ p ] == True ) :\n            for i in range ( ( p * 2 ) , ( n + 1 ) , p ) :\n                prime [ i ] = False ;\n        p += 1 ;\n    for p in range ( n , 1 , - 1 ) :\n        if ( prime [ p ] ) :\n            print ( p , end = \" \u2581 \" ) ;\n"}
{"java": "static void printPossible ( int a , int b , int c ) { if ( ( a + b + c ) % 2 != 0 || a + b < c ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; }", "python": "def printPossible ( a , b , c ) :\n    if ( ( a + b + c ) % 2 != 0 or a + b < c ) :\n        print ( \" NO \" )\n    else :\n        print ( \" YES \" )\n"}
{"java": "public static boolean multipleOrFactor ( String s1 , String s2 ) { HashMap < Character , Integer > m1 = new HashMap < > ( ) ; HashMap < Character , Integer > m2 = new HashMap < > ( ) ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( m1 . containsKey ( s1 . charAt ( i ) ) ) { int x = m1 . get ( s1 . charAt ( i ) ) ; m1 . put ( s1 . charAt ( i ) , ++ x ) ; } else m1 . put ( s1 . charAt ( i ) , 1 ) ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { if ( m2 . containsKey ( s2 . charAt ( i ) ) ) { int x = m2 . get ( s2 . charAt ( i ) ) ; m2 . put ( s2 . charAt ( i ) , ++ x ) ; } else m2 . put ( s2 . charAt ( i ) , 1 ) ; } for ( HashMap . Entry < Character , Integer > entry : m1 . entrySet ( ) ) { if ( ! m2 . containsKey ( entry . getKey ( ) ) ) continue ; if ( m2 . get ( entry . getKey ( ) ) != null && ( m2 . get ( entry . getKey ( ) ) % entry . getValue ( ) == 0 || entry . getValue ( ) % m2 . get ( entry . getKey ( ) ) == 0 ) ) continue ; else return false ; } return true ; }", "python": "def multipleOrFactor ( s1 , s2 ) :\n    m1 = defaultdict ( lambda : 0 )\n    m2 = defaultdict ( lambda : 0 )\n    for i in range ( 0 , len ( s1 ) ) :\n        m1 [ s1 [ i ] ] += 1\n    for i in range ( 0 , len ( s2 ) ) :\n        m2 [ s2 [ i ] ] += 1\n    for it in m1 :\n        if it not in m2 :\n            continue\n        if ( m2 [ it ] % m1 [ it ] == 0 or m1 [ it ] % m2 [ it ] == 0 ) :\n            continue\n        else :\n            return False\n    return True\n"}
{"java": "static String sumBaseB ( String a , String b , int base ) { int len_a , len_b ; len_a = a . length ( ) ; len_b = b . length ( ) ; String sum , s ; s = \" \" ; sum = \" \" ; int diff ; diff = Math . abs ( len_a - len_b ) ; for ( int i = 1 ; i <= diff ; i ++ ) s += \"0\" ; if ( len_a < len_b ) a = s + a ; else b = s + b ; int curr , carry = 0 ; for ( int i = Math . max ( len_a , len_b ) - 1 ; i > - 1 ; i -- ) { curr = carry + ( a . charAt ( i ) - '0' ) + ( b . charAt ( i ) - '0' ) ; carry = curr / base ; curr = curr % base ; sum = ( char ) ( curr + '0' ) + sum ; } if ( carry > 0 ) sum = ( char ) ( carry + '0' ) + sum ; return sum ; }", "python": "def sumBaseB ( a , b , base ) :\n    len_a = len ( a )\n    len_b = len ( b )\n    s = \" \" ;\n    sum = \" \" ;\n    diff = abs ( len_a - len_b ) ;\n    for i in range ( 1 , diff + 1 ) :\n        s += \"0\"\n    if ( len_a < len_b ) :\n        a = s + a\n    else :\n        b = s + b ;\n    carry = 0 ;\n    for i in range ( max ( len_a , len_b ) - 1 , - 1 , - 1 ) :\n        curr = carry + ( ord ( a [ i ] ) - ord ( '0' ) ) + ( ord ( b [ i ] ) - ord ( '0' ) ) ;\n        carry = curr // base\n        curr = curr % base ;\n        sum = chr ( curr + ord ( '0' ) ) + sum\n    if ( carry > 0 ) :\n        sum = chr ( carry + ord ( '0' ) ) + sum ;\n    return sum\n"}
{"java": "static int Triplets ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i ; j <= n ; ++ j ) { int x = i * i + j * j ; int y = ( int ) Math . sqrt ( x ) ; if ( y * y == x && y <= n ) ++ ans ; } } return ans ; }", "python": "def Triplets ( n ) :\n    ans = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i , n + 1 ) :\n            x = i * i + j * j\n            y = int ( math . sqrt ( x ) )\n            if ( y * y == x and y <= n ) :\n                ans += 1\n    return ans\n"}
{"java": "public static int smartNumber ( int n ) { Integer [ ] primes = new Integer [ MAX ] ; Arrays . fill ( primes , new Integer ( 0 ) ) ; Vector < Integer > result = new Vector < > ( ) ; for ( int i = 2 ; i < MAX ; i ++ ) { if ( primes [ i ] == 0 ) { primes [ i ] = 1 ; for ( int j = i * 2 ; j < MAX ; j = j + i ) { primes [ j ] -= 1 ; if ( ( primes [ j ] + 3 ) == 0 ) result . add ( j ) ; } } } Collections . sort ( result ) ; return result . get ( n - 1 ) ; }", "python": "def smartNumber ( n ) :\n    primes = [ 0 ] * MAX ;\n    result = [ ] ;\n    for i in range ( 2 , MAX ) :\n        if ( primes [ i ] == 0 ) :\n            primes [ i ] = 1 ;\n            j = i * 2 ;\n            while ( j < MAX ) :\n                primes [ j ] -= 1 ;\n                if ( ( primes [ j ] + 3 ) == 0 ) :\n                    result . append ( j ) ;\n                j = j + i ;\n    result . sort ( ) ;\n    return result [ n - 1 ] ;\n"}
{"java": "static int solve ( String s , int k ) { int [ ] sortedWeights = s . chars ( ) . map ( ch -> ch - ' a ' + 1 ) . sorted ( ) . toArray ( ) ; int result = 0 ; int prev = - 1 ; int index = 0 ; for ( int i = 0 ; i < k ; i ++ ) { while ( index < sortedWeights . length && sortedWeights [ index ] - prev <= 1 ) { index ++ ; } if ( index == sortedWeights . length ) { return - 1 ; } result += sortedWeights [ index ] ; prev = sortedWeights [ index ] ; index ++ ; } return result ; }", "python": "def algo ( chaine , num ) :\n    trier = sorted ( chaine )\n    liste = [ ord ( a ) - 96 for a in trier ]\n    somme = sum ( liste )\n    if ( num > len ( liste ) ) :\n        return - 1\n    c = 1\n    n = liste [ 0 ]\n    for k in range ( len ( liste ) - 1 ) :\n        if ( n + 1 < liste [ k + 1 ] ) :\n            c = c + 1\n            n = liste [ k ]\n    if ( c < num ) :\n        return - 1\n    arr = [ ]\n    count = - 1\n    for i in range ( len ( liste ) ) :\n        if liste [ i ] in arr :\n            continue\n        if liste [ i ] == count + 1 :\n            continue\n        arr . append ( liste [ i ] )\n        count = liste [ i ]\n        if len ( arr ) == num :\n            break\n    if len ( arr ) != num :\n        return - 1\n    return sum ( arr )\n"}
{"java": "static int countMaxSetBits ( int left , int right ) { int max_count = - 1 , num = 0 ; for ( int i = left ; i <= right ; ++ i ) { int temp = i , cnt = 0 ; while ( temp > 0 ) { if ( temp % 2 == 1 ) ++ cnt ; temp >>= 1 ; } if ( cnt > max_count ) { max_count = cnt ; num = i ; } } return num ; }", "python": "def countMaxSetBits ( left , right ) :\n    max_count = - 1\n    for i in range ( left , right + 1 ) :\n        temp = i\n        cnt = 0\n        while temp :\n            if temp & 1 :\n                cnt += 1\n            temp = temp >> 1\n        if cnt > max_count :\n            max_count = cnt\n            num = i\n    return num\n"}
{"java": "static void gouldSequence ( int n ) { for ( int row_num = 1 ; row_num <= n ; row_num ++ ) { int count = 1 ; int c = 1 ; for ( int i = 1 ; i <= row_num ; i ++ ) { c = c * ( row_num - i ) / i ; if ( c % 2 == 1 ) count ++ ; } System . out . print ( count + \" \u2581 \" ) ; } }", "python": "def gouldSequence ( n ) :\n    for row_num in range ( 1 , n ) :\n        count = 1\n        c = 1\n        for i in range ( 1 , row_num ) :\n            c = c * ( row_num - i ) / i\n            if ( c % 2 == 1 ) :\n                count += 1\n        print ( count , end = \" \u2581 \" )\n"}
{"java": "static int find_digit ( String s , int n ) { int first_digit = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) < '0' || s . charAt ( i ) > '9' ) { first_digit = i ; break ; } } first_digit ++ ; int s_len = first_digit ; int num = 0 , pw = 1 ; int i = n - 1 ; while ( i >= 0 ) { if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { int digit = s . charAt ( i ) - '0' ; num = num + ( pw * digit ) ; if ( num >= s_len ) return - 1 ; pw = pw * 10 ; } i -- ; } num = num * 10 ; int req = s_len - num ; if ( req > 9 || req < 0 ) return - 1 ; return req ; }", "python": "def find_digit ( s , n ) :\n    first_digit = - 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if s [ i ] < '0' or s [ i ] > '9' :\n            first_digit = i\n            break\n    first_digit += 1\n    s_len = first_digit\n    num = 0\n    pw = 1\n    i = n - 1\n    while i >= 0 :\n        if s [ i ] >= '0' and s [ i ] <= '9' :\n            digit = ord ( s [ i ] ) - ord ( '0' )\n            num = num + ( pw * digit )\n            if num >= s_len :\n                return - 1\n            pw = pw * 10\n        i -= 1\n    num = num * 10\n    req = s_len - num\n    if req > 9 or req < 0 :\n        return - 1\n    return req\n"}
{"java": "static int convert ( int m , int n ) { if ( m == n ) return 0 ; if ( m > n ) return m - n ; if ( m <= 0 && n > 0 ) return - 1 ; if ( n % 2 == 1 ) return 1 + convert ( m , n + 1 ) ; else return 1 + convert ( m , n / 2 ) ; }", "python": "def conver ( m , n ) :\n    if ( m == n ) :\n        return 0\n    if ( m > n ) :\n        return m - n\n    if ( m <= 0 and n > 0 ) :\n        return - 1\n    if ( n % 2 == 1 ) :\n        return 1 + conver ( m , n + 1 )\n    else :\n        return 1 + conver ( m , n / 2 )\n"}
{"java": "static void powerfulIntegers ( int x , int y , int bound ) { Set < Integer > s = new HashSet < > ( ) ; ArrayList < Integer > powersOfY = new ArrayList < > ( ) ; int i ; powersOfY . add ( 1 ) ; for ( i = y ; i < bound ; i = i * y ) powersOfY . add ( i ) ; i = 0 ; while ( true ) { int xPowI = ( int ) Math . pow ( ( double ) x , ( double ) i ) ; if ( xPowI >= bound ) break ; for ( int j = 0 ; j < powersOfY . size ( ) ; ++ j ) { int num = xPowI + powersOfY . get ( j ) ; if ( num <= bound ) s . add ( num ) ; else break ; } i ++ ; } Iterator itr = s . iterator ( ) ; while ( itr . hasNext ( ) ) { System . out . print ( itr . next ( ) + \" \u2581 \" ) ; } }", "python": "def powerfulIntegers ( x , y , bound ) :\n    s = set ( )\n    powersOfY = [ ]\n    powersOfY . append ( 1 )\n    i = y\n    while i < bound :\n        powersOfY . append ( i )\n        i *= y\n    i = 0\n    while ( True ) :\n        xPowI = pow ( x , i )\n        if ( xPowI >= bound ) :\n            break\n        for j in powersOfY :\n            num = xPowI + j\n            if ( num <= bound ) :\n                s . add ( num )\n            else :\n                break\n        i += 1\n    for itr in s :\n        print ( itr , end = \" \u2581 \" )\n"}
{"java": "static int minIndex ( int arr [ ] , int n , int pos ) { int num = arr [ pos ] ; int i = pos - 1 ; while ( i >= 0 ) { if ( arr [ i ] != num ) break ; i -- ; } return i + 1 ; }", "python": "def minIndex ( arr , n , pos ) :\n    num = arr [ pos ]\n    i = pos - 1\n    while ( i >= 0 ) :\n        if ( arr [ i ] != num ) :\n            break\n        i -= 1\n    return i + 1\n"}
{"java": "static void pendulumArrangement ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int odd , temp , in , pos ; pos = n - 1 ; if ( n % 2 == 0 ) odd = n - 1 ; else odd = n - 2 ; while ( odd > 0 ) { temp = arr [ odd ] ; in = odd ; while ( in != pos ) { arr [ in ] = arr [ in + 1 ] ; in ++ ; } arr [ in ] = temp ; odd = odd - 2 ; pos = pos - 1 ; } int start = 0 , end = ( n - 1 ) / 2 ; for ( ; start < end ; start ++ , end -- ) { temp = arr [ start ] ; arr [ start ] = arr [ end ] ; arr [ end ] = temp ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def pendulumArrangement ( arr , n ) :\n    arr . sort ( reverse = False )\n    pos = n - 1\n    if ( n % 2 == 0 ) :\n        odd = n - 1\n    else :\n        odd = n - 2\n    while ( odd > 0 ) :\n        temp = arr [ odd ]\n        in1 = odd\n        while ( in1 != pos ) :\n            arr [ in1 ] = arr [ in1 + 1 ]\n            in1 += 1\n        arr [ in1 ] = temp\n        odd = odd - 2\n        pos = pos - 1\n    start = 0\n    end = int ( ( n - 1 ) / 2 )\n    while ( start < end ) :\n        temp = arr [ start ]\n        arr [ start ] = arr [ end ]\n        arr [ end ] = temp\n        start += 1\n        end -= 1\n    for i in range ( n ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int count ( int N ) { int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += 7 * Math . pow ( 8 , i - 1 ) ; } return sum ; }", "python": "def count ( N ) :\n    sum = 0 ;\n    for i in range ( N + 1 ) :\n        sum += 7 * ( 8 ** ( i - 1 ) ) ;\n    return int ( sum ) ;\n"}
{"java": "static void printSorted ( int a [ ] , int n ) { int front = - 1 , back = - 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) { front = i - 1 ; break ; } } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] > a [ i + 1 ] ) { back = i + 1 ; break ; } } if ( front == - 1 && back == - 1 ) { for ( int i = 0 ; i < n ; i ++ ) System . out . println ( a [ i ] + \" \u2581 \" ) ; return ; } while ( front <= back ) { int temp = a [ front ] ; a [ front ] = a [ back ] ; a [ back ] = temp ; front ++ ; back -- ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \u2581 \" ) ; }", "python": "def printSorted ( a , n ) :\n    front = - 1\n    back = - 1\n    for i in range ( 1 , n , 1 ) :\n        if ( a [ i ] < a [ i - 1 ] ) :\n            front = i - 1\n            break\n    i = n - 2\n    while ( i >= 0 ) :\n        if ( a [ i ] > a [ i + 1 ] ) :\n            back = i + 1\n            break\n        i -= 1\n    if ( front == - 1 and back == - 1 ) :\n        for i in range ( 0 , n , 1 ) :\n            print ( a [ i ] , end = \" \u2581 \" )\n        return\n    while ( front <= back ) :\n        temp = a [ front ]\n        a [ front ] = a [ back ]\n        a [ back ] = temp\n        front += 1\n        back -= 1\n    for i in range ( 0 , n , 1 ) :\n        print ( a [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int min_index ( int p [ ] , int n ) { int ans = 0 ; int mini = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] <= mini ) mini = p [ i ] ; if ( mini == p [ i ] ) ans ++ ; } return ans ; }", "python": "def min_index ( p , n ) :\n    ans = 0 ;\n    mini = INT_MAX ;\n    for i in range ( n ) :\n        if ( p [ i ] <= mini ) :\n            mini = p [ i ] ;\n        if ( mini == p [ i ] ) :\n            ans += 1 ;\n    return ans ;\n"}
{"java": "static int min_moves ( int n ) { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { ans = Math . min ( ans , i + n / i - 2 ) ; } } return ans ; }", "python": "def min_moves ( n ) :\n    ans = sys . maxsize ;\n    for i in range ( 1 , int ( sqrt ( n ) ) + 1 ) :\n        if ( n % i == 0 ) :\n            ans = min ( ans , i + n // i - 2 ) ;\n    return ans ;\n"}
{"java": "public static void solve ( int W , int N , int [ ] v , int [ ] w ) { int [ ] [ ] dp = new int [ N + 2 ] [ W + 2 ] ; for ( int i = 0 ; i < N + 2 ; i ++ ) dp [ 0 ] [ i ] = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= W ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; if ( j - w [ i ] >= 0 ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j - w [ i ] ] + v [ i ] , dp [ i - 1 ] [ j ] ) ; } } } int ans_V = 0 ; int ans_W = Integer . MAX_VALUE / 2 ; for ( int i = 0 ; i <= W ; i ++ ) { if ( ans_V < dp [ N ] [ i ] ) { ans_V = dp [ N ] [ i ] ; ans_W = i ; } } System . out . println ( ans_V ) ; System . out . println ( ans_W ) ; }", "python": "def f ( ) :\n    c = 0\n    for W in iter ( input , '0' ) :\n        c += 1\n        W = int ( W )\n        d = [ 0 ] * - ~ W\n        for _ in [ 0 ] * int ( input ( ) ) :\n            v , w = map ( int , input ( ) . split ( ' , ' ) )\n            for i in range ( W , w - 1 , - 1 ) :\n                if d [ i ] < d [ i - w ] + v : d [ i ] = d [ i - w ] + v\n        print ( f ' Case \u2581 { c } : \\n { d [ W ] } \\n { d . index ( d [ W ] ) } ' )\n"}
{"java": "static void prime ( int arr [ ] , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; Vector < Boolean > prime = new Vector < Boolean > ( ) ; for ( int i = 0 ; i < max_val + 1 ; i ++ ) prime . add ( Boolean . TRUE ) ; prime . add ( 0 , Boolean . FALSE ) ; prime . add ( 1 , Boolean . FALSE ) ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime . get ( p ) == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime . add ( i , Boolean . FALSE ) ; } } int minimum = Integer . MAX_VALUE ; int maximum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) if ( prime . get ( arr [ i ] ) ) { minimum = Math . min ( minimum , arr [ i ] ) ; maximum = Math . max ( maximum , arr [ i ] ) ; } System . out . println ( \" Minimum \u2581 : \u2581 \" + minimum ) ; System . out . println ( \" Maximum \u2581 : \u2581 \" + maximum ) ; }", "python": "def Prime ( arr , n ) :\n    max_val = max ( arr )\n    prime = [ True for i in range ( max_val + 1 ) ]\n    prime [ 0 ] = False\n    prime [ 1 ] = False\n    for p in range ( 2 , mt . ceil ( mt . sqrt ( max_val ) ) ) :\n        if ( prime [ p ] == True ) :\n            for i in range ( 2 * p , max_val + 1 , p ) :\n                prime [ i ] = False\n    minimum = 10 ** 9\n    maximum = - 10 ** 9\n    for i in range ( n ) :\n        if ( prime [ arr [ i ] ] == True ) :\n            minimum = min ( minimum , arr [ i ] )\n            maximum = max ( maximum , arr [ i ] )\n    print ( \" Minimum \u2581 : \u2581 \" , minimum )\n    print ( \" Maximum \u2581 : \u2581 \" , maximum )\n"}
{"java": "static char encodedChar ( char [ ] str , int k ) { int i , j ; int n = str . length ; int len ; int num ; int freq ; i = 0 ; while ( i < n ) { j = i ; len = 0 ; freq = 0 ; while ( j < n && Character . isAlphabetic ( str [ j ] ) ) { j ++ ; len ++ ; } while ( j < n && Character . isDigit ( str [ j ] ) ) { freq = freq * 10 + ( str [ j ] - '0' ) ; j ++ ; } num = freq * len ; if ( k > num ) { k -= num ; i = j ; } else { k -- ; k %= len ; return str [ i + k ] ; } } return str [ k - 1 ] ; }", "python": "def encodedChar ( string , k ) :\n    n = len ( string )\n    i = 0\n    while i < n :\n        j = i\n        length = 0\n        freq = 0\n        while j < n and string [ j ] . isalpha ( ) :\n            j += 1\n            length += 1\n        while j < n and string [ j ] . isdigit ( ) :\n            freq = freq * 10 + int ( string [ j ] )\n            j += 1\n        num = freq * length\n        if k > num :\n            k -= num\n            i = j\n        else :\n            k -= 1\n            k %= length\n            return string [ i + k ]\n    return string [ k - 1 ]\n"}
{"java": "static int countPaths ( int n ) { int zB = 1 ; int zADC = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int nzB = zADC * 3 ; int nzADC = ( zADC * 2 + zB ) ; zB = nzB ; zADC = nzADC ; } return zB ; }", "python": "def countPaths ( n ) :\n    zB = 1\n    zADC = 0\n    for i in range ( 1 , n + 1 ) :\n        nzB = zADC * 3\n        nzADC = ( zADC * 2 + zB )\n        zB = nzB\n        zADC = nzADC\n    return zB\n"}
{"java": "static int countWords ( String str ) { int count = 1 ; for ( int i = 1 ; i < str . length ( ) - 1 ; i ++ ) { if ( str . charAt ( i ) >= 65 && str . charAt ( i ) <= 90 ) count ++ ; } return count ; }", "python": "def countWords ( str ) :\n    count = 1\n    for i in range ( 1 , len ( str ) - 1 ) :\n        if ( str [ i ] . isupper ( ) ) :\n            count += 1\n    return count\n"}
{"java": "static void findNumbers ( int n , int d ) { for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( \"1\" + \" \u2581 \" ) ; System . out . print ( \"2\" + \" \u2581 \" ) ; System . out . println ( n + d ) ; }", "python": "def pattern ( n , d ) :\n    for i in range ( 0 , n - 2 ) :\n        print ( \"1\" , end = \" \u2581 \" )\n    print ( \"2\" , end = \" \u2581 \" )\n    print ( n + d )\n"}
{"java": "static int count ( int arr [ ] , int N , int K ) { int count = 0 , ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] == K ) { count = count + 1 ; } else { ans += ( count * ( count + 1 ) ) / 2 ; count = 0 ; } } ans = ans + ( count * ( count + 1 ) ) / 2 ; return ans ; }", "python": "def count ( arr , N , K ) :\n    count = 0\n    ans = 0\n    for i in range ( N ) :\n        if ( arr [ i ] == K ) :\n            count = count + 1\n        else :\n            ans += ( count * ( count + 1 ) ) // 2\n            count = 0\n    ans = ans + ( count * ( count + 1 ) ) // 2\n    return ans\n"}
{"java": "static void find3Numbers ( int arr [ ] , int n ) { int small = + 2147483647 , large = + 2147483647 ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= small ) small = arr [ i ] ; else if ( arr [ i ] <= large ) large = arr [ i ] ; else break ; } if ( i == n ) { System . out . print ( \" No \u2581 such \u2581 triplet \u2581 found \" ) ; return ; } for ( int j = 0 ; j <= i ; j ++ ) { if ( arr [ j ] < large ) { small = arr [ j ] ; break ; } } System . out . print ( small + \" \u2581 \" + large + \" \u2581 \" + arr [ i ] ) ; return ; }", "python": "def find3Numbers ( arr , n ) :\n    small = + 2147483647\n    large = + 2147483647\n    for i in range ( n ) :\n        if ( arr [ i ] <= small ) :\n            small = arr [ i ]\n        elif ( arr [ i ] <= large ) :\n            large = arr [ i ]\n        else :\n            break\n    if ( i == n ) :\n        print ( \" No \u2581 such \u2581 triplet \u2581 found \" )\n        return\n    for j in range ( i + 1 ) :\n        if ( arr [ j ] < large ) :\n            small = arr [ j ]\n            break\n    print ( small , \" \u2581 \" , large , \" \u2581 \" , arr [ i ] )\n    return\n"}
{"java": "public static void printCubeFree ( int n ) { boolean [ ] cubFree = new boolean [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) cubFree [ i ] = true ; for ( int i = 2 ; i * i * i <= n ; i ++ ) { if ( cubFree [ i ] ) { for ( int multiple = 1 ; i * i * i * multiple <= n ; multiple ++ ) { cubFree [ i * i * i * multiple ] = false ; } } } for ( int i = 2 ; i <= n ; i ++ ) { if ( cubFree [ i ] == true ) System . out . print ( i + \" \u2581 \" ) ; } }", "python": "def printCubeFree ( n ) :\n    cubFree = [ 1 ] * ( n + 1 ) ;\n    i = 2 ;\n    while ( i * i * i <= n ) :\n        if ( cubFree [ i ] == 1 ) :\n            multiple = 1 ;\n            while ( i * i * i * multiple <= n ) :\n                cubFree [ i * i * i * multiple ] = 0 ;\n                multiple += 1 ;\n        i += 1 ;\n    for i in range ( 2 , n + 1 ) :\n        if ( cubFree [ i ] == 1 ) :\n            print ( i , end = \" \u2581 \" ) ;\n"}
{"java": "static ArrayList < Integer > solve ( int [ ] count , int n , int m ) { ArrayList < Integer > ret = new ArrayList < Integer > ( ) ; for ( int i = n ; i >= 0 ; i -- ) { for ( int j = 0 ; j < m ; j ++ ) { if ( count [ j ] == i ) ret . add ( new Integer ( j + 1 ) ) ; } } return ret ; }", "python": "def solve ( ) :\n    score = [ sum ( enqu [ i ] [ j ] for i in range ( 0 , n ) ) for j in range ( 0 , m ) ]\n    x = [ [ j + 1 , score [ j ] ] for j in range ( 0 , m ) ]\n    x . sort ( key = lambda y : y [ 1 ] , reverse = True )\n    print ( \" \u2581 \" . join ( list ( map ( lambda y : str ( y [ 0 ] ) , x ) ) ) )\n"}
{"java": "static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; }", "python": "def sum ( n ) :\n    i = 1\n    s = 0.0\n    for i in range ( 1 , n + 1 ) :\n        s = s + 1 / i ;\n    return s ;\n"}
{"java": "public static int countKeyPressed ( String str , int len ) { int count = 0 ; for ( int i = 0 ; i < len ; i ++ ) count = count + arr [ str . charAt ( i ) - ' a ' ] ; return count ; }", "python": "def countKeyPressed ( string , length ) :\n    count = 0 ;\n    for i in range ( length ) :\n        count += arr [ ord ( string [ i ] ) - ord ( ' a ' ) ] ;\n    return count ;\n"}
{"java": "static int larrgestPalindrome ( int n ) { int upper_limit = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { upper_limit *= 10 ; upper_limit += 9 ; } int lower_limit = 1 + upper_limit / 10 ; int max_product = 0 ; for ( int i = upper_limit ; i >= lower_limit ; i -- ) { for ( int j = i ; j >= lower_limit ; j -- ) { int product = i * j ; if ( product < max_product ) break ; int number = product ; int reverse = 0 ; while ( number != 0 ) { reverse = reverse * 10 + number % 10 ; number /= 10 ; } if ( product == reverse && product > max_product ) max_product = product ; } } return max_product ; }", "python": "def larrgestPalindrome ( n ) :\n    upper_limit = 0\n    for i in range ( 1 , n + 1 ) :\n        upper_limit = upper_limit * 10\n        upper_limit = upper_limit + 9\n    lower_limit = 1 + upper_limit // 10\n    max_product = 0\n    for i in range ( upper_limit , lower_limit - 1 , - 1 ) :\n        for j in range ( i , lower_limit - 1 , - 1 ) :\n            product = i * j\n            if ( product < max_product ) :\n                break\n            number = product\n            reverse = 0\n            while ( number != 0 ) :\n                reverse = reverse * 10 + number % 10\n                number = number // 10\n            if ( product == reverse and product > max_product ) :\n                max_product = product\n    return max_product\n"}
{"java": "public static double area_cicumscribed ( double a ) { return ( a * a * ( PI / 3 ) ) ; }", "python": "def area_cicumscribed ( a ) :\n    return ( a * a * ( PI / 3 ) )\n"}
{"java": "public static String solve ( ) { String out = \" \" ; int a = in . nextInt ( ) , b = in . nextInt ( ) , c = in . nextInt ( ) , limit = in . nextInt ( ) ; int [ ] abT = new int [ 201 ] ; int [ ] bcT = new int [ 201 ] ; int [ ] acT = new int [ 201 ] ; int count = 0 ; for ( int i = a ; i >= 1 ; i -- ) { for ( int j = b ; j >= 1 ; j -- ) { for ( int kk = c ; kk >= 1 ; kk -- ) { int k = ( kk + ( i ) + ( j ) ) % c ; k ++ ; int ab = i * 15 + j ; int ac = i * 15 + k ; int bc = j * 15 + k ; if ( abT [ ab ] < limit && bcT [ bc ] < limit && acT [ ac ] < limit ) { out += \" \\n \" + i + \" \u2581 \" + j + \" \u2581 \" + k ; count ++ ; abT [ ab ] ++ ; bcT [ bc ] ++ ; acT [ ac ] ++ ; } else { } } } } System . err . println ( count ) ; return count + \" \" + out ; }", "python": "def executer_calcul ( entrees ) :\n    J = entrees [ 0 ]\n    P = entrees [ 1 ]\n    S = entrees [ 2 ]\n    K = entrees [ 3 ]\n    Case = entrees [ 4 ]\n    if ( K > S ) : K = S\n    if ( P >= K ) : S = P\n    result = str ( J * P * K )\n    for j in range ( J ) :\n        for p in range ( P ) :\n            for k in range ( K ) :\n                result = result + ' \\n ' + str ( j + 1 ) + ' \u2581 ' + str ( p + 1 ) + ' \u2581 ' + str ( ( p + j + k ) % S + 1 )\n    return result\n"}
{"java": "private static int gcd1 ( int i , int j ) { if ( j == 0 ) { return i ; } return gcd1 ( j , i % j ) ; }", "python": "def solve ( ) :\n    s = input ( )\n    k = int ( input ( ) )\n    abc = list ( map ( int , input ( ) . split ( ) ) )\n    sum1 = 0\n    for i in range ( len ( s ) ) :\n        sum1 += abc [ ord ( s [ i ] ) - 97 ] * ( i + 1 )\n    sum2 = 0\n    for i in range ( k ) :\n        sum2 += len ( s ) + i + 1\n    print ( sum1 + sum2 * max ( abc ) )\n"}
{"java": "static void resolve ( InputStream is , PrintStream pw ) { Scanner sc = new Scanner ( is ) ; BigInteger n = new BigInteger ( sc . next ( ) ) ; BigInteger k = new BigInteger ( sc . next ( ) ) ; BigInteger mod = n . mod ( k ) ; pw . println ( mod . min ( mod . add ( k . negate ( ) ) . abs ( ) ) ) ; }", "python": "def solve ( n , k ) :\n    return min ( n % k , abs ( n % k - k ) )\n"}
{"java": "static int minNumber ( int a [ ] , int n , int x ) { Arrays . sort ( a ) ; int k ; for ( k = 0 ; a [ ( n ) / 2 ] != x ; k ++ ) { a [ n ++ ] = x ; Arrays . sort ( a ) ; } return k ; }", "python": "def minNumber ( a , n , x ) :\n    a . sort ( reverse = False )\n    k = 0\n    while ( a [ int ( ( n - 1 ) / 2 ) ] != x ) :\n        a [ n - 1 ] = x\n        n += 1\n        a . sort ( reverse = False )\n        k += 1\n    return k\n"}
{"java": "static int NumberOfSolutions ( int x , int y , int z , int n ) { int ans = 0 ; for ( int i = 0 ; i <= x ; i ++ ) { for ( int j = 0 ; j <= y ; j ++ ) { int temp = n - i - j ; if ( temp >= 0 ) { temp = Math . min ( temp , z ) ; ans += temp + 1 ; } } } return ans ; }", "python": "def NumberOfSolutions ( x , y , z , n ) :\n    ans = 0\n    for i in range ( x + 1 ) :\n        for j in range ( y + 1 ) :\n            temp = n - i - j\n            if temp >= 0 :\n                temp = min ( temp , z )\n                ans += temp + 1\n    return ans\n"}
{"java": "static boolean [ ] getArray ( long x ) { boolean [ ] ans = new boolean [ SIZE ] ; for ( int i = 0 ; i < SIZE ; i ++ ) { if ( x % 2 == 1 ) { ans [ i ] = true ; } x /= 2 ; } return ans ; }", "python": "def makelist ( n , m ) :\n    return [ [ 0 for _ in range ( m ) ] for _ in range ( n ) ]\n"}
{"java": "static Pair getMinMax ( int arr [ ] , int low , int high ) { Pair minmax = new Pair ( ) ; Pair mml = new Pair ( ) ; Pair mmr = new Pair ( ) ; int mid ; if ( low == high ) { minmax . max = arr [ low ] ; minmax . min = arr [ low ] ; return minmax ; } if ( high == low + 1 ) { if ( arr [ low ] > arr [ high ] ) { minmax . max = arr [ low ] ; minmax . min = arr [ high ] ; } else { minmax . max = arr [ high ] ; minmax . min = arr [ low ] ; } return minmax ; } mid = ( low + high ) / 2 ; mml = getMinMax ( arr , low , mid ) ; mmr = getMinMax ( arr , mid + 1 , high ) ; if ( mml . min < mmr . min ) { minmax . min = mml . min ; } else { minmax . min = mmr . min ; } if ( mml . max > mmr . max ) { minmax . max = mml . max ; } else { minmax . max = mmr . max ; } return minmax ; }", "python": "def getMinMax ( low , high , arr ) :\n    arr_max = arr [ low ]\n    arr_min = arr [ low ]\n    if low == high :\n        arr_max = arr [ low ]\n        arr_min = arr [ low ]\n        return ( arr_max , arr_min )\n    elif high == low + 1 :\n        if arr [ low ] > arr [ high ] :\n            arr_max = arr [ low ]\n            arr_min = arr [ high ]\n        else :\n            arr_max = arr [ high ]\n            arr_min = arr [ low ]\n        return ( arr_max , arr_min )\n    else :\n        mid = int ( ( low + high ) / 2 )\n        arr_max1 , arr_min1 = getMinMax ( low , mid , arr )\n        arr_max2 , arr_min2 = getMinMax ( mid + 1 , high , arr )\n    return ( max ( arr_max1 , arr_max2 ) , min ( arr_min1 , arr_min2 ) )\n"}
{"java": "static int countMinimalReplacements ( char [ ] s ) { int n = s . length ; int cnt = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) { cnt += 1 ; if ( i != ( n - 1 ) ) { for ( char it : \"012\" . toCharArray ( ) ) { if ( it != s [ i + 1 ] && it != s [ i - 1 ] ) { s [ i ] = it ; break ; } } } else { for ( char it : \"012\" . toCharArray ( ) ) { if ( it != s [ i - 1 ] ) { s [ i ] = it ; break ; } } } } } return cnt ; }", "python": "def countMinimalReplacements ( s ) :\n    n = len ( s )\n    cnt = 0\n    for i in range ( 1 , n ) :\n        if ( s [ i ] == s [ i - 1 ] ) :\n            cnt += 1 ;\n            if ( i != ( n - 1 ) ) :\n                s = list ( s )\n                for j in \"012\" :\n                    if ( j != s [ i + 1 ] and j != s [ i - 1 ] ) :\n                        s [ i ] = j\n                        break\n                s = ' ' . join ( s )\n            else :\n                s = list ( s )\n                for k in \"012\" :\n                    if ( k != s [ i - 1 ] ) :\n                        s [ i ] = k\n                        break\n                s = ' ' . join ( s )\n    return cnt\n"}
{"java": "private static int formula ( String input ) { char c = input . charAt ( pos ++ ) ; if ( c == '0' ) return 0 ; if ( c == '1' ) return 1 ; if ( c == '2' ) return 2 ; if ( c == ' P ' ) return p ; if ( c == ' Q ' ) return q ; if ( c == ' R ' ) return r ; if ( c == ' - ' ) { int ret = formula ( input ) ; return ( 2 - ret ) ; } int n1 = formula ( input ) ; boolean multi = ( input . charAt ( pos ++ ) == ' * ' ) ; int n2 = formula ( input ) ; pos ++ ; if ( multi ) { if ( n1 == n2 ) return n1 ; if ( n1 * n2 > 0 ) return 1 ; return 0 ; } else { return Math . max ( n1 , n2 ) ; } }", "python": "def parser ( left , right ) :\n    if S [ left ] == ' ( ' and S [ right - 1 ] == ' ) ' :\n        cnt = 0\n        for i in range ( left + 1 , right - 1 ) :\n            if S [ i ] == ' ( ' :\n                cnt += 1\n            elif S [ i ] == ' ) ' :\n                cnt -= 1\n            elif cnt == 0 and S [ i ] == ' + ' :\n                return [ max ( x , y ) for x , y in zip ( parser ( left + 1 , i ) , parser ( i + 1 , right - 1 ) ) ]\n            elif cnt == 0 and S [ i ] == ' * ' :\n                return [ min ( x , y ) for x , y in zip ( parser ( left + 1 , i ) , parser ( i + 1 , right - 1 ) ) ]\n    elif S [ left ] == ' - ' :\n        return [ 2 - x for x in parser ( left + 1 , right ) ]\n    elif S [ left ] == ' P ' :\n        return [ i // 9 % 3 for i in range ( 27 ) ]\n    elif S [ left ] == ' Q ' :\n        return [ i // 3 % 3 for i in range ( 27 ) ]\n    elif S [ left ] == ' R ' :\n        return [ i % 3 for i in range ( 27 ) ]\n    else :\n        return [ int ( S [ left ] ) for _ in range ( 27 ) ]\n"}
{"java": "static int distinctSubString ( String P , int N ) { HashSet < String > S = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; ++ i ) { boolean [ ] freq = new boolean [ 26 ] ; String s = \" \" ; for ( int j = i ; j < N ; ++ j ) { int pos = P . charAt ( j ) - ' a ' ; if ( freq [ pos ] == true ) break ; freq [ pos ] = true ; s += P . charAt ( j ) ; S . add ( s ) ; } } return S . size ( ) ; }", "python": "def distinctSubstring ( P , N ) :\n    S = dict ( )\n    for i in range ( N ) :\n        freq = [ False ] * 26\n        s = \" \"\n        for j in range ( i , N ) :\n            pos = ord ( P [ j ] ) - ord ( ' a ' )\n            if ( freq [ pos ] == True ) :\n                break\n            freq [ pos ] = True\n            s += P [ j ]\n            S [ s ] = 1\n    return len ( S )\n"}
{"java": "static int minOperations ( int x , int y , int p , int q ) { if ( y % x != 0 ) return - 1 ; int d = y / x ; int a = 0 ; while ( d % p == 0 ) { d /= p ; a ++ ; } int b = 0 ; while ( d % q == 0 ) { d /= q ; b ++ ; } if ( d != 1 ) return - 1 ; return ( a + b ) ; }", "python": "def minOperations ( x , y , p , q ) :\n    if ( y % x != 0 ) :\n        return - 1\n    d = y // x\n    a = 0\n    while ( d % p == 0 ) :\n        d //= p\n        a += 1\n    b = 0\n    while ( d % q == 0 ) :\n        d //= q\n        b += 1\n    if ( d != 1 ) :\n        return - 1\n    return ( a + b )\n"}
{"java": "static int number_of_tower ( int house [ ] , int range , int n ) { Arrays . sort ( house ) ; int numOfTower = 0 ; int i = 0 ; while ( i < n ) { numOfTower ++ ; int loc = house [ i ] + range ; while ( i < n && house [ i ] <= loc ) i ++ ; -- i ; loc = house [ i ] + range ; while ( i < n && house [ i ] <= loc ) i ++ ; } return numOfTower ; }", "python": "def number_of_tower ( house , r , n ) :\n    house . sort ( )\n    numOfTower = 0\n    i = 0\n    while ( i < n ) :\n        numOfTower += 1\n        loc = house [ i ] + r\n        while ( i < n and house [ i ] <= loc ) :\n            i += 1\n        i -= 1\n        loc = house [ i ] + r\n        while ( i < n and house [ i ] <= loc ) :\n            i += 1\n    return numOfTower\n"}
{"java": "static int findOddPair ( int A [ ] , int N ) { int i , count = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 0 ) count ++ ; } return count * ( N - count ) ; }", "python": "def findOddPair ( A , N ) :\n    count = 0\n    for i in range ( 0 , N ) :\n        if ( A [ i ] % 2 == 0 ) :\n            count += 1\n    return count * ( N - count )\n"}
{"java": "static int minLettersNeeded ( int n ) { if ( n % 26 == 0 ) return ( n / 26 ) ; else return ( ( n / 26 ) + 1 ) ; }", "python": "def minLettersNeeded ( n ) :\n    if n % 26 == 0 :\n        return ( n // 26 )\n    else :\n        return ( ( n // 26 ) + 1 )\n"}
{"java": "static int count_pairs ( int a [ ] , int b [ ] , int n , int m ) { int odd1 = 0 , even1 = 0 ; int odd2 = 0 , even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) { odd1 ++ ; } else { even1 ++ ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 == 1 ) { odd2 ++ ; } else { even2 ++ ; } } int pairs = Math . min ( odd1 , even2 ) + Math . min ( odd2 , even1 ) ; return pairs ; }", "python": "def count_pairs ( a , b , n , m ) :\n    odd1 = 0\n    even1 = 0\n    odd2 = 0\n    even2 = 0\n    for i in range ( n ) :\n        if ( a [ i ] % 2 ) :\n            odd1 += 1\n        else :\n            even1 += 1\n    for i in range ( m ) :\n        if ( b [ i ] % 2 ) :\n            odd2 += 1\n        else :\n            even2 += 1\n    pairs = ( min ( odd1 , even2 ) + min ( odd2 , even1 ) )\n    return pairs\n"}
{"java": "static int count_pairs ( int a [ ] , int b [ ] , int n , int m ) { int odd1 = 0 , even1 = 0 ; int odd2 = 0 , even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) odd1 ++ ; else even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 == 1 ) odd2 ++ ; else even2 ++ ; } int pairs = Math . min ( odd1 , odd2 ) + Math . min ( even1 , even2 ) ; return pairs ; }", "python": "def count_pairs ( a , b , n , m ) :\n    odd1 = 0\n    even1 = 0\n    odd2 = 0\n    even2 = 0\n    for i in range ( n ) :\n        if ( a [ i ] % 2 == 1 ) :\n            odd1 += 1\n        else :\n            even1 += 1\n    for i in range ( m ) :\n        if ( b [ i ] % 2 == 1 ) :\n            odd2 += 1\n        else :\n            even2 += 1\n    pairs = min ( odd1 , odd2 ) + min ( even1 , even2 )\n    return pairs\n"}
{"java": "static boolean checkSubarraySum ( int arr [ ] , int n , int k , int sum ) { for ( int i = 0 ; i < n - k + 1 ; i ++ ) { int current_sum = 0 ; for ( int j = 0 ; j < k ; j ++ ) current_sum = current_sum + arr [ i + j ] ; if ( current_sum == sum ) return true ; } return false ; }", "python": "def checkSubarraySum ( arr , n , k , sum ) :\n    for i in range ( n - k + 1 ) :\n        current_sum = 0 ;\n        for j in range ( k ) :\n            current_sum = ( current_sum + arr [ i + j ] ) ;\n        if ( current_sum == sum ) :\n            return True ;\n    return False ;\n"}
{"java": "static long minimumMoves ( int a [ ] , int n ) { long operations = 0 ; Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) operations += ( long ) Math . abs ( a [ i ] - ( i + 1 ) ) ; return operations ; }", "python": "def minimumMoves ( a , n ) :\n    operations = 0\n    a . sort ( reverse = False )\n    for i in range ( 0 , n , 1 ) :\n        operations = operations + abs ( a [ i ] - ( i + 1 ) )\n    return operations\n"}
{"java": "static void checkPalindrome ( int num ) { String str = Integer . toString ( num ) ; int l = 0 , r = str . length ( ) - 1 ; while ( l < r ) { if ( str . charAt ( l ) != str . charAt ( r ) ) { System . out . print ( \" No \" ) ; return ; } l ++ ; r -- ; } System . out . print ( \" Yes \" ) ; return ; }", "python": "def checkPalindrome ( num ) :\n    string = str ( num )\n    l = 0\n    r = len ( string ) - 1 ;\n    while ( l < r ) :\n        if ( string [ l ] != string [ r ] ) :\n            print ( \" No \" )\n            return ;\n        l = l + 1 ;\n        r = r - 1 ;\n    print ( \" Yes \" )\n    return ;\n"}
{"java": "static void checkTypeOfTriangle ( int a , int b , int c ) { int sqa = ( int ) Math . pow ( a , 2 ) ; int sqb = ( int ) Math . pow ( b , 2 ) ; int sqc = ( int ) Math . pow ( c , 2 ) ; if ( sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb ) { System . out . print ( \" Right - angled \u2581 Triangle \" ) ; } else if ( sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb ) { System . out . print ( \" Obtuse - angled \u2581 Triangle \" ) ; } else { System . out . print ( \" Acute - angled \u2581 Triangle \" ) ; } }", "python": "def checkTypeOfTriangle ( a , b , c ) :\n    sqa = pow ( a , 2 )\n    sqb = pow ( b , 2 )\n    sqc = pow ( c , 2 )\n    if ( sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb ) :\n        print ( \" Right - angled \u2581 Triangle \" )\n    elif ( sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb ) :\n        print ( \" Obtuse - angled \u2581 Triangle \" )\n    else :\n        print ( \" Acute - angled \u2581 Triangle \" )\n"}
{"java": "static int solve ( int N , int K ) { int [ ] combo ; combo = new int [ 50 ] ; combo [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( j >= i ) { combo [ j ] += combo [ j - i ] ; } } } return combo [ N ] ; }", "python": "def solve ( N , K ) :\n    combo = [ 0 ] * ( N + 1 )\n    combo [ 0 ] = 1\n    for i in range ( 1 , K + 1 ) :\n        for j in range ( 0 , N + 1 ) :\n            if j >= i :\n                combo [ j ] += combo [ j - i ]\n    return combo [ N ]\n"}
{"java": "static int KthMinValAfterMconcatenate ( int [ ] A , int N , int M , int K ) { Arrays . sort ( A ) ; return ( A [ ( ( K - 1 ) / M ) ] ) ; }", "python": "def KthMinValAfterMconcatenate ( A , N , M , K ) :\n    V = [ ]\n    for i in range ( 0 , M ) :\n        for j in range ( 0 , N ) :\n            V . append ( A [ j ] )\n    V . sort ( )\n    return V [ K - 1 ]\n"}
{"java": "public static void solve ( int n , String s ) { int groups = 0 ; ArrayList < Integer > sizes = new ArrayList < > ( ) ; int i = 0 ; while ( i < n ) { if ( s . charAt ( i ) == ' B ' ) { groups ++ ; int r = i ; while ( r < n && s . charAt ( r ) == ' B ' ) r ++ ; sizes . add ( r - i ) ; i = r ; } else i ++ ; } System . out . println ( groups ) ; if ( groups > 0 ) { for ( int x : sizes ) System . out . print ( x + \" \u2581 \" ) ; System . out . println ( ) ; } }", "python": "def main ( ) :\n    nelem = int ( input ( ) )\n    lista = input ( )\n    nofgroups = 0\n    length = 0\n    prevblack = False\n    strgroups = \" \"\n    for i in range ( nelem ) :\n        if ( lista [ i ] == ' B ' and prevblack ) :\n            length += 1\n            if ( i == ( nelem - 1 ) ) :\n                strgroups += ( str ( length ) + ' \u2581 ' )\n        elif ( lista [ i ] == ' B ' ) :\n            nofgroups += 1\n            length += 1\n            prevblack = True\n            if ( i == ( nelem - 1 ) ) :\n                strgroups += ( str ( length ) + ' \u2581 ' )\n        elif ( lista [ i ] == ' W ' and prevblack ) :\n            strgroups += ( str ( length ) + ' \u2581 ' )\n            length = 0\n            prevblack = False\n    print ( nofgroups )\n    print ( strgroups )\n"}
{"java": "static void printPattern ( int n , int m , boolean flag ) { System . out . print ( m + \" \u2581 \" ) ; if ( flag == false && n == m ) return ; if ( flag ) { if ( m - 5 > 0 ) printPattern ( n , m - 5 , true ) ; else printPattern ( n , m - 5 , false ) ; } else printPattern ( n , m + 5 , false ) ; }", "python": "def printPattern ( n , m , flag ) :\n    print ( m )\n    if flag == False and n == m :\n        return\n    if flag :\n        if m - 5 > 0 :\n            printPattern ( n , m - 5 , True )\n        else :\n            printPattern ( n , m - 5 , False )\n    else :\n        printPattern ( n , m + 5 , False )\n"}
{"java": "static double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; }", "python": "def sum ( x , n ) :\n    total = 1.0\n    multi = x\n    for i in range ( 1 , n + 1 ) :\n        total = total + multi / i\n        multi = multi * x\n    return total\n"}
{"java": "static void oddIntegers ( int n , int k ) { if ( n % 2 != k % 2 ) { System . out . println ( \" - 1\" ) ; return ; } int sum = 0 ; int i = 1 ; int j = 1 ; while ( j < k ) { sum = sum + i ; System . out . print ( i + \" \u2581 \" ) ; i = i + 2 ; j ++ ; } int finalOdd = n - sum ; System . out . println ( finalOdd ) ; }", "python": "def oddIntegers ( n , k ) :\n    if ( n % 2 != k % 2 ) :\n        print ( \" - 1\" ) ;\n        return ;\n    sum = 0 ;\n    i = 1 ;\n    j = 1 ;\n    while ( j < k ) :\n        sum += i ;\n        print ( i , end = \" \u2581 \" ) ;\n        i += 2 ;\n        j += 1 ;\n    finalOdd = n - sum ;\n    print ( finalOdd ) ;\n"}
{"java": "static void printPermutation ( int n , int k ) { int i , mx = n ; for ( i = 1 ; i <= k ; i ++ ) { System . out . print ( mx + \" \u2581 \" ) ; mx -- ; } for ( i = 1 ; i <= mx ; i ++ ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def printPermutation ( n , k ) :\n    mx = n\n    for i in range ( 1 , k + 1 ) :\n        print ( mx , end = \" \u2581 \" )\n        mx -= 1\n    for i in range ( 1 , mx + 1 ) :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "static int countPairs ( String s ) { Set < Character > st = new HashSet < Character > ( ) ; st . add ( ' a ' ) ; st . add ( ' e ' ) ; st . add ( ' i ' ) ; st . add ( ' o ' ) ; st . add ( ' u ' ) ; int count = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( st . contains ( s . charAt ( i ) ) && ! st . contains ( s . charAt ( i + 1 ) ) ) count ++ ; } return count ; }", "python": "def countPairs ( s ) :\n    st = set ( ) ;\n    st . add ( ' a ' ) ;\n    st . add ( ' e ' ) ;\n    st . add ( ' i ' ) ;\n    st . add ( ' o ' ) ;\n    st . add ( ' u ' ) ;\n    count = 0 ;\n    n = len ( s ) ;\n    for i in range ( n - 1 ) :\n        if ( s [ i ] not in st and s [ i + 1 ] in st ) :\n            count += 1 ;\n    return count ;\n"}
{"java": "static int findOnBulbs ( int numberOfBulbs ) { int onBulbs = 0 ; int bulb = 1 ; int person = 1 ; for ( bulb = 1 ; bulb <= numberOfBulbs ; bulb ++ ) { int factors = 0 ; for ( person = 1 ; person * person <= numberOfBulbs ; person ++ ) { if ( bulb % person == 0 ) { factors ++ ; if ( bulb / person != person ) { factors ++ ; } } } if ( factors % 2 == 1 ) { System . out . println ( \" Light \u2581 bulb \u2581 \" + bulb + \" \u2581 will \u2581 be \u2581 on \" ) ; onBulbs ++ ; } } return onBulbs ; }", "python": "def findOnBulbs ( numberOfBulbs ) :\n    onBulbs = 0\n    bulb = 1\n    person = 1\n    for bulb in range ( 1 , numberOfBulbs + 1 ) :\n        factors = 0\n        for person in range ( 1 , int ( numberOfBulbs ** ( 0.5 ) ) + 1 ) :\n            if bulb % person == 0 :\n                factors += 1\n                if bulb // person != person :\n                    factors += 1\n        if factors % 2 == 1 :\n            print ( \" Light \u2581 bulb \" , bulb , \" will \u2581 be \u2581 on \" )\n            onBulbs += 1\n    return onBulbs\n"}
{"java": "static double Perimeter ( double s , int n ) { double perimeter = 1 ; perimeter = n * s ; return perimeter ; }", "python": "def Perimeter ( s , n ) :\n    perimeter = 1\n    perimeter = n * s\n    return perimeter\n"}
{"java": "public static boolean push ( int [ ] nums ) { Deque < Integer > list1 = new LinkedList < Integer > ( ) ; Deque < Integer > list2 = new LinkedList < Integer > ( ) ; list1 . add ( 0 ) ; list2 . add ( 0 ) ; for ( int number : nums ) { if ( list1 . peek ( ) < number ) { list1 . push ( number ) ; } else if ( list2 . peek ( ) < number ) { list2 . push ( number ) ; } else { return false ; } } return true ; }", "python": "def dfs ( a , b , c , i ) :\n    if i == 10 :\n        global flag\n        flag = True\n        return\n    else :\n        if a [ i ] > b :\n            dfs ( a , a [ i ] , c , i + 1 )\n        else :\n            pass\n        if a [ i ] > c :\n            dfs ( a , b , a [ i ] , i + 1 )\n        else :\n            pass\n        if a [ i ] < b and a [ i ] < c :\n            return\n"}
{"java": "static int Max_Xor ( int arr [ ] , int i , int j , int mask , int n ) { if ( i >= n ) { if ( j == 0 ) return mask ; else return 0 ; } if ( dp [ i ] [ j ] [ mask ] != - 1 ) return dp [ i ] [ j ] [ mask ] ; int ans = 0 ; if ( j > 0 ) ans = Max_Xor ( arr , i + 1 , j - 1 , mask ^ arr [ i ] , n ) ; ans = Math . max ( ans , Max_Xor ( arr , i + 1 , j , mask , n ) ) ; return dp [ i ] [ j ] [ mask ] = ans ; }", "python": "def Max_Xor ( arr , i , j , mask , n ) :\n    if ( i >= n ) :\n        if ( j == 0 ) :\n            return mask\n        else :\n            return 0\n    if ( dp [ i ] [ j ] [ mask ] != - 1 ) :\n        return dp [ i ] [ j ] [ mask ]\n    ans = 0\n    if ( j > 0 ) :\n        ans = Max_Xor ( arr , i + 1 , j - 1 , mask ^ arr [ i ] , n )\n    ans = max ( ans , Max_Xor ( arr , i + 1 , j , mask , n ) )\n    dp [ i ] [ j ] [ mask ] = ans\n    return ans\n"}
{"java": "static void find ( int n , int m ) { if ( n <= 2 * m ) System . out . println ( \" Minimum \u2581 \" + 0 ) ; else System . out . println ( \" Minimum \u2581 \" + ( n - 2 * m ) ) ; int i ; for ( i = 1 ; i <= n ; i ++ ) { if ( i * ( i - 1 ) / 2 >= m ) break ; } System . out . println ( \" Maximum \u2581 \" + ( n - i ) ) ; }", "python": "def find ( n , m ) :\n    if ( n <= 2 * m ) :\n        print ( \" Minimum \u2581 \" , 0 )\n    else :\n        print ( \" Minimum \u2581 \" , n - 2 * m )\n    for i in range ( 1 , n + 1 ) :\n        if ( i * ( i - 1 ) // 2 >= m ) :\n            break\n    print ( \" Maximum \u2581 \" , n - i )\n"}
{"java": "static int countSubstrs ( String s1 , String s2 ) { int ans = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { String s3 = \" \" ; char [ ] s4 = s1 . toCharArray ( ) ; for ( int j = i ; j < s1 . length ( ) ; j ++ ) { s3 += s4 [ j ] ; if ( s2 . indexOf ( s3 ) != - 1 ) ans ++ ; } } return ans ; }", "python": "def countSubstrs ( s1 , s2 ) :\n    ans = 0\n    for i in range ( len ( s1 ) ) :\n        s3 = \" \"\n        for j in range ( i , len ( s1 ) ) :\n            s3 += s1 [ j ]\n            if s2 . find ( s3 ) != - 1 :\n                ans += 1\n    return ans\n"}
{"java": "static void series ( int A , int X , int n ) { int term = ( int ) Math . pow ( A , n ) ; System . out . print ( term + \" \u2581 \" ) ; for ( int i = 1 ; i <= n ; i ++ ) { term = term * X * ( n - i + 1 ) / ( i * A ) ; System . out . print ( term + \" \u2581 \" ) ; } }", "python": "def series ( A , X , n ) :\n    term = pow ( A , n )\n    print ( term , end = \" \u2581 \" )\n    for i in range ( 1 , n + 1 ) :\n        term = int ( term * X * ( n - i + 1 ) / ( i * A ) )\n        print ( term , end = \" \u2581 \" )\n"}
{"java": "static int check ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n = n / 10 ; } if ( sum % 7 == 0 ) return 1 ; else return 0 ; }", "python": "def check ( n ) :\n    sum = 0\n    while n != 0 :\n        sum += n % 10\n        n = n // 10\n    if sum % 7 == 0 :\n        return 1\n    else :\n        return 0\n"}
{"java": "public static int solution ( int [ ] seats ) { int count1 = 0 ; int count2 = 0 ; int i = 0 , j = seats . length - 1 ; while ( seats [ i ] == 0 ) { count1 ++ ; i ++ ; } while ( seats [ j ] == 0 ) { count2 ++ ; j -- ; } int countmid = 0 , countmax = 0 ; for ( int k = i + 1 ; k <= j ; k ++ ) { if ( seats [ k ] == 0 ) { countmid ++ ; } else { countmax = Math . max ( countmax , countmid ) ; countmid = 0 ; } } return Math . max ( Math . max ( count1 , count2 ) , ( countmax + 1 ) / 2 ) + 1 ; }", "python": "def resolve ( n , k , k_list ) :\n    r = n - k\n    if r < 2 :\n        return r + 1\n    l = k_list [ 0 ]\n    r = n - k_list [ - 1 ] + 1\n    lr_max = l if l > r else r\n    if ( k > 1 ) :\n        k_list = [ k_list [ j + 1 ] - k_list [ j ] for j in range ( k - 1 ) ]\n        k_max = max ( k_list ) // 2 + 1\n        r = lr_max if lr_max > k_max else k_max\n        return r\n    else :\n        return lr_max\n"}
{"java": "static boolean isPossible ( int x , int y , int k ) { int minMoves = Math . abs ( x ) + Math . abs ( y ) ; if ( k >= minMoves && ( k - minMoves ) % 2 == 0 ) return true ; return false ; }", "python": "def isPossible ( x , y , k ) :\n    minMoves = abs ( x ) + abs ( y )\n    if ( k >= minMoves and ( k - minMoves ) % 2 == 0 ) :\n        return True\n    return False\n"}
{"java": "static int countNumbers ( int n ) { return ( n / 2520 ) ; }", "python": "def countNumbers ( n ) :\n    return n // 2520\n"}
{"java": "static void halfsquare ( int n , int x , int y ) { int half = n / 2 ; if ( ( half == x || half == x - 1 ) && ( half == y || half == y - 1 ) ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; }", "python": "def halfsquare ( n , x , y ) :\n    half = n // 2\n    if ( ( half == x or half == x - 1 ) and ( half == y or half == y - 1 ) ) :\n        print ( \" NO \" )\n    else :\n        print ( \" YES \" )\n"}
{"java": "static int countZeros ( int x ) { int total_bits = sizeofInt * 8 ; int res = 0 ; while ( ( x & ( 1 << ( total_bits - 1 ) ) ) == 0 ) { x = ( x << 1 ) ; res ++ ; } return res ; }", "python": "def countZeros ( x ) :\n    total_bits = 32\n    res = 0\n    while ( ( x & ( 1 << ( total_bits - 1 ) ) ) == 0 ) :\n        x = ( x << 1 )\n        res += 1\n    return res\n"}
{"java": "static int times ( int [ ] steps , int n ) { int current_level = 0 ; int previous_level = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { previous_level = current_level ; current_level = current_level + steps [ i ] ; if ( ( previous_level < 0 && current_level >= 0 ) || ( previous_level > 0 && current_level <= 0 ) ) { count ++ ; } } return count ; }", "python": "def times ( steps , n ) :\n    current_level = 0\n    previous_level = 0\n    count = 0\n    for i in range ( n ) :\n        previous_level = current_level\n        current_level = current_level + steps [ i ]\n        if ( ( previous_level < 0 and current_level >= 0 ) or ( previous_level > 0 and current_level <= 0 ) ) :\n            count += 1\n    return count\n"}
{"java": "static void count_unique ( HashSet < Integer > s , int n ) { if ( s . contains ( n ) ) return ; s . add ( n ) ; n += 1 ; while ( n % 10 == 0 ) { n = n / 10 ; } count_unique ( s , n ) ; }", "python": "def count_unique ( s , n ) :\n    if ( s . count ( n ) ) :\n        return ;\n    s . append ( n ) ;\n    n += 1 ;\n    while ( n % 10 == 0 ) :\n        n = n // 10 ;\n    count_unique ( s , n ) ;\n"}
{"java": "static int MaximumNumbers ( String s ) { int n = s . length ( ) ; int [ ] remIndex = { - 1 , - 1 , - 1 } ; remIndex [ 0 ] = 0 ; int [ ] res = new int [ n + 1 ] ; int r = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { r = ( r + s . charAt ( i - 1 ) - '0' ) % 3 ; res [ i ] = res [ i - 1 ] ; if ( remIndex [ r ] != - 1 ) res [ i ] = Math . max ( res [ i ] , res [ remIndex [ r ] ] + 1 ) ; remIndex [ r ] = i + 1 ; } return res [ n ] ; }", "python": "def MaximumNumbers ( string ) :\n    n = len ( string )\n    remIndex = [ - 1 for i in range ( 3 ) ]\n    remIndex [ 0 ] = 0\n    res = [ - 1 for i in range ( n + 1 ) ]\n    r = 0\n    for i in range ( n + 1 ) :\n        r = ( r + ord ( string [ i - 1 ] ) - ord ( '0' ) ) % 3\n        res [ i ] = res [ i - 1 ]\n        if ( remIndex [ r ] != - 1 ) :\n            res [ i ] = max ( res [ i ] , res [ remIndex [ r ] ] + 1 )\n        remIndex [ r ] = i + 1\n    return res [ n ]\n"}
{"java": "static boolean BFS ( ) { boolean [ ] visited = new boolean [ vn ] ; int pos = 0 ; LinkedList < Integer > q = new LinkedList < Integer > ( ) ; q . add ( 0 ) ; while ( ! q . isEmpty ( ) ) { pos = q . pop ( ) ; if ( pos == vn - 1 ) return true ; for ( int i = 0 ; i < vn ; i ++ ) { if ( res [ pos ] [ i ] > 0 && ! visited [ i ] ) { visited [ i ] = true ; parent [ i ] = pos ; q . push ( i ) ; } } } return false ; }", "python": "def dfs ( current , flow ) :\n    if current == V - 1 :\n        return flow\n    visited . add ( current )\n    if not G [ current ] :\n        return 0\n    for nex , nex_c in G [ current ] . items ( ) :\n        if not nex in visited and nex_c != 0 :\n            f = dfs ( nex , min ( flow , nex_c ) )\n            if f != 0 :\n                mG [ current ] [ nex ] = mG [ current ] [ nex ] + f\n                G [ current ] [ nex ] = G [ current ] [ nex ] - f\n                G [ nex ] [ current ] = G [ nex ] [ current ] + f\n                return f\n    return 0\n"}
{"java": "static int findNumOfPair ( int a [ ] , int n ) { Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( a [ i ] <= 0 ) continue ; int len = a . length ; int j = 0 ; while ( j < len ) { if ( a [ j ] == n ) { return j ; } else { j = j + 1 ; } } ans += i - j ; } return ans ; }", "python": "def findNumOfPair ( a , n ) :\n    a = sorted ( a )\n    ans = 0\n    for i in range ( n ) :\n        if ( a [ i ] <= 0 ) :\n            continue\n        j = lower_bound ( a , - a [ i ] + 1 )\n        ans += i - j\n    return ans\n"}
{"java": "static void printHutStar ( int n ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) System . out . print ( \" \u2581 \" ) ; for ( j = 0 ; j < ( 2 * i + 1 ) ; j ++ ) System . out . print ( \" * \" ) ; System . out . println ( ) ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) System . out . print ( \" * \" ) ; for ( j = 0 ; j < ( 2 * n - 7 ) ; j ++ ) System . out . print ( \" \u2581 \" ) ; for ( j = 0 ; j < 3 ; j ++ ) System . out . print ( \" * \" ) ; System . out . println ( ) ; } }", "python": "def printHutStar ( n ) :\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            print ( ' \u2581 ' , end = ' ' )\n        for j in range ( 0 , 2 * i + 1 ) :\n            print ( ' * ' , end = ' ' )\n        print ( )\n    for i in range ( 3 ) :\n        for j in range ( 3 ) :\n            print ( ' * ' , end = ' ' )\n        for j in range ( 2 * n - 7 ) :\n            print ( ' \u2581 ' , end = ' ' )\n        for j in range ( 3 ) :\n            print ( ' * ' , end = ' ' )\n        print ( )\n"}
{"java": "static int sumDivisibles ( int A , int B , int M ) { int sum = 0 ; for ( int i = A ; i <= B ; i ++ ) if ( i % M == 0 ) sum += i ; return sum ; }", "python": "def sumDivisibles ( A , B , M ) :\n    sum = 0\n    for i in range ( A , B + 1 ) :\n        if ( i % M == 0 ) :\n            sum += i\n    return sum\n"}
{"java": "static int minimumSteps ( int n , int m , int a , int b ) { if ( n > m ) return MAXN ; if ( n == m ) return 0 ; return Math . min ( 1 + minimumSteps ( n * a , m , a , b ) , 1 + minimumSteps ( n * b , m , a , b ) ) ; }", "python": "def minimumSteps ( n , m , a , b ) :\n    if ( n > m ) :\n        return MAXN\n    if ( n == m ) :\n        return 0\n    return min ( 1 + minimumSteps ( n * a , m , a , b ) , 1 + minimumSteps ( n * b , m , a , b ) )\n"}
{"java": "static boolean isRatioPossible ( int lowCost , int upCost , int lowQuant , int upQuant , int r ) { for ( int i = lowQuant ; i <= upQuant ; i ++ ) { int ans = i * r ; if ( lowCost <= ans && ans <= upCost ) return true ; } return false ; }", "python": "def isRatioPossible ( lowCost , upCost , lowQuant , upQuant , r ) :\n    for i in range ( lowQuant , upQuant + 1 ) :\n        ans = i * r\n        if ( lowCost <= ans and ans <= upCost ) :\n            return True\n    return False\n"}
{"java": "public static void printTaxicab2 ( int N ) { int i = 1 , count = 0 ; while ( count < N ) { int int_count = 0 ; for ( int j = 1 ; j <= Math . pow ( i , 1.0 / 3 ) ; j ++ ) for ( int k = j + 1 ; k <= Math . pow ( i , 1.0 / 3 ) ; k ++ ) if ( j * j * j + k * k * k == i ) int_count ++ ; if ( int_count == 2 ) { count ++ ; System . out . println ( count + \" \u2581 \" + i ) ; } i ++ ; } }", "python": "def printTaxicab2 ( N ) :\n    i , count = 1 , 0\n    while ( count < N ) :\n        int_count = 0\n        for j in range ( 1 , int ( pow ( i , 1.0 / 3 ) ) + 1 ) :\n            for k in range ( j + 1 , int ( pow ( i , 1.0 / 3 ) ) + 1 ) :\n                if ( j * j * j + k * k * k == i ) :\n                    int_count += 1\n        if ( int_count == 2 ) :\n            count += 1\n            print ( count , \" \u2581 \" , i )\n        i += 1\n"}
{"java": "static boolean isAnyNotPalindrome ( String s ) { Set < Character > unique = new HashSet < Character > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) unique . add ( s . charAt ( i ) ) ; if ( unique . size ( ) > 1 ) return true ; else return false ; }", "python": "def isAnyNotPalindrome ( s ) :\n    unique = set ( )\n    for i in range ( 0 , len ( s ) ) :\n        unique . add ( s [ i ] )\n    if ( len ( unique ) > 1 ) :\n        return True\n    else :\n        return False\n"}
{"java": "static int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; }", "python": "def seriesSum ( calculated , current , N ) :\n    i = calculated ;\n    cur = 1 ;\n    if ( current == N + 1 ) :\n        return 0 ;\n    while ( i < calculated + current ) :\n        cur *= i ;\n        i += 1 ;\n    return cur + seriesSum ( i , current + 1 , N ) ;\n"}
{"java": "static int replace ( String A , String B ) { int n = A . length ( ) , m = B . length ( ) ; int count = 0 , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( i + j >= n ) break ; else if ( A . charAt ( i + j ) != B . charAt ( j ) ) break ; } if ( j == m ) { count ++ ; i += m - 1 ; } } return count ; }", "python": "def replace ( A , B ) :\n    n , m = len ( A ) , len ( B )\n    count , i = 0 , 0\n    while i < n :\n        j = 0\n        while j < m :\n            if i + j >= n or A [ i + j ] != B [ j ] :\n                break\n            j += 1\n        if j == m :\n            count += 1\n            i += m - 1\n        i += 1\n    return count\n"}
{"java": "static int maxSubStr ( String str , int n ) { int count0 = 0 , count1 = 0 ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == '0' ) { count0 ++ ; } else { count1 ++ ; } if ( count0 == count1 ) { cnt ++ ; } } if ( count0 != count1 ) { return - 1 ; } return cnt ; }", "python": "def maxSubStr ( str , n ) :\n    count0 = 0\n    count1 = 0\n    cnt = 0\n    for i in range ( n ) :\n        if str [ i ] == '0' :\n            count0 += 1\n        else :\n            count1 += 1\n        if count0 == count1 :\n            cnt += 1\n    if count0 != count1 :\n        return - 1\n    return cnt\n"}
{"java": "static long pow ( int a , int p , int m ) { if ( p == 0 ) return ( long ) 1 % m ; if ( p == 1 ) return ( long ) a % m ; long v = pow ( a , p / 2 , m ) ; long ans = v * v % m ; if ( p % 2 == 1 ) ans = ans * a % m ; return ans ; }", "python": "def f ( x ) :\n    if x == 2 :\n        return 3\n    return ( 3 * f ( x - 1 ) )\n"}
{"java": "static void find_numbers ( int N ) { if ( N == 1 ) { System . out . print ( - 1 ) ; } else { System . out . print ( N + \" \u2581 \" + ( N + 1 ) + \" \u2581 \" + ( N * ( N + 1 ) ) ) ; } }", "python": "def find_numbers ( N ) :\n    if ( N == 1 ) :\n        print ( - 1 , end = \" \" ) ;\n    else :\n        print ( N , N + 1 , N * ( N + 1 ) ) ;\n"}
{"java": "static float rhombusarea ( float l , float b ) { if ( l < 0 || b < 0 ) return - 1 ; return ( l * b ) / 2 ; }", "python": "def rhombusarea ( l , b ) :\n    if ( l < 0 or b < 0 ) :\n        return - 1\n    return ( l * b ) / 2\n"}
{"java": "static int maximumFixedPoints ( int a [ ] , int n ) { int i , count = 0 , swapped = 0 ; int pos [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) pos [ a [ i ] ] = i ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == i ) count ++ ; else if ( swapped == 0 && pos [ i ] == a [ i ] ) { count += 2 ; swapped = 1 ; } } if ( swapped == 0 && count < n - 1 ) count ++ ; return count ; }", "python": "def maximumFixedPoints ( a , n ) :\n    pos = [ None ] * n\n    count , swapped = 0 , 0\n    for i in range ( 0 , n ) :\n        pos [ a [ i ] ] = i\n    for i in range ( 0 , n ) :\n        if a [ i ] == i :\n            count += 1\n        elif swapped == 0 and pos [ i ] == a [ i ] :\n            count += 2\n            swapped = 1\n    if swapped == 0 and count < n - 1 :\n        count += 1\n    return count\n"}
{"java": "public static int useRecursionToCountChars ( String str , char key , int index ) { if ( index >= str . length ( ) ) { return 0 ; } int count = str . charAt ( index ) == key ? 1 : 0 ; return count + useRecursionToCountChars ( str , key , index + 1 ) ; }", "python": "def main ( ) :\n    ans_list = list ( str ( input ( ) . split ( ) ) )\n    print ( ans_list . count ( \"1\" ) )\n"}
{"java": "public static void solve ( ) { Map < Character , Integer > map = new HashMap < Character , Integer > ( ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String str = sc . next ( ) ; for ( int j = 0 ; j < str . length ( ) ; j ++ ) { if ( map . containsKey ( str . charAt ( j ) ) ) { map . put ( str . charAt ( j ) , map . get ( str . charAt ( j ) ) + 1 ) ; } else { map . put ( str . charAt ( j ) , 1 ) ; } } } for ( Map . Entry < Character , Integer > entry : map . entrySet ( ) ) { if ( entry . getValue ( ) % n != 0 ) { System . out . println ( \" NO \" ) ; return ; } } System . out . println ( \" YES \" ) ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    w = { }\n    for _ in range ( n ) :\n        a = input ( )\n        for i in a :\n            if i in w :\n                w [ i ] += 1\n            else :\n                w [ i ] = 1\n    for i in w :\n        if w [ i ] % n != 0 :\n            return \" NO \"\n    return \" YES \"\n"}
{"java": "static void printKMissing ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; int i = 0 ; while ( i < n && arr [ i ] <= 0 ) i ++ ; int count = 0 , curr = 1 ; while ( count < k && i < n ) { if ( arr [ i ] != curr ) { System . out . print ( curr + \" \u2581 \" ) ; count ++ ; } else i ++ ; curr ++ ; } while ( count < k ) { System . out . print ( curr + \" \u2581 \" ) ; curr ++ ; count ++ ; } }", "python": "def printKMissing ( arr , n , k ) :\n    arr . sort ( )\n    i = 0\n    while ( i < n and arr [ i ] <= 0 ) :\n        i = i + 1\n    count = 0\n    curr = 1\n    while ( count < k and i < n ) :\n        if ( arr [ i ] != curr ) :\n            print ( str ( curr ) + \" \u2581 \" , end = ' ' )\n            count = count + 1\n        else :\n            i = i + 1\n        curr = curr + 1\n    while ( count < k ) :\n        print ( str ( curr ) + \" \u2581 \" , end = ' ' )\n        curr = curr + 1\n        count = count + 1\n"}
{"java": "static void minReplacement ( String str ) { if ( str . length ( ) > 26 ) { System . out . println ( \" IMPOSSIBLE \" ) ; } else { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } int count = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] > 1 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( hash [ j ] == 0 ) { hash [ str . charAt ( i ) - ' a ' ] -- ; str = str . substring ( 0 , i ) + ( char ) ( j + ' a ' ) + str . substring ( i + 1 ) ; hash [ j ] ++ ; break ; } } } } System . out . println ( str ) ; } }", "python": "def minReplacement ( string ) :\n    if len ( string ) > 26 :\n        print ( \" IMPOSSIBLE \" )\n    else :\n        Hash = [ 0 ] * 26\n        for i in range ( 0 , len ( string ) ) :\n            Hash [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1\n        count = 0\n        for i in range ( 0 , len ( string ) ) :\n            if Hash [ ord ( string [ i ] ) - ord ( ' a ' ) ] > 1 :\n                for j in range ( 0 , 26 ) :\n                    if Hash [ j ] == 0 :\n                        Hash [ ord ( string [ i ] ) - ord ( ' a ' ) ] -= 1\n                        string [ i ] = chr ( j + ord ( ' a ' ) )\n                        Hash [ j ] += 1\n                        break\n        print ( ' ' . join ( string ) )\n"}
{"java": "static String printLargestString ( String s , int l , int r ) { int freq [ ] = new int [ 26 ] ; l -- ; r -- ; for ( int i = Math . min ( l , r ) ; i <= Math . max ( l , r ) ; i ++ ) { freq [ s . charAt ( i ) - ' a ' ] ++ ; } String ans = \" \" ; for ( int i = 25 ; i >= 0 ; i -- ) { while ( freq [ i ] > 0 ) { ans += ( char ) ( ' a ' + i ) ; freq [ i ] -- ; } } return ans ; }", "python": "def printLargestString ( s , l , r ) :\n    freq = [ 0 ] * 26\n    l -= 1\n    r -= 1\n    for i in range ( min ( l , r ) , max ( l , r ) + 1 ) :\n        freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1\n    ans = \" \"\n    for i in range ( 25 , - 1 , - 1 ) :\n        while ( freq [ i ] ) :\n            ans += chr ( ord ( ' a ' ) + i )\n            freq [ i ] -= 1\n    return ans\n"}
{"java": "static void makePolygon ( double a ) { double n = 360 / ( 180 - a ) ; if ( n == ( int ) n ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; }", "python": "def makePolygon ( a ) :\n    n = 360 / ( 180 - a )\n    if n == int ( n ) :\n        print ( \" YES \" )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static int totEdge ( int n ) { int result = 0 ; result = ( n * ( n - 1 ) ) / 2 ; return result ; }", "python": "def totEdge ( n ) :\n    result = ( n * ( n - 1 ) ) // 2\n    return result\n"}
{"java": "static int maxLength ( int [ ] a , int n ) { int maximum = 1 ; int left [ ] = new int [ n ] ; int right [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { left [ i ] = 1 ; right [ i ] = 1 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] > a [ i + 1 ] ) { right [ i ] = right [ i + 1 ] + 1 ; } maximum = Math . max ( maximum , right [ i ] ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) { left [ i ] = left [ i - 1 ] + 1 ; } } if ( n > 2 ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i - 1 ] > a [ i + 1 ] ) { maximum = Math . max ( maximum , left [ i - 1 ] + right [ i + 1 ] ) ; } } } return maximum ; }", "python": "def maxLength ( a , n ) :\n    maximum = 1 ;\n    left = [ 0 ] * n ;\n    right = [ 0 ] * n ;\n    for i in range ( n ) :\n        left [ i ] = 1 ;\n        right [ i ] = 1 ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( a [ i ] > a [ i + 1 ] ) :\n            right [ i ] = right [ i + 1 ] + 1 ;\n        maximum = max ( maximum , right [ i ] ) ;\n    for i in range ( 1 , n ) :\n        if ( a [ i ] < a [ i - 1 ] ) :\n            left [ i ] = left [ i - 1 ] + 1 ;\n    if ( n > 2 ) :\n        for i in range ( 1 , n - 1 ) :\n            if ( a [ i - 1 ] > a [ i + 1 ] ) :\n                maximum = max ( maximum , left [ i - 1 ] + right [ i + 1 ] ) ;\n    return maximum ;\n"}
{"java": "static int NoofTriplets ( int N , int K ) { int [ ] cnt = new int [ K ] ; Arrays . fill ( cnt , 0 , cnt . length , 0 ) ; for ( int i = 1 ; i <= N ; i += 1 ) { cnt [ i % K ] += 1 ; } if ( ( K & 1 ) != 0 ) { return cnt [ 0 ] * cnt [ 0 ] * cnt [ 0 ] ; } else { return ( cnt [ 0 ] * cnt [ 0 ] * cnt [ 0 ] + cnt [ K / 2 ] * cnt [ K / 2 ] * cnt [ K / 2 ] ) ; } }", "python": "def NoofTriplets ( N , K ) :\n    cnt = [ 0 ] * K ;\n    for i in range ( 1 , N + 1 ) :\n        cnt [ i % K ] += 1 ;\n    if ( K & 1 ) :\n        rslt = cnt [ 0 ] * cnt [ 0 ] * cnt [ 0 ] ;\n        return rslt\n    else :\n        rslt = ( cnt [ 0 ] * cnt [ 0 ] * cnt [ 0 ] + cnt [ K // 2 ] * cnt [ K // 2 ] * cnt [ K // 2 ] ) ;\n        return rslt\n"}
{"java": "static int findMinimumAdjacentSwaps ( int arr [ ] , int N ) { boolean [ ] visited = new boolean [ N + 1 ] ; int minimumSwaps = 0 ; Arrays . fill ( visited , false ) ; for ( int i = 0 ; i < 2 * N ; i ++ ) { if ( visited [ arr [ i ] ] == false ) { visited [ arr [ i ] ] = true ; int count = 0 ; for ( int j = i + 1 ; j < 2 * N ; j ++ ) { if ( visited [ arr [ j ] ] == false ) count ++ ; else if ( arr [ i ] == arr [ j ] ) minimumSwaps += count ; } } } return minimumSwaps ; }", "python": "def findMinimumAdjacentSwaps ( arr , N ) :\n    visited = [ False ] * ( N + 1 )\n    minimumSwaps = 0\n    for i in range ( 2 * N ) :\n        if ( visited [ arr [ i ] ] == False ) :\n            visited [ arr [ i ] ] = True\n            count = 0\n            for j in range ( i + 1 , 2 * N ) :\n                if ( visited [ arr [ j ] ] == False ) :\n                    count += 1\n                elif ( arr [ i ] == arr [ j ] ) :\n                    minimumSwaps += count\n    return minimumSwaps\n"}
{"java": "static void isSubsetAndZero ( int array [ ] , int length , int N ) { int arrAnd = array [ 0 ] ; for ( int i = 1 ; i < length ; i ++ ) { arrAnd = arrAnd & array [ i ] ; } if ( ( arrAnd & N ) == 0 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; }", "python": "def isSubsetAndZero ( array , length , N ) :\n    arrAnd = array [ 0 ]\n    for i in range ( 1 , length ) :\n        arrAnd = arrAnd & array [ i ]\n    if ( ( arrAnd & N ) == 0 ) :\n        print ( \" YES \" )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static void solve ( ) { boolean dp [ ] [ ] = new boolean [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { dp [ ( int ) u [ i ] ] [ ( int ) v [ i ] ] = true ; dp [ ( int ) v [ i ] ] [ ( int ) u [ i ] ] = true ; } long ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { for ( int k = 1 ; k <= n ; k ++ ) { if ( i != j && j != k && k != i && dp [ i ] [ j ] && dp [ j ] [ k ] && dp [ k ] [ i ] ) { ans = Math . min ( ans , a [ i ] + a [ j ] + a [ k ] ) ; } } } } System . out . println ( ( ans == Integer . MAX_VALUE ? - 1 : ans ) ) ; }", "python": "def solve ( ) :\n    n , m = map ( int , input ( ) . split ( ) )\n    a = list ( map ( int , input ( ) . split ( ) ) )\n    f = [ [ 0 for i in range ( n ) ] for j in range ( n ) ]\n    for i in range ( m ) :\n        c , b = map ( int , input ( ) . split ( ) )\n        f [ c - 1 ] [ b - 1 ] = 1\n        f [ b - 1 ] [ c - 1 ] = 1\n    min_cost = 1 << 60\n    for i in range ( n ) :\n        for j in range ( n ) :\n            for k in range ( n ) :\n                if len ( set ( [ i , j , k ] ) ) == 3 :\n                    if f [ i ] [ j ] == 1 and f [ i ] [ k ] == 1 and f [ j ] [ k ] == 1 :\n                        cost = a [ i ] + a [ j ] + a [ k ]\n                        if cost < min_cost :\n                            min_cost = cost\n    if min_cost != 1 << 60 :\n        print ( min_cost )\n    else :\n        print ( - 1 )\n"}
{"java": "static int alternate ( int a , int b , int x ) { return x = a ^ b ^ x ; }", "python": "def alternate ( a , b , x ) :\n    x = a ^ b ^ x\n    print ( \" After \u2581 exchange \" )\n    print ( \" x \u2581 is \" , x )\n"}
{"java": "static int getPairs ( int arr [ ] , int n ) { HashSet < Pair > h = new HashSet < Pair > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { Pair < Integer , Integer > p = new Pair < > ( arr [ i ] , arr [ j ] ) ; h . add ( p ) ; } } return h . size ( ) ; }", "python": "def getPairs ( arr , n ) :\n    h = set ( )\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            h . add ( ( arr [ i ] , arr [ j ] ) ) ;\n    return len ( h ) ;\n"}
{"java": "public static int longSubstring ( String str1 , int k ) { int [ ] freq = new int [ SIZE ] ; char [ ] str = str1 . toCharArray ( ) ; int start = 0 ; int maxLen = 0 ; char ch ; int n = str1 . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { ch = str [ i ] ; freq [ ch - ' a ' ] ++ ; if ( freq [ ch - ' a ' ] > k ) { if ( maxLen < ( i - start ) ) maxLen = i - start ; while ( freq [ ch - ' a ' ] > k ) { freq [ str [ start ] - ' a ' ] -- ; start ++ ; } } } if ( maxLen < ( n - start ) ) maxLen = n - start ; return maxLen ; }", "python": "def longSub ( str , k ) :\n    freq = np . zeros ( 26 , dtype = np . int )\n    start = 0\n    maxLen = 0\n    n = len ( str )\n    for i in range ( 0 , n ) :\n        ch = str [ i ]\n        freq [ ord ( ch ) - ord ( ' a ' ) ] += 1\n        if ( freq [ ord ( ch ) - ord ( ' a ' ) ] > k ) :\n            if ( maxLen < ( i - start ) ) :\n                maxLen = i - start\n            while ( freq [ ord ( ch ) - ord ( ' a ' ) ] > k ) :\n                freq [ ord ( str [ start ] ) - ord ( ' a ' ) ] -= 1\n                start = start + 1\n    if ( maxLen < ( n - start ) ) :\n        maxLen = n - start\n    return maxLen ;\n"}
{"java": "public static double length_rope ( double r ) { return ( ( 2 * PI * r ) + 6 * r ) ; }", "python": "def length_rope ( r ) :\n    return ( ( 2 * PI * r ) + 6 * r )\n"}
{"java": "static void block ( long x ) { ArrayList < Integer > v = new ArrayList < Integer > ( ) ; System . out . print ( \" Blocks \u2581 for \u2581 \" + x + \" \u2581 : \u2581 \" ) ; while ( x > 0 ) { v . add ( ( int ) x % 2 ) ; x = x / 2 ; } for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) == 1 ) { System . out . print ( i ) ; if ( i != v . size ( ) - 1 ) System . out . print ( \" , \u2581 \" ) ; } } System . out . println ( ) ; }", "python": "def block ( x ) :\n    v = [ ]\n    print ( \" Blocks \u2581 for \u2581 % d \u2581 : \u2581 \" % x , end = \" \" )\n    while ( x > 0 ) :\n        v . append ( int ( x % 2 ) )\n        x = int ( x / 2 )\n    for i in range ( 0 , len ( v ) ) :\n        if ( v [ i ] == 1 ) :\n            print ( i , end = \" \" )\n            if ( i != len ( v ) - 1 ) :\n                print ( \" , \u2581 \" , end = \" \" )\n    print ( \" \\n \" )\n"}
{"java": "static void findPrimeFactors ( ) { for ( int i = 2 ; i < N ; i ++ ) if ( primeFactors [ i ] == 0 ) for ( int j = i ; j < N ; j += i ) primeFactors [ j ] = primeFactors [ j / i ] + 1 ; for ( int i = 1 ; i < N ; i ++ ) primeFactors [ i ] += primeFactors [ i - 1 ] ; }", "python": "def findPrimeFactors ( ) :\n    for i in range ( 2 , N ) :\n        if ( primeFactors [ i ] == 0 ) :\n            for j in range ( i , N , i ) :\n                primeFactors [ j ] = primeFactors [ j // i ] + 1 ;\n    for i in range ( 1 , N ) :\n        primeFactors [ i ] += primeFactors [ i - 1 ] ;\n"}
{"java": "static int countSubSeq ( String str , int len ) { int ans = 0 ; int mul = 1 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == '0' ) ans += mul ; mul *= 2 ; } return ans ; }", "python": "def countSubSeq ( strr , lenn ) :\n    ans = 0\n    mul = 1\n    for i in range ( lenn ) :\n        if ( strr [ i ] == '0' ) :\n            ans += mul\n        mul *= 2\n    return ans\n"}
{"java": "static void findEncryptedArray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( sum - arr [ i ] + \" \u2581 \" ) ; }", "python": "def findEncryptedArray ( arr , n ) :\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    for i in range ( n ) :\n        print ( sum - arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int costToPanagram ( String str , int cost [ ] ) { int i , n = str . length ( ) ; int occurrences [ ] = new int [ 26 ] ; for ( i = 0 ; i < n ; i ++ ) occurrences [ str . charAt ( i ) - ' a ' ] ++ ; int gain = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( occurrences [ i ] == 0 ) gain -= ( 2 * cost [ i ] ) ; else if ( occurrences [ i ] > 1 ) gain += ( cost [ i ] * ( occurrences [ i ] - 1 ) ) ; } if ( gain >= 0 ) return 0 ; return ( gain * - 1 ) ; }", "python": "def costToPanagram ( string , cost ) :\n    n = len ( string )\n    occurrences = [ 0 ] * 26\n    for i in range ( n ) :\n        occurrences [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1\n    gain = 0\n    for i in range ( 26 ) :\n        if occurrences [ i ] == 0 :\n            gain -= 2 * cost [ i ]\n        elif occurrences [ i ] > 1 :\n            gain += cost [ i ] * ( occurrences [ i ] - 1 )\n    if gain >= 0 :\n        return 0\n    return gain * - 1\n"}
{"java": "static int sumOfDigit ( int n , int b ) { int unitDigit , sum = 0 ; while ( n > 0 ) { unitDigit = n % b ; sum += unitDigit ; n = n / b ; } return sum ; }", "python": "def sumOfDigit ( n , b ) :\n    unitDigit = 0\n    sum = 0\n    while ( n > 0 ) :\n        unitDigit = n % b\n        sum += unitDigit\n        n = n // b\n    return sum\n"}
{"java": "static int countMaxContiguous ( int arr [ ] , int n ) { int current_max = 0 , max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) current_max = 0 ; else { current_max ++ ; max_so_far = Math . max ( current_max , max_so_far ) ; } } return max_so_far ; }", "python": "def countMaxContiguous ( arr , n ) :\n    current_max = 0\n    max_so_far = 0\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 != 0 ) :\n            current_max = 0\n        else :\n            current_max += 1\n            max_so_far = max ( current_max , max_so_far )\n    return max_so_far\n"}
{"java": "static int maximize ( int A1 [ ] , int A2 [ ] , int n , int x , int y ) { int [ ] c = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = A2 [ i ] - A1 [ i ] ; sum += A1 [ i ] ; } int temp ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( c [ i ] < c [ i + 1 ] ) { temp = c [ i ] ; c [ i ] = c [ i + 1 ] ; c [ i + 1 ] = temp ; } } int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum += c [ i ] ; if ( i + 1 >= ( n - x ) ) maxi = Math . max ( sum , maxi ) ; } return maxi ; }", "python": "def maximize ( A1 , A2 , n , x , y ) :\n    c = [ 0 for i in range ( n ) ]\n    Sum = 0\n    for i in range ( n ) :\n        c [ i ] = A2 [ i ] - A1 [ i ]\n        Sum += A1 [ i ]\n    c . sort ( )\n    c = c [ : : - 1 ]\n    maxi = - 1\n    for i in range ( n ) :\n        Sum += c [ i ]\n        if ( i + 1 >= ( n - x ) ) :\n            maxi = max ( Sum , maxi )\n    return maxi\n"}
{"java": "static int getPeriod ( int n ) { int rem = 1 ; for ( int i = 1 ; i <= n + 1 ; i ++ ) rem = ( 10 * rem ) % n ; int d = rem ; int count = 0 ; do { rem = ( 10 * rem ) % n ; count ++ ; } while ( rem != d ) ; return count ; }", "python": "def getPeriod ( n ) :\n    rem = 1\n    for i in range ( 1 , n + 2 ) :\n        rem = ( 10 * rem ) % n\n    d = rem\n    count = 0\n    rem = ( 10 * rem ) % n\n    count += 1\n    while rem != d :\n        rem = ( 10 * rem ) % n\n        count += 1\n    return count\n"}
{"java": "static void findNumbers ( int n ) { int i = 1 ; while ( i <= n ) { System . out . print ( ( ( 2 * i ) - 1 ) + \" \u2581 \" ) ; i ++ ; } }", "python": "def findNumber ( n ) :\n    i = 1\n    while i <= n :\n        print ( ( 2 * i ) - 1 , end = \" \u2581 \" )\n        i += 1\n"}
{"java": "static void findNumbers ( int n ) { int i = 1 ; while ( i <= n ) { System . out . print ( ( 3 * i * ( i - 1 ) + 1 ) + \" \u2581 \" ) ; i ++ ; } }", "python": "def findNumbers ( n ) :\n    i = 1\n    while ( i <= n ) :\n        print ( ( 3 * i * ( i - 1 ) + 1 ) , end = \" \u2581 \" )\n        i += 1\n"}
{"java": "static Vector < Integer > Diffs ( int [ ] a , int k ) { Vector < Integer > out = new Vector < Integer > ( ) ; int [ ] inc , dec ; inc = new int [ a . length ] ; dec = new int [ a . length ] ; int inc_sum = 0 ; int dec_sum = 0 ; for ( int i = 0 ; i < a . length ; ++ i ) { for ( int j = i - 1 ; j >= 0 && j > i - k && a [ j + 1 ] > a [ j ] ; -- j ) { ++ inc [ j ] ; ++ inc_sum ; } for ( int j = i - 1 ; j >= 0 && j > i - k && a [ j + 1 ] < a [ j ] ; -- j ) { ++ dec [ j ] ; ++ dec_sum ; } if ( i >= k - 1 ) { if ( i >= k ) { inc_sum -= inc [ i - k ] ; dec_sum -= dec [ i - k ] ; } out . add ( inc_sum - dec_sum ) ; } } return out ; }", "python": "def Diffs ( a , k ) :\n    out , inc , dec = [ ] , [ 0 ] * len ( a ) , [ 0 ] * len ( a )\n    inc_sum , dec_sum = 0 , 0\n    for i in range ( 0 , len ( a ) ) :\n        j = i - 1\n        while ( j >= 0 and j > i - k and a [ j + 1 ] > a [ j ] ) :\n            inc [ j ] += 1\n            inc_sum += 1\n            j -= 1\n        j = i - 1\n        while ( j >= 0 and j > i - k and a [ j + 1 ] < a [ j ] ) :\n            dec [ j ] += 1\n            dec_sum += 1\n            j -= 1\n        if i >= k - 1 :\n            if i >= k :\n                inc_sum -= inc [ i - k ]\n                dec_sum -= dec [ i - k ]\n            out . append ( inc_sum - dec_sum )\n    return out\n"}
{"java": "static int countPattern ( int n , String pat ) { int pattern_int = 0 ; int power_two = 1 ; int all_ones = 0 ; for ( int i = pat . length ( ) - 1 ; i >= 0 ; i -- ) { int current_bit = pat . charAt ( i ) - '0' ; pattern_int += ( power_two * current_bit ) ; all_ones = all_ones + power_two ; power_two = power_two * 2 ; } int count = 0 ; while ( n != 0 && n >= pattern_int ) { if ( ( n & all_ones ) == pattern_int ) { count ++ ; } n = n >> 1 ; } return count ; }", "python": "def countPattern ( n , pat ) :\n    pattern_int = 0\n    power_two = 1\n    all_ones = 0\n    i = len ( pat ) - 1\n    while ( i >= 0 ) :\n        current_bit = ord ( pat [ i ] ) - ord ( '0' )\n        pattern_int += ( power_two * current_bit )\n        all_ones = all_ones + power_two\n        power_two = power_two * 2\n        i -= 1\n    count = 0\n    while ( n != 0 and n >= pattern_int ) :\n        if ( ( n & all_ones ) == pattern_int ) :\n            count += 1\n        n = n >> 1\n    return count\n"}
{"java": "static int xorCalc ( int k ) { if ( k == 1 ) return 2 ; if ( ( ( k + 1 ) & k ) == 0 ) return k / 2 ; return 1 ; }", "python": "def xorCalc ( k ) :\n    if ( k == 1 ) :\n        return 2\n    if ( ( ( k + 1 ) & k ) == 0 ) :\n        return k / 2\n    return 1 ;\n"}
{"java": "static boolean subarrayPossible ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum <= 0 ) return true ; } sum = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { sum += arr [ i ] ; if ( sum <= 0 ) return true ; } return false ; }", "python": "def subarrayPossible ( arr , n ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += arr [ i ] ;\n        if ( sum <= 0 ) :\n            return True ;\n    sum = 0 ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        sum += arr [ i ] ;\n        if ( sum <= 0 ) :\n            return True ;\n    return False ;\n"}
{"java": "static boolean checkYear ( int year ) { return ( ( ( year % 4 == 0 ) && ( year % 100 != 0 ) ) || ( year % 400 == 0 ) ) ; }", "python": "def checkYear ( year ) :\n    return ( ( ( year % 4 == 0 ) and ( year % 100 != 0 ) ) or ( year % 400 == 0 ) ) ;\n"}
{"java": "static String smallestString ( int N , int [ ] A ) { char ch = ' a ' ; String S = \" \" ; if ( N < 1 || A [ 0 ] != 1 ) { S = \" - 1\" ; return S ; } S += ch ; ch ++ ; for ( int i = 1 ; i < N ; i ++ ) { int diff = A [ i ] - A [ i - 1 ] ; if ( diff > 1 || diff < 0 || A [ i ] > 26 ) { S = \" - 1\" ; return S ; } else if ( diff == 0 ) S += ' a ' ; else { S += ch ; ch ++ ; } } return S ; }", "python": "def smallestString ( N , A ) :\n    ch = ' a '\n    S = \" \"\n    if ( N < 1 or A [ 0 ] != 1 ) :\n        S = \" - 1\"\n        return S\n    S += str ( ch )\n    ch = chr ( ord ( ch ) + 1 )\n    for i in range ( 1 , N ) :\n        diff = A [ i ] - A [ i - 1 ]\n        if ( diff > 1 or diff < 0 or A [ i ] > 26 ) :\n            S = \" - 1\"\n            return S\n        elif ( diff == 0 ) :\n            S += ' a '\n        else :\n            S += ch\n            ch = chr ( ord ( ch ) + 1 )\n    return S\n"}
{"java": "static void cal_sin ( float n ) { float accuracy = ( float ) 0.0001 , denominator , sinx , sinval ; n = n * ( float ) ( 3.142 / 180.0 ) ; float x1 = n ; sinx = n ; sinval = ( float ) sin ( n ) ; int i = 1 ; do { denominator = 2 * i * ( 2 * i + 1 ) ; x1 = - x1 * n * n / denominator ; sinx = sinx + x1 ; i = i + 1 ; } while ( accuracy <= sinval - sinx ) ; System . out . println ( sinx ) ; }", "python": "def cal_sin ( n ) :\n    accuracy = 0.0001 ;\n    n = n * ( 3.142 / 180.0 ) ;\n    x1 = n ;\n    sinx = n ;\n    sinval = math . sin ( n ) ;\n    i = 1 ;\n    while ( True ) :\n        denominator = 2 * i * ( 2 * i + 1 ) ;\n        x1 = - x1 * n * n / denominator ;\n        sinx = sinx + x1 ;\n        i = i + 1 ;\n        if ( accuracy <= abs ( sinval - sinx ) ) :\n            break ;\n    print ( round ( sinx ) ) ;\n"}
{"java": "static int findAnswer ( int X , int N ) { return ( N - 1 ) * 9 + X ; }", "python": "def findAnswer ( X , N ) :\n    return ( N - 1 ) * 9 + X ;\n"}
{"java": "static void checkIfSortRotated ( int arr [ ] , int n ) { int minEle = Integer . MAX_VALUE ; int maxEle = Integer . MIN_VALUE ; int minIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < minEle ) { minEle = arr [ i ] ; minIndex = i ; } } boolean flag1 = true ; for ( int i = 1 ; i < minIndex ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag1 = false ; break ; } } boolean flag2 = true ; for ( int i = minIndex + 1 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag2 = false ; break ; } } if ( minIndex == 0 ) { System . out . print ( \" NO \" ) ; return ; } if ( flag1 && flag2 && ( arr [ n - 1 ] < arr [ minIndex - 1 ] ) ) System . out . println ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; }", "python": "def checkIfSortRotated ( arr , n ) :\n    minEle = sys . maxsize\n    maxEle = - sys . maxsize - 1\n    minIndex = - 1\n    for i in range ( n ) :\n        if arr [ i ] < minEle :\n            minEle = arr [ i ]\n            minIndex = i\n    flag1 = 1\n    for i in range ( 1 , minIndex ) :\n        if arr [ i ] < arr [ i - 1 ] :\n            flag1 = 0\n            break\n    flag2 = 2\n    for i in range ( minIndex + 1 , n ) :\n        if arr [ i ] < arr [ i - 1 ] :\n            flag2 = 0\n            break\n    if ( flag1 and flag2 and arr [ n - 1 ] < arr [ minIndex - 1 ] ) :\n        print ( \" YES \" )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static int max_profit ( int a [ ] , int b [ ] , int n , int fee ) { int i , j , profit ; int l , r , diff_day = 1 , sum = 0 ; b [ 0 ] = 0 ; b [ 1 ] = diff_day ; for ( i = 1 ; i < n ; i ++ ) { l = 0 ; r = diff_day ; sum = 0 ; for ( j = n - 1 ; j >= i ; j -- ) { profit = ( a [ r ] - a [ l ] ) - fee ; if ( profit > 0 ) { sum = sum + profit ; } l ++ ; r ++ ; } if ( b [ 0 ] < sum ) { b [ 0 ] = sum ; b [ 1 ] = diff_day ; } diff_day ++ ; } return 0 ; }", "python": "def max_profit ( a , b , n , fee ) :\n    i , j , profit = 1 , n - 1 , 0\n    l , r , diff_day = 0 , 0 , 1\n    b [ 0 ] = 0\n    b [ 1 ] = diff_day\n    for i in range ( 1 , n ) :\n        l = 0\n        r = diff_day\n        Sum = 0\n        for j in range ( n - 1 , i - 1 , - 1 ) :\n            profit = ( a [ r ] - a [ l ] ) - fee\n            if ( profit > 0 ) :\n                Sum = Sum + profit\n            l += 1\n            r += 1\n        if ( b [ 0 ] < Sum ) :\n            b [ 0 ] = Sum\n            b [ 1 ] = diff_day\n    diff_day += 1\n    return 0\n"}
{"java": "static boolean Check_is_possible ( int l , int r , int k ) { int div_count = ( r / k ) - ( l / k ) ; if ( l % k == 0 ) { div_count ++ ; } return ( div_count > 1 ) ; }", "python": "def Check_is_possible ( l , r , k ) :\n    div_count = ( r // k ) - ( l // k )\n    if l % k == 0 :\n        div_count += 1\n    return div_count > 1\n"}
{"java": "static void powerSet ( String str , int index , String curr ) { int n = str . length ( ) ; if ( index == n ) { System . out . println ( curr ) ; return ; } powerSet ( str , index + 1 , curr + str . charAt ( index ) ) ; powerSet ( str , index + 1 , curr ) ; }", "python": "def powerSet ( string , index , curr ) :\n    if index == len ( string ) :\n        print ( curr )\n        return\n    powerSet ( string , index + 1 , curr + string [ index ] )\n    powerSet ( string , index + 1 , curr )\n"}
{"java": "static int solve ( int arr [ ] , int n , int i , int pos ) { if ( i == n ) return 0 ; if ( LAS [ i ] [ pos ] == 1 ) return LAS [ i ] [ pos ] ; int inc = 0 , exc = 0 ; if ( arr [ i ] > 0 && pos == 1 ) { pos = 0 ; inc = 1 + solve ( arr , n , i + 1 , pos ) ; } else if ( arr [ i ] < 0 && pos == 0 ) { pos = 1 ; inc = 1 + solve ( arr , n , i + 1 , pos ) ; } exc = solve ( arr , n , i + 1 , pos ) ; LAS [ i ] [ pos ] = Math . max ( inc , exc ) ; return LAS [ i ] [ pos ] ; }", "python": "def solve ( arr , n , i , pos ) :\n    if ( i == n ) :\n        return 0 ;\n    if ( LAS [ i ] [ pos ] ) :\n        return LAS [ i ] [ pos ] ;\n    inc = 0 ; exc = 0 ;\n    if ( arr [ i ] > 0 and pos == True ) :\n        pos = False ;\n        inc = 1 + solve ( arr , n , i + 1 , pos ) ;\n    elif ( arr [ i ] < 0 and pos == False ) :\n        pos = True ;\n        inc = 1 + solve ( arr , n , i + 1 , pos ) ;\n    exc = solve ( arr , n , i + 1 , pos ) ;\n    LAS [ i ] [ pos ] = max ( inc , exc ) ;\n    return LAS [ i ] [ pos ] ;\n"}
{"java": "static int negProdSubArr ( int arr [ ] , int n ) { int positive = 1 , negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) arr [ i ] = 1 ; else arr [ i ] = - 1 ; if ( i > 0 ) arr [ i ] *= arr [ i - 1 ] ; if ( arr [ i ] == 1 ) positive ++ ; else negative ++ ; } return ( positive * negative ) ; }", "python": "def negProdSubArr ( arr , n ) :\n    positive = 1\n    negative = 0\n    for i in range ( n ) :\n        if ( arr [ i ] > 0 ) :\n            arr [ i ] = 1\n        else :\n            arr [ i ] = - 1\n        if ( i > 0 ) :\n            arr [ i ] *= arr [ i - 1 ]\n        if ( arr [ i ] == 1 ) :\n            positive += 1\n        else :\n            negative += 1\n    return ( positive * negative )\n"}
{"java": "static int items ( int n , int a [ ] ) { Arrays . sort ( a ) ; int z = a [ n - 1 ] ; int x = 1 ; int s = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { s += a [ i ] ; if ( s <= z ) x += 1 ; else break ; } return x ; }", "python": "def items ( n , a ) :\n    a . sort ( )\n    z = a [ n - 1 ]\n    x = 1\n    s = 0\n    for i in range ( 0 , n - 1 ) :\n        s += a [ i ]\n        if ( s <= z ) :\n            x += 1\n        else :\n            break\n    return x\n"}
{"java": "static void AlternateRearrange ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; Vector v1 = new Vector ( ) ; Vector v2 = new Vector ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 0 ) v1 . add ( arr [ i ] ) ; else v2 . add ( arr [ i ] ) ; int index = 0 , i = 0 , j = 0 ; boolean flag = false ; if ( arr [ 0 ] % 2 == 0 ) flag = true ; while ( index < n ) { if ( flag == true ) { arr [ index ] = ( int ) v1 . get ( i ) ; i += 1 ; index += 1 ; flag = ! flag ; } else { arr [ index ] = ( int ) v2 . get ( j ) ; j += 1 ; index += 1 ; flag = ! flag ; } } for ( i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def AlternateRearrange ( arr , n ) :\n    arr . sort ( )\n    v1 = list ( )\n    v2 = list ( )\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 == 0 ) :\n            v1 . append ( arr [ i ] )\n        else :\n            v2 . append ( arr [ i ] )\n    index = 0\n    i = 0\n    j = 0\n    flag = False\n    if ( arr [ 0 ] % 2 == 0 ) :\n        flag = True\n    while ( index < n ) :\n        if ( flag == True ) :\n            arr [ index ] = v1 [ i ]\n            index += 1\n            i += 1\n            flag = ~ flag\n        else :\n            arr [ index ] = v2 [ j ]\n            index += 1\n            j += 1\n            flag = ~ flag\n    for i in range ( n ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int NumberofTimes ( String str ) { int temporary_sum = 0 , count = 0 ; while ( str . length ( ) > 1 ) { temporary_sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) temporary_sum += ( str . charAt ( i ) - '0' ) ; str = temporary_sum + \" \" ; count ++ ; } return count ; }", "python": "def NumberofTimes ( s ) :\n    temporary_sum = 0\n    count = 0\n    while ( len ( s ) > 1 ) :\n        temporary_sum = 0\n        for i in range ( len ( s ) ) :\n            temporary_sum += ( ord ( s [ i ] ) - ord ( '0' ) )\n        s = str ( temporary_sum )\n        count += 1\n    return count\n"}
{"java": "static int maxSubarrayXOR ( int set [ ] , int n ) { int index = 0 ; for ( int i = INT_BITS - 1 ; i >= 0 ; i -- ) { int maxInd = index ; int maxEle = Integer . MIN_VALUE ; for ( int j = index ; j < n ; j ++ ) { if ( ( set [ j ] & ( 1 << i ) ) != 0 && set [ j ] > maxEle ) { maxEle = set [ j ] ; maxInd = j ; } } if ( maxEle == - 2147483648 ) continue ; int temp = set [ index ] ; set [ index ] = set [ maxInd ] ; set [ maxInd ] = temp ; maxInd = index ; for ( int j = 0 ; j < n ; j ++ ) { if ( j != maxInd && ( set [ j ] & ( 1 << i ) ) != 0 ) set [ j ] = set [ j ] ^ set [ maxInd ] ; } index ++ ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res ^= set [ i ] ; return res ; }", "python": "def maxSubarrayXOR ( set , n ) :\n    index = 0\n    for i in range ( INT_BITS - 1 , - 1 , - 1 ) :\n        maxInd = index\n        maxEle = - 2147483648\n        for j in range ( index , n ) :\n            if ( ( set [ j ] & ( 1 << i ) ) != 0 and set [ j ] > maxEle ) :\n                maxEle = set [ j ]\n                maxInd = j\n        if ( maxEle == - 2147483648 ) :\n            continue\n        temp = set [ index ]\n        set [ index ] = set [ maxInd ]\n        set [ maxInd ] = temp\n        maxInd = index\n        for j in range ( n ) :\n            if ( j != maxInd and ( set [ j ] & ( 1 << i ) ) != 0 ) :\n                set [ j ] = set [ j ] ^ set [ maxInd ]\n        index = index + 1\n    res = 0\n    for i in range ( n ) :\n        res = res ^ set [ i ]\n    return res\n"}
{"java": "static int cntWays ( String str , int n ) { int x = n + 1 ; int ways = x * x * ( x * x - 1 ) / 12 ; return ways ; }", "python": "def cntWays ( string , n ) :\n    x = n + 1 ;\n    ways = x * x * ( x * x - 1 ) // 12 ;\n    return ways ;\n"}
{"java": "static long answer ( long n ) { long m = 2 ; long ans = 1 ; long r = 1 ; while ( r < n ) { r = ( ( long ) Math . pow ( 2 , m ) - 1 ) * ( ( long ) Math . pow ( 2 , m - 1 ) ) ; if ( r < n ) ans = r ; m ++ ; } return ans ; }", "python": "def answer ( n ) :\n    m = 2 ;\n    ans = 1 ;\n    r = 1 ;\n    while r < n :\n        r = ( int ) ( ( pow ( 2 , m ) - 1 ) * ( pow ( 2 , m - 1 ) ) ) ;\n        if r < n :\n            ans = r ;\n        m = m + 1 ;\n    return ans ;\n"}
{"java": "public static long productPrimeFactors ( int n ) { long product = 1 ; if ( n % 2 == 0 ) { product *= 2 ; while ( n % 2 == 0 ) n = n / 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i = i + 2 ) { if ( n % i == 0 ) { product = product * i ; while ( n % i == 0 ) n = n / i ; } } if ( n > 2 ) product = product * n ; return product ; }", "python": "def productPrimeFactors ( n ) :\n    product = 1\n    if ( n % 2 == 0 ) :\n        product *= 2\n        while ( n % 2 == 0 ) :\n            n = n / 2\n    for i in range ( 3 , int ( math . sqrt ( n ) ) , 2 ) :\n        if ( n % i == 0 ) :\n            product = product * i\n            while ( n % i == 0 ) :\n                n = n / i\n    if ( n > 2 ) :\n        product = product * n\n    return product\n"}
{"java": "public static void out ( String s ) { output . println ( s ) ; }", "python": "def ints ( ) :\n    for line in sys . stdin :\n        for word in line . split ( ) :\n            yield int ( word )\n    return\n"}
{"java": "public static int sum_array ( int [ ] array , int a , int b ) { int result = 0 ; for ( int i = a ; i < b ; i ++ ) { result += array [ i ] ; } return result ; }", "python": "def input ( ) : return sys . stdin . readline ( ) . strip ( )\ndef INT ( ) : return int ( input ( ) )\ndef MAP ( ) : return map ( int , input ( ) . split ( ) )\ndef LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) )\nsys . setrecursionlimit ( 10 ** 9 )\nINF = float ( ' inf ' )\nmod = 10 ** 9 + 7\nN = INT ( )\nW = LIST ( )\nS1 = W [ 0 ]\nS2 = sum ( W ) - S1\ndiff = abs ( S1 - S2 )\nfor T in range ( 1 , N - 1 ) :\n    S1 += W [ T ]\n    S2 -= W [ T ]\n    diff2 = abs ( S1 - S2 )\n    diff = min ( diff , diff2 )\n"}
{"java": "static int missingNumber ( int a [ ] , int n ) { Map < Integer , Integer > mp = new LinkedHashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > 0 ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) == null ? 1 : mp . get ( a [ i ] ) + 1 ) ; } } int index = 1 ; while ( true ) { if ( ! mp . containsKey ( index ) ) { return index ; } index ++ ; } }", "python": "def missingNumber ( a , n ) :\n    mp = dict ( ) ;\n    for i in range ( n ) :\n        if ( a [ i ] > 0 ) :\n            if a [ i ] not in mp . keys ( ) :\n                mp [ a [ i ] ] = 0\n            mp [ a [ i ] ] += 1\n    index = 1 ;\n    while ( 1 ) :\n        if ( index not in mp . keys ( ) ) :\n            return index ;\n        index += 1 ;\n"}
{"java": "static int minimumValue ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int answer = 0 ; for ( int i = 0 ; i < k ; i ++ ) answer += arr [ i ] * arr [ i ] ; return answer * ( 2 * k - 2 ) ; }", "python": "def minimumValue ( arr , n , k ) :\n    arr . sort ( ) ;\n    answer = 0 ;\n    for i in range ( k ) :\n        answer += arr [ i ] * arr [ i ] ;\n    return answer * ( 2 * k - 2 ) ;\n"}
{"java": "static int countSteps ( int [ ] val , int n ) { int sol = 0 ; Vector < Integer > vec = new Vector < > ( 1 ) ; vec . add ( 0 ) ; status [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; ++ i ) { status [ i ] = 0 ; while ( vec . size ( ) > 0 && val [ vec . lastElement ( ) ] >= val [ i ] ) { status [ i ] = Math . max ( status [ i ] , status [ vec . lastElement ( ) ] + 1 ) ; vec . remove ( vec . lastElement ( ) ) ; } if ( vec . isEmpty ( ) ) { status [ i ] = - 1 ; } vec . add ( i ) ; sol = Math . max ( sol , status [ i ] + 1 ) ; } return sol ; }", "python": "def countSteps ( val , n ) :\n    sol = 0 ;\n    vec = [ 1 , 0 ] ;\n    status [ 0 ] = - 1 ;\n    for i in range ( n ) :\n        status [ i ] = 0 ;\n        while ( len ( vec ) > 0 and val [ vec [ len ( vec ) - 1 ] ] >= val [ i ] ) :\n            status [ i ] = max ( status [ i ] , status [ len ( vec ) - 1 ] + 1 ) ;\n            vec . pop ( ) ;\n        if ( len ( vec ) == 0 ) :\n            status [ i ] = - 1 ;\n        vec . append ( i ) ;\n        sol = max ( sol , status [ i ] + 1 ) ;\n    return sol ;\n"}
{"java": "static int nth_term ( int a , int b , int n ) { int z = 0 ; if ( n % 6 == 1 ) z = a ; else if ( n % 6 == 2 ) z = b ; else if ( n % 6 == 3 ) z = b - a ; else if ( n % 6 == 4 ) z = - a ; else if ( n % 6 == 5 ) z = - b ; if ( n % 6 == 0 ) z = - ( b - a ) ; return z ; }", "python": "def nth_term ( a , b , n ) :\n    z = 0\n    if ( n % 6 == 1 ) :\n        z = a\n    elif ( n % 6 == 2 ) :\n        z = b\n    elif ( n % 6 == 3 ) :\n        z = b - a\n    elif ( n % 6 == 4 ) :\n        z = - a\n    elif ( n % 6 == 5 ) :\n        z = - b\n    if ( n % 6 == 0 ) :\n        z = - ( b - a )\n    return z\n"}
{"java": "static int countSubSeq ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { count ++ ; } } return ( int ) ( Math . pow ( 2 , count ) - 1 ) ; }", "python": "def countSubSeq ( arr , n , k ) :\n    count = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] % k == 0 ) :\n            count += 1 ;\n    return ( 2 ** count - 1 ) ;\n"}
{"java": "public static void findX ( int [ ] a , int n ) { Collections . sort ( Arrays . asList ( a ) , null ) ; int itr = a [ n - 1 ] ; int p = ( int ) ( Math . log ( itr ) / Math . log ( 2 ) ) + 1 ; int x = 0 ; for ( int i = 0 ; i < p ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( a [ j ] & ( 1 << i ) ) != 0 ) count ++ ; } if ( count > ( n / 2 ) ) { x += 1 << i ; } } long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += ( x ^ a [ i ] ) ; System . out . println ( \" X \u2581 = \u2581 \" + x + \" , \u2581 Sum \u2581 = \u2581 \" + sum ) ; }", "python": "def findX ( arr , n ) :\n    itr = arr [ 0 ]\n    for i in range ( len ( arr ) ) :\n        if ( arr [ i ] > itr ) :\n            itr = arr [ i ]\n    p = int ( log2 ( itr ) ) + 1\n    X = 0\n    for i in range ( p ) :\n        count = 0\n        for j in range ( n ) :\n            if ( arr [ j ] & ( 1 << i ) ) :\n                count += 1\n        if ( count > int ( n / 2 ) ) :\n            X += 1 << i\n    sum = 0\n    for i in range ( n ) :\n        sum += ( X ^ arr [ i ] )\n    print ( \" X \u2581 = \" , X , \" , \u2581 Sum \u2581 = \" , sum )\n"}
{"java": "private static long merge ( long exp , long n ) { if ( n < exp ) { return n ; } else { return merge ( exp , n / exp ) + n % exp ; } }", "python": "def f ( x , y ) :\n    if y < x : return y\n    else : return f ( x , y // x ) + ( y % x )\n"}
{"java": "public static int Largercount ( int arr1 [ ] , int arr2 [ ] , int m , int n ) { int count = 0 ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int key = arr1 [ i ] ; if ( mp . containsKey ( key ) ) { int freq = mp . get ( key ) ; freq ++ ; mp . put ( key , freq ) ; } else mp . put ( key , 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr2 [ i ] ) && mp . get ( arr2 [ i ] ) != 0 ) { int freq = mp . get ( arr2 [ i ] ) ; freq -- ; mp . put ( arr2 [ i ] , freq ) ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( mp . get ( arr1 [ i ] ) != 0 ) { count ++ ; mp . put ( arr1 [ i ] , 0 ) ; } } return count ; }", "python": "def Largercount ( arr1 , arr2 , m , n ) :\n    count = 0\n    mp = dict ( )\n    for i in range ( m ) :\n        mp [ arr1 [ i ] ] = mp . get ( arr1 [ i ] , 0 ) + 1\n    for i in range ( n ) :\n        if ( arr2 [ i ] in mp . keys ( ) and mp [ arr2 [ i ] ] != 0 ) :\n            mp [ arr2 [ i ] ] -= 1\n    for i in range ( m ) :\n        if ( mp [ arr1 [ i ] ] != 0 ) :\n            count += 1\n            mp [ arr1 [ i ] ] = 0\n    return count\n"}
{"java": "static String areAllBitsSet ( int n ) { if ( n == 0 ) return \" No \" ; while ( n > 0 ) { if ( ( n & 1 ) == 0 ) return \" No \" ; n = n >> 1 ; } return \" Yes \" ; }", "python": "def areAllBitsSet ( n ) :\n    if ( n == 0 ) :\n        return \" No \"\n    while ( n > 0 ) :\n        if ( ( n & 1 ) == 0 ) :\n            return \" No \"\n        n = n >> 1\n    return \" Yes \"\n"}
{"java": "static String areAllBitsSet ( int n ) { if ( n == 0 ) return \" No \" ; if ( ( ( n + 1 ) & n ) == 0 ) return \" Yes \" ; return \" No \" ; }", "python": "def areAllBitsSet ( n ) :\n    if ( n == 0 ) :\n        return \" No \"\n    if ( ( ( n + 1 ) & n ) == 0 ) :\n        return \" Yes \"\n    return \" No \"\n"}
{"java": "static void printExpansion ( String str ) { String suff = \" \" ; for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) { suff = suff + str . charAt ( i ) ; System . out . print ( suff ) ; } }", "python": "def printExpansion ( str ) :\n    suff = \" \"\n    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :\n        suff = suff + str [ i ]\n        print ( suff , end = \" \" )\n"}
{"java": "public static List < Long > primeFactors ( long n ) { long cnt = 0 ; List < Long > list = new ArrayList < > ( ) ; while ( n % 2 == 0 ) { list . add ( 2l ) ; n /= 2 ; } for ( long i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { list . add ( i ) ; n /= i ; } } if ( n > 2 ) list . add ( n ) ; return list ; }", "python": "def primes ( n ) :\n    i = 2\n    primes = [ ]\n    while i * i <= n :\n        while n % i == 0 :\n            primes . append ( i )\n            n = n // i\n        i = i + 1\n    if n > 1 :\n        primes . append ( n )\n    return primes\n"}
{"java": "static void printExpansion ( String str ) { for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) { String subStr = str . substring ( i ) ; System . out . print ( subStr ) ; } }", "python": "def printExpansion ( str ) :\n    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :\n        for j in range ( i , len ( str ) ) :\n            print ( str [ j ] , end = \" \" )\n"}
{"java": "static void kFactors ( int n , int k ) { ArrayList < Integer > P = new ArrayList < Integer > ( ) ; while ( n % 2 == 0 ) { P . add ( 2 ) ; n /= 2 ; } for ( int i = 3 ; i * i <= n ; i = i + 2 ) { while ( n % i == 0 ) { n = n / i ; P . add ( i ) ; } } if ( n > 2 ) P . add ( n ) ; if ( P . size ( ) < k ) { System . out . println ( \" - 1\" ) ; return ; } for ( int i = 0 ; i < k - 1 ; i ++ ) System . out . print ( P . get ( i ) + \" , \u2581 \" ) ; int product = 1 ; for ( int i = k - 1 ; i < P . size ( ) ; i ++ ) product = product * P . get ( i ) ; System . out . println ( product ) ; }", "python": "def kFactors ( n , k ) :\n    a = list ( )\n    while n % 2 == 0 :\n        a . append ( 2 )\n        n = n // 2\n    for i in range ( 3 , mt . ceil ( mt . sqrt ( n ) ) , 2 ) :\n        while n % i == 0 :\n            n = n / i ;\n            a . append ( i )\n    if n > 2 :\n        a . append ( n )\n    if len ( a ) < k :\n        print ( \" - 1\" )\n        return\n    for i in range ( k - 1 ) :\n        print ( a [ i ] , end = \" , \u2581 \" )\n    product = 1\n    for i in range ( k - 1 , len ( a ) ) :\n        product *= a [ i ]\n    print ( product )\n"}
{"java": "public static String check_last ( int arr [ ] , int n , int p ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + arr [ i ] ; if ( p == 1 ) { if ( sum % 2 == 0 ) return \" ODD \" ; else return \" EVEN \" ; } return \" EVEN \" ; }", "python": "def check_last ( arr , n , p ) :\n    _sum = 0\n    for i in range ( n ) :\n        _sum = _sum + arr [ i ]\n    if p == 1 :\n        if _sum % 2 == 0 :\n            return \" ODD \"\n        else :\n            return \" EVEN \"\n    return \" EVEN \"\n"}
{"java": "static int countNumbers ( int n ) { int k = 0 ; int count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) == 0 ) count += ( int ) ( Math . pow ( 2 , k ) ) ; k += 1 ; n >>= 1 ; } return count ; }", "python": "def countNumbers ( n ) :\n    k = 0\n    count = 0\n    while ( n > 0 ) :\n        if ( ( n & 1 ) == 0 ) :\n            count += pow ( 2 , k )\n        k += 1\n        n >>= 1\n    return count\n"}
{"java": "static void printmaxSubseq ( int arr [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( i + 1 < n && arr [ i ] < arr [ i + 1 ] ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; else System . out . print ( arr [ i ] + \" \\n \" ) ; } }", "python": "def printmaxSubseq ( arr , n ) :\n    for i in range ( n - 1 ) :\n        if ( arr [ i ] < arr [ i + 1 ] ) :\n            print ( arr [ i ] , end = \" \u2581 \" ) ;\n        else :\n            print ( arr [ i ] ) ;\n    print ( arr [ n - 1 ] ) ;\n"}
{"java": "public static boolean isValidTime ( String time ) { String regexPattern = \" ( 1[012 ] | [ 1-9 ] ) : \" + \" [ 0-5 ] [ 0-9 ] ( \\\\ s ) \" + \" ? ( ? i ) ( am | pm ) \" ; Pattern compiledPattern = Pattern . compile ( regexPattern ) ; if ( time == null ) { return false ; } Matcher m = compiledPattern . matcher ( time ) ; return m . matches ( ) ; }", "python": "def isValidTime ( time ) :\n    regexPattern = \" ( 1[012 ] | [ 1-9 ] ) : \" + \" [ 0-5 ] [ 0-9 ] ( \\ \\ s ) \" + \" ? ( ? i ) ( am | pm ) \" ;\n    compiledPattern = re . compile ( regexPattern ) ;\n    if ( time == None ) :\n        return False ;\n    if re . search ( compiledPattern , time ) :\n        return True\n    else :\n        return False\n"}
{"java": "static void solve ( InputStream is , PrintStream os ) { Scanner sc = new Scanner ( is ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; List < City > cities = new ArrayList < > ( m ) ; for ( int i = 0 ; i < m ; i ++ ) { int p = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; City c = new City ( ) ; c . p = p ; c . y = y ; cities . add ( c ) ; } Map < Integer , List < City > > prefToCity = new HashMap < > ( ) ; for ( City c : cities ) { List < City > list = prefToCity . getOrDefault ( c . p , new ArrayList < > ( ) ) ; list . add ( c ) ; prefToCity . put ( c . p , list ) ; } Map < City , Integer > indexOfPref = new HashMap < > ( ) ; for ( List < City > list : prefToCity . values ( ) ) { list . sort ( Comparator . comparingInt ( c -> c . y ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { indexOfPref . put ( list . get ( i ) , i + 1 ) ; } } List < String > res = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { City c = cities . get ( i ) ; res . add ( String . format ( \" % 06d % 06d \" , c . p , indexOfPref . get ( c ) ) ) ; } os . println ( String . join ( System . lineSeparator ( ) , res ) ) ; }", "python": "def main ( ) :\n    import bisect\n    n , m , * py = map ( int , open ( 0 ) . read ( ) . split ( ) )\n    d = [ [ ] for _ in range ( n + 1 ) ]\n    for i , j in zip ( * [ iter ( py ) ] * 2 ) :\n        d [ i ] . append ( j )\n    for i in d :\n        i . sort ( )\n    ans = ' '\n    for i , j in zip ( * [ iter ( py ) ] * 2 ) :\n        k = bisect . bisect_right ( d [ i ] , j )\n        id = str ( i ) . zfill ( 6 ) + str ( k ) . zfill ( 6 )\n        ans += id + ' \\n '\n    print ( ans )\n"}
{"java": "static int contiguousPerfectSquare ( int [ ] arr , int n ) { int a ; float b ; int current_length = 0 ; int max_length = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b = ( float ) Math . sqrt ( arr [ i ] ) ; a = ( int ) b ; if ( a == b ) current_length ++ ; else current_length = 0 ; max_length = Math . max ( max_length , current_length ) ; } return max_length ; }", "python": "def contiguousPerfectSquare ( arr , n ) :\n    current_length = 0\n    max_length = 0\n    for i in range ( 0 , n , 1 ) :\n        b = sqrt ( arr [ i ] )\n        a = int ( b )\n        if ( a == b ) :\n            current_length += 1\n        else :\n            current_length = 0\n        max_length = max ( max_length , current_length )\n    return max_length\n"}
{"java": "static int countAnomalies ( int arr [ ] , int n , int k ) { int cnt = 0 ; int i , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( Math . abs ( arr [ i ] - ( sum - arr [ i ] ) ) > k ) cnt ++ ; return cnt ; }", "python": "def countAnomalies ( arr , n , k ) :\n    cnt = 0\n    i , Sum = 0 , 0\n    for i in range ( n ) :\n        Sum += arr [ i ]\n    for i in range ( n ) :\n        if ( abs ( arr [ i ] - ( Sum - arr [ i ] ) ) > k ) :\n            cnt += 1\n    return cnt\n"}
{"java": "static int calcFunction ( int n , int r ) { int finalDenominator = 1 ; int mx = Math . max ( r , n - r ) ; for ( int i = mx + 1 ; i <= n ; i ++ ) { int denominator = ( int ) Math . pow ( i , i ) ; int numerator = ( int ) Math . pow ( i - mx , i - mx ) ; finalDenominator = ( finalDenominator * denominator ) / numerator ; } return finalDenominator ; }", "python": "def calcFunction ( n , r ) :\n    finalDenominator = 1\n    mx = max ( r , n - r )\n    for i in range ( mx + 1 , n + 1 ) :\n        denominator = pow ( i , i )\n        numerator = pow ( i - mx , i - mx )\n        finalDenominator = ( finalDenominator * denominator ) // numerator\n    return finalDenominator\n"}
{"java": "static float squareSide ( float a ) { if ( a < 0 ) return - 1 ; float x = ( 0.423f * a ) ; return x ; }", "python": "def squareSide ( a ) :\n    if ( a < 0 ) :\n        return - 1\n    x = 0.423 * a\n    return x\n"}
{"java": "static int countX ( int n ) { int count = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( n - i == ( n ^ i ) ) count ++ ; } return count ; }", "python": "def countX ( n ) :\n    count = 0\n    for i in range ( n + 1 ) :\n        if n - i == ( n ^ i ) :\n            count += 1\n    return count\n"}
{"java": "static int countFreq ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int res = 0 ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) { break ; } } if ( j == M ) { res ++ ; j = 0 ; } } return res ; }", "python": "def countFreq ( pat , txt ) :\n    M = len ( pat )\n    N = len ( txt )\n    res = 0\n    for i in range ( N - M + 1 ) :\n        j = 0\n        for j in range ( M ) :\n            if ( txt [ i + j ] != pat [ j ] ) :\n                break\n        if ( j == M - 1 ) :\n            res += 1\n            j = 0\n    return res\n"}
{"java": "static void right_left ( int a [ ] , int n ) { Map < Integer , Integer > total = new HashMap < > ( ) ; Map < Integer , Integer > left = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) total . put ( a [ i ] , total . get ( a [ i ] ) == null ? 1 : total . get ( a [ i ] ) + 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ( total . get ( a [ i ] ) - 1 - ( 2 * ( left . containsKey ( a [ i ] ) == true ? left . get ( a [ i ] ) : 0 ) ) ) + \" \u2581 \" ) ; left . put ( a [ i ] , left . get ( a [ i ] ) == null ? 1 : left . get ( a [ i ] ) + 1 ) ; } }", "python": "def right_left ( a , n ) :\n    total = dict . fromkeys ( a , 0 ) ;\n    left = dict . fromkeys ( a , 0 ) ;\n    for i in range ( n ) :\n        if a [ i ] not in total :\n            total [ a [ i ] ] = 1\n        total [ a [ i ] ] += 1 ;\n    for i in range ( n ) :\n        print ( total [ a [ i ] ] - 1 - ( 2 * left [ a [ i ] ] ) , end = \" \u2581 \" ) ;\n        left [ a [ i ] ] += 1 ;\n"}
{"java": "static int highestPowerof2 ( int n ) { int res = 0 ; for ( int i = n ; i >= 1 ; i -- ) { if ( ( i & ( i - 1 ) ) == 0 ) { res = i ; break ; } } return res ; }", "python": "def highestPowerof2 ( n ) :\n    res = 0 ;\n    for i in range ( n , 0 , - 1 ) :\n        if ( ( i & ( i - 1 ) ) == 0 ) :\n            res = i ;\n            break ;\n    return res ;\n"}
{"java": "static float maxVol ( float P , float A ) { float l = ( float ) ( P - Math . sqrt ( P * P - 24 * A ) ) / 12 ; float V = ( float ) ( l * ( A / 2.0 - l * ( P / 4.0 - l ) ) ) ; return V ; }", "python": "def maxVol ( P , A ) :\n    l = ( P - sqrt ( P * P - 24 * A ) ) / 12\n    V = l * ( A / 2.0 - l * ( P / 4.0 - l ) )\n    return V\n"}
{"java": "static void solve ( ) throws Exception { String [ ] tmp = br . readLine ( ) . split ( \" \u2581 \" ) ; int n = Integer . parseInt ( tmp [ 0 ] ) ; int v = Integer . parseInt ( tmp [ 1 ] ) ; int [ ] arr = Stream . of ( br . readLine ( ) . split ( \" \u2581 \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( arr ) ; int i = 0 , sum = 0 ; while ( i < n - 1 ) { sum += arr [ i ] ; if ( sum > v ) { bw . write ( \" NO \\n \" ) ; return ; } i ++ ; } bw . write ( \" YES \" ) ; bw . write ( \" \\n \" ) ; }", "python": "def _input ( ) : return map ( int , input ( ) . split ( ) )\ndef _list ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef solves ( ) :\n    n , m = _input ( )\n    lst = sorted ( _list ( ) )\n    s = sum ( lst ) - lst [ - 1 ]\n    if ( s <= m ) :\n        print ( \" YES \" )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static boolean canConvert ( int a , int b ) { while ( b > a ) { if ( b % 10 == 1 ) { b /= 10 ; continue ; } if ( b % 2 == 0 ) { b /= 2 ; continue ; } return false ; } if ( b == a ) return true ; return false ; }", "python": "def canConvert ( a , b ) :\n    while ( b > a ) :\n        if ( b % 10 == 1 ) :\n            b //= 10 ;\n            continue ;\n        if ( b % 2 == 0 ) :\n            b /= 2 ;\n            continue ;\n        return false ;\n    if ( b == a ) :\n        return True ;\n    return False ;\n"}
{"java": "static double calculateSide ( double n , double r ) { double theta , theta_in_radians ; theta = 360 / n ; theta_in_radians = theta * 3.14 / 180 ; return 2 * r * Math . sin ( theta_in_radians / 2 ) ; }", "python": "def calculateSide ( n , r ) :\n    theta = 360 / n\n    theta_in_radians = theta * 3.14 / 180\n    return 2 * r * sin ( theta_in_radians / 2 )\n"}
{"java": "static long getCount ( int size , String s ) { if ( dp [ size ] [ s . length ( ) ] != - 1 ) { return dp [ size ] [ s . length ( ) ] ; } if ( size == 1 ) { long ans = 0 ; if ( s . length ( ) > 3 || s . length ( ) <= 0 ) { } else if ( s . length ( ) > 1 && s . charAt ( 0 ) == '0' ) { } else { int x = Integer . parseInt ( s ) ; if ( x > 255 ) { } else { ans = 1 ; } } dp [ size ] [ s . length ( ) ] = ans ; return ans ; } long ans = 0 ; for ( int i = 1 ; i <= 3 && i < s . length ( ) ; i ++ ) { if ( i > 1 && s . charAt ( 0 ) == '0' ) { break ; } if ( i == 3 && Integer . parseInt ( s . substring ( 0 , 3 ) ) > 255 ) { break ; } ans += getCount ( size - 1 , s . substring ( i , s . length ( ) ) ) ; } dp [ size ] [ s . length ( ) ] = ans ; return ans ; }", "python": "def check ( num ) :\n    if num == \" \" : return False\n    if num [ 0 ] == \"0\" : return num == \"0\"\n    return 0 <= int ( num ) <= 255\n"}
{"java": "static int binarySearch ( int arr [ ] , int low , int high ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; int midValue = arr [ mid ] ; if ( mid == arr [ mid ] ) return mid ; int leftindex = Math . min ( mid - 1 , midValue ) ; int left = binarySearch ( arr , low , leftindex ) ; if ( left >= 0 ) return left ; int rightindex = Math . max ( mid + 1 , midValue ) ; int right = binarySearch ( arr , rightindex , high ) ; return right ; }", "python": "def binarySearch ( arr , low , high ) :\n    if ( high < low ) :\n        return - 1\n    mid = int ( ( low + high ) / 2 )\n    midValue = arr [ mid ]\n    if ( mid == arr [ mid ] ) :\n        return mid\n    leftindex = min ( mid - 1 , midValue )\n    left = binarySearch ( arr , low , leftindex )\n    if ( left >= 0 ) :\n        return left\n    rightindex = max ( mid + 1 , midValue )\n    right = binarySearch ( arr , rightindex , high )\n    return right\n"}
{"java": "static boolean isMultipleof5 ( int n ) { while ( n > 0 ) n = n - 5 ; if ( n == 0 ) return true ; return false ; }", "python": "def isMultipleof5 ( n ) :\n    while ( n > 0 ) :\n        n = n - 5\n    if ( n == 0 ) :\n        return 1\n    return 0\n"}
{"java": "static int findMinimumX ( int a [ ] , int n ) { Set < Integer > st = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) st . add ( a [ i ] ) ; if ( st . size ( ) == 1 ) return 0 ; if ( st . size ( ) == 2 ) { Iterator < Integer > it = st . iterator ( ) ; int el1 = it . next ( ) ; int el2 = it . next ( ) ; if ( ( el2 - el1 ) % 2 == 0 ) return ( el2 - el1 ) / 2 ; else return ( el2 - el1 ) ; } if ( st . size ( ) == 3 ) { Iterator < Integer > it = st . iterator ( ) ; int el1 = it . next ( ) ; int el2 = it . next ( ) ; int el3 = it . next ( ) ; if ( ( el2 - el1 ) == ( el3 - el2 ) ) return el2 - el1 ; else return - 1 ; } return - 1 ; }", "python": "def findMinimumX ( a , n ) :\n    st = set ( )\n    for i in range ( n ) :\n        st . add ( a [ i ] )\n    if ( len ( st ) == 1 ) :\n        return 0\n    if ( len ( st ) == 2 ) :\n        st = list ( st )\n        el1 = st [ 0 ]\n        el2 = st [ 1 ]\n        if ( ( el2 - el1 ) % 2 == 0 ) :\n            return int ( ( el2 - el1 ) / 2 )\n        else :\n            return ( el2 - el1 )\n    if ( len ( st ) == 3 ) :\n        st = list ( st )\n        el1 = st [ 0 ]\n        el2 = st [ 1 ]\n        el3 = st [ 2 ]\n        if ( ( el2 - el1 ) == ( el3 - el2 ) ) :\n            return el2 - el1\n        else :\n            return - 1\n    return - 1\n"}
{"java": "static int longestSubarry ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int curr_count = 0 ; while ( i < n && arr [ i ] >= 0 ) { curr_count ++ ; i ++ ; } res = Math . max ( res , curr_count ) ; } return res ; }", "python": "def longestSubarry ( arr , n ) :\n    res = 0\n    for i in range ( n ) :\n        curr_count = 0\n        while ( i < n and arr [ i ] >= 0 ) :\n            curr_count += 1\n            i += 1\n        res = max ( res , curr_count )\n    return res\n"}
{"java": "static boolean isEven ( int arr [ ] , int n , int r ) { if ( r % 2 == 0 ) { if ( arr [ n - 1 ] % 2 == 0 ) return true ; } else { int oddCount = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( arr [ i ] % 2 != 0 ) oddCount ++ ; } if ( oddCount % 2 == 0 ) return true ; } return false ; }", "python": "def isEven ( arr , n , r ) :\n    if ( r % 2 == 0 ) :\n        if ( arr [ n - 1 ] % 2 == 0 ) :\n            return True\n    else :\n        oddCount = 0\n        for i in range ( n ) :\n            if ( arr [ i ] % 2 != 0 ) :\n                oddCount += 1\n        if ( oddCount % 2 == 0 ) :\n            return True\n    return False\n"}
{"java": "static int countPairs ( int N ) { int count = 0 ; for ( int i = 1 ; i <= ( int ) Math . sqrt ( N ) ; i ++ ) { int sq = i * i ; int diff = N - sq ; int sqrtDiff = ( int ) Math . sqrt ( diff ) ; if ( sqrtDiff * sqrtDiff == diff ) count ++ ; } return count ; }", "python": "def countPairs ( N ) :\n    count = 0\n    for i in range ( 1 , int ( sqrt ( N ) ) + 1 ) :\n        sq = i * i\n        diff = N - sq\n        sqrtDiff = int ( sqrt ( diff ) )\n        if sqrtDiff * sqrtDiff == diff :\n            count += 1\n    return count\n"}
{"java": "static int Maxsum ( int c1 , int c2 , int c3 , int c4 ) { int sum = 0 ; int two34 = Math . min ( c2 , Math . min ( c3 , c4 ) ) ; sum = two34 * 234 ; c2 -= two34 ; sum += Math . min ( c2 , c1 ) * 12 ; return sum ; }", "python": "def Maxsum ( c1 , c2 , c3 , c4 ) :\n    sum = 0\n    two34 = min ( c2 , min ( c3 , c4 ) )\n    sum = two34 * 234\n    c2 -= two34\n    sum += min ( c2 , c1 ) * 12\n    return sum\n"}
{"java": "static boolean subArray ( int [ ] arr , int n , int m ) { int i ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , i + 1 ) ; } int sumcur = 0 ; int p = Integer . MAX_VALUE ; Vector < Integer > ans = new Vector < Integer > ( ) ; for ( i = 1 ; i <= m ; i ++ ) { sumcur += mp . get ( i ) ; p = Math . min ( p , mp . get ( i ) ) ; int val = p * i - i + ( i * ( i + 1 ) ) / 2 ; if ( i == m ) { if ( val == sumcur ) { return true ; } else return false ; } } return false ; }", "python": "def subArray ( arr , n , m ) :\n    i = 0\n    mp = dict ( )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] = i + 1\n    sumcur = 0\n    p = 10 ** 9\n    ans = [ ]\n    for i in range ( 1 , m + 1 ) :\n        sumcur += mp [ i ]\n        p = min ( p , mp [ i ] )\n        val = p * i - i + ( i * ( i + 1 ) ) / 2\n        if ( i == m ) :\n            if ( val == sumcur ) :\n                return True\n            else :\n                return False\n"}
{"java": "static void nondecdigits ( String s ) { int m = s . length ( ) ; int [ ] a = new int [ m + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) a [ i ] = ( int ) s . charAt ( i ) - ( int ) '0' ; int level = m - 1 ; for ( int i = m - 1 ; i > 0 ; i -- ) { if ( a [ i ] < a [ i - 1 ] ) { a [ i - 1 ] -- ; level = i - 1 ; } } if ( a [ 0 ] != 0 ) { for ( int i = 0 ; i <= level ; i ++ ) System . out . print ( a [ i ] ) ; for ( int i = level + 1 ; i < m ; i ++ ) System . out . print ( \"9\" ) ; } else { for ( int i = 1 ; i < level ; i ++ ) System . out . print ( a [ i ] ) ; for ( int i = level + 1 ; i < m ; i ++ ) System . out . print ( \"9\" ) ; } }", "python": "def nondecdigits ( s ) :\n    m = len ( s ) ;\n    a = [ 0 ] * m ;\n    for i in range ( m ) :\n        a [ i ] = ord ( s [ i ] ) - ord ( '0' ) ;\n    level = m - 1 ;\n    for i in range ( m - 1 , 0 , - 1 ) :\n        if ( a [ i ] < a [ i - 1 ] ) :\n            a [ i - 1 ] -= 1 ;\n            level = i - 1 ;\n    if ( a [ 0 ] != 0 ) :\n        for i in range ( level + 1 ) :\n            print ( a [ i ] , end = \" \" ) ;\n        for i in range ( level + 1 , m ) :\n            print ( \"9\" , end = \" \" ) ;\n    else :\n        for i in range ( 1 , level ) :\n            print ( a [ i ] , end = \" \" ) ;\n        for i in range ( level + 1 , m ) :\n            print ( \"9\" , end = \" \" ) ;\n"}
{"java": "static void FindPoints ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int x4 , int y4 ) { int x5 = Math . max ( x1 , x3 ) ; int y5 = Math . max ( y1 , y3 ) ; int x6 = Math . min ( x2 , x4 ) ; int y6 = Math . min ( y2 , y4 ) ; if ( x5 > x6 || y5 > y6 ) { System . out . println ( \" No \u2581 intersection \" ) ; return ; } System . out . print ( \" ( \" + x5 + \" , \u2581 \" + y5 + \" ) \u2581 \" ) ; System . out . print ( \" ( \" + x6 + \" , \u2581 \" + y6 + \" ) \u2581 \" ) ; int x7 = x5 ; int y7 = y6 ; System . out . print ( \" ( \" + x7 + \" , \u2581 \" + y7 + \" ) \u2581 \" ) ; int x8 = x6 ; int y8 = y5 ; System . out . print ( \" ( \" + x8 + \" , \u2581 \" + y8 + \" ) \u2581 \" ) ; }", "python": "def FindPoints ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 ) :\n    x5 = max ( x1 , x3 )\n    y5 = max ( y1 , y3 )\n    x6 = min ( x2 , x4 )\n    y6 = min ( y2 , y4 )\n    if ( x5 > x6 or y5 > y6 ) :\n        print ( \" No \u2581 intersection \" )\n        return\n    print ( \" ( \" , x5 , \" , \u2581 \" , y5 , \" ) \u2581 \" , end = \" \u2581 \" )\n    print ( \" ( \" , x6 , \" , \u2581 \" , y6 , \" ) \u2581 \" , end = \" \u2581 \" )\n    x7 = x5\n    y7 = y6\n    print ( \" ( \" , x7 , \" , \u2581 \" , y7 , \" ) \u2581 \" , end = \" \u2581 \" )\n    x8 = x6\n    y8 = y5\n    print ( \" ( \" , x8 , \" , \u2581 \" , y8 , \" ) \u2581 \" )\n"}
{"java": "static int numberOfSolutions ( int n ) { int c = 0 ; for ( int x = 0 ; x <= n ; ++ x ) if ( n == x + ( n ^ x ) ) ++ c ; return c ; }", "python": "def numberOfSolutions ( n ) :\n    c = 0\n    for x in range ( n + 1 ) :\n        if ( n == ( x + ( n ^ x ) ) ) :\n            c += 1\n    return c\n"}
{"java": "static void finalString ( String str ) { int x = 0 , y = 0 ; int left ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == '1' ) x ++ ; else y ++ ; } if ( x > y ) left = 1 ; else left = 0 ; int length = n - 2 * Math . min ( x , y ) ; for ( int i = 0 ; i < length ; i ++ ) { System . out . print ( left ) ; } }", "python": "def finalString ( st ) :\n    x , y = 0 , 0\n    n = len ( st )\n    for i in range ( n ) :\n        if ( st [ i ] == '1' ) :\n            x += 1\n        else :\n            y += 1\n    if ( x > y ) :\n        left = 1\n    else :\n        left = 0\n    length = n - 2 * min ( x , y ) ;\n    for i in range ( length ) :\n        print ( left , end = \" \" )\n"}
{"java": "static int countWays ( int n , int arr [ ] , int k ) { if ( k <= 0 || k >= n ) return 0 ; Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) s . add ( arr [ i ] ) ; if ( s . size ( ) <= k ) return 0 ; return s . size ( ) - k ; }", "python": "def countWays ( n , arr , k ) :\n    if ( k <= 0 or k >= n ) :\n        return 0\n    s = set ( )\n    for element in arr :\n        s . add ( element )\n    if ( len ( s ) <= k ) :\n        return 0 ;\n    return len ( s ) - k ;\n"}
{"java": "private static int cnt ( String s ) { int i = 0 ; int ans = 0 ; while ( i < s . length ( ) - 1 ) { if ( s . substring ( i , i + 2 ) . equals ( \" VK \" ) ) { ans ++ ; i += 2 ; } else { i ++ ; } } return ans ; }", "python": "def swa ( r ) :\n    if r == \" V \" :\n        return \" K \"\n    else :\n        return \" V \"\n"}
{"java": "static String replaceRemove ( char [ ] s , char X , char Y , char Z ) { int start = 0 , end = s . length - 1 ; while ( start <= end ) { if ( s [ start ] == Z ) { while ( end >= 0 && s [ end ] == Z ) { end -- ; } char temp ; if ( end > start ) { temp = s [ start ] ; s [ start ] = s [ end ] ; s [ end ] = temp ; if ( s [ start ] == X ) s [ start ] = Y ; start ++ ; } } else { if ( s [ start ] == X ) s [ start ] = Y ; start ++ ; } } String new_s = new String ( s ) ; while ( new_s . length ( ) > 0 && new_s . charAt ( new_s . length ( ) - 1 ) == Z ) { new_s = new_s . substring ( 0 , new_s . length ( ) - 1 ) ; } return new_s ; }", "python": "def replaceRemove ( s , X , Y , Z ) :\n    s = list ( s ) ;\n    start = 0 ;\n    end = len ( s ) - 1 ;\n    while ( start <= end ) :\n        if ( s [ start ] == Z ) :\n            while ( end >= 0 and s [ end ] == Z ) :\n                end -= 1 ;\n            if ( end > start ) :\n                s [ start ] , s [ end ] = s [ end ] , s [ start ]\n                if ( s [ start ] == X ) :\n                    s [ start ] = Y ;\n                start += 1\n        else :\n            if ( s [ start ] == X ) :\n                s [ start ] = Y ;\n            start += 1 ;\n    while ( len ( s ) > 0 and s [ len ( s ) - 1 ] == Z ) :\n        s . pop ( ) ;\n    return \" \" . join ( s )\n"}
{"java": "static int findSum ( int N , int k ) { int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += ( int ) Math . pow ( i , k ) ; } return sum ; }", "python": "def findSum ( N , k ) :\n    sum = 0\n    for i in range ( 1 , N + 1 , 1 ) :\n        sum += pow ( i , k )\n    return sum\n"}
{"java": "static int CountWays ( int n , int flag ) { if ( dp [ n ] [ flag ] != - 1 ) { return dp [ n ] [ flag ] ; } if ( n == 0 ) { return 1 ; } int sum = 0 ; if ( flag == 0 && n > 1 ) { sum = sum + CountWays ( n - 1 , 0 ) + CountWays ( n - 2 , 1 ) ; } else { sum = sum + CountWays ( n - 1 , 0 ) ; } return dp [ n ] [ flag ] = sum ; }", "python": "def CountWays ( n , flag ) :\n    if ( dp [ n ] [ flag ] != - 1 ) :\n        return dp [ n ] [ flag ]\n    if ( n == 0 ) :\n        return 1\n    sum = 0\n    if ( flag == 0 and n > 1 ) :\n        sum = ( sum + CountWays ( n - 1 , 0 ) + CountWays ( n - 2 , 1 ) )\n    else :\n        sum = sum + CountWays ( n - 1 , 0 )\n    dp [ n ] [ flag ] = sum\n    return dp [ n ] [ flag ]\n"}
{"java": "static long productAscii ( String str ) { long prod = 1 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { prod *= str . charAt ( i ) ; } return prod ; }", "python": "def productAscii ( str ) :\n    prod = 1\n    for i in range ( 0 , len ( str ) ) :\n        prod = prod * ord ( str [ i ] )\n    return prod\n"}
{"java": "static boolean isBinary ( int number ) { Set < Integer > set = new HashSet < > ( ) ; while ( number > 0 ) { int digit = number % 10 ; set . add ( digit ) ; number /= 10 ; } set . remove ( 0 ) ; set . remove ( 1 ) ; if ( set . size ( ) == 0 ) { return true ; } return false ; }", "python": "def isBinary ( number ) :\n    set1 = set ( )\n    while ( number > 0 ) :\n        digit = number % 10\n        set1 . add ( digit )\n        number = int ( number / 10 )\n    set1 . discard ( 0 )\n    set1 . discard ( 1 )\n    if ( len ( set1 ) == 0 ) :\n        return True\n    return False\n"}
{"java": "static void sortWithRemainderP ( int arr [ ] , int n , int k , int p ) { Vector < Integer > v1 = new Vector < Integer > ( ) ; Vector < Integer > v2 = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == p ) { v1 . add ( i ) ; v2 . add ( arr [ i ] ) ; } } Collections . sort ( v2 ) ; for ( int i = 0 ; i < v1 . size ( ) ; i ++ ) arr [ v1 . get ( i ) ] = v2 . get ( i ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def sortWithRemainderP ( arr , n , k , p ) :\n    v1 = [ ]\n    v2 = [ ]\n    for i in range ( 0 , n , 1 ) :\n        if ( arr [ i ] % k == p ) :\n            v1 . append ( i )\n            v2 . append ( arr [ i ] )\n    v2 . sort ( reverse = False )\n    for i in range ( 0 , len ( v1 ) , 1 ) :\n        arr [ v1 [ i ] ] = v2 [ i ]\n    for i in range ( 0 , n , 1 ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static void sortWithSetbits ( int arr [ ] , int n , int k ) { Vector < Integer > v1 = new Vector < > ( ) , v2 = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . bitCount ( arr [ i ] ) == k ) { v1 . add ( i ) ; v2 . add ( arr [ i ] ) ; } } Collections . sort ( v2 ) ; for ( int i = 0 ; i < v1 . size ( ) ; i ++ ) { arr [ v1 . get ( i ) ] = v2 . get ( i ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" \u2581 \" ) ; } }", "python": "def sortWithSetbits ( arr , n , k ) :\n    v1 = [ ]\n    v2 = [ ]\n    for i in range ( 0 , n , 1 ) :\n        if ( bin ( arr [ i ] ) . count ( '1' ) == k ) :\n            v1 . append ( i )\n            v2 . append ( arr [ i ] )\n    v2 . sort ( reverse = False )\n    for i in range ( 0 , len ( v1 ) , 1 ) :\n        arr [ v1 [ i ] ] = v2 [ i ]\n    for i in range ( 0 , n , 1 ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int compositeProduct ( int arr [ ] , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; boolean [ ] prime = new boolean [ max_val + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = true ; prime [ 1 ] = true ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) { prime [ i ] = false ; } } } int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! prime [ arr [ i ] ] ) { product *= arr [ i ] ; } } return product ; }", "python": "def compositeProduct ( arr , n ) :\n    max_val = max ( arr )\n    prime = [ True for i in range ( max_val + 1 ) ]\n    prime [ 0 ] = True\n    prime [ 1 ] = True\n    for p in range ( 2 , mt . ceil ( mt . sqrt ( max_val ) ) ) :\n        if prime [ p ] :\n            for i in range ( p * 2 , max_val + 1 , p ) :\n                prime [ i ] = False\n    product = 1\n    for i in range ( n ) :\n        if prime [ arr [ i ] ] == False :\n            product *= arr [ i ]\n    return product\n"}
{"java": "static void generateNumbers ( int m ) { ArrayList < Integer > numbers = new ArrayList < > ( ) ; int k_max , x ; for ( int y = 0 ; y < 10 ; y ++ ) { k_max = ( int ) ( Math . pow ( 10 , m - 2 ) * ( 10 * y + 1 ) ) / ( int ) ( Math . pow ( 10 , m - 1 ) + y ) ; for ( int k = 1 ; k <= k_max ; k ++ ) { x = ( int ) ( y * ( Math . pow ( 10 , m - 1 ) - k ) ) / ( 10 * k - 1 ) ; if ( ( int ) ( y * ( Math . pow ( 10 , m - 1 ) - k ) ) % ( 10 * k - 1 ) == 0 ) numbers . add ( 10 * x + y ) ; } } Collections . sort ( numbers ) ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) System . out . println ( numbers . get ( i ) ) ; }", "python": "def generateNumbers ( m ) :\n    numbers = [ ]\n    for y in range ( 1 , 10 ) :\n        k_max = ( ( 10 ** ( m - 2 ) * ( 10 * y + 1 ) ) // ( 10 ** ( m - 1 ) + y ) )\n        for k in range ( 1 , k_max + 1 ) :\n            x = ( ( y * ( 10 ** ( m - 1 ) - k ) ) // ( 10 * k - 1 ) )\n            if ( ( y * ( 10 ** ( m - 1 ) - k ) ) % ( 10 * k - 1 ) == 0 ) :\n                numbers . append ( 10 * x + y )\n    for n in sorted ( numbers ) :\n        print ( n )\n"}
{"java": "static long center_pentadecagonal_num ( long n ) { return ( 15 * n * n - 15 * n + 2 ) / 2 ; }", "python": "def center_pentadecagonal_num ( n ) :\n    return ( 15 * n * n - 15 * n + 2 ) // 2\n"}
{"java": "static void perfectCube ( int N ) { int cube ; for ( int i = 0 ; i <= N ; i ++ ) { cube = i * i * i ; if ( cube == N ) { System . out . println ( \" Yes \" ) ; return ; } else if ( cube > N ) { System . out . println ( \" NO \" ) ; return ; } } }", "python": "def perfectCube ( N ) :\n    cube = 0 ;\n    for i in range ( N + 1 ) :\n        cube = i * i * i ;\n        if ( cube == N ) :\n            print ( \" Yes \" ) ;\n            return ;\n        elif ( cube > N ) :\n            print ( \" NO \" ) ;\n            return ;\n"}
{"java": "static int minDiff ( int n , int x , int A [ ] ) { int mn = A [ 0 ] , mx = A [ 0 ] ; for ( int i = 0 ; i < n ; ++ i ) { mn = Math . min ( mn , A [ i ] ) ; mx = Math . max ( mx , A [ i ] ) ; } return Math . max ( 0 , mx - mn - 2 * x ) ; }", "python": "def minDiff ( n , x , A ) :\n    mn = A [ 0 ]\n    mx = A [ 0 ]\n    for i in range ( 0 , n ) :\n        mn = min ( mn , A [ i ] )\n        mx = max ( mx , A [ i ] )\n    return max ( 0 , mx - mn - 2 * x )\n"}
{"java": "public static int countOddSquares ( int n , int m ) { return ( int ) Math . pow ( ( double ) m , 0.5 ) - ( int ) Math . pow ( ( double ) n - 1 , 0.5 ) ; }", "python": "def countOddSquares ( n , m ) :\n    return int ( m ** 0.5 ) - int ( ( n - 1 ) ** 0.5 )\n"}
{"java": "static int countOddSquares ( int n , int m ) { return ( int ) Math . pow ( m , 0.5 ) - ( int ) Math . pow ( n - 1 , 0.5 ) ; }", "python": "def countOddSquares ( n , m ) :\n    return ( int ( pow ( m , 0.5 ) ) - int ( pow ( n - 1 , 0.5 ) ) )\n"}
{"java": "static int toMin ( int hourmin ) { return hourmin / 100 * 60 + hourmin % 100 ; }", "python": "def d2t ( d ) : return ( d // 100 ) * 60 + ( d % 100 )\nwhile True :\n    n , p , q = map ( int , input ( ) . split ( ) )\n    if n == 0 : break\n    tbl = [ 0 ] * 1500\n    p , q = d2t ( p ) , d2t ( q )\n    for i in range ( n ) :\n        k = 2 * int ( input ( ) )\n        a = list ( map ( int , input ( ) . split ( ) ) )\n        for j in range ( 0 , k , 2 ) :\n            t1 , t2 = d2t ( a [ j ] ) , d2t ( a [ j + 1 ] )\n            for t in range ( t1 , t2 ) : tbl [ t ] += 1\n    ans = k = 0\n    for t in range ( p , q ) :\n        if tbl [ t ] < n : k += 1\n        elif k > 0 :\n            if k > ans : ans = k\n            k = 0\n    if k > ans : ans = k\n    print ( ans )\n"}
{"java": "static void MinimumValue ( int x , int y ) { if ( x > y ) { int temp = x ; x = y ; y = temp ; } int a = 1 ; int b = x - 1 ; int c = y - b ; System . out . print ( a + \" \u2581 \" + b + \" \u2581 \" + c ) ; }", "python": "def MinimumValue ( x , y ) :\n    if ( x > y ) :\n        x , y = y , x\n    a = 1\n    b = x - 1\n    c = y - b\n    print ( a , b , c )\n"}
{"java": "static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { int k1 = 0 ; int k0 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) != 0 ) k1 ++ ; else k0 ++ ; } ans = ans + ( 1 << i ) * ( k1 * ( k1 - 1 ) / 2 ) + ( 1 << i ) * ( k1 * k0 ) ; } return ans ; }", "python": "def pairORSum ( arr , n ) :\n    ans = 0\n    for i in range ( 0 , 32 ) :\n        k1 = 0\n        k0 = 0\n        for j in range ( 0 , n ) :\n            if ( ( arr [ j ] & ( 1 << i ) ) ) :\n                k1 = k1 + 1\n            else :\n                k0 = k0 + 1\n        ans = ans + ( 1 << i ) * ( k1 * ( k1 - 1 ) // 2 ) + ( 1 << i ) * ( k1 * k0 )\n    return ans\n"}
{"java": "static int ways ( int arr [ ] , int n ) { int dp [ ] = new int [ n + 1 ] ; dp [ n - 1 ] = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { dp [ i ] = 0 ; for ( int j = 1 ; ( ( j + i ) < n && j <= arr [ i ] ) ; j ++ ) { dp [ i ] += dp [ i + j ] ; dp [ i ] %= mod ; } } return dp [ 0 ] % mod ; }", "python": "def ways ( arr , n ) :\n    dp = [ 0 ] * ( n + 1 )\n    dp [ n - 1 ] = 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        dp [ i ] = 0\n        j = 1\n        while ( ( j + i ) < n and j <= arr [ i ] ) :\n            dp [ i ] += dp [ i + j ]\n            dp [ i ] %= mod\n            j += 1\n    return dp [ 0 ] % mod\n"}
{"java": "private static void pencil ( ) { int [ ] num = new int [ ] { a , c } ; int [ ] price = new int [ ] { b , d } ; int [ ] total = new int [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( n % num [ i ] == 0 ) { total [ i ] = price [ i ] * ( n / num [ i ] ) ; } else { total [ i ] = price [ i ] * ( ( n / num [ i ] ) + 1 ) ; } } System . out . println ( Math . min ( total [ 0 ] , total [ 1 ] ) ) ; }", "python": "def fprice ( n , p ) :\n    count = 0\n    price = 0\n    while N > count :\n        count += n\n        price += p\n    return price\n"}
{"java": "static int findElement ( int arr [ ] , int size ) { int right_sum = 0 , left_sum = 0 ; for ( int i = 1 ; i < size ; i ++ ) right_sum += arr [ i ] ; for ( int i = 0 , j = 1 ; j < size ; i ++ , j ++ ) { right_sum -= arr [ j ] ; left_sum += arr [ i ] ; if ( left_sum == right_sum ) return arr [ i + 1 ] ; } return - 1 ; }", "python": "def findElement ( arr , size ) :\n    right_sum , left_sum = 0 , 0\n    for i in range ( 1 , size ) :\n        right_sum += arr [ i ]\n    i , j = 0 , 1\n    while j < size :\n        right_sum -= arr [ j ]\n        left_sum += arr [ i ]\n        if left_sum == right_sum :\n            return arr [ i + 1 ]\n        j += 1\n        i += 1\n    return - 1\n"}
{"java": "static int minimumCost ( int cost [ ] , int n ) { int dp1 = 0 , dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int dp0 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; }", "python": "def minimumCost ( cost , n ) :\n    dp1 = 0\n    dp2 = 0\n    for i in range ( n ) :\n        dp0 = cost [ i ] + min ( dp1 , dp2 )\n        dp2 = dp1\n        dp1 = dp0\n    return min ( dp1 , dp2 )\n"}
{"java": "static int count ( int arr [ ] [ ] ) { int diag1 = 0 , diag2 = 0 ; int row = 0 , col = 0 , count = 0 ; for ( int i = 0 , j = n - 1 ; i < n ; i ++ , j -- ) { diag1 += arr [ i ] [ i ] ; diag2 += arr [ i ] [ j ] ; } for ( int i = 0 ; i < n ; i ++ ) { row = 0 ; col = 0 ; for ( int j = 0 ; j < n ; j ++ ) { row = row + arr [ i ] [ j ] ; } for ( int j = 0 ; j < n ; j ++ ) { col = col + arr [ j ] [ i ] ; } if ( ( row == diag1 ) || ( row == diag2 ) ) count ++ ; if ( ( col == diag1 ) || ( col == diag2 ) ) count ++ ; } return count ; }", "python": "def count ( arr ) :\n    diag1 = 0 ; diag2 = 0 ; row = 0\n    col = 0 ; count = 0 ; j = n - 1\n    for i in range ( n ) :\n        diag1 += arr [ i ] [ i ]\n        diag2 += arr [ i ] [ j ]\n        j -= 1\n    for i in range ( n ) :\n        row = 0 ; col = 0\n        for j in range ( n ) :\n            row += arr [ i ] [ j ]\n        for j in range ( n ) :\n            col += arr [ j ] [ i ]\n        if ( ( row == diag1 ) or ( row == diag2 ) ) :\n            count += 1\n        if ( ( col == diag1 ) or ( col == diag2 ) ) :\n            count += 1\n    return count\n"}
{"java": "static String solve ( ) { int N = sc . nextInt ( ) ; int L = sc . nextInt ( ) ; String [ ] G = new String [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { G [ i ] = sc . next ( ) ; } String B = sc . next ( ) ; for ( int i = 0 ; i < N ; ++ i ) { if ( G [ i ] . equals ( B ) ) { return \" IMPOSSIBLE \" ; } } if ( L == 1 ) { return \" ? \u2581 0\" ; } char [ ] p1 = new char [ L - 1 ] ; Arrays . fill ( p1 , ' ? ' ) ; StringBuilder p2 = new StringBuilder ( ) ; for ( int i = 0 ; i < 49 ; ++ i ) { p2 . append ( ( char ) ( '0' + i % 2 ) ) ; } p2 . append ( ' ? ' ) ; for ( int i = 0 ; i < 49 ; ++ i ) { p2 . append ( ( char ) ( '0' + ( i + 1 ) % 2 ) ) ; } return String . valueOf ( p1 ) + \" \u2581 \" + p2 . toString ( ) ; }", "python": "def run ( ) :\n    n , l = tuple ( int ( x ) for x in input ( ) . split ( ) )\n    G = input ( ) . split ( )\n    B = input ( ) . strip ( )\n    if B in G :\n        return \" IMPOSSIBLE \"\n    if l == 1 :\n        p1 = \" ? \"\n        p2 = \"0\"\n    else :\n        p1 = \" ? \" * ( l - 1 )\n        p2 = \"10 ? \" + \"10\" * l\n    return \" % s \u2581 % s \" % ( p1 , p2 )\n"}
{"java": "static void findfactors ( int n ) { Vector < Integer > vec = new Vector < Integer > ( ) ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { vec . add ( i ) ; vec . add ( n / i ) ; } } Collections . sort ( vec ) ; System . out . println ( \" All \u2581 the \u2581 factors \u2581 are \u2581 - > \u2581 \" ) ; for ( int i = 0 ; i < vec . size ( ) ; i ++ ) { System . out . print ( vec . get ( i ) + \" \u2581 \" ) ; } System . out . println ( ) ; int maxProduct = 1 ; boolean flag = true ; for ( int i = 0 ; i < vec . size ( ) ; i ++ ) { for ( int j = i ; j < vec . size ( ) ; j ++ ) { for ( int k = j ; k < vec . size ( ) ; k ++ ) { int y = n - vec . get ( i ) - vec . get ( j ) - vec . get ( k ) ; if ( y <= 0 ) { break ; } if ( n % y == 0 ) { flag = false ; maxProduct = Math . max ( vec . get ( i ) * vec . get ( j ) * vec . get ( k ) * y , maxProduct ) ; } } } } if ( flag == false ) { System . out . println ( \" Product \u2581 is \u2581 - > \u2581 \" + maxProduct ) ; } else { System . out . println ( \" Not \u2581 possible \" ) ; } }", "python": "def findfactors ( n ) :\n    vec = [ ]\n    for i in range ( 1 , int ( sqrt ( n ) ) + 1 ) :\n        if n % i == 0 :\n            vec . append ( i )\n            vec . append ( n // i )\n    vec . sort ( )\n    print ( \" All \u2581 the \u2581 factors \u2581 are \u2581 - > \u2581 \" , end = \" \" )\n    for i in range ( len ( vec ) ) :\n        print ( vec [ i ] , end = \" \u2581 \" )\n    print ( )\n    maxProduct = 1\n    flag = 1\n    for i in range ( 0 , len ( vec ) ) :\n        for j in range ( i , len ( vec ) ) :\n            for k in range ( j , len ( vec ) ) :\n                y = n - vec [ i ] - vec [ j ] - vec [ k ]\n                if y <= 0 :\n                    break\n                if n % y == 0 :\n                    flag = 0\n                    maxProduct = max ( vec [ i ] * vec [ j ] * vec [ k ] * y , maxProduct )\n    if flag == 0 :\n        print ( \" Product \u2581 is \u2581 - \u2581 > \" , maxProduct )\n    else :\n        print ( \" Not \u2581 possible \" )\n"}
{"java": "static int strScore ( String str [ ] , String s , int n ) { int score = 0 , index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ] == s ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) score += s . charAt ( j ) - ' a ' + 1 ; index = i + 1 ; break ; } } score = score * index ; return score ; }", "python": "def strScore ( str , s , n ) :\n    score = 0\n    index = 0\n    for i in range ( n ) :\n        if ( str [ i ] == s ) :\n            for j in range ( len ( s ) ) :\n                score += ( ord ( s [ j ] ) - ord ( ' a ' ) + 1 )\n            index = i + 1\n            break\n    score = score * index\n    return score\n"}
{"java": "static boolean check ( int s ) { int [ ] freq = new int [ 10 ] ; int r , i ; for ( i = 0 ; i < 10 ; i ++ ) { freq [ i ] = 0 ; } while ( s != 0 ) { r = s % 10 ; s = ( int ) ( s / 10 ) ; freq [ r ] += 1 ; } int xor__ = 0 ; for ( i = 0 ; i < 10 ; i ++ ) { xor__ = xor__ ^ freq [ i ] ; if ( xor__ == 0 ) return true ; else return false ; } return true ; }", "python": "def check ( s ) :\n    freq = [ 0 ] * 10\n    while ( s != 0 ) :\n        r = s % 10\n        s = s // 10\n        freq [ r ] += 1\n    xor = 0\n    for i in range ( 10 ) :\n        xor = xor ^ freq [ i ]\n    if ( xor == 0 ) :\n        return True\n    else :\n        return False\n"}
{"java": "static void printMatrix ( int n , int m ) { if ( n < 5 || m < 5 ) { System . out . print ( - 1 ) ; return ; } char [ ] s = \" aeiou \" . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { System . out . print ( s [ j % 5 ] + \" \u2581 \" ) ; } System . out . println ( ) ; char c = s [ 0 ] ; for ( int k = 0 ; k < 4 ; k ++ ) { s [ k ] = s [ k + 1 ] ; } s [ 4 ] = c ; } }", "python": "def printMatrix ( n , m ) :\n    if ( n < 5 or m < 5 ) :\n        print ( - 1 , end = \" \u2581 \" ) ;\n        return ;\n    s = \" aeiou \" ;\n    s = list ( s ) ;\n    for i in range ( n ) :\n        for j in range ( m ) :\n            print ( s [ j % 5 ] , end = \" \u2581 \" ) ;\n        print ( )\n        c = s [ 0 ] ;\n        for i in range ( 4 ) :\n            s [ i ] = s [ i + 1 ] ;\n        s [ 4 ] = c ;\n"}
{"java": "static int minOperations ( int n , int m , int k , int matrix [ ] [ ] ) { int [ ] arr = new int [ n * m ] ; int mod = matrix [ 0 ] [ 0 ] % k ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) { arr [ i * m + j ] = matrix [ i ] [ j ] ; if ( matrix [ i ] [ j ] % k != mod ) { return - 1 ; } } } Arrays . sort ( arr ) ; int median = arr [ ( n * m ) / 2 ] ; int minOperations = 0 ; for ( int i = 0 ; i < n * m ; ++ i ) minOperations += Math . abs ( arr [ i ] - median ) / k ; if ( ( n * m ) % 2 == 0 ) { int median2 = arr [ ( n * m ) / 2 ] ; int minOperations2 = 0 ; for ( int i = 0 ; i < n * m ; ++ i ) minOperations2 += Math . abs ( arr [ i ] - median2 ) / k ; minOperations = Math . min ( minOperations , minOperations2 ) ; } return minOperations ; }", "python": "def minOperations ( n , m , k , matrix ) :\n    arr = [ 0 ] * ( n * m )\n    mod = matrix [ 0 ] [ 0 ] % k\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , m ) :\n            arr [ i * m + j ] = matrix [ i ] [ j ]\n            if matrix [ i ] [ j ] % k != mod :\n                return - 1\n    arr . sort ( )\n    median = arr [ ( n * m ) // 2 ]\n    minOperations = 0\n    for i in range ( 0 , n * m ) :\n        minOperations += abs ( arr [ i ] - median ) // k\n    if ( n * m ) % 2 == 0 :\n        median2 = arr [ ( n * m ) // 2 ]\n        minOperations2 = 0\n        for i in range ( 0 , n * m ) :\n            minOperations2 += abs ( arr [ i ] - median2 ) // k\n        minOperations = min ( minOperations , minOperations2 )\n    return minOperations\n"}
{"java": "static int longestSubstring ( String s ) { int cnt = 1 , maxi = 1 ; int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i - 1 ) ) cnt ++ ; else { maxi = Math . max ( cnt , maxi ) ; cnt = 1 ; } } maxi = Math . max ( cnt , maxi ) ; return maxi ; }", "python": "def longestSubstring ( s ) :\n    cnt = 1 ;\n    maxi = 1 ;\n    n = len ( s ) ;\n    for i in range ( 1 , n ) :\n        if ( s [ i ] != s [ i - 1 ] ) :\n            cnt += 1 ;\n        else :\n            maxi = max ( cnt , maxi ) ;\n            cnt = 1 ;\n    maxi = max ( cnt , maxi ) ;\n    return maxi ;\n"}
{"java": "private static String parseStdin ( ) { String stdin = null ; try { stdin = br . readLine ( ) ; } catch ( IOException e ) { } return stdin ; }", "python": "def extract_numbers ( s ) :\n    lst = re . findall ( ' [ 0-9 ] + ' , s )\n    return list ( map ( int , lst ) )\n"}
{"java": "public static int minOperations ( int [ ] a , int n , int K ) { HashMap < Integer , Boolean > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { try { if ( map . get ( a [ i ] ) ) return 1 ; } catch ( Exception e ) { } try { map . put ( a [ i ] , true ) ; } catch ( Exception e ) { } } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = a [ i ] & K ; map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) { try { map . put ( b [ i ] , true ) ; } catch ( Exception e ) { } } } for ( int i = 0 ; i < n ; i ++ ) { try { if ( map . get ( a [ i ] ) ) return 1 ; } catch ( Exception e ) { } } map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { try { if ( map . get ( b [ i ] ) ) return 2 ; } catch ( Exception e ) { } try { map . put ( b [ i ] , true ) ; } catch ( Exception e ) { } } return - 1 ; }", "python": "def minOperations ( a , n , K ) :\n    Map = defaultdict ( lambda : False )\n    for i in range ( 0 , n ) :\n        if Map [ a [ i ] ] == True :\n            return 0\n        Map [ a [ i ] ] = True\n    b = [ ]\n    for i in range ( 0 , n ) :\n        b . append ( a [ i ] & K )\n    Map . clear ( )\n    for i in range ( 0 , n ) :\n        if a [ i ] != b [ i ] :\n            Map [ b [ i ] ] = True\n    for i in range ( 0 , n ) :\n        if Map [ a [ i ] ] == True :\n            return 1\n    Map . clear ( )\n    for i in range ( 0 , n ) :\n        if Map [ b [ i ] ] == True :\n            return 2\n        Map [ b [ i ] ] = True\n    return - 1\n"}
{"java": "public static int removeAlternate ( int n ) { if ( n == 1 ) return 1 ; if ( n % 2 == 0 ) return 2 * removeAlternate ( n / 2 ) - 1 ; else return 2 * removeAlternate ( ( ( n - 1 ) / 2 ) ) + 1 ; }", "python": "def removeAlternate ( n ) :\n    if ( n == 1 ) :\n        return 1\n    if ( n % 2 == 0 ) :\n        return 2 * removeAlternate ( n / 2 ) - 1\n    else :\n        return 2 * removeAlternate ( ( ( n - 1 ) / 2 ) ) + 1\n"}
{"java": "static int numOfWhiteHats ( int arr [ ] , int n ) { int freq [ ] = new int [ n + 1 ] ; Arrays . fill ( freq , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= n ) return - 1 ; freq [ arr [ i ] ] ++ ; } int diffFreq = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) if ( freq [ i ] > 0 ) diffFreq ++ ; if ( diffFreq == 1 && freq [ n - 1 ] == n ) return n ; if ( diffFreq == 1 && freq [ 0 ] == n ) return 0 ; if ( diffFreq != 2 ) return - 1 ; int k ; for ( k = n - 1 ; k >= 1 ; k -- ) if ( freq [ k ] > 0 ) break ; if ( freq [ k - 1 ] == k && freq [ k ] + k == n ) return freq [ k - 1 ] ; else return - 1 ; }", "python": "def numOfWhiteHats ( arr , n ) :\n    freq = [ 0 for i in range ( n + 1 + 1 ) ]\n    for i in range ( n ) :\n        if ( arr [ i ] >= n ) :\n            return - 1\n        freq [ arr [ i ] ] += 1\n    diffFreq = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( freq [ i ] ) :\n            diffFreq += 1\n    if ( diffFreq == 1 and freq [ n - 1 ] == n ) :\n        return n\n    if ( diffFreq == 1 and freq [ 0 ] == n ) :\n        return 0\n    if ( diffFreq != 2 ) :\n        return - 1\n    for k in range ( n - 1 , 0 , - 1 ) :\n        if ( freq [ k ] ) :\n            break\n    if ( freq [ k - 1 ] == k and freq [ k ] + k == n ) :\n        return freq [ k - 1 ]\n    else :\n        return - 1\n"}
{"java": "static int checkBitonic ( int arr [ ] , int n ) { int i , j ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) continue ; if ( arr [ i ] <= arr [ i - 1 ] ) break ; } if ( i == n - 1 ) return 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] < arr [ j - 1 ] ) continue ; if ( arr [ j ] >= arr [ j - 1 ] ) break ; } i = j ; if ( i != n ) return 0 ; return 1 ; }", "python": "def checkBitonic ( arr , n ) :\n    for i in range ( 1 , n ) :\n        if arr [ i ] > arr [ i - 1 ] :\n            continue\n        else :\n            break\n    if i == n - 1 :\n        return 1\n    for j in range ( i + 1 , n ) :\n        if arr [ j ] < arr [ j - 1 ] :\n            continue\n        else :\n            break\n    i = j\n    if i != n - 1 :\n        return 0\n    return 1\n"}
{"java": "static int findMax ( int arr [ ] , int n ) { boolean [ ] divisible = new boolean [ n ] ; int res = 0 ; for ( int i = n - 1 ; i > 0 ; i -- ) { if ( divisible [ i ] ) continue ; int cnt = 0 ; for ( int j = 0 ; j < i ; j ++ ) { if ( ( arr [ j ] % arr [ i ] ) == 0 ) { divisible [ j ] = true ; cnt ++ ; } } res = Math . max ( res , cnt ) ; } return res ; }", "python": "def findMax ( arr , n ) :\n    divisible = [ False ] * n ;\n    res = 0 ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( divisible [ i ] ) :\n            continue ;\n        cnt = 0 ;\n        for j in range ( i ) :\n            if ( ( arr [ j ] % arr [ i ] ) == 0 ) :\n                divisible [ j ] = True ;\n                cnt += 1 ;\n        res = max ( res , cnt ) ;\n    return res ;\n"}
{"java": "static int calculate_change ( int length , int breadth ) { int change = 0 ; change = length + breadth + ( ( length * breadth ) / 100 ) ; return change ; }", "python": "def calculate_change ( length , breadth ) :\n    change = 0\n    change = length + breadth + ( ( length * breadth ) // 100 )\n    return change\n"}
{"java": "static int RSF ( int n ) { while ( n >= 10 ) { int x = n ; int l = 0 ; while ( n > 0 ) { n = n / 10 ; l ++ ; } int a [ ] = new int [ l ] ; int i = l - 1 ; while ( x > 0 ) { a [ i ] = x % 10 ; x = x / 10 ; i -- ; } for ( int j = 0 ; j < l - 1 ; j ++ ) { n = n * 10 + Math . abs ( a [ j ] - a [ j + 1 ] ) ; } } return n ; }", "python": "def RSF ( n ) :\n    while ( n >= 10 ) :\n        x = n ;\n        l = 0 ;\n        while ( n > 0 ) :\n            n = n // 10 ;\n            l += 1 ;\n        a = [ 0 ] * l ;\n        i = l - 1 ;\n        while ( x > 0 ) :\n            a [ i ] = x % 10 ;\n            x = x // 10 ;\n            i -= 1 ;\n        for j in range ( 0 , l - 1 ) :\n            n = n * 10 + abs ( a [ j ] - a [ j + 1 ] ) ;\n    return n ;\n"}
{"java": "public static int squareFree ( int n ) { int cnt = 0 ; for ( int i = 1 ; ; i ++ ) { boolean isSqFree = true ; for ( int j = 2 ; j * j <= i ; j ++ ) { if ( i % ( j * j ) == 0 ) { isSqFree = false ; break ; } } if ( isSqFree == true ) { cnt ++ ; if ( cnt == n ) return i ; } } }", "python": "def squareFree ( n ) :\n    cnt = 0 ;\n    i = 1 ;\n    while ( True ) :\n        isSqFree = True ;\n        j = 2 ;\n        while ( j * j <= i ) :\n            if ( i % ( j * j ) == 0 ) :\n                isSqFree = False ;\n                break ;\n            j += 1 ;\n        if ( isSqFree == True ) :\n            cnt += 1 ;\n            if ( cnt == n ) :\n                return i ;\n        i += 1 ;\n    return 0 ;\n"}
{"java": "static int countDeletions ( String str1 , String str2 ) { int arr [ ] = new int [ CHARS ] ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { arr [ str1 . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) { arr [ str2 . charAt ( i ) - ' a ' ] -- ; } int ans = 0 ; for ( int i = 0 ; i < CHARS ; i ++ ) { ans += Math . abs ( arr [ i ] ) ; } return ans ; }", "python": "def makeAnagram ( a , b ) :\n    buffer = [ 0 ] * 26\n    for char in a :\n        buffer [ ord ( char ) - ord ( ' a ' ) ] += 1\n    for char in b :\n        buffer [ ord ( char ) - ord ( ' a ' ) ] -= 1\n    return sum ( map ( abs , buffer ) )\n"}
{"java": "private static String readLine ( ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; return br . readLine ( ) ; }", "python": "def solve ( ) :\n    a , b = f ( )\n    if a <= b :\n        print ( a )\n    else :\n        print ( a - 1 )\n"}
{"java": "static int countRectangles ( int radius ) { int rectangles = 0 ; int diameter = 2 * radius ; int diameterSquare = diameter * diameter ; for ( int a = 1 ; a < 2 * radius ; a ++ ) { for ( int b = 1 ; b < 2 * radius ; b ++ ) { int diagnalLengthSquare = ( a * a + b * b ) ; if ( diagnalLengthSquare <= diameterSquare ) { rectangles ++ ; } } } return rectangles ; }", "python": "def countRectangles ( radius ) :\n    rectangles = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range ( 1 , 2 * radius ) :\n        for b in range ( 1 , 2 * radius ) :\n            diagnalLengthSquare = ( a * a + b * b )\n            if ( diagnalLengthSquare <= diameterSquare ) :\n                rectangles += 1\n    return rectangles\n"}
{"java": "static int max_bitwise_or ( int L , int R ) { Vector < Integer > v1 = new Vector < Integer > ( ) , v2 = new Vector < Integer > ( ) , v3 = new Vector < Integer > ( ) ; int z = 0 , i , ans = 0 , cnt = 1 ; while ( L > 0 ) { v1 . add ( L % 2 ) ; L = L / 2 ; } while ( R > 0 ) { v2 . add ( R % 2 ) ; R = R / 2 ; } while ( v1 . size ( ) != v2 . size ( ) ) { v1 . add ( 0 ) ; } for ( i = v2 . size ( ) - 1 ; i >= 0 ; i -- ) { if ( v2 . get ( i ) == 1 && v1 . get ( i ) == 0 && z == 0 ) { z = 1 ; continue ; } if ( z == 1 ) { v1 . remove ( i ) ; v1 . add ( i , 1 ) ; } } for ( i = 0 ; i < v2 . size ( ) ; i ++ ) { v3 . add ( v2 . get ( i ) | v1 . get ( i ) ) ; } for ( i = 0 ; i < v2 . size ( ) ; i ++ ) { if ( v3 . get ( i ) == 1 ) { ans += cnt ; } cnt *= 2 ; } return ans ; }", "python": "def max_bitwise_or ( L , R ) :\n    v1 = [ ]\n    v2 = [ ]\n    v3 = [ ]\n    z = 0\n    i = 0\n    ans = 0\n    cnt = 1\n    while ( L > 0 ) :\n        v1 . append ( L % 2 )\n        L = L // 2\n    while ( R > 0 ) :\n        v2 . append ( R % 2 )\n        R = R // 2\n    while ( len ( v1 ) != len ( v2 ) ) :\n        v1 . append ( 0 )\n    for i in range ( len ( v2 ) - 1 , - 1 , - 1 ) :\n        if ( v2 [ i ] == 1 and v1 [ i ] == 0 and z == 0 ) :\n            z = 1\n            continue\n        if ( z == 1 ) :\n            v1 [ i ] = 1\n    for i in range ( len ( v2 ) ) :\n        v3 . append ( v2 [ i ] | v1 [ i ] )\n    for i in range ( len ( v2 ) ) :\n        if ( v3 [ i ] == 1 ) :\n            ans += cnt\n        cnt *= 2\n    return ans\n"}
{"java": "public static int findremainder ( int arr [ ] , int len , int n ) { int mul = 1 ; for ( int i = 0 ; i < len ; i ++ ) mul = ( mul * ( arr [ i ] % n ) ) % n ; return mul % n ; }", "python": "def findremainder ( arr , lens , n ) :\n    mul = 1\n    for i in range ( lens ) :\n        mul = ( mul * ( arr [ i ] % n ) ) % n\n    return mul % n\n"}
{"java": "static int operations ( int op [ ] , int n , int k ) { int i , count = 0 ; int nVal = 0 ; int min = Integer . MAX_VALUE ; for ( i = 0 ; i < n ; i ++ ) { nVal += op [ i ] ; min = Math . min ( min , nVal ) ; if ( ( k + nVal ) <= 0 ) return ( i + 1 ) ; } if ( nVal >= 0 ) return - 1 ; int times = ( k - Math . abs ( min ) ) / Math . abs ( nVal ) ; k = ( k - ( times * Math . abs ( nVal ) ) ) ; count = ( times * n ) ; while ( k > 0 ) { for ( i = 0 ; i < n ; i ++ ) { k = k + op [ i ] ; count ++ ; if ( k <= 0 ) break ; } } return count ; }", "python": "def operations ( op , n , k ) :\n    i , count = 0 , 0\n    nVal = 0\n    minimum = 10 ** 9\n    for i in range ( n ) :\n        nVal += op [ i ]\n        minimum = min ( minimum , nVal )\n        if ( ( k + nVal ) <= 0 ) :\n            return ( i + 1 )\n    if ( nVal >= 0 ) :\n        return - 1\n    times = ( k - abs ( minimum ) ) // abs ( nVal )\n    k = ( k - ( times * abs ( nVal ) ) )\n    count = ( times * n )\n    while ( k > 0 ) :\n        for i in range ( n ) :\n            k = k + op [ i ]\n            count += 1\n            if ( k <= 0 ) :\n                break\n    return count\n"}
{"java": "static int find_greatest_divisor ( int l , int r ) { if ( l == r ) { return l ; } return 1 ; }", "python": "def find_greatest_divisor ( l , r ) :\n    if ( l == r ) :\n        return l ;\n    return 1 ;\n"}
{"java": "public static int arraySum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + arr [ i ] ; return sum ; }", "python": "def arraySum ( arr , n ) :\n    _sum = 0\n    for i in range ( n ) :\n        _sum = _sum + arr [ i ]\n    return _sum\n"}
{"java": "static int countUnique ( int arr [ ] , int n ) { Set < Point > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) s . add ( new Point ( arr [ i ] , arr [ j ] ) ) ; return s . size ( ) ; }", "python": "def countUnique ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        for j in range ( n ) :\n            s . add ( ( arr [ i ] , arr [ j ] ) )\n    return len ( s )\n"}
{"java": "static long doit ( ) { int i , j ; long l = 0 ; if ( a < 1001 && b < 1001 && k < 1001 ) { for ( i = 0 ; i < a ; i ++ ) for ( j = 0 ; j < b ; j ++ ) if ( ( i & j ) < k ) l ++ ; } return l ; }", "python": "def DP ( pos , a , b , k ) :\n    if pos < 0 :\n        return 1\n    if dp [ pos ] [ a * 4 + b * 2 + k ] == - 1 :\n        dp [ pos ] [ a * 4 + b * 2 + k ] = 0\n        bita = 0 if ( A & ( 1 << pos ) ) == 0 else 1\n        bitb = 0 if ( B & ( 1 << pos ) ) == 0 else 1\n        bitk = 0 if ( K & ( 1 << pos ) ) == 0 else 1\n        for xa in range ( 2 ) :\n            for xb in range ( 2 ) :\n                if a == 0 and bita == 0 and xa == 1 :\n                    continue\n                if b == 0 and bitb == 0 and xb == 1 :\n                    continue\n                xk = xa & xb\n                if k == 0 and bitk == 0 and xk == 1 :\n                    continue\n                na = 1 if xa < bita else a\n                nb = 1 if xb < bitb else b\n                nk = 1 if xk < bitk else k\n                dp [ pos ] [ a * 4 + b * 2 + k ] += DP ( pos - 1 , na , nb , nk ) ;\n    return dp [ pos ] [ a * 4 + b * 2 + k ]\n"}
{"java": "static int waysToSplit ( String s ) { int n = s . length ( ) ; int answer = 0 ; int prefix [ ] = new int [ n ] ; int suffix [ ] = new int [ n ] ; int seen [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int prev = ( i - 1 >= 0 ? prefix [ i - 1 ] : 0 ) ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { prefix [ i ] += ( prev + 1 ) ; } else prefix [ i ] = prev ; seen [ s . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < 26 ; i ++ ) seen [ i ] = 0 ; suffix [ n - 1 ] = 0 ; for ( int i = n - 1 ; i >= 1 ; i -- ) { int prev = suffix [ i ] ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { suffix [ i - 1 ] += ( prev + 1 ) ; } else suffix [ i - 1 ] = prev ; seen [ s . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prefix [ i ] == suffix [ i ] ) answer ++ ; } return answer ; }", "python": "def waysToSplit ( s ) :\n    n = len ( s ) ;\n    answer = 0 ;\n    prefix = [ 0 ] * n ;\n    suffix = [ 0 ] * n ;\n    seen = [ 0 ] * 26 ;\n    for i in range ( n ) :\n        prev = prefix [ i - 1 ] if ( i - 1 >= 0 ) else 0 ;\n        if ( seen [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 0 ) :\n            prefix [ i ] += ( prev + 1 ) ;\n        else :\n            prefix [ i ] = prev ;\n        seen [ ord ( s [ i ] ) - ord ( ' a ' ) ] = 1 ;\n    seen = [ 0 ] * len ( seen ) ;\n    suffix [ n - 1 ] = 0 ;\n    for i in range ( n - 1 , 0 , - 1 ) :\n        prev = suffix [ i ] ;\n        if ( seen [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 0 ) :\n            suffix [ i - 1 ] += ( prev + 1 ) ;\n        else :\n            suffix [ i - 1 ] = prev ;\n        seen [ ord ( s [ i ] ) - ord ( ' a ' ) ] = 1 ;\n    for i in range ( n ) :\n        if ( prefix [ i ] == suffix [ i ] ) :\n            answer += 1 ;\n    return answer ;\n"}
{"java": "static int bn ( long [ ] a , long key ) { int l = 0 ; int r = a . length - 1 ; int res = 0 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; if ( a [ mid ] <= key ) { l = mid + 1 ; if ( a [ mid ] == key ) { -- mid ; } res = Math . max ( res , mid ) ; } else { r = mid - 1 ; } } return res ; }", "python": "def search ( a , x ) :\n    lo = 0\n    hi = len ( a )\n    while hi > lo :\n        mid = ( lo + hi ) // 2\n        if a [ mid ] < x :\n            lo = mid + 1\n        else :\n            hi = mid\n    return hi\n"}
{"java": "static boolean checkYear ( int year ) { if ( year % 400 == 0 ) return true ; if ( year % 100 == 0 ) return false ; if ( year % 4 == 0 ) return true ; return false ; }", "python": "def checkYear ( year ) :\n    if ( year % 4 ) == 0 :\n        if ( year % 100 ) == 0 :\n            if ( year % 400 ) == 0 :\n                return True\n            else :\n                return False\n        else :\n            return True\n    else :\n        return False\n"}
{"java": "static int maxSortedAdjacentDiff ( int [ ] arr , int n ) { int maxVal = arr [ 0 ] ; int minVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { maxVal = Math . max ( maxVal , arr [ i ] ) ; minVal = Math . min ( minVal , arr [ i ] ) ; } int maxBucket [ ] = new int [ n - 1 ] ; int minBucket [ ] = new int [ n - 1 ] ; Arrays . fill ( maxBucket , 0 , n - 1 , Integer . MIN_VALUE ) ; Arrays . fill ( minBucket , 0 , n - 1 , Integer . MAX_VALUE ) ; float delta = ( float ) ( maxVal - minVal ) / ( float ) ( n - 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == maxVal || arr [ i ] == minVal ) { continue ; } int index = ( int ) ( Math . round ( ( arr [ i ] - minVal ) / delta ) ) ; if ( maxBucket [ index ] == Integer . MIN_VALUE ) { maxBucket [ index ] = arr [ i ] ; } else { maxBucket [ index ] = Math . max ( maxBucket [ index ] , arr [ i ] ) ; } if ( minBucket [ index ] == Integer . MAX_VALUE ) { minBucket [ index ] = arr [ i ] ; } else { minBucket [ index ] = Math . min ( minBucket [ index ] , arr [ i ] ) ; } } int prev_val = minVal ; int max_gap = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( minBucket [ i ] == Integer . MAX_VALUE ) { continue ; } max_gap = Math . max ( max_gap , minBucket [ i ] - prev_val ) ; prev_val = maxBucket [ i ] ; } max_gap = Math . max ( max_gap , maxVal - prev_val ) ; return max_gap ; }", "python": "def maxSortedAdjacentDiff ( arr , n ) :\n    maxVal , minVal = arr [ 0 ] , arr [ 0 ]\n    for i in range ( 1 , n ) :\n        maxVal = max ( maxVal , arr [ i ] )\n        minVal = min ( minVal , arr [ i ] )\n    maxBucket = [ INT_MIN ] * ( n - 1 )\n    minBucket = [ INT_MAX ] * ( n - 1 )\n    delta = ( maxVal - minVal ) // ( n - 1 )\n    for i in range ( 0 , n ) :\n        if arr [ i ] == maxVal or arr [ i ] == minVal :\n            continue\n        index = ( arr [ i ] - minVal ) // delta\n        if maxBucket [ index ] == INT_MIN :\n            maxBucket [ index ] = arr [ i ]\n        else :\n            maxBucket [ index ] = max ( maxBucket [ index ] , arr [ i ] )\n        if minBucket [ index ] == INT_MAX :\n            minBucket [ index ] = arr [ i ]\n        else :\n            minBucket [ index ] = min ( minBucket [ index ] , arr [ i ] )\n    prev_val , max_gap = minVal , 0\n    for i in range ( 0 , n - 1 ) :\n        if minBucket [ i ] == INT_MAX :\n            continue\n        max_gap = max ( max_gap , minBucket [ i ] - prev_val )\n        prev_val = maxBucket [ i ]\n    max_gap = max ( max_gap , maxVal - prev_val )\n    return max_gap\n"}
{"java": "static int countDivisibles ( int A , int B , int M ) { int counter = 0 ; for ( int i = A ; i <= B ; i ++ ) if ( i % M == 0 ) counter ++ ; return counter ; }", "python": "def countDivisibles ( A , B , M ) :\n    counter = 0 ;\n    for i in range ( A , B ) :\n        if ( i % M == 0 ) :\n            counter = counter + 1\n    return counter\n"}
{"java": "static void maxRegions ( int n ) { int num ; num = n * ( n + 1 ) / 2 + 1 ; System . out . println ( num ) ; ; }", "python": "def maxRegions ( n ) :\n    num = n * ( n + 1 ) // 2 + 1\n    print ( num )\n"}
{"java": "static int getResult ( int a , int b , int c , int n ) { if ( a > n || b > n || c > n ) return - 1 ; if ( a < c || b < c ) return - 1 ; int res = n - ( a + b - c ) ; if ( res < 1 ) return - 1 ; return res ; }", "python": "def fun ( a , b , c , n ) :\n    ans = a + b - c\n    if a == 0 and b == 0 and c == 0 :\n        if n > 0 :\n            print ( n )\n        else :\n            print ( - 1 )\n        return\n    if ( c > a or c > b ) :\n        print ( - 1 )\n        return\n    if ( a >= n or b >= n or c >= n or ans <= 0 ) :\n        print ( - 1 )\n        return\n    if n - ans <= 0 :\n        print ( - 1 )\n    else :\n        print ( n - ans )\n"}
{"java": "static boolean productOfSingelDgt ( int n ) { if ( n >= 0 && n <= 9 ) return true ; int [ ] prime = { 2 , 3 , 5 , 7 } ; for ( int i = 0 ; i < SIZE && n > 1 ; i ++ ) while ( n % prime [ i ] == 0 ) n = n / prime [ i ] ; return ( n == 1 ) ; }", "python": "def productOfSingelDgt ( n ) :\n    if n >= 0 and n <= 9 :\n        return True\n    prime = [ 2 , 3 , 5 , 7 ]\n    i = 0\n    while i < SIZE and n > 1 :\n        while n % prime [ i ] == 0 :\n            n = n / prime [ i ]\n        i += 1\n    return n == 1\n"}
{"java": "static int countNumbers ( int n ) { int c = 0 ; int limit = ( int ) Math . sqrt ( n ) ; int prime [ ] = new int [ limit + 1 ] ; for ( int i = 1 ; i <= limit ; i ++ ) { prime [ i ] = i ; } for ( int i = 2 ; i * i <= limit ; i ++ ) { if ( prime [ i ] == i ) { for ( int j = i * i ; j <= limit ; j += i ) { if ( prime [ j ] == j ) { prime [ j ] = i ; } } } } for ( int i = 2 ; i <= limit ; i ++ ) { int p = prime [ i ] ; int q = prime [ i / prime [ i ] ] ; if ( p * q == i && q != 1 && p != q ) { c += 1 ; } else if ( prime [ i ] == i ) { if ( Math . pow ( i , 8 ) <= n ) { c += 1 ; } } } return c ; }", "python": "def countNumbers ( n ) :\n    c = 0\n    limit = int ( n ** ( 0.5 ) )\n    prime = [ i for i in range ( limit + 1 ) ]\n    i = 2\n    while i * i <= limit :\n        if prime [ i ] == i :\n            for j in range ( i * i , limit + 1 , i ) :\n                if prime [ j ] == j :\n                    prime [ j ] = i\n        i += 1\n    for i in range ( 2 , limit + 1 ) :\n        p = prime [ i ]\n        q = prime [ i // prime [ i ] ]\n        if p * q == i and q != 1 and p != q :\n            c += 1\n        elif prime [ i ] == i :\n            if i ** 8 <= n :\n                c += 1\n    return c\n"}
{"java": "static int countSwap ( String str ) { int n = str . length ( ) ; char s [ ] = str . toCharArray ( ) ; int count = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) { int left = i ; int right = n - left - 1 ; while ( left < right ) { if ( s [ left ] == s [ right ] ) { break ; } else { right -- ; } } if ( left == right ) { return - 1 ; } else { for ( int j = right ; j < n - left - 1 ; j ++ ) { char t = s [ j ] ; s [ j ] = s [ j + 1 ] ; s [ j + 1 ] = t ; count ++ ; } } } return count ; }", "python": "def CountSwap ( s , n ) :\n    s = list ( s )\n    count = 0\n    ans = True\n    for i in range ( n // 2 ) :\n        left = i\n        right = n - left - 1\n        while left < right :\n            if s [ left ] == s [ right ] :\n                break\n            else :\n                right -= 1\n        if left == right :\n            ans = False\n            break\n        else :\n            for j in range ( right , n - left - 1 ) :\n                ( s [ j ] , s [ j + 1 ] ) = ( s [ j + 1 ] , s [ j ] )\n                count += 1\n    if ans :\n        print ( count )\n    else :\n        print ( ' - 1' )\n"}
{"java": "public static void heapsAlgo ( int k , int [ ] A ) { if ( k == 1 ) { List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) { list . add ( A [ i ] ) ; } perms . add ( list ) ; } else { heapsAlgo ( k - 1 , A ) ; for ( int i = 0 ; i < k - 1 ; i ++ ) { if ( k % 2 == 0 ) { int temp = A [ i ] ; A [ i ] = A [ k - 1 ] ; A [ k - 1 ] = temp ; } else { int temp = A [ 0 ] ; A [ 0 ] = A [ k - 1 ] ; A [ k - 1 ] = temp ; } heapsAlgo ( k - 1 , A ) ; } } }", "python": "def sum ( n , S ) :\n    out = 0\n    i = 0\n    j = 0\n    Loc = \" * \"\n    for c in S :\n        if c == \" U \" :\n            i += 1\n        if c == \" R \" :\n            j += 1\n        prevLoc = Loc\n        if i > j and prevLoc != \" L \" :\n            if Loc != \" * \" :\n                out += 1\n            Loc = \" L \"\n        elif i < j and prevLoc != \" R \" :\n            if Loc != \" * \" :\n                out += 1\n            Loc = \" R \"\n    return out\n    return out\n"}
{"java": "public static void PrintNumber ( int N , int Original , int K , boolean flag ) { System . out . print ( N + \" \u2581 \" ) ; if ( N <= 0 ) flag = ! flag ; if ( N == Original && ! flag ) return ; if ( flag == true ) { PrintNumber ( N - K , Original , K , flag ) ; return ; } if ( ! flag ) { PrintNumber ( N + K , Original , K , flag ) ; return ; } }", "python": "def PrintNumber ( N , Original , K , flag ) :\n    print ( N , end = \" \u2581 \" )\n    if ( N <= 0 ) :\n        if ( flag == 0 ) :\n            flag = 1\n        else :\n            flag = 0\n    if ( N == Original and ( not ( flag ) ) ) :\n        return\n    if ( flag == True ) :\n        PrintNumber ( N - K , Original , K , flag )\n        return\n    if ( not ( flag ) ) :\n        PrintNumber ( N + K , Original , K , flag ) ;\n        return\n"}
{"java": "static int countNumbers ( int l , int r ) { return ( ( r / 6 ) - ( l - 1 ) / 6 ) ; }", "python": "def countNumbers ( l , r ) :\n    return ( ( r // 6 ) - ( l - 1 ) // 6 ) ;\n"}
{"java": "static int getPrime ( int arr [ ] , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; Vector < Boolean > prime = new Vector < > ( max_val + 1 ) ; for ( int i = 0 ; i < max_val + 1 ; i ++ ) prime . add ( i , Boolean . TRUE ) ; prime . add ( 1 , Boolean . FALSE ) ; prime . add ( 2 , Boolean . FALSE ) ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime . get ( p ) == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime . add ( i , Boolean . FALSE ) ; } } int maximum = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime . get ( arr [ i ] ) ) { maximum = Math . max ( maximum , arr [ i ] ) ; } } return maximum ; }", "python": "def getPrime ( arr , n ) :\n    max_val = arr [ 0 ]\n    for i in range ( len ( arr ) ) :\n        if ( arr [ i ] > max_val ) :\n            max_val = arr [ i ]\n    prime = [ True for i in range ( max_val + 1 ) ]\n    prime [ 0 ] = False\n    prime [ 1 ] = False\n    for p in range ( 2 , int ( sqrt ( max_val ) ) + 1 , 1 ) :\n        if ( prime [ p ] == True ) :\n            for i in range ( p * 2 , max_val + 1 , p ) :\n                prime [ i ] = False\n    maximum = - 1\n    for i in range ( n ) :\n        if ( prime [ arr [ i ] ] ) :\n            maximum = max ( maximum , arr [ i ] )\n    return maximum\n"}
{"java": "static float find_angle ( int x , int y , int z ) { int volume = x * x * y ; float ans = 0 ; if ( z < volume / 2 ) { float d = ( float ) ( ( x * y * y ) / ( 2.0 * z ) ) ; ans = ( float ) Math . atan ( d ) ; } else { z = volume - z ; float d = ( 2 * z ) / ( float ) ( x * x * x ) ; ans = ( float ) Math . atan ( d ) ; } ans = ( float ) ( ( ans * 180 ) / 3.14159265 ) ; return ans ; }", "python": "def find_angle ( x , y , z ) :\n    volume = x * x * y ;\n    ans = 0 ;\n    if ( z < volume // 2 ) :\n        d = ( x * y * y ) / ( 2.0 * z ) ;\n        ans = atan ( d ) ;\n    else :\n        z = volume - z ;\n        d = ( 2 * z ) / ( float ) ( x * x * x ) ;\n        ans = atan ( d ) ;\n    ans = ( ans * 180 ) / 3.14159265 ;\n    return round ( ans , 4 ) ;\n"}
{"java": "public static int min_noOf_operation ( int arr [ ] , int n , int k ) { int noOfSubtraction ; int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { noOfSubtraction = 0 ; if ( arr [ i ] > arr [ i - 1 ] ) { noOfSubtraction = ( arr [ i ] - arr [ i - 1 ] ) / k ; if ( ( arr [ i ] - arr [ i - 1 ] ) % k != 0 ) noOfSubtraction ++ ; arr [ i ] = arr [ i ] - k * noOfSubtraction ; } res = res + noOfSubtraction ; } return res ; }", "python": "def min_noOf_operation ( arr , n , k ) :\n    res = 0\n    for i in range ( 1 , n ) :\n        noOfSubtraction = 0\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            noOfSubtraction = ( arr [ i ] - arr [ i - 1 ] ) / k ;\n            if ( ( arr [ i ] - arr [ i - 1 ] ) % k != 0 ) :\n                noOfSubtraction += 1\n            arr [ i ] = arr [ i ] - k * noOfSubtraction\n        res = res + noOfSubtraction\n    return int ( res )\n"}
{"java": "public static void dfs ( String a , int l , int r , String [ ] b , int sum , int count ) { if ( l == a . length ( ) ) { if ( max < sum && sum <= n ) { max = sum ; ans = b ; Count = 1 ; len = count ; } else if ( sum == max ) { Count ++ ; } return ; } if ( r == a . length ( ) + 1 ) { return ; } dfs ( a , l , r + 1 , b , sum , count ) ; String [ ] cp = Arrays . copyOf ( b , b . length ) ; cp [ count ] = a . substring ( l , r ) ; sum += Integer . parseInt ( a . substring ( l , r ) ) ; dfs ( a , r , r + 1 , cp , sum , count + 1 ) ; }", "python": "def main ( t , num ) :\n    num = list ( str ( num ) )\n    d = defaultdict ( int )\n    if t < sum ( map ( int , num ) ) :\n        print ( \" error \" )\n        return\n    q = [ [ 0 , [ ] ] ]\n    itertools . product ( )\n    fulls = itertools . product ( range ( 2 ) , repeat = len ( num ) - 1 )\n    for full in fulls :\n        tmp = 0\n        res = [ ]\n        b = 0\n        f = False\n        for i in range ( len ( num ) - 1 ) :\n            if full [ i ] :\n                res . append ( i )\n                tmp += int ( \" \" . join ( num [ b : i + 1 ] ) )\n                b = i + 1\n        tmp += int ( \" \" . join ( num [ b : ] ) )\n        a , b = heappop ( q )\n        a *= - 1\n        if a == tmp : d [ a ] += 1\n        if t >= tmp > a :\n            a = tmp\n            b = res\n        heappush ( q , [ - a , b ] )\n    a , b = heappop ( q )\n    a *= - 1\n    if d [ a ] or a == 0 :\n        print ( \" rejected \" )\n    else :\n        ans = [ ]\n        be = 0\n        for i in b :\n            ans . append ( int ( \" \" . join ( num [ be : i + 1 ] ) ) )\n            be = i + 1\n        ans . append ( int ( \" \" . join ( num [ be : ] ) ) )\n        print ( a , * ans )\n"}
{"java": "static int minInsertions ( int [ ] H , int n , int K ) { int inser = 0 ; for ( int i = 1 ; i < n ; ++ i ) { float diff = Math . abs ( H [ i ] - H [ i - 1 ] ) ; if ( diff <= K ) continue ; else inser += Math . ceil ( diff / K ) - 1 ; } return inser ; }", "python": "def minInsertions ( H , n , K ) :\n    inser = 0 ;\n    for i in range ( 1 , n ) :\n        diff = abs ( H [ i ] - H [ i - 1 ] ) ;\n        if ( diff <= K ) :\n            continue ;\n        else :\n            inser += math . ceil ( diff / K ) - 1 ;\n    return inser ;\n"}
{"java": "static void steps ( String str , int n ) { boolean flag = false ; int x = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( x == 0 ) flag = true ; if ( x == n - 1 ) flag = false ; for ( int j = 0 ; j < x ; j ++ ) System . out . print ( \" * \" ) ; System . out . print ( str . charAt ( i ) + \" \\n \" ) ; if ( flag == true ) x ++ ; else x -- ; } }", "python": "def steps ( string , n ) :\n    flag = False\n    x = 0\n    for i in range ( len ( string ) ) :\n        if ( x == 0 ) :\n            flag = True\n        if ( x == n - 1 ) :\n            flag = False\n        for j in range ( x ) :\n            print ( \" * \" , end = \" \" )\n        print ( string [ i ] )\n        if ( flag == True ) :\n            x += 1\n        else :\n            x -= 1\n"}
{"java": "static int highestPowerof2 ( int n ) { int p = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) Math . pow ( 2 , p ) ; }", "python": "def highestPowerof2 ( n ) :\n    p = int ( math . log ( n , 2 ) ) ;\n    return int ( pow ( 2 , p ) ) ;\n"}
{"java": "static int countPairs ( String s1 , int n1 , String s2 , int n2 ) { int [ ] freq1 = new int [ 26 ] ; int [ ] freq2 = new int [ 26 ] ; Arrays . fill ( freq1 , 0 ) ; Arrays . fill ( freq2 , 0 ) ; int i , count = 0 ; for ( i = 0 ; i < n1 ; i ++ ) freq1 [ s1 . charAt ( i ) - ' a ' ] ++ ; for ( i = 0 ; i < n2 ; i ++ ) freq2 [ s2 . charAt ( i ) - ' a ' ] ++ ; for ( i = 0 ; i < 26 ; i ++ ) count += ( Math . min ( freq1 [ i ] , freq2 [ i ] ) ) ; return count ; }", "python": "def countPairs ( s1 , n1 , s2 , n2 ) :\n    freq1 = [ 0 ] * 26 ;\n    freq2 = [ 0 ] * 26 ;\n    count = 0 ;\n    for i in range ( n1 ) :\n        freq1 [ ord ( s1 [ i ] ) - ord ( ' a ' ) ] += 1 ;\n    for i in range ( n2 ) :\n        freq2 [ ord ( s2 [ i ] ) - ord ( ' a ' ) ] += 1 ;\n    for i in range ( 26 ) :\n        count += min ( freq1 [ i ] , freq2 [ i ] ) ;\n    return count ;\n"}
{"java": "static int countUnique ( int arr [ ] , int n ) { HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( arr [ i ] ) ; } int count = ( int ) Math . pow ( s . size ( ) , 2 ) ; return count ; }", "python": "def countUnique ( arr , n ) :\n    s = set ( ) ;\n    for i in range ( n ) :\n        s . add ( arr [ i ] ) ;\n    count = pow ( len ( s ) , 2 ) ;\n    return count ;\n"}
{"java": "private static int getGCD ( int m , int n ) { int r = m % n ; while ( r != 0 ) { m = n ; n = r ; r = m % n ; } return n ; }", "python": "def baseb ( m , b , result = 0 ) :\n    e = m // b\n    q = m % b\n    if e == 0 :\n        result += q\n        return result\n    else :\n        result += q\n        return baseb ( e , b , result )\n"}
{"java": "static void count ( String str1 , String str2 ) { int c = 0 , j = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str2 . indexOf ( str1 . charAt ( i ) ) >= 0 ) { c += 1 ; } } System . out . println ( \" No . \u2581 of \u2581 matching \u2581 characters \u2581 are : \u2581 \" + c ) ; }", "python": "def count ( str1 , str2 ) :\n    c = 0 ; j = 0 ;\n    for i in range ( len ( str1 ) ) :\n        if str1 [ i ] in str2 :\n            c += 1 ;\n        j += 1 ;\n    print ( \" No . \u2581 of \u2581 matching \u2581 characters \u2581 are : \u2581 \" , c ) ;\n"}
{"java": "static void perfectSquares ( float l , float r ) { int number = ( int ) Math . ceil ( Math . sqrt ( l ) ) ; int n2 = number * number ; number = ( number * 2 ) + 1 ; while ( ( n2 >= l && n2 <= r ) ) { System . out . print ( n2 + \" \u2581 \" ) ; n2 = n2 + number ; number += 2 ; } }", "python": "def perfectSquares ( l , r ) :\n    number = ceil ( sqrt ( l ) ) ;\n    n2 = number * number ;\n    number = ( number * 2 ) + 1 ;\n    while ( ( n2 >= l and n2 <= r ) ) :\n        print ( n2 , end = \" \u2581 \" ) ;\n        n2 = n2 + number ;\n        number += 2 ;\n"}
{"java": "static int subsetPairNotDivisibleByK ( int arr [ ] , int N , int K ) { int f [ ] = new int [ K ] ; Arrays . fill ( f , 0 ) ; for ( int i = 0 ; i < N ; i ++ ) f [ arr [ i ] % K ] ++ ; if ( K % 2 == 0 ) f [ K / 2 ] = Math . min ( f [ K / 2 ] , 1 ) ; int res = Math . min ( f [ 0 ] , 1 ) ; for ( int i = 1 ; i <= K / 2 ; i ++ ) res += Math . max ( f [ i ] , f [ K - i ] ) ; return res ; }", "python": "def subsetPairNotDivisibleByK ( arr , N , K ) :\n    f = [ 0 for i in range ( K ) ]\n    for i in range ( N ) :\n        f [ arr [ i ] % K ] += 1\n    if ( K % 2 == 0 ) :\n        f [ K // 2 ] = min ( f [ K // 2 ] , 1 )\n    res = min ( f [ 0 ] , 1 )\n    for i in range ( 1 , ( K // 2 ) + 1 ) :\n        res += max ( f [ i ] , f [ K - i ] )\n    return res\n"}
{"java": "static void nDigitPerfectCubes ( int n ) { int smallest = ( int ) Math . pow ( Math . ceil ( Math . cbrt ( Math . pow ( 10 , ( n - 1 ) ) ) ) , 3 ) ; System . out . print ( smallest + \" \u2581 \" ) ; int largest = ( int ) Math . pow ( Math . ceil ( Math . cbrt ( Math . pow ( 10 , ( n ) ) ) ) - 1 , 3 ) ; System . out . print ( largest ) ; }", "python": "def nDigitPerfectCubes ( n ) :\n    print ( pow ( ceil ( ( pow ( 10 , ( n - 1 ) ) ) ** ( 1 / 3 ) ) , 3 ) , end = \" \u2581 \" )\n    print ( pow ( ceil ( ( pow ( 10 , ( n ) ) ) ** ( 1 / 3 ) ) - 1 , 3 ) )\n"}
{"java": "static int xorPairSum ( int ar [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum ^ ar [ i ] ; return 2 * sum ; }", "python": "def xor_pair_sum ( ar , n ) :\n    total = 0\n    for i in range ( n ) :\n        total = total ^ ar [ i ]\n    return 2 * total\n"}
{"java": "static int minSteps ( int arr [ ] , int n ) { boolean [ ] v = new boolean [ n ] ; Queue < Integer > q = new LinkedList < > ( ) ; q . add ( 0 ) ; int depth = 0 ; while ( q . size ( ) > 0 ) { int x = q . size ( ) ; while ( x -- > 0 ) { int i = q . peek ( ) ; q . poll ( ) ; if ( v [ i ] ) continue ; if ( i == n - 1 ) return depth ; v [ i ] = true ; if ( i + arr [ i ] < n ) q . add ( i + arr [ i ] ) ; if ( i - arr [ i ] >= 0 ) q . add ( i - arr [ i ] ) ; } depth ++ ; } return - 1 ; }", "python": "def minSteps ( arr , n ) :\n    v = [ 0 for i in range ( n ) ]\n    q = [ ]\n    q . append ( 0 )\n    depth = 0\n    while ( len ( q ) != 0 ) :\n        x = len ( q )\n        while ( x >= 1 ) :\n            i = q [ 0 ]\n            q . remove ( i )\n            x -= 1\n            if ( v [ i ] ) :\n                continue ;\n            if ( i == n - 1 ) :\n                return depth\n            v [ i ] = 1\n            if ( i + arr [ i ] < n ) :\n                q . append ( i + arr [ i ] )\n            if ( i - arr [ i ] >= 0 ) :\n                q . append ( i - arr [ i ] )\n        depth += 1\n    return - 1\n"}
{"java": "static void findAllSequences ( int diff , char out [ ] , int start , int end ) { if ( Math . abs ( diff ) > ( end - start + 1 ) / 2 ) return ; if ( start > end ) { if ( diff == 0 ) { System . out . print ( out ) ; System . out . print ( \" \u2581 \" ) ; } return ; } out [ start ] = '0' ; out [ end ] = '1' ; findAllSequences ( diff + 1 , out , start + 1 , end - 1 ) ; out [ start ] = out [ end ] = '1' ; findAllSequences ( diff , out , start + 1 , end - 1 ) ; out [ start ] = out [ end ] = '0' ; findAllSequences ( diff , out , start + 1 , end - 1 ) ; out [ start ] = '1' ; out [ end ] = '0' ; findAllSequences ( diff - 1 , out , start + 1 , end - 1 ) ; }", "python": "def findAllSequences ( diff , out , start , end ) :\n    if ( abs ( diff ) > ( end - start + 1 ) // 2 ) :\n        return ;\n    if ( start > end ) :\n        if ( diff == 0 ) :\n            print ( ' ' . join ( list ( out ) ) , end = \" \u2581 \" ) ;\n        return ;\n    out [ start ] = '0' ;\n    out [ end ] = '1' ;\n    findAllSequences ( diff + 1 , out , start + 1 , end - 1 ) ;\n    out [ start ] = out [ end ] = '1' ;\n    findAllSequences ( diff , out , start + 1 , end - 1 ) ;\n    out [ start ] = out [ end ] = '0' ;\n    findAllSequences ( diff , out , start + 1 , end - 1 ) ;\n    out [ start ] = '1' ;\n    out [ end ] = '0' ;\n    findAllSequences ( diff - 1 , out , start + 1 , end - 1 ) ;\n"}
{"java": "static int countWays ( int n ) { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) for ( int k = j ; k < n ; k ++ ) for ( int l = k ; l < n ; l ++ ) if ( i + j + k + l == n ) counter ++ ; return counter ; }", "python": "def countWays ( n ) :\n    counter = 0\n    for i in range ( 1 , n ) :\n        for j in range ( i , n ) :\n            for k in range ( j , n ) :\n                for l in range ( k , n ) :\n                    if ( i + j + k + l == n ) :\n                        counter += 1\n    return counter\n"}
{"java": "static int stepRequired ( int n ) { return Integer . bitCount ( n - 1 ) ; }", "python": "def stepRequired ( n ) :\n    return bin ( 94 ) . count ( '1' )\n"}
{"java": "public static final double heron ( double a , double b , double c ) { double s = ( a + b + c ) / 2 ; return Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; }", "python": "def heron ( i , j , k ) :\n    d = ( i + j + k ) / 2\n    return math . sqrt ( d * ( d - i ) * ( d - j ) * ( d - k ) )\n"}
{"java": "static int k_sum ( int a [ ] , int n , int k ) { int r = 0 , sum = 0 ; int ans = 0 ; for ( int l = 0 ; l < n ; l ++ ) { while ( sum < k ) { if ( r == n ) break ; else { sum += a [ r ] ; r ++ ; } } if ( sum < k ) break ; ans += n - r + 1 ; sum -= a [ l ] ; } return ans ; }", "python": "def k_sum ( a , n , k ) :\n    r , sum = 0 , 0 ;\n    ans = 0 ;\n    for l in range ( n ) :\n        while ( sum < k ) :\n            if ( r == n ) :\n                break ;\n            else :\n                sum += a [ r ] ;\n                r += 1 ;\n        if ( sum < k ) :\n            break ;\n        ans += n - r + 1 ;\n        sum -= a [ l ] ;\n    return ans ;\n"}
{"java": "public static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] e = new int [ m ] ; int [ ] num = new int [ n + 1 ] ; ArrayList < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; num [ x ] = 1 ; list . add ( x ) ; } for ( int i = list . size ( ) - 1 ; i >= 0 ; i -- ) { if ( num [ list . get ( i ) ] == 1 ) { System . out . println ( list . get ( i ) ) ; num [ list . get ( i ) ] = 2 ; } } for ( int i = 1 ; i <= n ; i ++ ) { if ( num [ i ] == 0 ) { System . out . println ( i ) ; } } }", "python": "def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LS ( ) : return sys . stdin . readline ( ) . split ( )\ndef I ( ) : return int ( sys . stdin . readline ( ) )\ndef F ( ) : return float ( sys . stdin . readline ( ) )\ndef S ( ) : return input ( )\ndef pf ( s ) : return print ( s , flush = True )\ndef main ( ) :\n    rr = [ ]\n    while True :\n        n , m = LI ( )\n        a = [ I ( ) for _ in range ( m ) ] [ : : - 1 ]\n        f = [ None ] * ( n + 1 )\n        for c in a :\n            if f [ c ] is None :\n                f [ c ] = 1\n                rr . append ( c )\n        for c in range ( 1 , n + 1 ) :\n            if f [ c ] is None :\n                rr . append ( c )\n        break\n    return ' \\n ' . join ( map ( str , rr ) )\n"}
{"java": "public static int getSum ( int arr [ ] , int p ) { return arr . length ; }", "python": "def getSum ( arr , p ) :\n    return len ( arr )\n"}
{"java": "static long getCom ( long i ) { return i * ( i - 1 ) / 2 ; }", "python": "def combinations_count ( n , r ) :\n    return factorial ( n ) // ( factorial ( n - r ) * factorial ( r ) )\n"}
{"java": "static void find_idx ( int arr [ ] , int n ) { Vector answer = new Vector ( ) ; int sum = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( sum == arr [ i ] ) { answer . add ( i ) ; } sum += arr [ i ] ; } if ( answer . size ( ) == 0 ) { System . out . println ( \" - 1\" ) ; return ; } for ( int i = answer . size ( ) - 1 ; i >= 0 ; i -- ) System . out . print ( answer . get ( i ) + \" \u2581 \" ) ; }", "python": "def find_idx ( arr , n ) :\n    answer = [ ]\n    _sum = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( _sum == arr [ i ] ) :\n            answer . append ( i )\n        _sum += arr [ i ]\n    if ( len ( answer ) == 0 ) :\n        print ( - 1 )\n        return\n    for i in range ( len ( answer ) - 1 , - 1 , - 1 ) :\n        print ( answer [ i ] , end = \" \u2581 \" )\n"}
{"java": "static void ReplaceElements ( int arr [ ] , int n ) { int X = 0 ; for ( int i = 0 ; i < n ; ++ i ) { X ^= arr [ i ] ; } for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = X ^ arr [ i ] ; } }", "python": "def ReplaceElements ( arr , n ) :\n    X = 0\n    for i in range ( n ) :\n        X ^= arr [ i ]\n    for i in range ( n ) :\n        arr [ i ] = X ^ arr [ i ]\n"}
{"java": "static int sub_arrays ( int [ ] a , int n , int k ) { int sum [ ] = new int [ n + 2 ] ; for ( int i = 0 ; i < n + 2 ; i ++ ) { sum [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] -- ; a [ i ] %= k ; sum [ i + 1 ] += sum [ i ] + a [ i ] ; sum [ i + 1 ] %= k ; } int ans = 0 , l = 0 , r = 0 ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n + 1 ; i ++ ) { mp . put ( sum [ i ] , 0 ) ; } int temp ; for ( int i = 0 ; i < n + 1 ; i ++ ) { ans += ( int ) mp . get ( sum [ i ] ) ; temp = ( int ) mp . get ( sum [ i ] ) + 1 ; mp . put ( sum [ i ] , temp ) ; r ++ ; if ( r - l >= k ) { temp = ( int ) mp . get ( sum [ l ] ) - 1 ; mp . put ( sum [ l ] , temp ) ; l ++ ; } } return ans ; }", "python": "def sub_arrays ( a , n , k ) :\n    sum = [ 0 for i in range ( n + 2 ) ]\n    for i in range ( n ) :\n        a [ i ] -= 1\n        a [ i ] %= k\n        sum [ i + 1 ] += sum [ i ] + a [ i ]\n        sum [ i + 1 ] %= k\n    ans = 0\n    l = 0\n    r = 0\n    mp = dict ( )\n    for i in range ( n + 1 ) :\n        if sum [ i ] in mp :\n            ans += mp [ sum [ i ] ]\n        mp [ sum [ i ] ] = mp . get ( sum [ i ] , 0 ) + 1\n        r += 1\n        if ( r - l >= k ) :\n            mp [ sum [ l ] ] -= 1\n            l += 1\n    return ans\n"}
{"java": "static int minimumOperations ( int arr [ ] , int n ) { int brr [ ] = { 0 , 0 , 0 , 0 } ; for ( int i = 0 ; i < n ; i ++ ) brr [ arr [ i ] % 4 ] ++ ; if ( ( brr [ 1 ] + 2 * brr [ 2 ] + 3 * brr [ 3 ] ) % 4 == 0 ) { int min_opr = Math . min ( brr [ 3 ] , brr [ 1 ] ) ; brr [ 3 ] -= min_opr ; brr [ 1 ] -= min_opr ; min_opr += brr [ 2 ] / 2 ; brr [ 2 ] %= 2 ; if ( brr [ 2 ] == 1 ) { min_opr += 2 ; brr [ 2 ] = 0 ; if ( brr [ 3 ] == 1 ) brr [ 3 ] -= 2 ; if ( brr [ 1 ] == 1 ) brr [ 1 ] -= 2 ; } if ( brr [ 1 ] == 1 ) min_opr += ( brr [ 1 ] / 4 ) * 3 ; if ( brr [ 3 ] == 1 ) min_opr += ( brr [ 3 ] / 4 ) * 3 ; return min_opr ; } return - 1 ; }", "python": "def minimumOperations ( arr , n ) :\n    brr = [ 0 , 0 , 0 , 0 ]\n    for i in range ( n ) :\n        brr [ arr [ i ] % 4 ] += 1 ;\n    if ( ( brr [ 1 ] + 2 * brr [ 2 ] + 3 * brr [ 3 ] ) % 4 == 0 ) :\n        min_opr = min ( brr [ 3 ] , brr [ 1 ] )\n        brr [ 3 ] -= min_opr\n        brr [ 1 ] -= min_opr\n        min_opr += brr [ 2 ] // 2\n        brr [ 2 ] %= 2\n        if ( brr [ 2 ] ) :\n            min_opr += 2\n            brr [ 2 ] = 0\n            if ( brr [ 3 ] ) :\n                brr [ 3 ] -= 2\n            if ( brr [ 1 ] ) :\n                brr [ 1 ] -= 2\n        if ( brr [ 1 ] ) :\n            min_opr += ( brr [ 1 ] // 4 ) * 3\n        if ( brr [ 3 ] ) :\n            min_opr += ( brr [ 3 ] // 4 ) * 3\n        return min_opr\n    return - 1\n"}
{"java": "static void triangular_series ( int n ) { int i , j = 1 , k = 1 ; for ( i = 1 ; i <= n ; i ++ ) { System . out . printf ( \" % d \u2581 \" , k ) ; j = j + 1 ; k = k + j ; } }", "python": "def triangular_series ( n ) :\n    j = 1\n    k = 1\n    for i in range ( 1 , n + 1 ) :\n        print ( k , end = ' \u2581 ' )\n        j = j + 1\n        k = k + j\n"}
{"java": "public static void solve ( Scanner sc ) { String s = sc . nextLine ( ) ; int queries = sc . nextInt ( ) ; while ( queries -- > 0 ) { int l = sc . nextInt ( ) - 1 ; int r = sc . nextInt ( ) - 1 ; int count = sc . nextInt ( ) % ( r - l + 1 ) ; String toShift = s . substring ( l , r + 1 ) ; StringBuilder sb = new StringBuilder ( \" \" ) ; for ( int i = 0 ; i < toShift . length ( ) ; i ++ ) { sb . append ( toShift . charAt ( ( toShift . length ( ) - count + i ) % toShift . length ( ) ) ) ; } String start = l == 0 ? \" \" : s . substring ( 0 , l ) ; String end = r == s . length ( ) - 1 ? \" \" : s . substring ( r + 1 , s . length ( ) ) ; s = start + sb . toString ( ) + end ; } System . out . println ( s ) ; }", "python": "def shift ( l , r , k , s ) :\n    len = r - l + 1\n    shift = k % len\n    end = r - shift + 1\n    out = s [ : l ] + s [ end : r + 1 ] + s [ l : end ] + s [ r + 1 : ]\n    return out\n"}
{"java": "public static int sumOfSeries ( int n ) { int x = ( n * ( n + 1 ) / 2 ) ; return x * x ; }", "python": "def sumOfSeries ( n ) :\n    x = ( n * ( n + 1 ) / 2 )\n    return ( int ) ( x * x )\n"}
{"java": "static void candies ( int n , int k ) { int count = 0 ; int ind = 1 ; int [ ] arr = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) arr [ i ] = 0 ; int low = 0 , high = n ; while ( low <= high ) { int mid = ( low + high ) >> 1 ; int sum = ( mid * ( mid + 1 ) ) >> 1 ; if ( sum <= n ) { count = mid / k ; low = mid + 1 ; } else { high = mid - 1 ; } } int last = ( count * k ) ; n -= ( last * ( last + 1 ) ) / 2 ; int j = 0 ; int term = ( count * k ) + 1 ; while ( n > 0 ) { if ( term <= n ) { arr [ j ++ ] = term ; n -= term ; term ++ ; } else { arr [ j ] += n ; n = 0 ; } } for ( int i = 0 ; i < k ; i ++ ) arr [ i ] += ( count * ( i + 1 ) ) + ( k * ( count * ( count - 1 ) ) / 2 ) ; for ( int i = 0 ; i < k ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def candies ( n , k ) :\n    count = 0 ;\n    ind = 1 ;\n    arr = [ 0 ] * k ;\n    low = 0 ;\n    high = n ;\n    while ( low <= high ) :\n        mid = ( low + high ) >> 1 ;\n        sum = ( mid * ( mid + 1 ) ) >> 1 ;\n        if ( sum <= n ) :\n            count = int ( mid / k ) ;\n            low = mid + 1 ;\n        else :\n            high = mid - 1 ;\n    last = ( count * k ) ;\n    n -= int ( ( last * ( last + 1 ) ) / 2 ) ;\n    i = 0 ;\n    term = ( count * k ) + 1 ;\n    while ( n ) :\n        if ( term <= n ) :\n            arr [ i ] = term ;\n            i += 1 ;\n            n -= term ;\n            term += 1 ;\n        else :\n            arr [ i ] += n ;\n            n = 0 ;\n    for i in range ( k ) :\n        arr [ i ] += ( ( count * ( i + 1 ) ) + int ( k * ( count * ( count - 1 ) ) / 2 ) ) ;\n    for i in range ( k ) :\n        print ( arr [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "static int minCost ( int A [ ] , int n ) { int cost = 0 ; Arrays . sort ( A ) ; int K = A [ n / 2 ] ; for ( int i = 0 ; i < n ; ++ i ) cost += Math . abs ( A [ i ] - K ) ; if ( n % 2 == 0 ) { int tempCost = 0 ; K = A [ ( n / 2 ) - 1 ] ; for ( int i = 0 ; i < n ; ++ i ) tempCost += Math . abs ( A [ i ] - K ) ; cost = Math . min ( cost , tempCost ) ; } return cost ; }", "python": "def minCost ( A , n ) :\n    cost = 0\n    A . sort ( ) ;\n    K = A [ int ( n / 2 ) ]\n    for i in range ( 0 , n ) :\n        cost = cost + abs ( A [ i ] - K )\n    if n % 2 == 0 :\n        tempCost = 0\n        K = A [ int ( n / 2 ) - 1 ]\n        for i in range ( 0 , n ) :\n            tempCost = tempCost + abs ( A [ i ] - K )\n        cost = min ( cost , tempCost )\n    return cost\n"}
{"java": "static float angleOncirCumference ( float z ) { return ( z / 2 ) ; }", "python": "def angleOncirCumference ( z ) :\n    return ( z / 2 ) ;\n"}
{"java": "public static long SubArraySum ( int arr [ ] , int n ) { long result = 0 , temp = 0 ; for ( int i = 0 ; i < n ; i ++ ) { temp = 0 ; for ( int j = i ; j < n ; j ++ ) { temp += arr [ j ] ; result += temp ; } } return result ; }", "python": "def SubArraySum ( arr , n ) :\n    temp , result = 0 , 0\n    for i in range ( 0 , n ) :\n        temp = 0 ;\n        for j in range ( i , n ) :\n            temp += arr [ j ]\n            result += temp\n    return result\n"}
{"java": "static int possibleways ( int n ) { if ( n % 2 == 1 ) return 0 ; else if ( n % 4 == 0 ) return n / 4 - 1 ; else return n / 4 ; }", "python": "def possibleways ( n ) :\n    if ( n % 2 == 1 ) :\n        return 0 ;\n    elif ( n % 4 == 0 ) :\n        return n // 4 - 1 ;\n    else :\n        return n // 4 ;\n"}
{"java": "static int smallestMultiple ( int n ) { if ( n == 1 ) return 5 ; return ( int ) ( Math . pow ( 10 , n - 1 ) ) ; }", "python": "def smallestMultiple ( n ) :\n    if ( n == 1 ) :\n        return 5\n    return pow ( 10 , n - 1 )\n"}
{"java": "public static int countunsetbits ( int n ) { int count = 0 ; for ( int x = 1 ; x <= n ; x = x << 1 ) if ( ( x & n ) == 0 ) count ++ ; return count ; }", "python": "def countunsetbits ( n ) :\n    count = 0\n    x = 1\n    while ( x < n + 1 ) :\n        if ( ( x & n ) == 0 ) :\n            count += 1\n        x = x << 1\n    return count\n"}
{"java": "static int maxUniqueNum ( int arr [ ] , int M ) { HashMap < Integer , Integer > hM = new HashMap < Integer , Integer > ( ) ; int dist_count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { if ( hM . get ( arr [ i ] ) == null ) { hM . put ( arr [ i ] , 1 ) ; dist_count ++ ; } else { int count = hM . get ( arr [ i ] ) ; hM . put ( arr [ i ] , count + 1 ) ; } } int res = dist_count ; for ( int i = M ; i < arr . length ; i ++ ) { if ( hM . get ( arr [ i - M ] ) == 1 ) { hM . remove ( arr [ i - M ] ) ; dist_count -- ; } else { int count = hM . get ( arr [ i - M ] ) ; hM . put ( arr [ i - M ] , count - 1 ) ; } if ( hM . get ( arr [ i ] ) == null ) { hM . put ( arr [ i ] , 1 ) ; dist_count ++ ; } else { int count = hM . get ( arr [ i ] ) ; hM . put ( arr [ i ] , count + 1 ) ; } res = Math . max ( res , dist_count ) ; } return res ; }", "python": "def max_U_element ( a , N , M ) :\n    hsh = dict ( )\n    dist_count = 0\n    res = 0\n    for i in range ( M ) :\n        if ( arr [ i ] not in hsh . keys ( ) ) :\n            hsh [ a [ i ] ] = 1\n            dist_count += 1\n        else :\n            hsh [ a [ i ] ] += 1\n    res = dist_count\n    for i in range ( M , N ) :\n        if ( a [ i - M ] in hsh . keys ( ) and hsh [ a [ i - M ] ] == 1 ) :\n            del hsh [ a [ i - M ] ]\n            dist_count -= 1\n        else :\n            hsh [ a [ i - M ] ] -= 1\n        if ( a [ i ] not in hsh . keys ( ) ) :\n            hsh [ a [ i ] ] = 1\n            dist_count += 1\n        else :\n            hsh [ a [ i ] ] += 1\n        res = max ( res , dist_count )\n    return res\n"}
{"java": "private static final Comparator < int [ ] > COMPARATOR = new Comparator < int [ ] > ( ) { @ Override public int compare ( int [ ] o1 , int [ ] o2 ) { int result = - ( o1 [ 2 ] - o2 [ 2 ] ) ; if ( result == 0 ) { result = o1 [ 3 ] - o2 [ 3 ] ; if ( result == 0 ) { result = ( o1 [ 0 ] - o2 [ 0 ] ) ; } } return result ; } }", "python": "def pr ( i , u ) :\n    global total\n    print ( team [ i ] [ 0 ] )\n    total , affi [ u ] = total + 1 , affi [ u ] + 1\n"}
{"java": "static int countOnes ( int n ) { int count = 1 ; int rem = 1 ; while ( rem != 0 ) { rem = ( rem * 10 + 1 ) % n ; count ++ ; } return count ; }", "python": "def countOnes ( n ) :\n    count = 1 ;\n    rem = 1 ;\n    while ( rem != 0 ) :\n        rem = ( rem * 10 + 1 ) % n ;\n        count = count + 1 ;\n    return count ;\n"}
{"java": "public static boolean sort ( String f , String s ) { int i = 0 ; while ( i < f . length ( ) ) { if ( f . charAt ( i ) < s . charAt ( i ) ) return false ; else if ( f . charAt ( i ) > s . charAt ( i ) ) return true ; i ++ ; if ( i >= s . length ( ) ) return true ; } return false ; }", "python": "def judge_battle ( tcard : str , hcard : str ) -> str :\n    if tcard > hcard :\n        return ' win '\n    elif tcard == hcard :\n        return ' equal '\n    else :\n        return ' lose '\n"}
{"java": "static void pairwiseProduct ( int [ ] arr , int n ) { int prod = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { prod = arr [ i ] * arr [ i + 1 ] ; System . out . print ( prod + \" \u2581 \" ) ; } }", "python": "def pairwiseProduct ( arr , n ) :\n    prod = 1\n    for i in range ( n - 1 ) :\n        prod = arr [ i ] * arr [ i + 1 ]\n        print ( prod , end = \" \u2581 \" )\n"}
{"java": "static void countPairs ( int arr [ ] , int n , int k ) { int i , j , cnt = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( ( arr [ i ] - arr [ j ] + k ) % k == 0 ) cnt += 1 ; } } System . out . print ( cnt + \" \\n \" ) ; }", "python": "def countPairs ( arr , n , k ) :\n    cnt = 0 ;\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if ( ( arr [ i ] - arr [ j ] + k ) % k == 0 ) :\n                cnt += 1 ;\n    print ( cnt ) ;\n"}
{"java": "private static void solve ( Scanner scanner ) { int number = scanner . nextInt ( ) ; int [ ] arr = new int [ number ] ; for ( int i = 0 ; i < number ; i ++ ) { arr [ i ] = scanner . nextInt ( ) ; } int lo = 0 , hi = number - 1 ; System . out . println ( ) ; while ( lo < hi ) { System . out . print ( arr [ lo ++ ] + \" \u2581 \" ) ; System . out . print ( arr [ hi -- ] + \" \u2581 \" ) ; } if ( lo == hi ) System . out . print ( arr [ lo ] ) ; }", "python": "def solve ( n , b ) :\n    i = 0\n    j = n - 1\n    ans = [ ]\n    while i < j :\n        ans . append ( b [ i ] )\n        ans . append ( b [ j ] )\n        i += 1\n        j -= 1\n    if n % 2 == 1 :\n        ans . append ( b [ i ] )\n    return ans\n"}
{"java": "static int minimumChanges ( int arr [ ] , int n , int d ) { int maxFreq = - 1 ; HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int a0 = arr [ i ] - ( i ) * d ; if ( freq . containsKey ( a0 ) ) { freq . put ( a0 , freq . get ( a0 ) + 1 ) ; } else freq . put ( a0 , 1 ) ; if ( freq . get ( a0 ) > maxFreq ) maxFreq = freq . get ( a0 ) ; } return ( n - maxFreq ) ; }", "python": "def minimumChanges ( arr , n , d ) :\n    maxFreq = - 2147483648\n    freq = { }\n    for i in range ( n ) :\n        a0 = arr [ i ] - i * d\n        if a0 in freq :\n            freq [ a0 ] += 1\n        else :\n            freq [ a0 ] = 1\n        if freq [ a0 ] > maxFreq :\n            maxFreq = freq [ a0 ]\n    return ( n - maxFreq )\n"}
{"java": "static void find ( int n , int m , int p , int q [ ] [ ] ) { Vector < Integer > z = new Vector < Integer > ( ) ; int i ; for ( i = 0 ; i < p ; i ++ ) z . add ( q [ i ] [ 1 ] ) ; Collections . sort ( z ) ; System . out . print ( z . get ( z . size ( ) - 1 ) - z . get ( 0 ) ) ; }", "python": "def find ( n , m , p , q ) :\n    z = [ ]\n    for i in range ( p ) :\n        z . append ( q [ i ] [ 1 ] )\n    print ( max ( z ) - min ( z ) )\n"}
{"java": "static int Log2n ( int n ) { return ( n > 1 ) ? 1 + Log2n ( n / 2 ) : 0 ; }", "python": "def Log2n ( n ) :\n    return 1 + Log2n ( n / 2 ) if ( n > 1 ) else 0\n"}
{"java": "static double square ( double a ) { if ( a < 0 ) return - 1 ; double x = 0.464 * a ; return x ; }", "python": "def square ( a ) :\n    if ( a < 0 ) :\n        return - 1\n    x = 0.464 * a\n    return x\n"}
{"java": "static int getMinSum ( int arr [ ] , int n ) { int bits_count [ ] = new int [ MAX ] , max_bit = 0 , sum = 0 , ans = 0 ; for ( int d = 0 ; d < n ; d ++ ) { int e = arr [ d ] , f = 0 ; while ( e > 0 ) { int rem = e % 2 ; e = e / 2 ; if ( rem == 1 ) { bits_count [ f ] += rem ; } f ++ ; } max_bit = Math . max ( max_bit , f ) ; } for ( int d = 0 ; d < max_bit ; d ++ ) { int temp = ( int ) Math . pow ( 2 , d ) ; if ( bits_count [ d ] > n / 2 ) ans = ans + temp ; } for ( int d = 0 ; d < n ; d ++ ) { arr [ d ] = arr [ d ] ^ ans ; sum = sum + arr [ d ] ; } return sum ; }", "python": "def getMinSum ( arr , n ) :\n    bits_count = [ 0 ] * MAX\n    max_bit = 0 ; sum = 0 ; ans = 0 ;\n    for d in range ( n ) :\n        e = arr [ d ] ; f = 0 ;\n        while ( e > 0 ) :\n            rem = e % 2 ;\n            e = e // 2 ;\n            if ( rem == 1 ) :\n                bits_count [ f ] += rem ;\n            f += 1\n        max_bit = max ( max_bit , f ) ;\n    for d in range ( max_bit ) :\n        temp = pow ( 2 , d ) ;\n        if ( bits_count [ d ] > n // 2 ) :\n            ans = ans + temp ;\n    for d in range ( n ) :\n        arr [ d ] = arr [ d ] ^ ans ;\n        sum = sum + arr [ d ] ;\n    return sum\n"}
{"java": "static void printKPFNums ( int A , int B , int K ) { boolean prime [ ] = new boolean [ B + 1 ] ; Arrays . fill ( prime , true ) ; int p_factors [ ] = new int [ B + 1 ] ; Arrays . fill ( p_factors , 0 ) ; for ( int p = 2 ; p <= B ; p ++ ) if ( p_factors [ p ] == 0 ) for ( int i = p ; i <= B ; i += p ) p_factors [ i ] ++ ; for ( int i = A ; i <= B ; i ++ ) if ( p_factors [ i ] == K ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def printKPFNums ( A , B , K ) :\n    prime = [ True ] * ( B + 1 )\n    p_factors = [ 0 ] * ( B + 1 )\n    for p in range ( 2 , B + 1 ) :\n        if ( p_factors [ p ] == 0 ) :\n            for i in range ( p , B + 1 , p ) :\n                p_factors [ i ] = p_factors [ i ] + 1\n    for i in range ( A , B + 1 ) :\n        if ( p_factors [ i ] == K ) :\n            print ( i , end = \" \u2581 \" )\n"}
{"java": "static double average ( int arr [ ] , int n , int k ) { double total = 0 ; if ( 2 * k >= n ) return 0 ; Arrays . sort ( arr ) ; int start = k , end = n - k - 1 ; for ( int i = start ; i <= end ; i ++ ) total += arr [ i ] ; return ( total / ( n - 2 * k ) ) ; }", "python": "def average ( arr , n , k ) :\n    total = 0\n    if ( 2 * k >= n ) :\n        return 0\n    arr . sort ( )\n    start , end = k , n - k - 1\n    for i in range ( start , end + 1 ) :\n        total += arr [ i ]\n    return ( total / ( n - 2 * k ) )\n"}
{"java": "static boolean isAMultipleOf4 ( int n ) { if ( ( n & 3 ) == 0 ) return true ; return false ; }", "python": "def isAMultipleOf4 ( n ) :\n    if ( ( n & 3 ) == 0 ) :\n        return \" Yes \"\n    return \" No \"\n"}
{"java": "static long fun ( int marks [ ] , int n ) { long dp [ ] = new long [ n ] ; int temp ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( marks [ i ] > marks [ i + 1 ] ) { temp = i ; while ( true ) { if ( ( marks [ temp ] > marks [ temp + 1 ] ) && temp >= 0 ) { if ( dp [ temp ] > dp [ temp + 1 ] ) { temp -= 1 ; continue ; } else { dp [ temp ] = dp [ temp + 1 ] + 1 ; temp -= 1 ; } } else break ; } } else if ( marks [ i ] < marks [ i + 1 ] ) dp [ i + 1 ] = dp [ i ] + 1 ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += dp [ i ] ; return sum ; }", "python": "def fun ( marks , n ) :\n    dp = [ 1 for i in range ( 0 , n ) ]\n    for i in range ( 0 , n - 1 ) :\n        if marks [ i ] > marks [ i + 1 ] :\n            temp = i\n            while True :\n                if marks [ temp ] > marks [ temp + 1 ] and temp >= 0 :\n                    if dp [ temp ] > dp [ temp + 1 ] :\n                        temp -= 1\n                        continue\n                    else :\n                        dp [ temp ] = dp [ temp + 1 ] + 1\n                        temp -= 1\n                else :\n                    break\n        elif marks [ i ] < marks [ i + 1 ] :\n            dp [ i + 1 ] = dp [ i ] + 1\n    return ( sum ( dp ) )\n"}
{"java": "static void printPattern ( int n ) { int i , j ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j < 2 * n ; j ++ ) { if ( j == ( n - i + 1 ) || j == ( n + i - 1 ) ) { System . out . print ( \" * \u2581 \" ) ; } else if ( ( i >= 4 && i <= n - 4 ) && ( j == n - i + 4 || j == n + i - 4 ) ) { System . out . print ( \" * \u2581 \" ) ; } else if ( i == n || ( i == n - 4 && j >= n - ( n - 2 * 4 ) && j <= n + n - 2 * 4 ) ) { System . out . print ( \" * \u2581 \" ) ; } else { System . out . print ( \" \u2581 \" + \" \u2581 \" ) ; } } System . out . print ( \" \\n \" ) ; } }", "python": "def printPattern ( n ) :\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , 2 * n ) :\n            if ( j == ( n - i + 1 ) or j == ( n + i - 1 ) ) :\n                print ( \" * \u2581 \" , end = \" \" )\n            elif ( ( i >= 4 and i <= n - 4 ) and ( j == n - i + 4 or j == n + i - 4 ) ) :\n                print ( \" * \u2581 \" , end = \" \" )\n            elif ( i == n or ( i == n - 4 and j >= n - ( n - 2 * 4 ) and j <= n + n - 2 * 4 ) ) :\n                print ( \" * \u2581 \" , end = \" \" )\n            else :\n                print ( \" \u2581 \" + \" \u2581 \" , end = \" \" )\n        print ( )\n"}
{"java": "private static String decodeString ( int encodedStringLength , String encodedString ) { StringBuilder decodedString = new StringBuilder ( ) ; int smallAAscii = 96 ; for ( int i = 0 ; i < encodedStringLength ; i ++ ) { int currentInt = Character . getNumericValue ( encodedString . charAt ( i ) ) ; if ( currentInt >= 3 ) { char asciiString = ( char ) ( currentInt + smallAAscii ) ; decodedString . append ( asciiString ) ; } else { if ( i <= encodedStringLength - 3 && Character . getNumericValue ( encodedString . charAt ( i + 2 ) ) == 0 ) { if ( i + 2 == encodedStringLength - 1 || Character . getNumericValue ( encodedString . charAt ( i + 3 ) ) != 0 ) { int firstCharInt = Character . getNumericValue ( encodedString . charAt ( i ) ) ; int secondCharInt = Character . getNumericValue ( encodedString . charAt ( i + 1 ) ) ; String firstSecondString = String . valueOf ( firstCharInt ) + String . valueOf ( secondCharInt ) ; char asciiString = ( char ) ( Integer . parseInt ( firstSecondString ) + smallAAscii ) ; decodedString . append ( asciiString ) ; i += 2 ; } else { char asciiString = ( char ) ( currentInt + smallAAscii ) ; decodedString . append ( asciiString ) ; } } else { char asciiString = ( char ) ( currentInt + smallAAscii ) ; decodedString . append ( asciiString ) ; } } } return decodedString . toString ( ) ; }", "python": "def decode ( value ) :\n    return chr ( int ( value ) + 96 )\n"}
{"java": "static String minNum ( char num [ ] , int k ) { int len = num . length ; if ( len == 0 || k == 0 ) { String num_str = new String ( num ) ; return num_str ; } if ( len == 1 ) return \"0\" ; if ( num [ 0 ] != '1' ) { num [ 0 ] = '1' ; k -- ; } int i = 1 ; while ( k > 0 && i < len ) { if ( num [ i ] != '0' ) { num [ i ] = '0' ; k -- ; } i ++ ; } String num_str = new String ( num ) ; return num_str ; }", "python": "def minNum ( num , k ) :\n    len_ = len ( num )\n    if len_ == 0 or k == 0 :\n        return num\n    if len_ == 1 :\n        return \"0\"\n    if num [ 0 ] != '1' :\n        num = '1' + num [ 1 : ]\n        k -= 1\n    i = 1\n    while k > 0 and i < len_ :\n        if num [ i ] != '0' :\n            num = num [ : i ] + '0' + num [ i + 1 : ]\n            k -= 1\n        i += 1\n    return num\n"}
{"java": "static void isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; if ( sr * sr == x ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; }", "python": "def isPerfectSquare ( x ) :\n    sr = int ( sqrt ( x ) ) ;\n    if ( sr * sr == x ) :\n        print ( \" Yes \" ) ;\n    else :\n        print ( \" No \" ) ;\n"}
{"java": "static int printSum ( int a , int b ) { int res = 0 ; int temp1 = 0 , temp2 = 0 ; while ( a != 0 ) { temp1 = temp1 * 10 + ( a % 10 ) ; a /= 10 ; } a = temp1 ; while ( b != 0 ) { temp2 = temp2 * 10 + ( b % 10 ) ; b /= 10 ; } b = temp2 ; while ( a != 0 ) { int sum = ( a % 10 + b % 10 ) ; if ( sum / 10 == 0 ) { res = res * 10 + sum ; } else { temp1 = 0 ; while ( sum != 0 ) { temp1 = temp1 * 10 + ( sum % 10 ) ; sum /= 10 ; } sum = temp1 ; while ( sum != 0 ) { res = res * 10 + ( sum % 10 ) ; sum /= 10 ; } } a /= 10 ; b /= 10 ; } return res ; }", "python": "def printSum ( a , b ) :\n    res , temp1 , temp2 = 0 , 0 , 0\n    while a > 0 :\n        temp1 = temp1 * 10 + ( a % 10 )\n        a //= 10\n    a = temp1\n    while b > 0 :\n        temp2 = temp2 * 10 + ( b % 10 )\n        b //= 10\n    b = temp2\n    while a :\n        Sum = a % 10 + b % 10\n        if Sum // 10 == 0 :\n            res = res * 10 + Sum\n        else :\n            temp1 = 0\n            while Sum > 0 :\n                temp1 = temp1 * 10 + ( Sum % 10 )\n                Sum //= 10\n            Sum = temp1\n            while Sum > 0 :\n                res = res * 10 + ( Sum % 10 )\n                Sum //= 10\n        a //= 10\n        b //= 10\n    return res\n"}
{"java": "static boolean isSumOfPowersOfTwo ( int n ) { if ( n % 2 == 1 ) return false ; else return true ; }", "python": "def isSumOfPowersOfTwo ( n ) :\n    if n % 2 == 1 :\n        return False\n    else :\n        return True\n"}
{"java": "static int fib ( int n ) { int i = n - 1 ; int x = ( int ) ( ( Math . pow ( p , i ) - Math . pow ( q , i ) ) / ( p - q ) ) ; return x ; }", "python": "def fib ( n ) :\n    i = n - 1\n    x = ( p ** i - q ** i ) / ( p - q )\n    return int ( x )\n"}
{"java": "static void diagonalBoundarySum ( int arr [ ] [ ] ) { int requiredSum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( i == j || ( i + j ) == N - 1 ) { requiredSum += arr [ i ] [ j ] ; } else if ( i == 0 || j == 0 || i == N - 1 || j == N - 1 ) { requiredSum += arr [ i ] [ j ] ; } } } System . out . println ( requiredSum ) ; }", "python": "def diagonalBoundarySum ( arr ) :\n    requiredSum = 0 ;\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( i == j or ( i + j ) == N - 1 ) :\n                requiredSum += arr [ i ] [ j ] ;\n            elif ( i == 0 or j == 0 or i == N - 1 or j == N - 1 ) :\n                requiredSum += arr [ i ] [ j ] ;\n    print ( requiredSum ) ;\n"}
{"java": "static int slopeOfNum ( String num , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num . charAt ( i ) > num . charAt ( i - 1 ) && num . charAt ( i ) > num . charAt ( i + 1 ) ) slope ++ ; else if ( num . charAt ( i ) < num . charAt ( i - 1 ) && num . charAt ( i ) < num . charAt ( i + 1 ) ) slope ++ ; } return slope ; }", "python": "def slopeOfNum ( num , n ) :\n    slope = 0\n    for i in range ( 1 , n - 1 ) :\n        if ( num [ i ] > num [ i - 1 ] and num [ i ] > num [ i + 1 ] ) :\n            slope += 1\n        elif ( num [ i ] < num [ i - 1 ] and num [ i ] < num [ i + 1 ] ) :\n            slope += 1\n    return slope\n"}
{"java": "static float largestCube ( float r ) { if ( r < 0 ) return - 1 ; float a = ( 2 * r ) / ( float ) Math . sqrt ( 3 ) ; return a ; }", "python": "def largestCube ( r ) :\n    if ( r < 0 ) :\n        return - 1\n    a = ( 2 * r ) / sqrt ( 3 )\n    return a\n"}
{"java": "static String maxInt ( char str [ ] ) { for ( int i = 0 ; i < str . length ; i ++ ) { if ( str [ i ] < '5' ) { str [ i ] = ( char ) ( ( '9' - str [ i ] ) + '0' ) ; } } if ( str [ 0 ] == '0' ) str [ 0 ] = '9' ; String str2 = new String ( str ) ; return str2 ; }", "python": "def maxInt ( string ) :\n    string2 = \" \"\n    for i in range ( 0 , len ( string ) ) :\n        if ( string [ i ] < '5' ) :\n            string2 += str ( ( ord ( '9' ) - ord ( string [ i ] ) ) )\n        else :\n            string2 += str ( string [ i ] )\n    if ( string2 [ 0 ] == '0' ) :\n        string2 [ 0 ] = '9'\n    return string2\n"}
{"java": "static int getMinimumOps ( Vector < Integer > ar ) { int n = ar . size ( ) ; int small = Collections . min ( ar ) ; int large = Collections . max ( ar ) ; int [ ] [ ] dp = new int [ n ] [ large + 1 ] ; for ( int j = small ; j <= large ; j ++ ) { dp [ 0 ] [ j ] = Math . abs ( ar . get ( 0 ) - j ) ; } for ( int i = 1 ; i < n ; i ++ ) { int minimum = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { minimum = Math . min ( minimum , dp [ i - 1 ] [ j ] ) ; dp [ i ] [ j ] = minimum + Math . abs ( ar . get ( i ) - j ) ; } } int ans = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { ans = Math . min ( ans , dp [ n - 1 ] [ j ] ) ; } return ans ; }", "python": "def getMinimumOps ( ar ) :\n    n = len ( ar )\n    small = min ( ar )\n    large = max ( ar )\n    dp = [ [ 0 for i in range ( large + 1 ) ] for i in range ( n ) ]\n    for j in range ( small , large + 1 ) :\n        dp [ 0 ] [ j ] = abs ( ar [ 0 ] - j )\n    for i in range ( 1 , n ) :\n        minimum = 10 ** 9\n        for j in range ( small , large + 1 ) :\n            minimum = min ( minimum , dp [ i - 1 ] [ j ] )\n            dp [ i ] [ j ] = minimum + abs ( ar [ i ] - j )\n    ans = 10 ** 9\n    for j in range ( small , large + 1 ) :\n        ans = min ( ans , dp [ n - 1 ] [ j ] )\n    return ans\n"}
{"java": "static int uniqueRows ( int [ ] [ ] s , int m , int n ) { int i , j , count = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( s [ i ] == s [ j ] ) { count ++ ; break ; } } } if ( count >= 1 ) System . out . println ( \" No \" ) ; else System . out . println ( \" Yes \" ) ; return 0 ; }", "python": "def uniqueRows ( s , m , n ) :\n    i , j , count = 0 , 0 , 0\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if ( s [ i ] == s [ j ] ) :\n                count += 1\n                break\n    if ( count >= 1 ) :\n        print ( \" No \" )\n    else :\n        print ( \" Yes \" )\n"}
{"java": "static int minCost ( char [ ] s ) { boolean alphabets [ ] = new boolean [ 26 ] ; for ( int i = 0 ; i < s . length ; i ++ ) { alphabets [ ( int ) s [ i ] - 97 ] = true ; } int count = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( alphabets [ i ] ) { count ++ ; } } return count ; }", "python": "def minCost ( s ) :\n    alphabets = [ False for i in range ( 26 ) ]\n    for i in range ( len ( s ) ) :\n        alphabets [ ord ( s [ i ] ) - 97 ] = True\n    count = 0\n    for i in range ( 26 ) :\n        if ( alphabets [ i ] ) :\n            count += 1\n    return count\n"}
{"java": "static int findSum ( int [ ] arr , int n , int k , int l , int r ) { if ( ( l ) + ( n - 1 - r ) == k ) return arr [ r ] - arr [ l ] ; if ( vis [ l ] [ r ] == 1 ) return dp [ l ] [ r ] ; vis [ l ] [ r ] = 1 ; dp [ l ] [ r ] = Math . min ( findSum ( arr , n , k , l , r - 1 ) , findSum ( arr , n , k , l + 1 , r ) ) ; return dp [ l ] [ r ] ; }", "python": "def findSum ( arr , n , k , l , r ) :\n    if ( ( l ) + ( n - 1 - r ) == k ) :\n        return arr [ r ] - arr [ l ] ;\n    if ( vis [ l ] [ r ] ) :\n        return dp [ l ] [ r ] ;\n    vis [ l ] [ r ] = 1 ;\n    dp [ l ] [ r ] = min ( findSum ( arr , n , k , l , r - 1 ) , findSum ( arr , n , k , l + 1 , r ) ) ;\n    return dp [ l ] [ r ]\n"}
{"java": "static int MinCostTree ( int arr [ ] , int n ) { int ans = 0 ; Vector < Integer > st = new Vector < Integer > ( ) ; st . add ( Integer . MAX_VALUE ) ; for ( int i = 0 ; i < n ; i ++ ) { while ( st . get ( st . size ( ) - 1 ) <= arr [ i ] ) { int x = st . get ( st . size ( ) - 1 ) ; st . remove ( st . size ( ) - 1 ) ; ans += x * Math . min ( st . get ( st . size ( ) - 1 ) , arr [ i ] ) ; } st . add ( arr [ i ] ) ; } for ( int i = 2 ; i < st . size ( ) ; i ++ ) ans += st . get ( i ) * st . get ( i - 1 ) ; return ans ; }", "python": "def MinCostTree ( arr , n ) :\n    ans = 0\n    st = [ 2 ** 32 ]\n    for i in range ( n ) :\n        while ( st [ - 1 ] <= arr [ i ] ) :\n            x = st [ - 1 ]\n            st . pop ( )\n            ans += x * min ( st [ - 1 ] , arr [ i ] )\n        st . append ( arr [ i ] )\n    for i in range ( 2 , len ( st ) ) :\n        ans += st [ i ] * st [ i - 1 ]\n    return ans\n"}
{"java": "static long getSum ( int n , int d ) { long sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 10 == d ) sum += i ; } return sum ; }", "python": "def getSum ( n , d ) :\n    sum = 0 ;\n    for i in range ( n + 1 ) :\n        if ( i % 10 == d ) :\n            sum += i\n    return sum\n"}
{"java": "static char NthCharacter ( int n ) { String s = \" \" ; int c = 1 ; for ( int i = 1 ; ; i ++ ) { if ( c < 10 ) s += Integer . toString ( c ) ; else { String s1 = \" \" ; int dup = c ; while ( dup > 0 ) { s1 += Integer . toString ( dup % 10 ) ; dup /= 10 ; } StringBuilder temp = new StringBuilder ( ) ; temp . append ( s1 ) ; temp = temp . reverse ( ) ; s += temp ; } c ++ ; if ( s . length ( ) >= n ) { return s . charAt ( n - 1 ) ; } } }", "python": "def NthCharacter ( n ) :\n    s = \" \"\n    c = 1\n    while ( True ) :\n        if ( c < 10 ) :\n            s += chr ( 48 + c )\n        else :\n            s1 = \" \"\n            dup = c\n            while ( dup > 0 ) :\n                s1 += chr ( ( dup % 10 ) + 48 )\n                dup //= 10\n            s1 = \" \" . join ( reversed ( s1 ) )\n            s += s1\n        c += 1\n        if ( len ( s ) >= n ) :\n            return s [ n - 1 ]\n"}
{"java": "static int maxEvenLenSum ( int arr [ ] , int n ) { if ( n < 2 ) return 0 ; int [ ] dp = new int [ n ] ; dp [ n - 1 ] = 0 ; dp [ n - 2 ] = arr [ n - 2 ] + arr [ n - 1 ] ; for ( int i = n - 3 ; i >= 0 ; i -- ) { dp [ i ] = arr [ i ] + arr [ i + 1 ] ; if ( dp [ i + 2 ] > 0 ) dp [ i ] += dp [ i + 2 ] ; } int maxSum = Arrays . stream ( dp ) . max ( ) . getAsInt ( ) ; return maxSum ; }", "python": "def maxEvenLenSum ( arr , n ) :\n    if ( n < 2 ) :\n        return 0\n    dp = [ 0 for i in range ( n ) ]\n    dp [ n - 1 ] = 0\n    dp [ n - 2 ] = arr [ n - 2 ] + arr [ n - 1 ]\n    for i in range ( n - 3 , - 1 , - 1 ) :\n        dp [ i ] = arr [ i ] + arr [ i + 1 ]\n        if ( dp [ i + 2 ] > 0 ) :\n            dp [ i ] += dp [ i + 2 ]\n    maxSum = max ( dp )\n    return maxSum\n"}
{"java": "public static int findMaxRec ( int A [ ] , int n ) { if ( n == 1 ) return A [ 0 ] ; return Math . max ( A [ n - 1 ] , findMaxRec ( A , n - 1 ) ) ; }", "python": "def findMaxRec ( A , n ) :\n    if ( n == 1 ) :\n        return A [ 0 ]\n    return max ( A [ n - 1 ] , findMaxRec ( A , n - 1 ) )\n"}
{"java": "public static double area_cicumscribed ( double c ) { return ( c * c * ( PI / 4 ) ) ; }", "python": "def area_cicumscribed ( c ) :\n    return ( c * c * ( PI / 4 ) )\n"}
{"java": "static float circlearea ( float R ) { if ( R < 0 ) return - 1 ; float a = ( float ) ( ( 3.14 * R * R ) / 4 ) ; return a ; }", "python": "def circlearea ( R ) :\n    if ( R < 0 ) :\n        return - 1 ;\n    a = ( 3.14 * R * R ) / 4 ;\n    return a ;\n"}
{"java": "static long countMaxIntersect ( long n ) { return ( n ) * ( n - 1 ) / 2 ; }", "python": "def countMaxIntersect ( n ) :\n    return int ( n * ( n - 1 ) / 2 )\n"}
{"java": "static long findNum ( long x ) { for ( int i = 0 ; i < NumUnsignBits - 1 ; i ++ ) { if ( ( ( x >> i ) & 1 ) != ( ( x >> ( i + 1 ) ) & 1 ) ) { x ^= ( 1 << i ) | ( 1 << ( i + 1 ) ) ; return x ; } } return Long . MIN_VALUE ; }", "python": "def findNum ( x ) :\n    for i in range ( NumUnsignBits - 1 ) :\n        if ( ( ( x >> i ) & 1 ) != ( ( x >> ( i + 1 ) ) & 1 ) ) :\n            x ^= ( 1 << i ) | ( 1 << ( i + 1 ) ) ;\n            return x ;\n"}
{"java": "public static ArrayList < Integer > factoriseopt ( int n ) { ArrayList < Integer > ans = new ArrayList < > ( ) ; if ( n == 1 ) { ans . add ( 1 ) ; return ans ; } for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { int cnt = 0 ; while ( n % i == 0 ) { cnt ++ ; n = n / i ; } ans . add ( i ) ; } } if ( n != 1 ) ans . add ( n ) ; return ans ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    a = list ( map ( int , input ( ) . split ( \" \u2581 \" ) ) )\n    N = int ( 10e5 + 5 )\n    dp = [ 0 ] * N\n    fac = [ [ ] for _ in range ( N ) ]\n    seive = [ 1 ] * N\n    for i in range ( 2 , N ) :\n        if seive [ i ] :\n            for j in range ( i , N , i ) :\n                seive [ j ] = 0\n                fac [ j ] . append ( i )\n    ans = 1\n    for i in range ( n ) :\n        z = 0\n        for x in fac [ a [ i ] ] :\n            z = max ( dp [ x ] , z )\n        z += 1\n        ans = max ( ans , z )\n        for x in fac [ a [ i ] ] :\n            dp [ x ] = max ( z , dp [ x ] )\n    print ( ans )\n    return\n"}
{"java": "static boolean isPalindrome ( int n ) { if ( n % 11 == 0 ) { return true ; } return false ; }", "python": "def isPalindrome ( n ) :\n    if n % 11 == 0 :\n        return True\n    return False\n"}
{"java": "static int center_nonadecagon_num ( int n ) { return ( 19 * n * n - 19 * n + 2 ) / 2 ; }", "python": "def center_nonadecagon_num ( n ) :\n    return ( 19 * n * n - 19 * n + 2 ) // 2\n"}
{"java": "static int dfw ( int [ ] [ ] dp , int idx , int amount ) { if ( amount == 0 ) { return 0 ; } if ( idx < 0 ) { return Integer . MAX_VALUE / 10 ; } if ( dp [ idx ] [ amount ] != 0 ) { return dp [ idx ] [ amount ] ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i * coins [ idx ] <= amount ; i ++ ) { min = Math . min ( min , dfw ( dp , idx - 1 , amount - i * coins [ idx ] ) + i ) ; } dp [ idx ] [ amount ] = min ; return min ; }", "python": "def I ( ) : return int ( input ( ) )\ndef F ( ) : return float ( input ( ) )\ndef SS ( ) : return input ( )\ndef LI ( ) : return [ int ( x ) for x in input ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in input ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in input ( ) . split ( ) ]\ndef LSS ( ) : return input ( ) . split ( )\ndef resolve ( ) :\n    n = I ( )\n    ans = 0\n    for i in ( 25 , 10 , 5 , 1 ) :\n        ans += n // i\n        n %= i\n    print ( ans )\n"}
{"java": "static int totalSumDivisibleByNum ( int digit , int number ) { int firstnum = ( int ) Math . pow ( 10 , digit - 1 ) ; int lastnum = ( int ) Math . pow ( 10 , digit ) ; firstnum = ( firstnum - firstnum % number ) + number ; lastnum = ( lastnum - lastnum % number ) ; int count = ( ( lastnum - firstnum ) / number + 1 ) ; return ( ( lastnum + firstnum ) * count ) / 2 ; }", "python": "def totalSumDivisibleByNum ( digit , number ) :\n    firstnum = pow ( 10 , digit - 1 )\n    lastnum = pow ( 10 , digit )\n    firstnum = ( firstnum - firstnum % number ) + number\n    lastnum = ( lastnum - lastnum % number )\n    count = ( ( lastnum - firstnum ) / number + 1 )\n    return int ( ( ( lastnum + firstnum ) * count ) / 2 )\n"}
{"java": "static long sumOfLastDig ( long n , long m ) { long sum = 0 , k ; k = n / m ; long [ ] arr = new long [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } long rem = k % 10 ; long ans = ( k / 10 ) * sum ; for ( int i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; }", "python": "def sumOfLastDig ( n , m ) :\n    sum = 0 ;\n    k = n // m ;\n    arr = [ 0 ] * 10 ;\n    for i in range ( 10 ) :\n        arr [ i ] = m * ( i + 1 ) % 10 ;\n        sum += arr [ i ] ;\n    rem = k % 10 ;\n    ans = ( k // 10 ) * sum ;\n    for i in range ( rem ) :\n        ans += arr [ i ] ;\n    return ans ;\n"}
{"java": "public static void countFreq ( int arr [ ] , int n ) { boolean visited [ ] = new boolean [ n ] ; Arrays . fill ( visited , false ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ i ] == true ) continue ; int count = 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { visited [ j ] = true ; count ++ ; } } System . out . println ( arr [ i ] + \" \u2581 \" + count ) ; } }", "python": "def countFreq ( arr , n ) :\n    visited = [ False for i in range ( n ) ]\n    for i in range ( n ) :\n        if ( visited [ i ] == True ) :\n            continue\n        count = 1\n        for j in range ( i + 1 , n , 1 ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                visited [ j ] = True\n                count += 1\n        print ( arr [ i ] , count )\n"}
{"java": "static int magicIndex ( int arr [ ] , int start , int end ) { if ( start > end ) return - 1 ; int midIndex = ( start + end ) / 2 ; int midValue = arr [ midIndex ] ; if ( midIndex == midValue ) return midIndex ; int left = magicIndex ( arr , start , Math . min ( midValue , midIndex - 1 ) ) ; if ( left >= 0 ) return left ; return magicIndex ( arr , Math . max ( midValue , midIndex + 1 ) , end ) ; }", "python": "def magicIndex ( arr , start , end ) :\n    if ( start > end ) :\n        return - 1\n    midIndex = int ( ( start + end ) / 2 )\n    midValue = arr [ midIndex ]\n    if ( midIndex == midValue ) :\n        return midIndex\n    left = magicIndex ( arr , start , min ( midValue , midIndex - 1 ) )\n    if ( left >= 0 ) :\n        return left\n    return magicIndex ( arr , max ( midValue , midIndex + 1 ) , end )\n"}
{"java": "static boolean canBecomeEmpty ( String str , String sub_str ) { while ( str . length ( ) > 0 ) { int idx = str . indexOf ( sub_str ) ; if ( idx == - 1 ) { break ; } str = str . replaceFirst ( sub_str , \" \" ) ; } return ( str . length ( ) == 0 ) ; }", "python": "def canBecomeEmpty ( string , sub_str ) :\n    while len ( string ) > 0 :\n        idx = string . find ( sub_str )\n        if idx == - 1 :\n            break\n        string = string . replace ( sub_str , \" \" , 1 )\n    return ( len ( string ) == 0 )\n"}
{"java": "static int firstDigit ( int x ) { while ( x >= 10 ) x = x / 10 ; return x ; }", "python": "def firstDigit ( x ) :\n    while ( x >= 10 ) :\n        x = x // 10\n    return x\n"}
{"java": "static void doit ( String [ ] args , InputStream in , PrintStream out ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ; String line = null ; while ( ( line = reader . readLine ( ) ) != null ) { if ( line . isEmpty ( ) ) { continue ; } String [ ] values = line . split ( \" , \" ) ; double x1 = Double . parseDouble ( values [ 0 ] ) ; double y1 = Double . parseDouble ( values [ 1 ] ) ; double x2 = Double . parseDouble ( values [ 2 ] ) ; double y2 = Double . parseDouble ( values [ 3 ] ) ; double xq = Double . parseDouble ( values [ 4 ] ) ; double yq = Double . parseDouble ( values [ 5 ] ) ; double xr = - xq ; double yr = yq ; if ( x1 != x2 ) { double a = ( y2 - y1 ) / ( x2 - x1 ) ; xr = - 2.0 * a / ( 1 + a * a ) * ( y1 - yq - a * ( x1 - xq ) ) + xq ; yr = 2.0 / ( 1 + a * a ) * ( y1 - yq - a * ( x1 - xq ) ) + yq ; } out . println ( xr + \" \u2581 \" + yr ) ; } }", "python": "def symmetric_point ( x1 , y1 , x2 , y2 , xq , yq ) :\n    rx = x2 - x1\n    ry = y2 - y1\n    det = - rx ** 2 - ry ** 2\n    det_s = rx * ( yq - y1 ) - ry * ( xq - x1 )\n    s = det_s / det\n    xr = xq - 2 * s * ry\n    yr = yq + 2 * s * rx\n    return xr , yr\n"}
{"java": "static void findPoint ( int x1 , int y1 , int x2 , int y2 ) { System . out . println ( \" ( \" + ( int ) ( 2 * x2 - x1 ) + \" , \" + ( int ) ( 2 * y2 - y1 ) + \" \u2581 ) \" ) ; }", "python": "def findPoint ( x1 , y1 , x2 , y2 ) :\n    print ( \" ( \" , 2 * x2 - x1 , \" , \" , 2 * y2 - y1 , \" ) \" ) ;\n"}
{"java": "static int countNum ( int N , int K ) { int [ ] sumPF = new int [ MAX ] ; for ( int i = 2 ; i < N ; i ++ ) { if ( sumPF [ i ] == 0 ) { for ( int j = i ; j < N ; j += i ) { sumPF [ j ] += i ; } } } int count = 0 ; for ( int i = 2 ; i < N ; i ++ ) { if ( sumPF [ i ] == K ) count ++ ; } return count ; }", "python": "def countNum ( N , K ) :\n    sumPF = [ 0 ] * MAX ;\n    for i in range ( 2 , N ) :\n        if ( sumPF [ i ] == 0 ) :\n            for j in range ( i , N , i ) :\n                sumPF [ j ] += i ;\n    count = 0 ;\n    for i in range ( 2 , N ) :\n        if ( sumPF [ i ] == K ) :\n            count += 1 ;\n    return count ;\n"}
{"java": "static int binarySearchCount ( int arr [ ] , int n , int key ) { int left = 0 , right = n ; int mid = 0 ; while ( left < right ) { mid = ( right + left ) >> 1 ; if ( arr [ mid ] == key ) { while ( mid + 1 < n && arr [ mid + 1 ] == key ) mid ++ ; break ; } else if ( arr [ mid ] > key ) right = mid ; else left = mid + 1 ; } while ( mid > - 1 && arr [ mid ] > key ) mid -- ; return mid + 1 ; }", "python": "def binarySearchCount ( arr , n , key ) :\n    left = 0\n    right = n\n    mid = 0\n    while ( left < right ) :\n        mid = ( right + left ) // 2\n        if ( arr [ mid ] == key ) :\n            while ( mid + 1 < n and arr [ mid + 1 ] == key ) :\n                mid += 1\n            break\n        elif ( arr [ mid ] > key ) :\n            right = mid\n        else :\n            left = mid + 1\n    while ( mid > - 1 and arr [ mid ] > key ) :\n        mid -= 1\n    return mid + 1\n"}
{"java": "static String encryptString ( String str , int n ) { int i = 0 , cnt = 0 ; String encryptedStr = \" \" ; while ( i < n ) { cnt = i + 1 ; while ( cnt -- > 0 ) encryptedStr += str . charAt ( i ) ; i ++ ; } return encryptedStr ; }", "python": "def encryptString ( string , n ) :\n    i , cnt = 0 , 0\n    encryptedStr = \" \"\n    while i < n :\n        cnt = i + 1\n        while cnt > 0 :\n            encryptedStr += string [ i ]\n            cnt -= 1\n        i += 1\n    return encryptedStr\n"}
{"java": "public static void SplitAndAdd ( int [ ] A , int length , int rotation ) { int [ ] tmp = new int [ length * 2 ] ; System . arraycopy ( A , 0 , tmp , 0 , length ) ; System . arraycopy ( A , 0 , tmp , length , length ) ; for ( int i = rotation ; i < rotation + length ; i ++ ) A [ i - rotation ] = tmp [ i ] ; }", "python": "def SplitAndAdd ( A , length , rotation ) :\n    tmp = [ 0 for i in range ( length * 2 ) ]\n    for i in range ( length ) :\n        tmp [ i ] = A [ i ]\n        tmp [ i + length ] = A [ i ]\n    for i in range ( rotation , rotation + length , 1 ) :\n        A [ i - rotation ] = tmp [ i ] ;\n"}
{"java": "public static long getFinalElement ( long n ) { long finalNum ; for ( finalNum = 2 ; finalNum * 2 <= n ; finalNum *= 2 ) ; return finalNum ; }", "python": "def getFinalElement ( n ) :\n    finalNum = 2\n    while finalNum * 2 <= n :\n        finalNum *= 2\n    return finalNum\n"}
{"java": "public static void d ( String message ) { if ( debug ) { System . out . println ( message ) ; } }", "python": "def main ( ) :\n    a = ii ( )\n    s = input ( )\n    ans = s if a >= 3200 else \" red \"\n    print ( ans )\n"}
{"java": "static int missingNum ( int arr [ ] , int n ) { List < Integer > list = new ArrayList < > ( arr . length ) ; for ( int i : arr ) { list . add ( Integer . valueOf ( i ) ) ; } int minvalue = Collections . min ( list ) ; ; int xornum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { xornum ^= ( minvalue ) ^ arr [ i ] ; minvalue ++ ; } return xornum ^ minvalue ; }", "python": "def missingNum ( arr , n ) :\n    minvalue = min ( arr )\n    xornum = 0\n    for i in range ( 0 , n ) :\n        xornum ^= ( minvalue ) ^ arr [ i ]\n        minvalue = minvalue + 1\n    return xornum ^ minvalue\n"}
{"java": "static String removeOddFrequencyCharacters ( String s ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char p = s . charAt ( i ) ; Integer count = m . get ( p ) ; if ( count == null ) { count = 0 ; m . put ( p , 1 ) ; } else m . put ( p , count + 1 ) ; } String new_string = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ( m . get ( s . charAt ( i ) ) & 1 ) == 1 ) continue ; new_string += s . charAt ( i ) ; } return new_string ; }", "python": "def removeOddFrequencyCharacters ( s ) :\n    m = dict ( )\n    for i in s :\n        m [ i ] = m . get ( i , 0 ) + 1\n    new_s = \" \"\n    for i in s :\n        if ( m [ i ] & 1 ) :\n            continue\n        new_s += i\n    return new_s\n"}
{"java": "static boolean validateStackSequence ( int pushed [ ] , int popped [ ] , int len ) { int j = 0 ; Stack < Integer > st = new Stack < > ( ) ; for ( int i = 0 ; i < len ; i ++ ) { st . push ( pushed [ i ] ) ; while ( ! st . empty ( ) && j < len && st . peek ( ) == popped [ j ] ) { st . pop ( ) ; j ++ ; } } return j == len ; }", "python": "def validateStackSequence ( pushed , popped ) :\n    j = 0\n    stack = [ ]\n    for x in pushed :\n        stack . append ( x )\n        while stack and j < len ( popped ) and stack [ - 1 ] == popped [ j ] :\n            stack . pop ( )\n            j = j + 1\n    return j == len ( popped )\n"}
{"java": "static int totalways ( int [ ] arr , int n ) { HashMap < Integer , Integer > cnt = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt . containsKey ( arr [ i ] ) ) { cnt . put ( arr [ i ] , cnt . get ( arr [ i ] ) + 1 ) ; } else { cnt . put ( arr [ i ] , 1 ) ; } } if ( n % 2 == 1 ) { int start = 0 , endd = n - 1 ; for ( int i = start ; i <= endd ; i = i + 2 ) { if ( i == 0 ) { if ( cnt . get ( i ) != 1 ) { return 0 ; } } else { if ( cnt . get ( i ) != 2 ) { return 0 ; } } } int ways = 1 ; start = 2 ; endd = n - 1 ; for ( int i = start ; i <= endd ; i = i + 2 ) { ways = ways * 2 ; } return ways ; } else if ( n % 2 == 0 ) { int start = 1 , endd = n - 1 ; for ( int i = 1 ; i <= endd ; i = i + 2 ) { if ( cnt . get ( i ) != 2 ) return 0 ; } int ways = 1 ; for ( int i = start ; i <= endd ; i = i + 2 ) { ways = ways * 2 ; } return ways ; } return Integer . MIN_VALUE ; }", "python": "def totalways ( arr , n ) :\n    cnt = dict ( )\n    for i in range ( n ) :\n        cnt [ arr [ i ] ] = cnt . get ( arr [ i ] , 0 ) + 1\n    if ( n % 2 == 1 ) :\n        start , endd = 0 , n - 1\n        for i in range ( start , endd + 1 , 2 ) :\n            if ( i == 0 ) :\n                if ( cnt [ i ] != 1 ) :\n                    return 0\n            else :\n                if ( cnt [ i ] != 2 ) :\n                    return 0\n        ways = 1\n        start = 2\n        endd = n - 1\n        for i in range ( start , endd + 1 , 2 ) :\n            ways = ways * 2\n        return ways\n    elif ( n % 2 == 0 ) :\n        start = 1\n        endd = n - 1\n        for i in range ( 1 , endd + 1 , 2 ) :\n            if ( cnt [ i ] != 2 ) :\n                return 0\n        ways = 1\n        for i in range ( start , endd + 1 , 2 ) :\n            ways = ways * 2\n        return ways\n"}
{"java": "static int count_greater ( int arr [ ] , int n ) { int min = Integer . MAX_VALUE ; int counter = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > min ) { counter ++ ; } if ( arr [ i ] <= min ) { min = arr [ i ] ; } } return counter ; }", "python": "def count_greater ( arr , n ) :\n    min = sys . maxsize ;\n    counter = 0 ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( arr [ i ] > min ) :\n            counter += 1 ;\n        if ( arr [ i ] <= min ) :\n            min = arr [ i ] ;\n    return counter ;\n"}
{"java": "static void countPair ( int arr [ ] , int n , int k ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = ( arr [ i ] + k ) % k ; } int hash [ ] = new int [ k ] ; for ( int i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; } for ( int i = 0 ; i < k ; i ++ ) { cnt += ( hash [ i ] * ( hash [ i ] - 1 ) ) / 2 ; } System . out . print ( cnt + \" \\n \" ) ; }", "python": "def countPair ( arr , n , k ) :\n    cnt = 0 ;\n    for i in range ( n ) :\n        arr [ i ] = ( arr [ i ] + k ) % k ;\n    hash = [ 0 ] * k ;\n    for i in range ( n ) :\n        hash [ arr [ i ] ] += 1 ;\n    for i in range ( k ) :\n        cnt += ( hash [ i ] * ( hash [ i ] - 1 ) ) / 2 ;\n    print ( int ( cnt ) ) ;\n"}
{"java": "static Pair getMinMax ( int arr [ ] , int n ) { Pair minmax = new Pair ( ) ; int i ; if ( n % 2 == 0 ) { if ( arr [ 0 ] > arr [ 1 ] ) { minmax . max = arr [ 0 ] ; minmax . min = arr [ 1 ] ; } else { minmax . min = arr [ 0 ] ; minmax . max = arr [ 1 ] ; } i = 2 ; } else { minmax . min = arr [ 0 ] ; minmax . max = arr [ 0 ] ; i = 1 ; } while ( i < n - 1 ) { if ( arr [ i ] > arr [ i + 1 ] ) { if ( arr [ i ] > minmax . max ) { minmax . max = arr [ i ] ; } if ( arr [ i + 1 ] < minmax . min ) { minmax . min = arr [ i + 1 ] ; } } else { if ( arr [ i + 1 ] > minmax . max ) { minmax . max = arr [ i + 1 ] ; } if ( arr [ i ] < minmax . min ) { minmax . min = arr [ i ] ; } } i += 2 ; } return minmax ; }", "python": "def getMinMax ( arr ) :\n    n = len ( arr )\n    if ( n % 2 == 0 ) :\n        mx = max ( arr [ 0 ] , arr [ 1 ] )\n        mn = min ( arr [ 0 ] , arr [ 1 ] )\n        i = 2\n    else :\n        mx = mn = arr [ 0 ]\n        i = 1\n    while ( i < n - 1 ) :\n        if arr [ i ] < arr [ i + 1 ] :\n            mx = max ( mx , arr [ i + 1 ] )\n            mn = min ( mn , arr [ i ] )\n        else :\n            mx = max ( mx , arr [ i ] )\n            mn = min ( mn , arr [ i + 1 ] )\n        i += 2\n    return ( mx , mn )\n"}
{"java": "static int solve ( int [ ] array , int N ) { int [ ] [ ] pos = new int [ 5 ] [ 10000 ] ; int [ ] pref = new int [ 5 ] ; if ( array [ 0 ] == 0 ) { pref [ 0 ] = 1 ; pos [ 0 ] [ pos [ 0 ] . length - 1 ] = 0 ; } int ans = MAX_INT ; for ( int i = 1 ; i < N ; i ++ ) { if ( array [ i ] == 0 ) { pref [ 0 ] ++ ; pos [ 0 ] [ pos [ 0 ] . length - 1 ] = i ; } else { if ( pref [ array [ i ] - 1 ] > 0 ) { pref [ array [ i ] ] ++ ; pos [ array [ i ] ] [ pos [ array [ i ] ] . length - 1 ] = i ; if ( array [ i ] == 4 ) { int end = i ; int start = i ; for ( int j = 3 ; j >= 0 ; j -- ) { int s = 0 ; int e = pos [ j ] . length - 1 ; int temp = - 1 ; while ( s <= e ) { int m = ( s + e ) / 2 ; if ( pos [ j ] [ m ] <= start ) { temp = pos [ j ] [ m ] ; s = m + 1 ; } else e = m - 1 ; } start = temp ; } ans = Math . min ( ans , end - start + 1 ) ; } } } } return ans ; }", "python": "def solve ( Array , N ) :\n    pos = [ [ ] for i in range ( 5 ) ]\n    pref = [ 0 for i in range ( 5 ) ]\n    if ( Array [ 0 ] == 0 ) :\n        pref [ 0 ] = 1\n        pos [ 0 ] . append ( 0 )\n    ans = MAX_INT\n    for i in range ( N ) :\n        if ( Array [ i ] == 0 ) :\n            pref [ 0 ] += 1\n            pos [ 0 ] . append ( i )\n        else :\n            if ( pref [ Array [ i ] - 1 ] > 0 ) :\n                pref [ Array [ i ] ] += 1\n                pos [ Array [ i ] ] . append ( i )\n                if ( Array [ i ] == 4 ) :\n                    end = i\n                    start = i\n                    for j in range ( 3 , - 1 , - 1 ) :\n                        s = 0\n                        e = len ( pos [ j ] ) - 1\n                        temp = - 1\n                        while ( s <= e ) :\n                            m = ( s + e ) // 2\n                            if ( pos [ j ] [ m ] <= start ) :\n                                temp = pos [ j ] [ m ]\n                                s = m + 1\n                            else :\n                                e = m - 1\n                        start = temp\n                    ans = min ( ans , end - start + 1 )\n    return ans\n"}
{"java": "private static boolean isValidString ( String str , int n ) { int index = str . indexOf ( \" b \" ) ; if ( index == 0 ) return false ; while ( index != - 1 ) { if ( str . charAt ( index - 1 ) != ' a ' ) return false ; if ( index + 1 < n && str . charAt ( index + 1 ) != ' b ' ) return false ; if ( index + 2 < n && str . charAt ( index + 2 ) == ' b ' ) return false ; if ( index == n - 1 ) return false ; index = str . indexOf ( \" b \" , index + 2 ) ; } return true ; }", "python": "def isValidString ( str , n ) :\n    idx = str . find ( \" b \" )\n    if ( idx == 0 ) :\n        return False\n    while ( idx != - 1 ) :\n        if ( str [ idx - 1 ] != ' a ' ) :\n            return False\n        if ( idx + 1 < n and str [ idx + 1 ] != ' b ' ) :\n            return False\n        if ( idx + 2 < n and str [ idx + 2 ] == ' b ' ) :\n            return False\n        if ( idx == n - 1 ) :\n            return False\n        idx = str . find ( \" b \" , idx + 2 )\n    return True\n"}
{"java": "public static int countDivisors ( int N , int a , int b ) { int count1 = N / a ; int count2 = N / b ; int count3 = ( N / ( a * b ) ) ; return count1 + count2 - count3 ; }", "python": "def countDivisors ( N , a , b ) :\n    count1 = N // a\n    count2 = N // b\n    count3 = ( N // ( a * b ) )\n    return count1 + count2 - count3\n"}
{"java": "static int totalSum ( int a [ ] , int n ) { int i , sum = 0 , sum1 = 0 , j ; for ( i = 0 ; i < n ; i ++ ) { sum1 = 0 ; for ( j = i ; j < n ; j ++ ) { sum1 = ( sum1 | a [ j ] ) ; sum = sum + sum1 ; } } return sum ; }", "python": "def totalSum ( a , n ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum1 = 0 ;\n        for j in range ( i , n ) :\n            sum1 = ( sum1 | a [ j ] ) ;\n            sum = sum + sum1 ;\n    return sum ;\n"}
{"java": "static int steps ( int N , int M ) { if ( N == 1 ) return 0 ; else if ( N == 2 ) return M ; return 2 * M + ( N - 3 ) ; }", "python": "def steps ( N , M ) :\n    if ( N == 1 ) :\n        return 0\n    elif ( N == 2 ) :\n        return M\n    return 2 * M + ( N - 3 )\n"}
{"java": "static void doit ( String [ ] args , InputStream in , PrintStream out ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ; String line = null ; while ( ( line = reader . readLine ( ) ) != null && ! line . isEmpty ( ) ) { String [ ] values = line . split ( \" \u2581 \" ) ; int [ ] orders = new int [ 10 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { orders [ Integer . parseInt ( values [ i ] ) ] = i + 1 ; } values = reader . readLine ( ) . split ( \" \u2581 \" ) ; int hit = 0 ; int blow = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { int order = orders [ Integer . parseInt ( values [ i ] ) ] ; if ( order == i + 1 ) { hit ++ ; } else if ( order != 0 ) { blow ++ ; } } out . println ( hit + \" \u2581 \" + blow ) ; } }", "python": "def hit_and_blow ( A , B ) :\n    hit , blow = 0 , 0\n    for k in range ( 4 ) :\n        if A [ k ] == B [ k ] :\n            hit += 1\n        elif A [ k ] in B :\n            blow += 1\n    return hit , blow\n"}
{"java": "static void lowerWythoff ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) / 2.0 ; for ( int i = 1 ; i <= n ; i ++ ) { double ans = Math . floor ( i * phi ) ; System . out . print ( ( int ) ans ) ; if ( i != n ) System . out . print ( \" \u2581 , \u2581 \" ) ; } }", "python": "def lowerWythoff ( n ) :\n    phi = ( 1 + sqrt ( 5 ) ) / 2 ;\n    for i in range ( 1 , n + 1 ) :\n        ans = floor ( i * phi ) ;\n        print ( ans , end = \" \" ) ;\n        if ( i != n ) :\n            print ( \" , \u2581 \" , end = \" \" ) ;\n"}
{"java": "static int countIndices ( int arr [ ] , int n ) { int cnt = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < arr [ i ] ) { max = arr [ i ] ; cnt ++ ; } } return cnt ; }", "python": "def countIndices ( arr , n ) :\n    cnt = 0 ;\n    max = 0 ;\n    for i in range ( n ) :\n        if ( max < arr [ i ] ) :\n            max = arr [ i ] ;\n            cnt += 1 ;\n    return cnt ;\n"}
{"java": "public static void gcdLength1511B ( ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; System . out . println ( ( int ) Math . pow ( 10 , a - 1 ) + ( int ) Math . pow ( 10 , c - 1 ) + \" \u2581 \" + ( int ) Math . pow ( 10 , b - 1 ) ) ; } }", "python": "def solve ( ) :\n    a , b , c = map ( int , input ( ) . split ( ) )\n    cnt1 , cnt2 = a - ( c - 1 ) , b - ( c - 1 )\n    gcd = 10 ** ( c - 1 )\n    X = Y = 1\n    while len ( str ( X ) ) < cnt1 :\n        X *= 2\n    while len ( str ( Y ) ) < cnt2 :\n        Y *= 3\n    return X * gcd , Y * gcd\n"}
{"java": "static int minflip ( int [ ] arr1 , int [ ] arr2 , int [ ] arr3 , int p , int q , int n ) { int flip = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr1 [ i ] > 0 ^ arr2 [ i ] > 0 != arr3 [ i ] > 0 ) flip ++ ; return ( flip <= p + q ) ? flip : - 1 ; }", "python": "def minflip ( arr1 , arr2 , arr3 , p , q , n ) :\n    flip = 0\n    for i in range ( 0 , n ) :\n        if ( arr1 [ i ] ^ arr2 [ i ] != arr3 [ i ] ) :\n            flip += 1\n    return flip if ( flip <= p + q ) else - 1\n"}
{"java": "static void mySort ( Integer [ ] arr ) { int n = arr . length ; Arrays . sort ( arr , 0 , n / 2 ) ; Arrays . sort ( arr , n / 2 , n , Collections . reverseOrder ( ) ) ; }", "python": "def mySort ( arr , n ) :\n    arr1 = arr [ : n // 2 ]\n    arr2 = arr [ n // 2 : ]\n    arr1 . sort ( )\n    arr2 . sort ( reverse = True )\n    return arr1 + arr2\n"}
{"java": "public static void findAllFactor ( int [ ] [ ] div , int n ) { int divCnt [ ] = new int [ n + 1 ] ; int ptr [ ] = new int [ n + 1 ] ; for ( int i = n ; i >= 1 ; -- i ) { for ( int j = i ; j <= n ; j += i ) divCnt [ j ] ++ ; } for ( int i = 1 ; i <= n ; ++ i ) div [ i ] = new int [ divCnt [ i ] ] ; for ( int i = n ; i >= 1 ; -- i ) { for ( int j = i ; j <= n ; j += i ) div [ j ] [ ptr [ j ] ++ ] = i ; } }", "python": "def solve ( a , b , c , d ) :\n    dc = { }\n    for i in [ a , b , c , d ] :\n        dc [ i ] = len ( i [ 2 : ] )\n    ans = [ ]\n    if ( dc [ a ] >= 2 * dc [ b ] and dc [ a ] >= 2 * dc [ c ] and dc [ a ] >= 2 * dc [ d ] ) or ( 2 * dc [ a ] <= dc [ b ] and 2 * dc [ a ] <= dc [ c ] and 2 * dc [ a ] <= dc [ d ] ) :\n        ans . append ( a )\n    if ( dc [ b ] >= 2 * dc [ a ] and dc [ b ] >= 2 * dc [ c ] and dc [ b ] >= 2 * dc [ d ] ) or ( 2 * dc [ b ] <= dc [ a ] and 2 * dc [ b ] <= dc [ c ] and 2 * dc [ b ] <= dc [ d ] ) :\n        ans . append ( b )\n    if ( dc [ c ] >= 2 * dc [ b ] and dc [ c ] >= 2 * dc [ a ] and dc [ c ] >= 2 * dc [ d ] ) or ( 2 * dc [ c ] <= dc [ b ] and 2 * dc [ c ] <= dc [ a ] and 2 * dc [ c ] <= dc [ d ] ) :\n        ans . append ( c )\n    if ( dc [ d ] >= 2 * dc [ b ] and dc [ d ] >= 2 * dc [ c ] and dc [ d ] >= 2 * dc [ a ] ) or ( 2 * dc [ d ] <= dc [ b ] and 2 * dc [ d ] <= dc [ c ] and 2 * dc [ d ] <= dc [ a ] ) :\n        ans . append ( d )\n    if len ( ans ) == 1 :\n        return ans [ 0 ] [ 0 ]\n    return ' C '\n"}
{"java": "static void generateSequence ( int n , int g ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( i * g + \" \u2581 \" ) ; ; }", "python": "def generateSequence ( n , g ) :\n    for i in range ( 1 , n + 1 ) :\n        print ( i * g , end = \" \u2581 \" )\n"}
{"java": "static int cntWays ( int arr [ ] , int n ) { if ( n == 1 ) { return 0 ; } int tot_sum = 0 , sum = 0 , ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tot_sum += arr [ i ] ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; if ( sum == tot_sum / 2 ) { ans ++ ; } } return ans ; }", "python": "def cntWays ( arr , n ) :\n    if ( n == 1 ) :\n        return 0 ;\n    tot_sum = 0 ; sum = 0 ; ans = 0 ;\n    for i in range ( 0 , n ) :\n        tot_sum += arr [ i ] ;\n    for i in range ( 0 , n - 1 ) :\n        sum += arr [ i ] ;\n        if ( sum == tot_sum / 2 ) :\n            ans += 1 ;\n    return ans ;\n"}
{"java": "public static void cityDay1199A ( ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int x = scan . nextInt ( ) ; int y = scan . nextInt ( ) ; Boolean isNotsoRainyDay = true ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { isNotsoRainyDay = true ; for ( int j = i + 1 ; j <= i + y && j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { isNotsoRainyDay = false ; break ; } } for ( int k = i - 1 ; k >= i - x && k >= 0 && isNotsoRainyDay ; k -- ) { if ( a [ i ] > a [ k ] ) { isNotsoRainyDay = false ; break ; } } if ( isNotsoRainyDay ) { System . out . println ( i + 1 ) ; break ; } } }", "python": "def _input ( ) : return map ( int , input ( ) . split ( ) )\nn , x , y = _input ( )\nlst = list ( _input ( ) )\ni = 0\nwhile i < n :\n    check = True\n    j = i + 1\n    while j < n and j < i + 1 + y :\n        if lst [ j ] < lst [ i ] : check = False ; break\n        j += 1\n    if check == True :\n        j = i - 1\n        while j >= 0 and j > i - 1 - y :\n            if lst [ j ] < lst [ i ] : check = False ; break\n            j -= 1\n        if check == True : print ( i + 1 ) ; exit ( )\n    i += 1\n"}
{"java": "static int countSubsets ( int a [ ] , int n ) { int answer = 0 ; for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { int bitwiseAND = - 1 ; int bitwiseOR = 0 ; int bitwiseXOR = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) == 0 ) { if ( bitwiseAND == - 1 ) bitwiseAND = a [ j ] ; else bitwiseAND &= a [ j ] ; bitwiseOR |= a [ j ] ; bitwiseXOR ^= a [ j ] ; } } if ( bitwiseAND == bitwiseOR && bitwiseOR == bitwiseXOR ) answer = ( answer + 1 ) % mod ; } return answer ; }", "python": "def countSubsets ( a , n ) :\n    answer = 0 ;\n    for i in range ( 1 << n ) :\n        bitwiseAND = - 1 ;\n        bitwiseOR = 0 ;\n        bitwiseXOR = 0 ;\n        for j in range ( n ) :\n            if ( i & ( 1 << j ) ) :\n                if ( bitwiseAND == - 1 ) :\n                    bitwiseAND = a [ j ] ;\n                else :\n                    bitwiseAND &= a [ j ] ;\n                bitwiseOR |= a [ j ] ;\n                bitwiseXOR ^= a [ j ] ;\n        if ( bitwiseAND == bitwiseOR and bitwiseOR == bitwiseXOR ) :\n            answer = ( answer + 1 ) % mod ;\n    return answer ;\n"}
{"java": "static boolean areElementsContiguous ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] > 1 ) return false ; return true ; }", "python": "def areElementsContiguous ( arr , n ) :\n    arr . sort ( )\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] - arr [ i - 1 ] > 1 ) :\n            return 0\n    return 1\n"}
{"java": "static void findMax ( int [ ] a , int n ) { int dp [ ] [ ] = new int [ n ] [ 2 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < 2 ; j ++ ) dp [ i ] [ j ] = 0 ; dp [ 0 ] [ 0 ] = a [ 0 ] + a [ 1 ] ; dp [ 0 ] [ 1 ] = a [ 0 ] * a [ 1 ] ; for ( i = 1 ; i <= n - 2 ; i ++ ) { dp [ i ] [ 0 ] = Math . max ( dp [ i - 1 ] [ 0 ] , dp [ i - 1 ] [ 1 ] ) + a [ i + 1 ] ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] - a [ i ] + a [ i ] * a [ i + 1 ] ; } System . out . println ( Math . max ( dp [ n - 2 ] [ 0 ] , dp [ n - 2 ] [ 1 ] ) ) ; }", "python": "def findMax ( a , n ) :\n    dp = np . zeros ( ( n , 2 ) ) ;\n    dp [ 0 ] [ 0 ] = a [ 0 ] + a [ 1 ] ;\n    dp [ 0 ] [ 1 ] = a [ 0 ] * a [ 1 ] ;\n    for i in range ( 1 , n - 1 ) :\n        dp [ i ] [ 0 ] = max ( dp [ i - 1 ] [ 0 ] , dp [ i - 1 ] [ 1 ] ) + a [ i + 1 ] ;\n        dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] - a [ i ] + a [ i ] * a [ i + 1 ] ;\n    print ( max ( dp [ n - 2 ] [ 0 ] , dp [ n - 2 ] [ 1 ] ) , end = \" \" ) ;\n"}
{"java": "static boolean search ( int arr [ ] , int n , int x ) { int front = 0 , back = n - 1 ; while ( front <= back ) { if ( arr [ front ] == x || arr [ back ] == x ) return true ; front ++ ; back -- ; } return false ; }", "python": "def search ( arr , n , x ) :\n    front = 0 ; back = n - 1\n    while ( front <= back ) :\n        if ( arr [ front ] == x or arr [ back ] == x ) :\n            return True\n        front += 1\n        back -= 1\n    return False\n"}
{"java": "static boolean isPossible ( int a [ ] , int n ) { int cur = a [ 0 ] ; cur -- ; for ( int i = 1 ; i < n ; i ++ ) { int nxt = a [ i ] ; if ( nxt > cur ) nxt -- ; else if ( nxt < cur ) return false ; cur = nxt ; } return true ; }", "python": "def isPossible ( a , n ) :\n    cur = a [ 0 ] ;\n    cur -= 1 ;\n    for i in range ( 1 , n ) :\n        nxt = a [ i ] ;\n        if ( nxt > cur ) :\n            nxt -= 1 ;\n        elif ( nxt < cur ) :\n            return False ;\n        cur = nxt ;\n    return True ;\n"}
{"java": "static void printKMax ( int arr [ ] , int n , int k ) { int j , max ; for ( int i = 0 ; i <= n - k ; i ++ ) { max = arr [ i ] ; for ( j = 1 ; j < k ; j ++ ) { if ( arr [ i + j ] > max ) max = arr [ i + j ] ; } System . out . print ( max + \" \u2581 \" ) ; } }", "python": "def printMax ( arr , n , k ) :\n    max = 0\n    for i in range ( n - k + 1 ) :\n        max = arr [ i ]\n        for j in range ( 1 , k ) :\n            if arr [ i + j ] > max :\n                max = arr [ i + j ]\n        print ( str ( max ) + \" \u2581 \" , end = \" \" )\n"}
{"java": "static int sumPairs ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( arr [ i ] * ( 2 * n ) ) ; } return sum ; }", "python": "def sumPairs ( arr , n ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum = sum + ( arr [ i ] * ( 2 * n ) ) ;\n    return sum ;\n"}
{"java": "static int zzis ( int arr [ ] , int n ) { int Z [ ] [ ] = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) Z [ i ] [ 0 ] = Z [ i ] [ 1 ] = 1 ; int res = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] < arr [ i ] && Z [ i ] [ 0 ] < Z [ j ] [ 1 ] + 1 ) Z [ i ] [ 0 ] = Z [ j ] [ 1 ] + 1 ; if ( arr [ j ] > arr [ i ] && Z [ i ] [ 1 ] < Z [ j ] [ 0 ] + 1 ) Z [ i ] [ 1 ] = Z [ j ] [ 0 ] + 1 ; } if ( res < Math . max ( Z [ i ] [ 0 ] , Z [ i ] [ 1 ] ) ) res = Math . max ( Z [ i ] [ 0 ] , Z [ i ] [ 1 ] ) ; } return res ; }", "python": "def zzis ( arr , n ) :\n    Z = [ [ 1 for i in range ( 2 ) ] for i in range ( n ) ]\n    res = 1\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ j ] < arr [ i ] and Z [ i ] [ 0 ] < Z [ j ] [ 1 ] + 1 ) :\n                Z [ i ] [ 0 ] = Z [ j ] [ 1 ] + 1\n            if ( arr [ j ] > arr [ i ] and Z [ i ] [ 1 ] < Z [ j ] [ 0 ] + 1 ) :\n                Z [ i ] [ 1 ] = Z [ j ] [ 0 ] + 1\n        if ( res < max ( Z [ i ] [ 0 ] , Z [ i ] [ 1 ] ) ) :\n            res = max ( Z [ i ] [ 0 ] , Z [ i ] [ 1 ] )\n    return res\n"}
{"java": "static void sieve ( int a , int b ) { prime [ 1 ] = 1 ; for ( int i = 2 ; i * i < size ; i ++ ) { if ( prime [ i ] == 0 ) { for ( int j = i * 2 ; j < size ; j += i ) prime [ j ] = 1 ; } } for ( int p = 1 ; p < size ; p ++ ) { for ( int q = 1 ; q < size ; q ++ ) { if ( prime [ p ] == 0 && prime [ q ] == 0 && a * p + b * q < size ) { freq [ a * p + b * q ] ++ ; } } } }", "python": "def sieve ( a , b ) :\n    prime [ 1 ] = 1\n    for i in range ( 2 , int ( sqrt ( size ) ) + 1 , 1 ) :\n        if ( prime [ i ] == 0 ) :\n            for j in range ( i * 2 , size , i ) :\n                prime [ j ] = 1\n    for p in range ( 1 , size , 1 ) :\n        for q in range ( 1 , size , 1 ) :\n            if ( prime [ p ] == 0 and prime [ q ] == 0 and a * p + b * q < size ) :\n                freq [ a * p + b * q ] += 1\n"}
{"java": "static boolean findNature ( int a , int b , int n ) { if ( n == 0 ) return ( a & 1 ) == 1 ? true : false ; if ( n == 1 ) return ( b & 1 ) == 1 ? true : false ; if ( ( a & 1 ) == 0 ) { if ( ( b & 1 ) == 0 ) return false ; else return ( n % 3 != 0 ) ; } else { if ( ( b & 1 ) == 0 ) return ( ( n - 1 ) % 3 != 0 ) ; else return ( ( n + 1 ) % 3 != 0 ) ; } }", "python": "def findNature ( a , b , n ) :\n    if ( n == 0 ) :\n        return ( a & 1 ) ;\n    if ( n == 1 ) :\n        return ( b & 1 ) ;\n    if ( ( a & 1 ) == 0 ) :\n        if ( ( b & 1 ) == 0 ) :\n            return False ;\n        else :\n            return True if ( n % 3 != 0 ) else False ;\n    else :\n        if ( ( b & 1 ) == 0 ) :\n            return True if ( ( n - 1 ) % 3 != 0 ) else False ;\n        else :\n            return True if ( ( n + 1 ) % 3 != 0 ) else False ;\n"}
{"java": "static void findMaxNum ( int arr [ ] , int n ) { int [ ] hash = new int [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; } for ( int i = 9 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < hash [ i ] ; j ++ ) System . out . print ( i ) ; } }", "python": "def findMaxNum ( arr , n ) :\n    hash = [ 0 ] * 10\n    for i in range ( n ) :\n        hash [ arr [ i ] ] += 1\n    for i in range ( 9 , - 1 , - 1 ) :\n        for j in range ( hash [ i ] ) :\n            print ( i , end = \" \" )\n"}
{"java": "static int countConsecutive ( int n ) { String s = Integer . toString ( n ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) count ++ ; return count ; }", "python": "def countConsecutive ( n ) :\n    s = str ( n )\n    count = 0\n    for i in range ( len ( s ) - 1 ) :\n        if ( s [ i ] == s [ i + 1 ] ) :\n            count += 1\n    return count\n"}
{"java": "static int maxMatrixScore ( int A [ ] [ ] , int K ) { HashMap < Integer , Integer > update = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( A [ i ] [ 0 ] == 0 ) { int ans = 0 ; for ( int j = 1 ; j < m ; ++ j ) ans = ( int ) ( ans + A [ i ] [ j ] * Math . pow ( 2 , m - j - 1 ) ) ; update . put ( ans , i ) ; } } for ( Map . Entry < Integer , Integer > it : update . entrySet ( ) ) if ( K > 0 ) { int idx = it . getValue ( ) ; for ( int j = 0 ; j < m ; ++ j ) A [ idx ] [ j ] = ( A [ idx ] [ j ] + 1 ) % 2 ; K -- ; } int ans = 0 ; for ( int j = 0 ; j < m ; ++ j ) { int zero = 0 , one = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( A [ i ] [ j ] == 0 ) zero ++ ; else one ++ ; } if ( K > 0 && zero > one ) { ans += zero * Math . pow ( 2 , m - j - 1 ) ; K -- ; } else ans += one * Math . pow ( 2 , m - j - 1 ) ; } return ans ; }", "python": "def maxMatrixScore ( A , K ) :\n    update = { }\n    for i in range ( 0 , n ) :\n        if A [ i ] [ 0 ] == 0 :\n            ans = 0\n            for j in range ( 1 , m ) :\n                ans = ans + A [ i ] [ j ] * 2 ** ( m - j - 1 )\n            update [ ans ] = i\n    for idx in update . values ( ) :\n        for j in range ( 0 , m ) :\n            A [ idx ] [ j ] = ( A [ idx ] [ j ] + 1 ) % 2\n        K -= 1\n        if K <= 0 :\n            break\n    ans = 0\n    for j in range ( 0 , m ) :\n        zero , one = 0 , 0\n        for i in range ( 0 , n ) :\n            if A [ i ] [ j ] == 0 : zero += 1\n            else : one += 1\n        if K > 0 and zero > one :\n            ans += zero * 2 ** ( m - j - 1 )\n            K -= 1\n        else :\n            ans += one * 2 ** ( m - j - 1 )\n    return ans\n"}
{"java": "static float trianglearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float area = ( float ) ( 3 * Math . sqrt ( 3 ) * Math . pow ( a , 2 ) ) / ( 4 * b ) ; return area ; }", "python": "def trianglearea ( a , b ) :\n    if a < 0 or b < 0 :\n        return - 1\n    area = ( 3 * sqrt ( 3 ) * pow ( a , 2 ) ) / ( 4 * b )\n    return area\n"}
{"java": "static double trianglearea ( double a ) { if ( a < 0 ) return - 1 ; double area = ( 3 * Math . sqrt ( 3 ) * Math . pow ( a , 2 ) ) / 4 ; return area ; }", "python": "def trianglearea ( a ) :\n    if ( a < 0 ) :\n        return - 1 ;\n    area = ( 3 * math . sqrt ( 3 ) * math . pow ( a , 2 ) ) / 4 ;\n    return area ;\n"}
{"java": "static int distinct ( int [ ] arr , int n ) { int count = 0 ; if ( n == 1 ) return 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( i == 0 ) { if ( arr [ i ] != arr [ i + 1 ] ) count += 1 ; } else { if ( arr [ i ] != arr [ i + 1 ] || arr [ i ] != arr [ i - 1 ] ) count += 1 ; } } if ( arr [ n - 1 ] != arr [ n - 2 ] ) count += 1 ; return count ; }", "python": "def distinct ( arr ) :\n    count = 0\n    if len ( arr ) == 1 :\n        return 1\n    for i in range ( 0 , len ( arr ) - 1 ) :\n        if ( i == 0 ) :\n            if ( arr [ i ] != arr [ i + 1 ] ) :\n                count += 1\n        elif ( i > 0 & i < len ( arr ) - 1 ) :\n            if ( arr [ i ] != arr [ i + 1 ] or arr [ i ] != arr [ i - 1 ] ) :\n                count += 1\n    if ( arr [ len ( arr ) - 1 ] != arr [ len ( arr ) - 2 ] ) :\n        count += 1\n    return count\n"}
{"java": "static int palindrome ( int arr [ ] , int begin , int end ) { if ( begin >= end ) { return 1 ; } if ( arr [ begin ] == arr [ end ] ) { return palindrome ( arr , begin + 1 , end - 1 ) ; } else { return 0 ; } }", "python": "def palindrome ( arr , begin , end ) :\n    if ( begin >= end ) :\n        return 1\n    if ( arr [ begin ] == arr [ end ] ) :\n        return palindrome ( arr , begin + 1 , end - 1 )\n    else :\n        return 0\n"}
{"java": "static int isSumDivides ( int N ) { int temp = N ; int sum = 0 ; while ( temp > 0 ) { sum += temp % 10 ; temp /= 10 ; } if ( N % sum == 0 ) return 1 ; else return 0 ; }", "python": "def isSumDivides ( N ) :\n    temp = N\n    sum = 0\n    while ( temp ) :\n        sum += temp % 10\n        temp = int ( temp / 10 )\n    if ( N % sum == 0 ) :\n        return 1\n    else :\n        return 0\n"}
{"java": "static int countSetBits ( int n ) { n ++ ; int powerOf2 = 2 ; int cnt = n / 2 ; while ( powerOf2 <= n ) { int totalPairs = n / powerOf2 ; cnt += ( totalPairs / 2 ) * powerOf2 ; cnt += ( totalPairs % 2 == 1 ) ? ( n % powerOf2 ) : 0 ; powerOf2 <<= 1 ; } return cnt ; }", "python": "def countSetBits ( n ) :\n    n += 1 ;\n    powerOf2 = 2 ;\n    cnt = n // 2 ;\n    while ( powerOf2 <= n ) :\n        totalPairs = n // powerOf2 ;\n        cnt += ( totalPairs // 2 ) * powerOf2 ;\n        if ( totalPairs & 1 ) :\n            cnt += ( n % powerOf2 )\n        else :\n            cnt += 0\n        powerOf2 <<= 1 ;\n    return cnt ;\n"}
{"java": "static int findLargestDivisor ( int n ) { for ( int i = 2 ; i < Math . sqrt ( n ) + 1 ; i ++ ) { while ( n % ( i * i ) == 0 ) { n = n / i ; } } return n ; }", "python": "def findLargestDivisor ( n ) :\n    for i in range ( 2 , int ( math . sqrt ( n ) ) + 1 ) :\n        while ( n % ( i * i ) == 0 ) :\n            n = n // i\n    return n\n"}
{"java": "static int sumOddOccurring ( int arr [ ] [ ] ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( mp . get ( arr [ i ] [ j ] ) == null ) mp . put ( arr [ i ] [ j ] , 1 ) ; else mp . put ( arr [ i ] [ j ] , ( mp . get ( arr [ i ] [ j ] ) + 1 ) ) ; } } int sum = 0 ; Set < Map . Entry < Integer , Integer > > st = mp . entrySet ( ) ; for ( Map . Entry < Integer , Integer > me : st ) { if ( me . getValue ( ) % 2 == 0 ) { int x = me . getValue ( ) ; sum += ( me . getKey ( ) ) * ( me . getValue ( ) ) ; } } return sum ; }", "python": "def sumOddOccuring ( arr ) :\n    mp = dict ( )\n    for i in range ( N ) :\n        for j in range ( M ) :\n            if arr [ i ] [ j ] in mp :\n                mp [ arr [ i ] [ j ] ] += 1\n            else :\n                mp [ arr [ i ] [ j ] ] = 1\n    s = 0\n    for i in mp :\n        if mp [ i ] % 2 == 0 :\n            x = mp [ i ]\n            s += i * mp [ i ]\n    return s\n"}
{"java": "static double calc ( int [ ] I , int s , int a , int c ) { double res = 0.0 ; int [ ] o = new int [ 257 ] ; int [ ] r = new int [ I . length ] ; r [ 0 ] = s ; for ( int j = 1 ; j < r . length ; j ++ ) { r [ j ] = ( a * r [ j - 1 ] + c ) % m ; } for ( int j = 1 ; j < I . length ; j ++ ) { o [ ( I [ j ] + r [ j ] ) % m ] ++ ; } for ( int j = 0 ; j < o . length ; j ++ ) { if ( o [ j ] != 0 ) { double d = ( double ) o [ j ] / ( I . length - 1 ) * Math . log ( ( double ) o [ j ] / ( I . length - 1 ) ) ; res -= d ; } } return res ; }", "python": "def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LS ( ) : return sys . stdin . readline ( ) . split ( )\ndef I ( ) : return int ( sys . stdin . readline ( ) )\ndef F ( ) : return float ( sys . stdin . readline ( ) )\ndef S ( ) : return input ( )\ndef pf ( s ) : return print ( s , flush = True )\ndef main ( ) :\n    rr = [ ]\n    while True :\n        n = I ( )\n        if n == 0 :\n            break\n        ii = LI ( )\n        m = inf\n        r = ' - 1'\n        for s in range ( 16 ) :\n            for a in range ( 16 ) :\n                for c in range ( 16 ) :\n                    t = s\n                    f = [ 0 ] * 256\n                    for i in ii :\n                        t = ( a * t + c ) % 256\n                        f [ ( t + i ) % 256 ] += 1\n                    h = 0\n                    for i in range ( 256 ) :\n                        if f [ i ] == 0 :\n                            continue\n                        h -= f [ i ] / n * math . log ( f [ i ] / n )\n                    if m > h + eps :\n                        m = h\n                        r = ' { } \u2581 { } \u2581 { } ' . format ( s , a , c )\n        rr . append ( r )\n    return ' \\n ' . join ( map ( str , rr ) )\n"}
{"java": "static int countDigit ( long n ) { int count = 0 ; while ( n != 0 ) { n = n / 10 ; ++ count ; } return count ; }", "python": "def countDigit ( n ) :\n    count = 0\n    while n != 0 :\n        n //= 10\n        count += 1\n    return count\n"}
{"java": "static void primeSet ( final int MAX ) { primes = new boolean [ MAX + 1 ] ; primes [ 2 ] = true ; for ( int i = 3 ; i <= MAX ; i += 2 ) { primes [ i ] = true ; } int rt = ( int ) Math . sqrt ( MAX ) ; for ( int i = 3 ; i <= rt ; i += 2 ) { if ( primes [ i ] ) { for ( int j = i * i ; j <= MAX ; j += i ) { primes [ j ] = false ; } } } }", "python": "def prime ( n ) :\n    prime_flag = [ 0 for i in range ( n + 1 ) ]\n    prime_list = [ ]\n    for i in range ( 2 , n + 1 ) :\n        if prime_flag [ i ] == 0 :\n            prime_list . append ( i )\n            temp = 1\n            while temp * i <= n :\n                prime_flag [ temp * i ] = 1\n                temp += 1\n    return prime_list\n"}
{"java": "static int countWays ( int arr [ ] , int n ) { int pos [ ] = new int [ n ] ; int p = 0 , i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { pos [ p ] = i + 1 ; p ++ ; } } if ( p == 0 ) return 0 ; int ways = 1 ; for ( i = 0 ; i < p - 1 ; i ++ ) { ways *= pos [ i + 1 ] - pos [ i ] ; } return ways ; }", "python": "def countWays ( are , n ) :\n    pos = [ 0 for i in range ( n ) ]\n    p = 0\n    for i in range ( n ) :\n        if ( arr [ i ] == 1 ) :\n            pos [ p ] = i + 1\n            p += 1\n    if ( p == 0 ) :\n        return 0\n    ways = 1\n    for i in range ( p - 1 ) :\n        ways *= pos [ i + 1 ] - pos [ i ]\n    return ways\n"}
{"java": "static void helper ( String str , int o , int c , int size , int n ) { if ( counter == n ) return ; if ( o > n || c > n ) return ; if ( o == c && ( o + c ) == size ) { counter ++ ; System . out . println ( str ) ; return ; } helper ( str + ' ( ' , o + 1 , c , size , n ) ; helper ( str + ' ) ' , o , c + 1 , size , n ) ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    w = [ ]\n    for i in range ( n ) :\n        w . append ( \" ( \" * ( n - i ) + \" ) \" * ( n - i ) + \" ( ) \" * i )\n    return \" \\n \" . join ( w )\n"}
{"java": "static int findSubarray ( int array [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; mp . put ( 0 , 1 ) ; int answer = 0 ; int preXor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int value = 1 ; preXor ^= array [ i ] ; for ( int j = 1 ; j <= MAX ; j ++ ) { int Y = value ^ preXor ; if ( mp . containsKey ( Y ) ) { answer += mp . get ( Y ) ; } value *= 2 ; } if ( mp . containsKey ( preXor ) ) { mp . put ( preXor , mp . get ( preXor ) + 1 ) ; } else { mp . put ( preXor , 1 ) ; } } return answer ; }", "python": "def findSubarray ( array , n ) :\n    mp = dict ( )\n    mp [ 0 ] = 1\n    answer = 0\n    preXor = 0\n    for i in range ( n ) :\n        value = 1\n        preXor ^= array [ i ]\n        for j in range ( 1 , MAX + 1 ) :\n            Y = value ^ preXor\n            if ( Y in mp . keys ( ) ) :\n                answer += mp [ Y ]\n            value *= 2\n        if ( preXor in mp . keys ( ) ) :\n            mp [ preXor ] += 1\n        else :\n            mp [ preXor ] = 1\n    return answer\n"}
{"java": "static int countSubStrings ( String s , String anotherStr , int k ) { boolean illegal [ ] = new boolean [ MAX_CHAR ] ; for ( int i = 0 ; i < anotherStr . length ( ) ; i ++ ) { illegal [ anotherStr . charAt ( i ) ] = true ; } HashSet < String > us = new HashSet < String > ( ) ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) { String ss = \" \" ; int count = 0 ; for ( int j = i ; j < s . length ( ) ; ++ j ) { if ( illegal [ s . charAt ( j ) ] ) { ++ count ; } ss = ss + s . charAt ( j ) ; if ( count <= k ) { us . add ( ss ) ; } else { break ; } } } return us . size ( ) ; }", "python": "def countSubStrings ( s , anotherStr , k ) :\n    illegal = [ False ] * MAX_CHAR\n    for i in range ( len ( anotherStr ) ) :\n        illegal [ ord ( anotherStr [ i ] ) ] = True\n    us = set ( )\n    for i in range ( len ( s ) ) :\n        ss = \" \"\n        count = 0\n        for j in range ( i , len ( s ) ) :\n            if ( illegal [ ord ( s [ j ] ) ] ) :\n                count += 1\n            ss = ss + s [ j ]\n            if ( count <= k ) :\n                us . add ( ss )\n            else :\n                break\n    return len ( us )\n"}
{"java": "static int findPairs ( int arr [ ] , int n , int x ) { int l = 0 , r = n - 1 ; int result = 0 ; while ( l < r ) { if ( arr [ l ] + arr [ r ] < x ) { result += ( r - l ) ; l ++ ; } else r -- ; } return result ; }", "python": "def findPairs ( arr , n , x ) :\n    l = 0 ; r = n - 1\n    result = 0\n    while ( l < r ) :\n        if ( arr [ l ] + arr [ r ] < x ) :\n            result += ( r - l )\n            l += 1\n        else :\n            r -= 1\n    return result\n"}
{"java": "static void doit ( String [ ] args , InputStream in , PrintStream out ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null || line . isEmpty ( ) ) { break ; } String [ ] values = line . split ( \" \u2581 \" ) ; int a = Integer . parseInt ( values [ 0 ] ) ; int b = Integer . parseInt ( values [ 1 ] ) ; int n = Integer . parseInt ( values [ 2 ] ) ; int q = Math . abs ( b ) ; int p = Math . abs ( a ) % q ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p *= 10 ; int f = p / q ; if ( f == 0 ) { continue ; } sum += f ; p %= q ; } out . println ( sum ) ; } }", "python": "def solve ( a , b , n ) :\n    result = 0\n    a = a % b\n    for i in range ( n ) :\n        a *= 10\n        result += a // b\n        a = a % b\n    return result\n"}
{"java": "static int StrictlyPositiveXor ( int [ ] A , int N ) { int allxor = 0 ; boolean checkallzero = true ; for ( int i = 0 ; i < N ; i += 1 ) { allxor ^= A [ i ] ; if ( A [ i ] > 0 ) checkallzero = false ; } if ( allxor != 0 ) return N ; if ( checkallzero ) return - 1 ; int l = N , r = - 1 ; for ( int i = 0 ; i < N ; i += 1 ) { if ( A [ i ] > 0 ) { l = i + 1 ; break ; } } for ( int i = N - 1 ; i >= 0 ; i -= 1 ) { if ( A [ i ] > 0 ) { r = i + 1 ; break ; } } return Math . max ( N - l , r - 1 ) ; }", "python": "def StrictlyPositiveXor ( A , N ) :\n    allxor = 0 ;\n    checkallzero = True ;\n    for i in range ( N ) :\n        allxor ^= A [ i ] ;\n        if ( A [ i ] > 0 ) :\n            checkallzero = False ;\n    if ( allxor != 0 ) :\n        return N ;\n    if ( checkallzero ) :\n        return - 1 ;\n    l = N ; r = - 1 ;\n    for i in range ( N ) :\n        if ( A [ i ] > 0 ) :\n            l = i + 1 ;\n            break ;\n    for i in range ( N - 1 , - 1 , - 1 ) :\n        if ( A [ i ] > 0 ) :\n            r = i + 1 ;\n            break ;\n    return max ( N - l , r - 1 ) ;\n"}
{"java": "static int pow ( int a , int b ) { int ans = 1 ; for ( int i = 0 ; i < b ; i ++ ) ans *= a ; return ans ; }", "python": "def floor ( x , y ) :\n    return ( ( - x ) // y ) * ( - 1 )\n"}
{"java": "static int minimumMulitplications ( int start , int end , int a [ ] , int n ) { int ans [ ] = new int [ 100001 ] ; Arrays . fill ( ans , - 1 ) ; int mod = 100000 ; Queue < Integer > q = new LinkedList < > ( ) ; q . add ( start % mod ) ; ans [ start ] = 0 ; while ( ! q . isEmpty ( ) ) { int top = q . peek ( ) ; q . remove ( ) ; if ( top == end ) { return ans [ end ] ; } for ( int i = 0 ; i < n ; i ++ ) { int pushed = top * a [ i ] ; pushed = pushed % mod ; if ( ans [ pushed ] == - 1 ) { ans [ pushed ] = ans [ top ] + 1 ; q . add ( pushed ) ; } } } return - 1 ; }", "python": "def minimumMulitplications ( start , end , a , n ) :\n    ans = [ - 1 for i in range ( 100001 ) ]\n    mod = 100000\n    q = deque ( )\n    q . append ( start % mod )\n    ans [ start ] = 0\n    while ( len ( q ) > 0 ) :\n        top = q . popleft ( )\n        if ( top == end ) :\n            return ans [ end ]\n        for i in range ( n ) :\n            pushed = top * a [ i ]\n            pushed = pushed % mod\n            if ( ans [ pushed ] == - 1 ) :\n                ans [ pushed ] = ans [ top ] + 1\n                q . append ( pushed )\n    return - 1\n"}
{"java": "static boolean checkForElement ( int array [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += array [ i ] ; if ( sum % 2 > 0 ) return false ; sum /= 2 ; int start = 0 ; int end = n - 1 ; while ( start <= end ) { int mid = start + ( end - start ) / 2 ; if ( array [ mid ] == sum ) return true ; else if ( array [ mid ] > sum ) end = mid - 1 ; else start = mid + 1 ; } return false ; }", "python": "def checkForElement ( array , n ) :\n    sum = 0\n    for i in range ( n ) :\n        sum += array [ i ]\n    if ( sum % 2 ) :\n        return False\n    sum //= 2\n    start = 0\n    end = n - 1\n    while ( start <= end ) :\n        mid = start + ( end - start ) // 2\n        if ( array [ mid ] == sum ) :\n            return True\n        elif ( array [ mid ] > sum ) :\n            end = mid - 1 ;\n        else :\n            start = mid + 1\n    return False\n"}
{"java": "static int findAndSum ( int [ ] arr , int n ) { int sum = 0 ; int mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { boolean count_on = false ; int l = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) if ( count_on ) l ++ ; else { count_on = true ; l ++ ; } else if ( count_on ) { sum += ( ( mul * l * ( l + 1 ) ) / 2 ) ; count_on = false ; l = 0 ; } } if ( count_on ) { sum += ( ( mul * l * ( l + 1 ) ) / 2 ) ; count_on = false ; l = 0 ; } mul *= 2 ; } return sum ; }", "python": "def findAndSum ( arr , n ) :\n    Sum = 0\n    mul = 1\n    for i in range ( 30 ) :\n        count_on = 0\n        l = 0\n        for j in range ( n ) :\n            if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) :\n                if ( count_on ) :\n                    l += 1\n                else :\n                    count_on = 1\n                    l += 1\n            elif ( count_on ) :\n                Sum += ( ( mul * l * ( l + 1 ) ) // 2 )\n                count_on = 0\n                l = 0\n        if ( count_on ) :\n            Sum += ( ( mul * l * ( l + 1 ) ) // 2 )\n            count_on = 0\n            l = 0\n        mul *= 2\n    return Sum\n"}
{"java": "static void print_first_N_primes ( int N ) { int i , j , flag ; System . out . println ( \" Prime \u2581 numbers \u2581 between \u2581 1 \u2581 and \u2581 \" + N + \" \u2581 are : \" ) ; for ( i = 1 ; i <= N ; i ++ ) { if ( i == 1 || i == 0 ) continue ; flag = 1 ; for ( j = 2 ; j <= i / 2 ; ++ j ) { if ( i % j == 0 ) { flag = 0 ; break ; } } if ( flag == 1 ) System . out . print ( i + \" \u2581 \" ) ; } }", "python": "def print_first_N_primes ( N ) :\n    i , j , flag = 0 , 0 , 0 ;\n    print ( \" Prime \u2581 numbers \u2581 between \u2581 1 \u2581 and \u2581 \" , N , \" \u2581 are : \" ) ;\n    for i in range ( 1 , N + 1 , 1 ) :\n        if ( i == 1 or i == 0 ) :\n            continue ;\n        flag = 1 ;\n        for j in range ( 2 , ( ( i // 2 ) + 1 ) , 1 ) :\n            if ( i % j == 0 ) :\n                flag = 0 ;\n                break ;\n        if ( flag == 1 ) :\n            print ( i , end = \" \u2581 \" ) ;\n"}
{"java": "static boolean sumSquare ( int n ) { HashMap < Integer , Integer > s = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i * i <= n ; ++ i ) { s . put ( i * i , 1 ) ; if ( s . containsKey ( n - i * i ) ) { System . out . println ( ( int ) Math . sqrt ( n - i * i ) + \" ^ 2 \u2581 + \u2581 \" + i + \" ^ 2\" ) ; return true ; } } return false ; }", "python": "def sumSquare ( n ) :\n    s = dict ( )\n    for i in range ( n ) :\n        if i * i > n :\n            break\n        s [ i * i ] = 1\n        if ( n - i * i ) in s . keys ( ) :\n            print ( ( n - i * i ) ** ( 1 / 2 ) , \" ^ 2 \u2581 + \" , i , \" ^ 2\" )\n            return True\n    return False\n"}
{"java": "static Vector < Integer > processQueries ( int Q [ ] , int m , int n ) { int [ ] a = new int [ m + 1 ] ; int [ ] pos = new int [ m + 1 ] ; for ( int i = 1 ; i <= m ; i ++ ) { a [ i - 1 ] = i ; pos [ i ] = i - 1 ; } Vector < Integer > ans = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int q = Q [ i ] ; int p = pos [ q ] ; ans . add ( p ) ; for ( int j = p ; j > 0 ; j -- ) { a [ j ] = a [ j ] + a [ j - 1 ] ; a [ j - 1 ] = a [ j ] - a [ j - 1 ] ; a [ j ] = a [ j ] - a [ j - 1 ] ; pos [ a [ j ] ] = j ; } pos [ a [ 0 ] ] = 0 ; } return ans ; }", "python": "def processQueries ( Q , m , n ) :\n    a = [ 0 ] * ( m + 1 ) ; pos = [ 0 ] * ( m + 1 ) ;\n    for i in range ( 1 , m + 1 ) :\n        a [ i - 1 ] = i ;\n        pos [ i ] = i - 1 ;\n    ans = [ ] ;\n    for i in range ( n ) :\n        q = Q [ i ] ;\n        p = pos [ q ] ;\n        ans . append ( p ) ;\n        for i in range ( p , 0 , - 1 ) :\n            a [ i ] , a [ i - 1 ] = a [ i - 1 ] , a [ i ] ;\n            pos [ a [ i ] ] = i ;\n        pos [ a [ 0 ] ] = 0 ;\n    return ans ;\n"}
{"java": "static int solve ( int i , int x , int dp [ ] [ ] ) { if ( i < 0 ) { return x == 3 ? 1 : 0 ; } if ( dp [ i ] [ x ] != - 1 ) { return dp [ i ] [ x ] ; } dp [ i ] [ x ] = solve ( i - 1 , 0 , dp ) ; dp [ i ] [ x ] += solve ( i - 1 , x + 1 , dp ) ; return dp [ i ] [ x ] ; }", "python": "def solve ( i , x , dp ) :\n    if ( i < 0 ) :\n        return x == 3\n    if ( dp [ i ] [ x ] != - 1 ) :\n        return dp [ i ] [ x ]\n    dp [ i ] [ x ] = solve ( i - 1 , 0 , dp )\n    dp [ i ] [ x ] += solve ( i - 1 , x + 1 , dp )\n    return dp [ i ] [ x ]\n"}
{"java": "static int summation ( int n ) { int sum ; sum = ( int ) ( Math . pow ( 10 , n + 1 ) - 10 - ( 9 * n ) ) / 81 ; return sum ; }", "python": "def summation ( n ) :\n    return int ( ( pow ( 10 , n + 1 ) - 10 - ( 9 * n ) ) / 81 ) ;\n"}
{"java": "static void printNumber ( int n ) { int count [ ] = new int [ 10 ] ; while ( n > 0 ) { count [ n % 10 ] ++ ; n /= 10 ; } for ( int i = 1 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < count [ i ] * i ; j ++ ) System . out . print ( i ) ; } }", "python": "def printNumber ( n ) :\n    count = [ 0 ] * 10\n    while ( n ) :\n        count [ n % 10 ] += 1\n        n //= 10\n    for i in range ( 1 , 10 ) :\n        for j in range ( count [ i ] * i ) :\n            print ( i , end = \" \" )\n"}
{"java": "static int power ( int n , int r ) { int count = 0 ; for ( int i = r ; ( n / i ) >= 1 ; i = i * r ) count += n / i ; return count ; }", "python": "def power ( n , r ) :\n    count = 0 ; i = r\n    while ( ( n / i ) >= 1 ) :\n        count += n / i\n        i = i * r\n    return int ( count )\n"}
{"java": "static int summation ( int n ) { int abs_sum = n * ( n + 1 ) / 2 ; int sign = n + 1 % 2 == 0 ? 1 : - 1 ; int result_sum = sign * abs_sum ; return result_sum ; }", "python": "def summation ( n ) :\n    abs_sum = n * ( n + 1 ) // 2 ;\n    sign = 1 if ( ( n + 1 ) % 2 == 0 ) else - 1 ;\n    result_sum = sign * abs_sum ;\n    return result_sum ;\n"}
{"java": "static boolean isExists ( int a [ ] , int n ) { Map < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) == null ? 0 : freq . get ( a [ i ] ) + 1 ) ; sum += a [ i ] ; } if ( sum % 2 == 0 ) { if ( freq . get ( sum / 2 ) != null ) return true ; } return false ; }", "python": "def isExists ( a , n ) :\n    freq = { i : 0 for i in a }\n    Sum = 0\n    for i in range ( n ) :\n        freq [ a [ i ] ] += 1\n        Sum += a [ i ]\n    if Sum % 2 == 0 :\n        if freq [ Sum // 2 ] :\n            return True\n    return False\n"}
{"java": "private static boolean countLRUD ( String s ) { int cLR = 0 , cUD = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' L ' ) cLR ++ ; else if ( s . charAt ( i ) == ' R ' ) cLR -- ; if ( s . charAt ( i ) == ' U ' ) cUD ++ ; else if ( s . charAt ( i ) == ' D ' ) cUD -- ; } return cUD == 0 && cLR == 0 ; }", "python": "def solve ( s , n ) :\n    ans = 1\n    for i in range ( n ) :\n        x , y = 0 , 0\n        for j in range ( i , n ) :\n            if s [ j ] == ' L ' :\n                x -= 1\n            if s [ j ] == ' R ' :\n                x += 1\n            if s [ j ] == ' U ' :\n                y += 1\n            if s [ j ] == ' D ' :\n                y -= 1\n            if x == 0 and y == 0 : ans += 1\n    print ( ans - 1 )\n"}
{"java": "static int smallestOdd ( int n ) { if ( n == 1 ) return 0 ; return Math . pow ( 10 , n - 1 ) + 1 ; }", "python": "def smallestOdd ( n ) :\n    if ( n == 1 ) :\n        return 1\n    return pow ( 10 , n - 1 ) + 1\n"}
{"java": "static int countMultiples ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( i % 3 == 0 || i % 7 == 0 ) res ++ ; return res ; }", "python": "def countMultiples ( n ) :\n    res = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        if ( i % 3 == 0 or i % 7 == 0 ) :\n            res += 1 ;\n    return res ;\n"}
{"java": "static int maxSum ( int arr [ ] , int n , int k ) { int max_sum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - k + 1 ; i ++ ) { int current_sum = 0 ; for ( int j = 0 ; j < k ; j ++ ) current_sum = current_sum + arr [ i + j ] ; max_sum = Math . max ( current_sum , max_sum ) ; } return max_sum ; }", "python": "def maxSum ( arr , n , k ) :\n    max_sum = INT_MIN\n    for i in range ( n - k + 1 ) :\n        current_sum = 0\n        for j in range ( k ) :\n            current_sum = current_sum + arr [ i + j ]\n        max_sum = max ( current_sum , max_sum )\n    return max_sum\n"}
{"java": "static int centereddecagonalnum ( int n ) { return ( 5 * n * n + 5 * n + 1 ) ; }", "python": "def centereddecagonalnum ( n ) :\n    return ( 5 * n * n + 5 * n + 1 )\n"}
{"java": "static boolean isFactorion ( int n ) { int fact [ ] = new int [ MAX ] ; fact [ 0 ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) fact [ i ] = i * fact [ i - 1 ] ; int org = n ; int sum = 0 ; while ( n > 0 ) { int d = n % 10 ; sum += fact [ d ] ; n /= 10 ; } if ( sum == org ) return true ; return false ; }", "python": "def isFactorion ( n ) :\n    fact = [ 0 ] * MAX\n    fact [ 0 ] = 1\n    for i in range ( 1 , MAX ) :\n        fact [ i ] = i * fact [ i - 1 ]\n    org = n\n    sum = 0\n    while ( n > 0 ) :\n        d = n % 10\n        sum += fact [ d ]\n        n = n // 10\n    if ( sum == org ) :\n        return True\n    return False\n"}
{"java": "static void otherEndPoint ( int x1 , int y1 , int m1 , int m2 ) { float x2 = ( float ) ( 2 * m1 - x1 ) ; float y2 = ( float ) ( 2 * m2 - y1 ) ; System . out . println ( \" x2 \u2581 = \u2581 \" + x2 + \" , \u2581 \" + \" y2 \u2581 = \u2581 \" + y2 ) ; }", "python": "def otherEndPoint ( x1 , y1 , m1 , m2 ) :\n    x2 = ( 2 * m1 - x1 )\n    y2 = ( 2 * m2 - y1 )\n    print ( \" x2 \u2581 = \u2581 { } , \u2581 y2 \u2581 = \u2581 { } \" . format ( x2 , y2 ) )\n"}
{"java": "public static int bit ( char c ) { if ( c == ' J ' ) return 1 << 0 ; else if ( c == ' O ' ) return 1 << 1 ; else return 1 << 2 ; }", "python": "def plus ( s ) :\n    global c\n    d = [ 0 ] * 7\n    for i in range ( 7 ) :\n        if s in g [ i ] :\n            for j in range ( 7 ) :\n                if g [ i ] & g [ j ] != set ( ) :\n                    d [ i ] += c [ j ]\n    c = d\n"}
{"java": "static boolean topsyTurvy ( char [ ] str ) { for ( int i = 0 ; i < str . length ; i ++ ) { if ( str [ i ] == '2' || str [ i ] == '4' || str [ i ] == '5' || str [ i ] == '6' || str [ i ] == '7' || str [ i ] == '9' ) { return false ; } } return true ; }", "python": "def topsyTurvy ( string ) :\n    for i in range ( len ( string ) ) :\n        if ( string [ i ] == '2' or string [ i ] == '4' or string [ i ] == '5' or string [ i ] == '6' or string [ i ] == '7' or string [ i ] == '9' ) :\n            return False ;\n    return True ;\n"}
{"java": "static int countDivisibles ( int A , int B , int M ) { if ( A % M == 0 ) return ( B / M ) - ( A / M ) + 1 ; return ( B / M ) - ( A / M ) ; }", "python": "def countDivisibles ( A , B , M ) :\n    if ( A % M == 0 ) :\n        return ( ( B / M ) - ( A / M ) ) + 1\n    return ( ( B / M ) - ( A / M ) )\n"}
{"java": "static int findNumber ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int max = arr [ n - 1 ] ; int table [ ] = new int [ ( 2 * max ) + 1 ] ; table [ 0 ] = 0 ; for ( int i = 1 ; i < ( 2 * max ) + 1 ; i ++ ) table [ i ] = Integer . MAX_VALUE ; int ans = - 1 ; for ( int i = 1 ; i < ( 2 * max ) + 1 ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] <= i ) { int res = table [ i - arr [ j ] ] ; if ( res != Integer . MAX_VALUE && res + 1 < table [ i ] ) table [ i ] = res + 1 ; } } if ( i > arr [ n - 1 ] && table [ i ] == Integer . MAX_VALUE ) { ans = i ; break ; } } return ans ; }", "python": "def findNumber ( arr , n ) :\n    arr = sorted ( arr )\n    Max = arr [ n - 1 ]\n    table = [ 10 ** 9 for i in range ( ( 2 * Max ) + 1 ) ]\n    table [ 0 ] = 0\n    ans = - 1\n    for i in range ( 1 , 2 * Max + 1 ) :\n        for j in range ( n ) :\n            if ( arr [ j ] <= i ) :\n                res = table [ i - arr [ j ] ]\n                if ( res != 10 ** 9 and res + 1 < table [ i ] ) :\n                    table [ i ] = res + 1\n        if ( i > arr [ n - 1 ] and table [ i ] == 10 ** 9 ) :\n            ans = i\n            break\n    return ans\n"}
{"java": "static long spellsCount ( String num ) { int n = num . length ( ) ; long result = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int count = 1 ; while ( i < n - 1 && num . charAt ( i + 1 ) == num . charAt ( i ) ) { count ++ ; i ++ ; } result = result * ( long ) Math . pow ( 2 , count - 1 ) ; } return result ; }", "python": "def spellsCount ( num ) :\n    n = len ( num ) ;\n    result = 1 ;\n    i = 0 ;\n    while ( i < n ) :\n        count = 1 ;\n        while ( i < n - 1 and num [ i + 1 ] == num [ i ] ) :\n            count += 1 ;\n            i += 1 ;\n        result = result * int ( pow ( 2 , count - 1 ) ) ;\n        i += 1 ;\n    return result ;\n"}
{"java": "static int toDecimal ( String binary , int i ) { int n = binary . length ( ) ; if ( i == n - 1 ) return binary . charAt ( i ) - '0' ; return ( ( binary . charAt ( i ) - '0' ) << ( n - i - 1 ) ) + toDecimal ( binary , i + 1 ) ; }", "python": "def toDecimal ( binary , i = 0 ) :\n    n = len ( binary )\n    if ( i == n - 1 ) :\n        return int ( binary [ i ] ) - 0\n    return ( ( ( int ( binary [ i ] ) - 0 ) << ( n - i - 1 ) ) + toDecimal ( binary , i + 1 ) )\n"}
{"java": "static void remove ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ( mp . containsKey ( arr [ i ] ) && mp . get ( arr [ i ] ) % 2 == 1 ) ) continue ; System . out . print ( arr [ i ] + \" , \u2581 \" ) ; } }", "python": "def remove ( arr , n ) :\n    m = dict . fromkeys ( arr , 0 ) ;\n    for i in range ( n ) :\n        m [ arr [ i ] ] += 1 ;\n    for i in range ( n ) :\n        if ( ( m [ arr [ i ] ] & 1 ) ) :\n            continue ;\n        print ( arr [ i ] , end = \" , \u2581 \" ) ;\n"}
{"java": "static void solve ( int n ) { int n_2 = n / 2 ; String den ; den = \"1\" ; while ( n_2 -- > 0 ) den += '0' ; System . out . println ( 1 + \" / \" + den ) ; }", "python": "def solve ( n ) :\n    n_2 = n // 2 ;\n    den = \"1\" ;\n    while ( n_2 ) :\n        den += '0' ;\n        n_2 -= 1\n    print ( str ( 1 ) + \" / \" + str ( den ) )\n"}
{"java": "static long countPairs ( int arr [ ] , int n ) { int countZero = 0 ; int countTwo = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) countZero ++ ; else if ( arr [ i ] == 2 ) countTwo ++ ; } long pair0 = ( countZero * ( countZero - 1 ) ) / 2 ; long pair2 = ( countTwo * ( countTwo - 1 ) ) / 2 ; return pair0 + pair2 ; }", "python": "def countPairs ( arr , n ) :\n    countZero = 0 ;\n    countTwo = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] == 0 ) :\n            countZero += 1 ;\n        elif ( arr [ i ] == 2 ) :\n            countTwo += 1 ;\n    pair0 = ( countZero * ( countZero - 1 ) ) // 2 ;\n    pair2 = ( countTwo * ( countTwo - 1 ) ) // 2 ;\n    return pair0 + pair2 ;\n"}
{"java": "static int findNthEvenDigitNumber ( int n ) { int count = 0 ; for ( int i = 0 ; ; i ++ ) { int curr = i ; boolean isCurrEvenDigit = true ; while ( curr != 0 ) { if ( curr % 10 == 1 || curr % 10 == 3 || curr % 10 == 5 || curr % 10 == 7 || curr % 10 == 9 ) isCurrEvenDigit = false ; curr = curr / 10 ; } if ( isCurrEvenDigit == true ) count ++ ; if ( count == n ) return i ; } }", "python": "def findNthEvenDigitNumber ( n ) :\n    count = 0 ;\n    i = 0 ;\n    while ( True ) :\n        curr = i ;\n        isCurrEvenDigit = True ;\n        while ( curr != 0 ) :\n            if ( curr % 10 == 1 or curr % 10 == 3 or curr % 10 == 5 or curr % 10 == 7 or curr % 10 == 9 ) :\n                isCurrEvenDigit = False ;\n            curr = curr // 10 ;\n        if ( isCurrEvenDigit == True ) :\n            count += 1 ;\n        if ( count == n ) :\n            return i ;\n        i += 1 ;\n"}
{"java": "static ArrayList < Integer > addToArrayForm ( ArrayList < Integer > A , int K ) { ArrayList < Integer > v = new ArrayList < Integer > ( ) ; ArrayList < Integer > ans = new ArrayList < Integer > ( ) ; int rem = 0 ; int i = 0 ; for ( i = A . size ( ) - 1 ; i >= 0 ; i -- ) { int my = A . get ( i ) + K % 10 + rem ; if ( my > 9 ) { rem = 1 ; v . add ( my % 10 ) ; } else { v . add ( my ) ; rem = 0 ; } K = K / 10 ; } while ( K > 0 ) { int my = K % 10 + rem ; v . add ( my % 10 ) ; if ( my / 10 > 0 ) rem = 1 ; else rem = 0 ; K = K / 10 ; } if ( rem > 0 ) v . add ( rem ) ; for ( int j = v . size ( ) - 1 ; j >= 0 ; j -- ) ans . add ( v . get ( j ) ) ; return ans ; }", "python": "def addToArrayForm ( A , K ) :\n    v , ans = [ ] , [ ]\n    rem , i = 0 , 0\n    for i in range ( len ( A ) - 1 , - 1 , - 1 ) :\n        my = A [ i ] + ( K % 10 ) + rem\n        if my > 9 :\n            rem = 1\n            v . append ( my % 10 )\n        else :\n            v . append ( my )\n            rem = 0\n        K = K // 10\n    while K > 0 :\n        my = ( K % 10 ) + rem\n        v . append ( my % 10 )\n        if my // 10 > 0 :\n            rem = 1\n        else :\n            rem = 0\n        K = K // 10\n    if rem > 0 :\n        v . append ( rem )\n    for i in range ( len ( v ) - 1 , - 1 , - 1 ) :\n        ans . append ( v [ i ] )\n    return ans\n"}
{"java": "static int findMaximumDiff ( int [ ] a , int n ) { int ind1 = 0 ; for ( int i = n - 1 ; i > 0 ; i -- ) { if ( a [ 0 ] != a [ i ] ) { ind1 = i ; break ; } } int ind2 = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ n - 1 ] != a [ i ] ) { ind2 = ( n - 1 - i ) ; break ; } } return Math . max ( ind1 , ind2 ) ; }", "python": "def findMaximumDiff ( a , n ) :\n    ind1 = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( a [ 0 ] != a [ i ] ) :\n            ind1 = i\n            break\n    ind2 = 0\n    for i in range ( n - 1 ) :\n        if ( a [ n - 1 ] != a [ i ] ) :\n            ind2 = ( n - 1 - i )\n            break\n    return max ( ind1 , ind2 )\n"}
{"java": "static int closetAND ( int arr [ ] , int n , int k ) { int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int X = arr [ i ] ; for ( int j = i ; j < n ; j ++ ) { X &= arr [ j ] ; ans = Math . min ( ans , Math . abs ( k - X ) ) ; if ( X <= k ) break ; } } return ans ; }", "python": "def closetAND ( arr , n , k ) :\n    ans = sys . maxsize ;\n    for i in range ( n ) :\n        X = arr [ i ] ;\n        for j in range ( i , n ) :\n            X &= arr [ j ] ;\n            ans = min ( ans , abs ( k - X ) ) ;\n            if ( X <= k ) :\n                break ;\n    return ans ;\n"}
{"java": "static int closetAND ( int arr [ ] , int n , int k ) { int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int X = arr [ i ] ; for ( int j = i ; j < n ; j ++ ) { X &= arr [ j ] ; ans = Math . min ( ans , Math . abs ( k - X ) ) ; } } return ans ; }", "python": "def closetAND ( arr , n , k ) :\n    ans = 10 ** 9\n    for i in range ( n ) :\n        X = arr [ i ]\n        for j in range ( i , n ) :\n            X &= arr [ j ]\n            ans = min ( ans , abs ( k - X ) )\n    return ans\n"}
{"java": "static boolean inProportion ( int [ ] arr ) { int n = 4 ; Arrays . sort ( arr ) ; long extremes = ( long ) arr [ 0 ] * ( long ) arr [ 3 ] ; long means = ( long ) arr [ 1 ] * ( long ) arr [ 2 ] ; if ( extremes == means ) return true ; return false ; }", "python": "def inProportion ( arr ) :\n    n = 4 ;\n    arr . sort ( )\n    extremes = arr [ 0 ] * arr [ 3 ] ;\n    means = arr [ 1 ] * arr [ 2 ] ;\n    if ( extremes == means ) :\n        return True ;\n    return False ;\n"}
{"java": "static int maxRectangles ( int L , int B , int l , int b ) { int horizontal = 0 , vertical = 0 ; if ( l <= L && b <= B ) { int columns = B / b ; int rows = L / l ; horizontal = rows * columns ; } if ( l <= B && b <= L ) { int columns = L / b ; int rows = B / l ; vertical = rows * columns ; } return Math . max ( horizontal , vertical ) ; }", "python": "def maxRectangles ( L , B , l , b ) :\n    horizontal , vertical = 0 , 0\n    if l <= L and b <= B :\n        columns = B // b\n        rows = L // l\n        horizontal = rows * columns\n    if l <= B and b <= L :\n        columns = L // b\n        rows = B // l\n        vertical = rows * columns\n    return max ( horizontal , vertical )\n"}
{"java": "static int countSubseq ( int arr [ ] , int n ) { int count = 0 ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( mp . containsKey ( arr [ i ] ) ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; else mp . put ( arr [ i ] , 1 ) ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getKey ( ) == 0 ) count += Math . pow ( 2 , entry . getValue ( ) ) - 1 ; else count += Math . pow ( 2 , entry . getValue ( ) - 1 ) ; } return count ; }", "python": "def countSubseq ( arr , n ) :\n    count = 0\n    mp = { }\n    for x in arr :\n        if x in mp . keys ( ) :\n            mp [ x ] += 1\n        else :\n            mp [ x ] = 1\n    for i in mp . keys ( ) :\n        if ( i == 0 ) :\n            count += pow ( 2 , mp [ i ] ) - 1\n        else :\n            count += pow ( 2 , mp [ i ] - 1 )\n    return count\n"}
{"java": "static int findMissingNo ( int [ ] arr , int n ) { int val ; int nextval ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= 0 || arr [ i ] > n ) continue ; val = arr [ i ] ; while ( arr [ val - 1 ] != val ) { nextval = arr [ val - 1 ] ; arr [ val - 1 ] = val ; val = nextval ; if ( val <= 0 || val > n ) break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != i + 1 ) { return i + 1 ; } } return n + 1 ; }", "python": "def findMissingNo ( arr , n ) :\n    for i in range ( n ) :\n        if ( arr [ i ] <= 0 or arr [ i ] > n ) :\n            continue\n        val = arr [ i ]\n        while ( arr [ val - 1 ] != val ) :\n            nextval = arr [ val - 1 ]\n            arr [ val - 1 ] = val\n            val = nextval\n            if ( val <= 0 or val > n ) :\n                break\n    for i in range ( n ) :\n        if ( arr [ i ] != i + 1 ) :\n            return i + 1\n    return n + 1\n"}
{"java": "static void solve ( InputStream is , PrintStream os ) { Scanner scan = new Scanner ( is ) ; String S = scan . next ( ) ; long K = scan . nextLong ( ) ; char sChar [ ] = S . toCharArray ( ) ; char prevChar = sChar [ 0 ] ; long count = 0 ; long tempCount = 1 ; long tempFirstGpCount = 0 ; boolean lastChanged = false ; boolean isAllSame = true ; for ( int i = 1 ; i < sChar . length ; i ++ ) { if ( prevChar == sChar [ i ] ) { tempCount ++ ; if ( i == sChar . length - 1 ) { if ( ( tempCount ) % 2 == 0 ) lastChanged = true ; count += Math . floor ( ( tempCount ) / 2.0 ) ; } } else { if ( isAllSame ) { tempFirstGpCount = tempCount ; } isAllSame = false ; prevChar = sChar [ i ] ; count += Math . floor ( ( tempCount ) / 2.0 ) ; tempCount = 1 ; } } if ( sChar . length != 1 ) { if ( ! lastChanged && sChar [ 0 ] == sChar [ sChar . length - 1 ] ) { if ( isAllSame ) { if ( K % 2 == 0 ) { count = ( count + 1 ) * 2 - 1 ; os . println ( count * ( K / 2 ) ) ; } else { long originCount = count ; count = ( count + 1 ) * 2 - 1 ; os . println ( count * Double . valueOf ( Math . floor ( K / 2.0 ) ) . intValue ( ) + originCount ) ; } } else { if ( tempFirstGpCount % 2 == 1 ) { count ++ ; os . println ( count * K - 1 ) ; } else { os . println ( count * K ) ; } } } else os . println ( count * K ) ; } else os . println ( Double . valueOf ( Math . floor ( K / 2.0 ) ) . intValue ( ) ) ; }", "python": "def p ( st ) :\n    l = len ( st )\n    tc = 1\n    ac = 0\n    p = s [ 0 ]\n    for i in range ( 1 , l ) :\n        if st [ i ] == p :\n            tc += 1\n        else :\n            ac += tc // 2\n            tc = 1\n            p = st [ i ]\n    else :\n        ac += tc // 2\n    return ac\n"}
{"java": "static int getMinVal ( int p , int q ) { if ( q % p == 0 ) return p ; return - 1 ; }", "python": "def getMinVal ( p , q ) :\n    if q % p == 0 :\n        return p\n    return - 1\n"}
{"java": "public static int Valid ( int a , int b , int c ) { if ( a + b + c == 180 && a != 0 && b != 0 && c != 0 ) return 1 ; else return 0 ; }", "python": "def Valid ( a , b , c ) :\n    if ( ( a + b + c == 180 ) and a != 0 and b != 0 and c != 0 ) :\n        return True\n    else :\n        return False\n"}
{"java": "static int fun ( int n , int m ) { int res = 0 ; int p ; if ( n % 2 != 0 ) { p = n / 2 ; p ++ ; } else { p = n / 2 ; } for ( int i = p ; i <= n ; i ++ ) { if ( i % m == 0 ) { res = i ; break ; } } return res > 0 ? res : - 1 ; }", "python": "def check ( input , m ) :\n    if m > input :\n        return - 1\n    a , b = 0 , 0\n    if input % 2 == 0 :\n        b = 0\n        a = input // 2\n    else :\n        b = 1\n        a = input // 2\n    for i in range ( a , - 1 , - 1 ) :\n        s = i * 2 + b\n        if ( i + b ) % m == 0 and s == input :\n            return i + b\n        b += 2\n"}
{"java": "static long ProdOfPrimes ( int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } long prod = 1 ; for ( int i = 2 ; i <= n ; i ++ ) if ( prime [ i ] ) prod *= i ; return prod ; }", "python": "def ProdOfPrimes ( n ) :\n    prime = [ True for i in range ( n + 1 ) ]\n    p = 2\n    while ( p * p <= n ) :\n        if ( prime [ p ] == True ) :\n            i = p * 2\n            while ( i <= n ) :\n                prime [ i ] = False\n                i += p\n        p += 1\n    prod = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( prime [ i ] ) :\n            prod *= i\n    return prod\n"}
{"java": "static void reverse ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i += k ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; int temp ; while ( left < right ) { temp = arr [ left ] ; arr [ left ] = arr [ right ] ; arr [ right ] = temp ; left += 1 ; right -= 1 ; } } }", "python": "def reverse ( arr , n , k ) :\n    i = 0\n    while ( i < n ) :\n        left = i\n        right = min ( i + k - 1 , n - 1 )\n        while ( left < right ) :\n            arr [ left ] , arr [ right ] = arr [ right ] , arr [ left ]\n            left += 1 ;\n            right - + 1\n        i += k\n"}
{"java": "static int find_n ( int [ ] a ) { int j = 0 , k = 0 , s = 0 ; int x = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; int y = Arrays . stream ( a ) . min ( ) . getAsInt ( ) ; for ( int i : a ) { if ( a [ i ] == x ) { s = i ; break ; } } for ( int i : a ) { if ( i != x && i <= y && i != 0 ) { a [ j ] += 1 ; a [ s ] -= 1 ; x -= 1 ; k += 1 ; j += 1 ; } else if ( i != 0 ) { j += 1 ; } } for ( int i : a ) { if ( a [ i ] != x ) { k = - 1 ; break ; } } return k ; }", "python": "def find_n ( a ) :\n    j , k = 0 , 0\n    x = max ( a )\n    for i in range ( len ( a ) ) :\n        if ( a [ i ] == x ) :\n            s = i\n            break\n    for i in a :\n        if ( i != x and i <= min ( a ) and i != ' \\ 0' ) :\n            a [ j ] += 1\n            a [ s ] -= 1\n            x -= 1\n            k += 1\n            j += 1\n        elif ( i != ' \\ 0' ) :\n            j += 1\n    for i in range ( len ( a ) ) :\n        if ( a [ i ] != x ) :\n            k = - 1\n        break\n    return k\n"}
{"java": "static int LongestFibSubseq ( int A [ ] , int n ) { TreeSet < Integer > S = new TreeSet < > ( ) ; for ( int t : A ) { S . add ( t ) ; } int maxLen = 0 , x , y ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { x = A [ j ] ; y = A [ i ] + A [ j ] ; int length = 3 ; while ( S . contains ( y ) && ( y != S . last ( ) ) ) { int z = x + y ; x = y ; y = z ; maxLen = Math . max ( maxLen , ++ length ) ; } } } return maxLen >= 3 ? maxLen : 0 ; }", "python": "def LongestFibSubseq ( A , n ) :\n    S = set ( A )\n    maxLen = 0\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            x = A [ j ]\n            y = A [ i ] + A [ j ]\n            length = 2\n            while y in S :\n                z = x + y\n                x = y\n                y = z\n                length += 1\n                maxLen = max ( maxLen , length )\n    return maxLen if maxLen >= 3 else 0\n"}
{"java": "static int findMaximumNum ( int arr [ ] , int n ) { for ( int i = n ; i >= 1 ; i -- ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( i <= arr [ j ] ) count ++ ; if ( count >= i ) return i ; } return 1 ; }", "python": "def findMaximumNum ( arr , n ) :\n    i = n\n    while ( i >= 1 ) :\n        count = 0\n        for j in range ( 0 , n , 1 ) :\n            if ( i <= arr [ j ] ) :\n                count += 1\n        if ( count >= i ) :\n            return i\n        i -= 1\n    return 1\n"}
{"java": "private static void sort ( String [ ] strArr , String str ) { Comparator < String > myComp = new Comparator < String > ( ) { @ Override public int compare ( String a , String b ) { for ( int i = 0 ; i < Math . min ( a . length ( ) , b . length ( ) ) ; i ++ ) { if ( str . indexOf ( a . charAt ( i ) ) == str . indexOf ( b . charAt ( i ) ) ) { continue ; } else if ( str . indexOf ( a . charAt ( i ) ) > str . indexOf ( b . charAt ( i ) ) ) { return 1 ; } else { return - 1 ; } } return 0 ; } } ; Arrays . sort ( strArr , myComp ) ; }", "python": "def sortStringArray ( s , a , n ) :\n    a = sorted ( a , key = lambda word : [ s . index ( c ) for c in word ] )\n    for i in a :\n        print ( i , end = ' \u2581 ' )\n"}
{"java": "static int findTransitionPoint ( int arr [ ] , int n ) { int lb = 0 , ub = n - 1 ; while ( lb <= ub ) { int mid = ( lb + ub ) / 2 ; if ( arr [ mid ] == 0 ) lb = mid + 1 ; else if ( arr [ mid ] == 1 ) { if ( arr [ mid - 1 ] == 0 ) return mid ; ub = mid - 1 ; } } return - 1 ; }", "python": "def findTransitionPoint ( arr , n ) :\n    lb = 0\n    ub = n - 1\n    while ( lb <= ub ) :\n        mid = ( int ) ( ( lb + ub ) / 2 )\n        if ( arr [ mid ] == 0 ) :\n            lb = mid + 1\n        elif ( arr [ mid ] == 1 ) :\n            if ( arr [ mid - 1 ] == 0 ) :\n                return mid\n            ub = mid - 1\n    return - 1\n"}
{"java": "static int maximumXor ( int arr [ ] , int n ) { Stack < Integer > sForward = new Stack < Integer > ( ) , sBackward = new Stack < Integer > ( ) ; int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { while ( ! sForward . isEmpty ( ) && arr [ i ] < arr [ sForward . peek ( ) ] ) { ans = Math . max ( ans , arr [ i ] ^ arr [ sForward . peek ( ) ] ) ; sForward . pop ( ) ; } sForward . add ( i ) ; while ( ! sBackward . isEmpty ( ) && arr [ n - i - 1 ] < arr [ sBackward . peek ( ) ] ) { ans = Math . max ( ans , arr [ n - i - 1 ] ^ arr [ sBackward . peek ( ) ] ) ; sBackward . pop ( ) ; } sBackward . add ( n - i - 1 ) ; } return ans ; }", "python": "def maximumXor ( arr : list , n : int ) -> int :\n    sForward , sBackward = [ ] , [ ]\n    ans = - 1\n    for i in range ( n ) :\n        while len ( sForward ) > 0 and arr [ i ] < arr [ sForward [ - 1 ] ] :\n            ans = max ( ans , arr [ i ] ^ arr [ sForward [ - 1 ] ] )\n            sForward . pop ( )\n        sForward . append ( i )\n        while len ( sBackward ) > 0 and arr [ n - i - 1 ] < arr [ sBackward [ - 1 ] ] :\n            ans = max ( ans , arr [ n - i - 1 ] ^ arr [ sBackward [ - 1 ] ] )\n            sBackward . pop ( )\n        sBackward . append ( n - i - 1 )\n    return ans\n"}
{"java": "static void print_max ( int a [ ] , int n , int k ) { int [ ] max_upto = new int [ n ] ; Stack < Integer > s = new Stack < > ( ) ; s . push ( 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { while ( ! s . empty ( ) && a [ s . peek ( ) ] < a [ i ] ) { max_upto [ s . peek ( ) ] = i - 1 ; s . pop ( ) ; } s . push ( i ) ; } while ( ! s . empty ( ) ) { max_upto [ s . peek ( ) ] = n - 1 ; s . pop ( ) ; } int j = 0 ; for ( int i = 0 ; i <= n - k ; i ++ ) { while ( j < i || max_upto [ j ] < i + k - 1 ) { j ++ ; } System . out . print ( a [ j ] + \" \u2581 \" ) ; } System . out . println ( ) ; }", "python": "def print_max ( a , n , k ) :\n    max_upto = [ 0 for i in range ( n ) ]\n    s = [ ]\n    s . append ( 0 )\n    for i in range ( 1 , n ) :\n        while ( len ( s ) > 0 and a [ s [ - 1 ] ] < a [ i ] ) :\n            max_upto [ s [ - 1 ] ] = i - 1\n            del s [ - 1 ]\n        s . append ( i )\n    while ( len ( s ) > 0 ) :\n        max_upto [ s [ - 1 ] ] = n - 1\n        del s [ - 1 ]\n    j = 0\n    for i in range ( n - k + 1 ) :\n        while ( j < i or max_upto [ j ] < i + k - 1 ) :\n            j += 1\n        print ( a [ j ] , end = \" \u2581 \" )\n    print ( )\n"}
{"java": "public static void printInitials ( String str ) { int len = str . length ( ) ; str = str . trim ( ) ; String t = \" \" ; for ( int i = 0 ; i < len ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch != ' \u2581 ' ) { t = t + ch ; } else { System . out . print ( Character . toUpperCase ( t . charAt ( 0 ) ) + \" . \u2581 \" ) ; t = \" \" ; } } String temp = \" \" ; for ( int j = 0 ; j < t . length ( ) ; j ++ ) { if ( j == 0 ) temp = temp + Character . toUpperCase ( t . charAt ( 0 ) ) ; else temp = temp + Character . toLowerCase ( t . charAt ( j ) ) ; } System . out . println ( temp ) ; }", "python": "def printInitials ( string : str ) :\n    length = len ( string )\n    string . strip ( )\n    t = \" \"\n    for i in range ( length ) :\n        ch = string [ i ]\n        if ch != ' \u2581 ' :\n            t += ch\n        else :\n            print ( t [ 0 ] . upper ( ) + \" . \u2581 \" , end = \" \" )\n            t = \" \"\n    temp = \" \"\n    for j in range ( len ( t ) ) :\n        if j == 0 :\n            temp += t [ 0 ] . upper ( )\n        else :\n            temp += t [ j ] . lower ( )\n    print ( temp )\n"}
{"java": "static int longest_gap ( int N ) { int distance = 0 , count = 0 , first_1 = - 1 , last_1 = - 1 ; while ( N != 0 ) { count ++ ; int r = N & 1 ; if ( r == 1 ) { first_1 = first_1 == - 1 ? count : first_1 ; last_1 = count ; } N = N / 2 ; } if ( last_1 <= first_1 ) { return - 1 ; } else { distance = ( last_1 - first_1 - 1 ) ; return distance ; } }", "python": "def longest_gap ( N ) :\n    distance = 0\n    count = 0\n    first_1 = - 1\n    last_1 = - 1\n    while ( N > 0 ) :\n        count += 1\n        r = N & 1\n        if ( r == 1 ) :\n            if first_1 == - 1 :\n                first_1 = count\n            else :\n                first_1 = first_1\n            last_1 = count\n        N = N // 2\n    if ( last_1 <= first_1 ) :\n        return - 1\n    else :\n        distance = last_1 - first_1 - 1\n        return distance\n"}
{"java": "static int findLen ( int [ ] arr , int n , int m ) { Vector < Integer > filter = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( ( arr [ i ] & m ) == m ) filter . add ( arr [ i ] ) ; if ( filter . size ( ) == 0 ) return 0 ; int c_and = filter . get ( 0 ) ; for ( int i = 1 ; i < filter . size ( ) ; i ++ ) c_and &= filter . get ( i ) ; if ( c_and == m ) return filter . size ( ) ; return 0 ; }", "python": "def findLen ( arr , n , m ) :\n    filter = [ ] ;\n    for i in range ( n ) :\n        if ( ( arr [ i ] & m ) == m ) :\n            filter . append ( arr [ i ] ) ;\n    if ( len ( filter ) == 0 ) :\n        return 0 ;\n    c_and = filter [ 0 ] ;\n    for i in range ( 1 , len ( filter ) ) :\n        c_and &= filter [ i ] ;\n    if ( c_and == m ) :\n        return len ( filter ) ;\n"}
{"java": "static void findArea ( float a , float b ) { float Area ; Area = ( float ) 3.142 * a * b ; System . out . println ( \" Area : \u2581 \" + Area ) ; }", "python": "def findArea ( a , b ) :\n    Area = 3.142 * a * b ;\n    print ( \" Area : \" , round ( Area , 2 ) ) ;\n"}
{"java": "static void checkEvenOdd ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . print ( \" Even \" ) ; return ; } } System . out . println ( \" Odd \" ) ; }", "python": "def checkEvenOdd ( arr , n ) :\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 == 0 ) :\n            print ( \" Even \" , end = \" \" ) ;\n            return ;\n    print ( \" Odd \" , end = \" \" ) ;\n"}
{"java": "static int calcExpectation ( int [ ] [ ] memo , int dis , int money ) { for ( int r = 0 ; r < memo . length ; r ++ ) { int max = memo [ 0 ] [ 1 ] ; int minusDis = memo [ 0 ] [ 0 ] , idx = 0 ; for ( int c = 1 ; c < memo . length ; c ++ ) { if ( memo [ c ] [ 1 ] > max ) { max = memo [ c ] [ 1 ] ; minusDis = memo [ c ] [ 0 ] ; idx = c ; } } if ( money >= minusDis ) { money -= minusDis ; memo [ idx ] [ 0 ] = 0 ; memo [ idx ] [ 1 ] = 0 ; } else { memo [ idx ] [ 0 ] -= money ; money = 0 ; } if ( money == 0 ) break ; } int ret = 0 ; for ( int r = 0 ; r < memo . length ; r ++ ) { int num = memo [ r ] [ 0 ] * memo [ r ] [ 1 ] ; if ( num > 0 ) ret += num ; } return ( ret ) ; }", "python": "def protect ( N , M ) :\n    DP = [ ]\n    for i in range ( N ) :\n        DP . append ( list ( map ( int , input ( ) . split ( ) ) ) )\n    DP . sort ( key = itemgetter ( 1 ) )\n    nokori = 0\n    for i in range ( N ) :\n        if M > DP [ N - i - 1 ] [ 0 ] :\n            M -= DP [ N - i - 1 ] [ 0 ]\n            DP . pop ( )\n        elif M <= DP [ N - i - 1 ] [ 0 ] :\n            nokori = ( DP [ N - i - 1 ] [ 0 ] - M ) * DP [ N - i - 1 ] [ 1 ]\n            M = 0\n            DP . pop ( )\n            break\n    for i in range ( len ( DP ) ) :\n        nokori += DP [ i ] [ 0 ] * DP [ i ] [ 1 ]\n    print ( nokori )\n"}
{"java": "public static int countTotalDistinct ( String str ) { int cnt = 0 ; HashSet < String > items = new HashSet < > ( ) ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { String temp = \" \" ; HashSet < Character > ans = new HashSet < > ( ) ; for ( int j = i ; j < str . length ( ) ; ++ j ) { temp = temp + str . charAt ( j ) ; ans . add ( str . charAt ( j ) ) ; if ( ! items . contains ( temp ) ) { items . add ( temp ) ; cnt += ans . size ( ) ; } } } return cnt ; }", "python": "def countTotalDistinct ( string ) :\n    cnt = 0 ;\n    items = set ( ) ;\n    for i in range ( len ( string ) ) :\n        temp = \" \" ;\n        ans = set ( ) ;\n        for j in range ( i , len ( string ) ) :\n            temp = temp + string [ j ] ;\n            ans . add ( string [ j ] ) ;\n            if temp not in items :\n                items . add ( temp ) ;\n                cnt += len ( ans ) ;\n    return cnt ;\n"}
{"java": "public static double distance ( double d , double plan ) { double y , min = 101.0 , tmp = 0.0 ; int i ; for ( i = 0 ; i < ( int ) d ; i ++ ) { y = d - i ; tmp = Math . sqrt ( Math . pow ( y , 2.0 ) + Math . pow ( i , 2.0 ) ) ; tmp -= plan ; tmp = Math . abs ( tmp ) ; if ( tmp < min ) { min = tmp ; } } return min ; }", "python": "def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LS ( ) : return sys . stdin . readline ( ) . split ( )\ndef I ( ) : return int ( sys . stdin . readline ( ) )\ndef F ( ) : return float ( sys . stdin . readline ( ) )\ndef S ( ) : return input ( )\ndef pf ( s ) : return print ( s , flush = True )\ndef main ( ) :\n    rr = [ ]\n    while True :\n        d , e = LI ( )\n        if d == 0 :\n            break\n        r = inf\n        for i in range ( d // 2 + 1 ) :\n            j = d - i\n            tr = abs ( e - ( i ** 2 + j ** 2 ) ** 0.5 )\n            if r > tr :\n                r = tr\n        rr . append ( r )\n    return ' \\n ' . join ( map ( str , rr ) )\n"}
{"java": "public static void reverse ( char str [ ] ) { int r = str . length - 1 , l = 0 ; while ( l < r ) { if ( ! Character . isAlphabetic ( str [ l ] ) ) l ++ ; else if ( ! Character . isAlphabetic ( str [ r ] ) ) r -- ; else { char tmp = str [ l ] ; str [ l ] = str [ r ] ; str [ r ] = tmp ; l ++ ; r -- ; } } }", "python": "def reverseSting ( text ) :\n    index = - 1\n    for i in range ( len ( text ) - 1 , int ( len ( text ) / 2 ) , - 1 ) :\n        if text [ i ] . isalpha ( ) :\n            temp = text [ i ]\n            while True :\n                index += 1\n                if text [ index ] . isalpha ( ) :\n                    text [ i ] = text [ index ]\n                    text [ index ] = temp\n                    break\n    return text\n"}
{"java": "static int minParentheses ( String p ) { int bal = 0 ; int ans = 0 ; for ( int i = 0 ; i < p . length ( ) ; ++ i ) { bal += p . charAt ( i ) == ' ( ' ? 1 : - 1 ; if ( bal == - 1 ) { ans += 1 ; bal += 1 ; } } return bal + ans ; }", "python": "def minParentheses ( p ) :\n    bal = 0\n    ans = 0\n    for i in range ( 0 , len ( p ) ) :\n        if ( p [ i ] == ' ( ' ) :\n            bal += 1\n        else :\n            bal += - 1\n        if ( bal == - 1 ) :\n            ans += 1\n            bal += 1\n    return bal + ans\n"}
{"java": "static int findStepsForDDM ( int arr [ ] [ ] ) { int result = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) sum += Math . abs ( arr [ i ] [ j ] ) ; sum -= Math . abs ( arr [ i ] [ i ] ) ; if ( Math . abs ( arr [ i ] [ i ] ) < Math . abs ( sum ) ) result += Math . abs ( Math . abs ( arr [ i ] [ i ] ) - Math . abs ( sum ) ) ; } return result ; }", "python": "def findStepsForDDM ( arr ) :\n    result = 0\n    for i in range ( N ) :\n        sum = 0\n        for j in range ( N ) :\n            sum += abs ( arr [ i ] [ j ] )\n        sum -= abs ( arr [ i ] [ i ] )\n        if ( abs ( arr [ i ] [ i ] ) < abs ( sum ) ) :\n            result += abs ( abs ( arr [ i ] [ i ] ) - abs ( sum ) )\n    return result\n"}
{"java": "public static void Calculate_area ( ) { double b = 3 , h = 4 , s1 = 3 , s2 = 6 ; double s3 = 6 , Ht = 8 , SA ; SA = b * h + ( s1 + s2 + s3 ) * Ht ; System . out . printf ( \" The \u2581 area \u2581 of \u2581 triangular \u2581 prism \u2581 is \u2581 : \u2581 % f \" , SA ) ; }", "python": "def Calculate_area ( ) :\n    b = 3\n    h = 4\n    s1 = 3\n    s2 = 6\n    s3 = 6\n    Ht = 8\n    SA = b * h + ( s1 + s2 + s3 ) * Ht\n    print ( \" The \u2581 area \u2581 of \u2581 triangular \u2581 prism \u2581 is \u2581 : \" , SA )\n"}
{"java": "static double cyl ( double r , double h ) { if ( r < 0 && h < 0 ) return - 1 ; double R = ( 2 * r ) / 3 ; double H = ( 2 * h ) / 3 ; double V = 3.14 * Math . pow ( R , 2 ) * H ; return V ; }", "python": "def cyl ( r , h ) :\n    if ( r < 0 and h < 0 ) :\n        return - 1\n    R = ( 2 * r ) / 3\n    H = ( 2 * h ) / 3\n    V = 3.14 * math . pow ( R , 2 ) * H\n    return V\n"}
{"java": "static int countNumbers ( int N ) { return ( int ) Math . sqrt ( N ) - 1 ; }", "python": "def countNumbers ( N ) :\n    return int ( math . sqrt ( N ) ) - 1\n"}
{"java": "static int countWays ( int num ) { int [ ] dp = new int [ num + 1 ] ; int MOD = ( int ) 1E9 + 7 ; dp [ 1 ] = 2 ; for ( int i = 2 ; i <= num ; ++ i ) { dp [ i ] = 0 ; for ( int j = 1 ; j <= 3 ; ++ j ) { if ( i - j == 0 ) dp [ i ] += 1 ; else if ( j == 1 ) dp [ i ] += dp [ i - j ] * 2 ; else if ( i - j > 0 ) dp [ i ] += dp [ i - j ] ; if ( dp [ i ] >= MOD ) dp [ i ] %= MOD ; } } return dp [ num ] ; }", "python": "def countWays ( num ) :\n    dp = [ 0 ] * ( num + 1 ) ;\n    MOD = 100000000 + 7 ;\n    dp [ 1 ] = 2 ;\n    for i in range ( 2 , num + 1 ) :\n        dp [ i ] = 0 ;\n        for j in range ( 1 , 4 ) :\n            if ( i - j == 0 ) :\n                dp [ i ] += 1 ;\n            elif ( j == 1 ) :\n                dp [ i ] += dp [ i - j ] * 2 ;\n            elif ( i - j > 0 ) :\n                dp [ i ] += dp [ i - j ] ;\n        if ( dp [ i ] >= MOD ) :\n            dp [ i ] %= MOD ;\n    return dp [ num ] ;\n"}
{"java": "static int countSubarrays ( int a [ ] , int n , int m ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int odd = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( a [ j ] % 2 == 0 ) odd ++ ; if ( odd == m ) count ++ ; } } return count ; }", "python": "def countSubarrays ( a , n , m ) :\n    count = 0 ;\n    for i in range ( n ) :\n        odd = 0 ;\n        for j in range ( i , n ) :\n            if ( a [ j ] % 2 ) :\n                odd += 1 ;\n            if ( odd == m ) :\n                count += 1 ;\n    return count ;\n"}
{"java": "static int countPairs ( int arr [ ] , int n ) { int size = ( 2 * N ) + 1 ; int freq [ ] = new int [ size ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; freq [ x + N ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( freq [ i ] > 0 ) { ans += ( ( freq [ i ] ) * ( freq [ i ] - 1 ) ) / 2 ; for ( int j = i + 2 ; j < 2001 ; j += 2 ) { if ( freq [ j ] > 0 && ( freq [ ( i + j ) / 2 ] > 0 ) ) { ans += ( freq [ i ] * freq [ j ] ) ; } } } } return ans ; }", "python": "def countPairs ( arr , n ) :\n    size = ( 2 * N ) + 1\n    freq = [ 0 for i in range ( size ) ]\n    for i in range ( n ) :\n        x = arr [ i ]\n        freq [ x + N ] += 1\n    ans = 0\n    for i in range ( size ) :\n        if ( freq [ i ] > 0 ) :\n            ans += int ( ( ( freq [ i ] ) * ( freq [ i ] - 1 ) ) / 2 )\n            for j in range ( i + 2 , 2001 , 2 ) :\n                if ( freq [ j ] > 0 and ( freq [ int ( ( i + j ) / 2 ) ] > 0 ) ) :\n                    ans += ( freq [ i ] * freq [ j ] )\n    return ans\n"}
{"java": "public static int power ( int n , int m ) { int res = 1 ; if ( m == 0 ) { return 1 ; } else { if ( n == 0 ) { return 0 ; } else { for ( int i = 0 ; i < m ; i ++ ) { res = res * n ; } return res ; } } }", "python": "def main ( ) :\n    N , M = ( int ( i ) for i in input ( ) . split ( ) )\n    A = [ ]\n    B = [ ]\n    C = [ ]\n    for _ in range ( M ) :\n        a , b = ( int ( i ) for i in input ( ) . split ( ) )\n        A . append ( a )\n        B . append ( b )\n        C . append ( { int ( i ) for i in input ( ) . split ( ) } )\n    dp = [ [ INF ] * ( 1 << N ) for _ in range ( M + 1 ) ]\n    dp [ 0 ] [ 0 ] = 0\n    for i in range ( M ) :\n        for j in range ( 1 << N ) :\n            dp [ i + 1 ] [ j ] = min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j ] )\n            if dp [ i ] [ j ] != INF :\n                next_bit = j\n                for bit in C [ i ] :\n                    next_bit |= ( 1 << ( bit - 1 ) )\n                dp [ i + 1 ] [ next_bit ] = min ( dp [ i + 1 ] [ next_bit ] , dp [ i ] [ j ] + A [ i ] )\n    ans = dp [ - 1 ] [ - 1 ]\n    if ans == INF :\n        print ( - 1 )\n    else :\n        print ( ans )\n"}
{"java": "static int largestCoprime ( int N ) { if ( N == 6 ) return 1 ; else if ( N % 4 == 0 ) return ( N / 2 ) - 1 ; else if ( N % 2 == 0 ) return ( N / 2 ) - 2 ; else return ( ( N - 1 ) / 2 ) ; }", "python": "def largestCoprime ( N ) :\n    if N == 6 :\n        return 1\n    elif N % 4 == 0 :\n        return N // 2 - 1\n    elif N % 2 == 0 :\n        return N // 2 - 2\n    else :\n        return ( N - 1 ) // 2\n"}
{"java": "static void multiply ( int mat1 [ ] [ ] , int mat2 [ ] [ ] , int res [ ] [ ] ) { int i , j , k ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < N ; j ++ ) { res [ i ] [ j ] = 0 ; for ( k = 0 ; k < N ; k ++ ) res [ i ] [ j ] += mat1 [ i ] [ k ] * mat2 [ k ] [ j ] ; } } }", "python": "def matrix_multiplication ( M , N ) :\n    R = [ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]\n    for i in range ( 0 , 4 ) :\n        for j in range ( 0 , 4 ) :\n            for k in range ( 0 , 4 ) :\n                R [ i ] [ j ] += M [ i ] [ k ] * N [ k ] [ j ]\n    for i in range ( 0 , 4 ) :\n        for j in range ( 0 , 4 ) :\n            print ( R [ i ] [ j ] , end = \" \u2581 \" )\n        print ( \" \\n \" , end = \" \" )\n"}
{"java": "static int count_element ( int N , int K , int [ ] arr ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; ++ i ) if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } int answer = 0 ; for ( Map . Entry < Integer , Integer > i : mp . entrySet ( ) ) { if ( mp . containsKey ( i . getKey ( ) + K ) ) answer += i . getValue ( ) ; } return answer ; }", "python": "def count_element ( N , K , arr ) :\n    mp = dict ( )\n    for i in range ( N ) :\n        mp [ arr [ i ] ] = mp . get ( arr [ i ] , 0 ) + 1\n    answer = 0\n    for i in mp :\n        if i + K in mp :\n            answer += mp [ i ]\n    return answer\n"}
{"java": "static int sumKRepeating ( int arr [ ] , int n , int k ) { int sum = 0 ; HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! mp . containsKey ( arr [ i ] ) ) mp . put ( arr [ i ] , 0 ) ; mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } for ( Integer x : mp . keySet ( ) ) if ( mp . get ( x ) == k ) sum += x ; return sum ; }", "python": "def sumKRepeating ( arr , n , k ) :\n    Sum = 0\n    mp = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in mp . keys ( ) :\n            mp [ arr [ i ] ] += 1\n        else :\n            mp [ arr [ i ] ] = 1\n    for x in mp :\n        if ( mp [ x ] == k ) :\n            Sum += x\n    return Sum\n"}
{"java": "static boolean isPerfectSquareString ( String str ) { int sum = 0 ; int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) sum += ( int ) str . charAt ( i ) ; long squareRoot = ( long ) Math . sqrt ( sum ) ; return ( ( squareRoot - Math . floor ( squareRoot ) ) == 0 ) ; }", "python": "def isPerfectSquareString ( str ) :\n    sum = 0 ;\n    l = len ( str ) ;\n    for i in range ( l ) :\n        sum = sum + ord ( str [ i ] ) ;\n    squareRoot = math . sqrt ( sum ) ;\n    return ( ( squareRoot - math . floor ( squareRoot ) ) == 0 ) ;\n"}
{"java": "static int calculateLeaps ( int n ) { if ( n == 0 ) return 1 ; return ( 1 << ( n - 1 ) ) ; }", "python": "def calculateLeaps ( n ) :\n    if ( n == 0 ) :\n        return 1 ;\n    return ( 1 << ( n - 1 ) ) ;\n"}
{"java": "static void solve ( InputStream is , PrintStream os ) { Scanner scan = new Scanner ( is ) ; int N = scan . nextInt ( ) ; int answer = ( int ) Math . pow ( ( double ) N , 3.0 ) ; os . println ( answer ) ; }", "python": "def main ( ) :\n    n = int ( input ( ) )\n    print ( n ** 3 )\n"}
{"java": "static void MinimumSwapOperations ( String s ) { boolean zero_exist = false ; boolean multiple_of_2 = false ; int sum = 0 ; int index_of_zero = 0 ; boolean more_zero = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int val = s . charAt ( i ) - '0' ; if ( zero_exist == true ) more_zero = true ; if ( val == 0 ) { zero_exist = true ; index_of_zero = i ; } sum += val ; } if ( zero_exist == false || sum % 3 != 0 ) { System . out . println ( \" - 1\" ) ; return ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int val = s . charAt ( i ) - '0' ; if ( val % 2 == 0 && i != index_of_zero ) multiple_of_2 = true ; } if ( multiple_of_2 == false ) { System . out . println ( \" - 1\" ) ; return ; } int last_val = s . charAt ( s . length ( ) - 1 ) - '0' ; int second_last_val = s . charAt ( s . length ( ) - 2 ) - '0' ; if ( last_val == 0 && second_last_val % 2 == 0 ) System . out . println ( 0 ) ; else if ( ( last_val == 0 && second_last_val % 2 != 0 ) || ( last_val % 2 == 0 && second_last_val == 0 ) ) System . out . println ( 1 ) ; else if ( more_zero == true && ( last_val == 0 && second_last_val % 2 != 0 ) ) System . out . println ( 1 ) ; else System . out . println ( 2 ) ; }", "python": "def MinimumSwapOperations ( s ) :\n    zero_exist = False\n    multiple_of_2 = False\n    sum = 0\n    index_of_zero = 0\n    more_zero = False\n    for i in range ( len ( s ) ) :\n        val = ord ( s [ i ] ) - ord ( '0' )\n        if ( zero_exist == True ) :\n            more_zero = True\n        if ( val == 0 ) :\n            zero_exist = True\n            index_of_zero = i\n        sum += val\n    if ( zero_exist == False or sum % 3 != 0 ) :\n        print ( \" - 1\" )\n        return\n    for i in range ( len ( s ) ) :\n        val = ord ( s [ i ] ) - ord ( '0' )\n        if ( val % 2 == 0 and i != index_of_zero ) :\n            multiple_of_2 = True\n    if ( multiple_of_2 == False ) :\n        print ( \" - 1\" )\n        return\n    last_val = ord ( s [ len ( s ) - 1 ] ) - ord ( '0' )\n    second_last_val = ord ( s [ len ( s ) - 2 ] ) - ord ( '0' )\n    if ( last_val == 0 and second_last_val % 2 == 0 ) :\n        print ( 0 )\n    elif ( ( last_val == 0 and second_last_val % 2 != 0 ) or ( last_val % 2 == 0 and second_last_val == 0 ) ) :\n        print ( 1 )\n    elif ( more_zero == True and ( last_val == 0 and second_last_val % 2 != 0 ) ) :\n        print ( 1 )\n    else :\n        print ( 2 )\n"}
{"java": "static int countOdd ( int L , int R ) { int N = ( R - L ) / 2 ; if ( R % 2 != 0 || L % 2 != 0 ) N ++ ; return N ; }", "python": "def countOdd ( L , R ) :\n    N = ( R - L ) // 2\n    if ( R % 2 != 0 or L % 2 != 0 ) :\n        N += 1\n    return N\n"}
{"java": "static void perfectCube ( int N ) { int cube_root ; cube_root = ( int ) Math . round ( Math . cbrt ( N ) ) ; if ( cube_root * cube_root * cube_root == N ) { System . out . println ( \" Yes \" ) ; return ; } else { System . out . println ( \" NO \" ) ; return ; } }", "python": "def perfectCube ( N ) :\n    cube_root = round ( N ** ( 1 / 3 ) ) ;\n    if cube_root * cube_root * cube_root == N :\n        print ( \" Yes \" ) ;\n        return ;\n    else :\n        print ( \" NO \" ) ;\n        return ;\n"}
{"java": "static void printKMax ( int a [ ] , int n , int k ) { if ( k == 1 ) { for ( int i = 0 ; i < n ; i += 1 ) System . out . print ( a [ i ] + \" \u2581 \" ) ; return ; } int p = 0 , q = k - 1 , t = p , max = a [ k - 1 ] ; while ( q <= n - 1 ) { if ( a [ p ] > max ) max = a [ p ] ; p += 1 ; if ( q == p && p != n ) { System . out . print ( max + \" \u2581 \" ) ; q ++ ; p = ++ t ; if ( q < n ) max = a [ q ] ; } } }", "python": "def printKMax ( a , n , k ) :\n    if ( k == 1 ) :\n        for i in range ( n ) :\n            print ( a [ i ] , end = \" \u2581 \" ) ;\n        return ;\n    p = 0 ;\n    q = k - 1 ;\n    t = p ;\n    max = a [ k - 1 ] ;\n    while ( q <= n - 1 ) :\n        if ( a [ p ] > max ) :\n            max = a [ p ] ;\n        p += 1 ;\n        if ( q == p and p != n ) :\n            print ( max , end = \" \u2581 \" ) ;\n            q += 1 ;\n            p = t + 1 ;\n            if ( q < n ) :\n                max = a [ q ] ;\n"}
{"java": "static int lastKDigits ( int a [ ] , int n , int k ) { int num = ( int ) ( Math . pow ( 10 , k ) ) ; int mul = a [ 0 ] % num ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i ] % num ; mul = ( a [ i ] * mul ) % num ; } return mul ; }", "python": "def lastKDigits ( a , n , k ) :\n    num = ( int ) ( math . pow ( 10 , k ) )\n    mul = a [ 0 ] % num\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i ] % num\n        mul = ( a [ i ] * mul ) % num\n    return mul\n"}
{"java": "static int CalculateDifference ( int arr [ ] , int n ) { int max_val = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max_val ) max_val = arr [ i ] ; } boolean [ ] prime = new boolean [ max_val + 1 ] ; for ( int i = 0 ; i <= max_val ; i ++ ) prime [ i ] = true ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int S1 = 0 , S2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { S1 += arr [ i ] ; } else if ( arr [ i ] != 1 ) { S2 += arr [ i ] ; } } return Math . abs ( S2 - S1 ) ; }", "python": "def CalculateDifference ( arr , n ) :\n    max_val = - 1\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] > max_val ) :\n            max_val = arr [ i ]\n    prime = [ True for i in range ( max_val + 1 ) ]\n    prime [ 0 ] = False\n    prime [ 1 ] = False\n    p = 2\n    while ( p * p <= max_val ) :\n        if prime [ p ] == True :\n            for i in range ( p * 2 , max_val + 1 , p ) :\n                prime [ i ] = False\n        p += 1\n    S1 = 0\n    S2 = 0\n    for i in range ( 0 , n ) :\n        if prime [ arr [ i ] ] :\n            S1 += arr [ i ]\n        elif arr [ i ] != 1 :\n            S2 += arr [ i ]\n    return abs ( S2 - S1 )\n"}
{"java": "static void printSeriesSum ( int N ) { double sum = 0 ; int a = 1 ; int cnt = 0 ; boolean flag = true ; sum += a ; while ( cnt < N ) { int nextElement ; if ( flag == true ) { nextElement = a * 2 ; sum += nextElement ; flag = ! flag ; } else { nextElement = a * 3 / 2 ; sum += nextElement ; flag = ! flag ; } a = nextElement ; cnt ++ ; } System . out . println ( sum ) ; }", "python": "def printSeriesSum ( N ) :\n    sum = 0 ;\n    a = 1 ;\n    cnt = 0 ;\n    flag = True ;\n    sum += a ;\n    while ( cnt < N ) :\n        nextElement = None ;\n        if ( flag ) :\n            nextElement = a * 2 ;\n            sum += nextElement ;\n            flag = not flag ;\n        else :\n            nextElement = a * ( 3 / 2 ) ;\n            sum += nextElement ;\n            flag = not flag ;\n        a = nextElement ;\n        cnt += 1\n    print ( sum ) ;\n"}
{"java": "static int Minimum_Operations ( int [ ] a , int n ) { int [ ] np = new int [ n + 1 ] ; np [ n ] = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { np [ i ] = np [ i + 1 ] ; if ( a [ i ] <= 0 ) np [ i ] ++ ; } int pos = 0 ; int ans = n ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] >= 0 ) pos ++ ; ans = Math . min ( ans , pos + np [ i + 1 ] ) ; } return ans ; }", "python": "def Minimum_Operations ( a , n ) :\n    np = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        np [ i ] = np [ i + 1 ]\n        if ( a [ i ] <= 0 ) :\n            np [ i ] += 1\n    pos = 0\n    ans = n\n    for i in range ( n - 1 ) :\n        if ( a [ i ] >= 0 ) :\n            pos += 1\n        ans = min ( ans , pos + np [ i + 1 ] )\n    return ans\n"}
{"java": "static int sumFirst ( int a [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; int suf = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { suf += a [ i ] ; mp . put ( suf , i ) ; } int pre = 0 , maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { pre += a [ i ] ; if ( mp . containsKey ( pre ) && mp . get ( pre ) > i ) { if ( pre > maxi ) { maxi = pre ; } } } if ( maxi == - 1 ) return 0 ; else return maxi ; }", "python": "def sumFirst ( a , n ) :\n    mp = { i : 0 for i in range ( 7 ) }\n    suf = 0\n    i = n - 1\n    while ( i >= 0 ) :\n        suf += a [ i ]\n        mp [ suf ] = i\n        i -= 1\n    pre = 0\n    maxi = - 1\n    for i in range ( n ) :\n        pre += a [ i ]\n        if ( mp [ pre ] > i ) :\n            if ( pre > maxi ) :\n                maxi = pre\n    if ( maxi == - 1 ) :\n        return 0\n    else :\n        return maxi\n"}
{"java": "static boolean isPossible ( int l , int m , int x , int y ) { if ( l * m == x + y ) return true ; return false ; }", "python": "def isPossible ( l , m , x , y ) :\n    if ( l * m == x + y ) :\n        return True ;\n    return False ;\n"}
{"java": "static void multiple ( int a , int b , int x ) { if ( b < 0 ) { if ( a == 1 && x == 1 ) System . out . println ( \"1\" ) ; else System . out . println ( \"0\" ) ; } int mul = ( int ) Math . pow ( a , b ) ; int ans = mul / x ; int ans1 = x * ans ; int ans2 = x * ( ans + 1 ) ; System . out . println ( ( ( mul - ans1 ) <= ( ans2 - mul ) ) ? ans1 : ans2 ) ; }", "python": "def multiple ( a , b , x ) :\n    if ( b < 0 ) :\n        if ( a == 1 and x == 1 ) :\n            print ( \"1\" ) ;\n        else :\n            print ( \"0\" ) ;\n    mul = int ( pow ( a , b ) ) ;\n    ans = int ( mul / x ) ;\n    ans1 = x * ans ;\n    ans2 = x * ( ans + 1 ) ;\n    if ( ( mul - ans1 ) <= ( ans2 - mul ) ) :\n        print ( ans1 ) ;\n    else :\n        print ( ans2 ) ;\n"}
{"java": "static int sum ( int k , int n ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { int p = 1 ; for ( int j = 0 ; j < n - i ; j ++ ) { p = p * k ; } for ( int j = 0 ; j < i ; j ++ ) { p = p * ( k - 1 ) ; } sum = sum + p ; } return sum ; }", "python": "def Sum ( k , n ) :\n    Summ = 0\n    for i in range ( n + 1 ) :\n        p = 1\n        for j in range ( n - i ) :\n            p = p * k\n        for j in range ( i ) :\n            p = p * ( k - 1 )\n        Summ = Summ + p\n    return Summ\n"}
{"java": "static int minimumX ( int n , int k ) { int mini = Integer . MAX_VALUE ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { int fir = i ; int sec = n / i ; int num1 = fir * k + sec ; int res = ( num1 / k ) * ( num1 % k ) ; if ( res == n ) mini = Math . min ( num1 , mini ) ; int num2 = sec * k + fir ; res = ( num2 / k ) * ( num2 % k ) ; if ( res == n ) mini = Math . min ( num2 , mini ) ; } } return mini ; }", "python": "def minimumX ( n , k ) :\n    mini = sys . maxsize\n    i = 1\n    while i * i <= n :\n        if ( n % i == 0 ) :\n            fir = i\n            sec = n // i\n            num1 = fir * k + sec\n            res = ( num1 // k ) * ( num1 % k )\n            if ( res == n ) :\n                mini = min ( num1 , mini )\n            num2 = sec * k + fir\n            res = ( num2 // k ) * ( num2 % k )\n            if ( res == n ) :\n                mini = min ( num2 , mini )\n        i += 1\n    return mini\n"}
{"java": "static int minMoves ( int arr [ ] , int n ) { int expectedItem = n ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] == expectedItem ) expectedItem -- ; } return expectedItem ; }", "python": "def minMoves ( arr , n ) :\n    expectedItem = n\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( arr [ i ] == expectedItem ) :\n            expectedItem -= 1\n    return expectedItem\n"}
{"java": "static int minCost ( int [ ] [ ] graph , int n ) { int cost1 = 0 , cost2 = 0 ; boolean [ ] start = new boolean [ n + 1 ] ; boolean [ ] end = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int a = graph [ i ] [ 0 ] ; int b = graph [ i ] [ 1 ] ; int c = graph [ i ] [ 2 ] ; if ( start [ a ] || end [ b ] ) { cost2 += c ; start [ b ] = true ; end [ a ] = true ; } else { cost1 += c ; start [ a ] = true ; end [ b ] = true ; } } return Math . min ( cost1 , cost2 ) ; }", "python": "def minCost ( graph , n ) :\n    cost1 , cost2 = 0 , 0 ;\n    start = [ False ] * ( n + 1 ) ;\n    end = [ False ] * ( n + 1 ) ;\n    for i in range ( n ) :\n        a = graph [ i ] [ 0 ] ;\n        b = graph [ i ] [ 1 ] ;\n        c = graph [ i ] [ 2 ] ;\n        if ( start [ a ] or end [ b ] ) :\n            cost2 += c ;\n            start [ b ] = True ;\n            end [ a ] = True ;\n        else :\n            cost1 += c ;\n            start [ a ] = True ;\n            end [ b ] = True ;\n    return min ( cost1 , cost2 ) ;\n"}
{"java": "static void printDiamond ( int n ) { System . out . println ( ) ; int i , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) System . out . print ( \" * \" ) ; for ( j = 0 ; j < 2 * i + 1 ; j ++ ) System . out . print ( \" \u2581 \" ) ; for ( j = i ; j < n ; j ++ ) System . out . print ( \" * \" ) ; System . out . println ( ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < i + 2 ; j ++ ) System . out . print ( \" * \" ) ; for ( j = 0 ; j < 2 * ( n - 1 - i ) - 1 ; j ++ ) System . out . print ( \" \u2581 \" ) ; for ( j = 0 ; j < i + 2 ; j ++ ) System . out . print ( \" * \" ) ; System . out . println ( ) ; } System . out . println ( ) ; }", "python": "def printDiamond ( n ) :\n    print ( \" \" )\n    j = 0\n    for i in range ( 0 , n ) :\n        for j in range ( i , n ) :\n            print ( \" * \" , end = \" \" )\n        for j in range ( 0 , 2 * i + 1 ) :\n            print ( \" \u2581 \" , end = \" \" )\n        for j in range ( i , n ) :\n            print ( \" * \" , end = \" \" )\n        print ( \" \" )\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( 0 , i + 2 ) :\n            print ( \" * \" , end = \" \" )\n        for j in range ( 0 , 2 * ( n - 1 - i ) - 1 ) :\n            print ( \" \u2581 \" , end = \" \" )\n        for j in range ( 0 , i + 2 ) :\n            print ( \" * \" , end = \" \" )\n        print ( \" \" )\n    print ( \" \" )\n"}
{"java": "static int getCount ( int arr [ ] , int n , int num1 , int num2 ) { int i = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == num1 ) break ; if ( i >= n - 1 ) return 0 ; int j ; for ( j = n - 1 ; j >= i + 1 ; j -- ) if ( arr [ j ] == num2 ) break ; if ( j == i ) return 0 ; return ( j - i - 1 ) ; }", "python": "def getCount ( arr , n , num1 , num2 ) :\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == num1 ) :\n            break\n    if ( i >= n - 1 ) :\n        return 0\n    for j in range ( n - 1 , i + 1 , - 1 ) :\n        if ( arr [ j ] == num2 ) :\n            break\n    if ( j == i ) :\n        return 0\n    return ( j - i - 1 )\n"}
{"java": "static void printArray ( int [ ] A , int n , int K ) { int minEle = Integer . MAX_VALUE , maxEle = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { minEle = Math . min ( minEle , A [ i ] ) ; maxEle = Math . max ( maxEle , A [ i ] ) ; } if ( K != 0 ) { if ( K % 2 == 1 ) { for ( int i = 0 ; i < n ; i ++ ) A [ i ] = maxEle - A [ i ] ; } else { for ( int i = 0 ; i < n ; i ++ ) A [ i ] = A [ i ] - minEle ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( A [ i ] + \" \u2581 \" ) ; }", "python": "def printArray ( A , n , K ) :\n    minEle = 10 ** 9\n    maxEle = - 10 ** 9\n    for i in range ( n ) :\n        minEle = min ( minEle , A [ i ] )\n        maxEle = max ( maxEle , A [ i ] )\n    if ( K != 0 ) :\n        if ( K % 2 == 1 ) :\n            for i in range ( n ) :\n                A [ i ] = maxEle - A [ i ]\n        else :\n            for i in range ( n ) :\n                A [ i ] = A [ i ] - minEle\n    for i in A :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "static int minSwaps ( String s1 , String s2 ) { int c0 = 0 , c1 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == '0' && s2 . charAt ( i ) == '1' ) { c0 ++ ; } else if ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '0' ) { c1 ++ ; } } int ans = c0 / 2 + c1 / 2 ; if ( c0 % 2 == 0 && c1 % 2 == 0 ) { return ans ; } else if ( ( c0 + c1 ) % 2 == 0 ) { return ans + 2 ; } else { return - 1 ; } }", "python": "def minSwaps ( s1 , s2 ) :\n    c0 = 0 ; c1 = 0 ;\n    for i in range ( len ( s1 ) ) :\n        if ( s1 [ i ] == '0' and s2 [ i ] == '1' ) :\n            c0 += 1 ;\n        elif ( s1 [ i ] == '1' and s2 [ i ] == '0' ) :\n            c1 += 1 ;\n    ans = c0 // 2 + c1 // 2 ;\n    if ( c0 % 2 == 0 and c1 % 2 == 0 ) :\n        return ans ;\n    elif ( ( c0 + c1 ) % 2 == 0 ) :\n        return ans + 2 ;\n    else :\n        return - 1 ;\n"}
{"java": "static int getTotalCoverageOfMatrix ( int [ ] [ ] mat ) { int res = 0 ; for ( int i = 0 ; i < R ; i ++ ) { boolean isOne = false ; for ( int j = 0 ; j < C ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) isOne = true ; else if ( isOne ) res ++ ; } isOne = false ; for ( int j = C - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] == 1 ) isOne = true ; else if ( isOne ) res ++ ; } } for ( int j = 0 ; j < C ; j ++ ) { boolean isOne = false ; for ( int i = 0 ; i < R ; i ++ ) { if ( mat [ i ] [ j ] == 1 ) isOne = true ; else if ( isOne ) res ++ ; } isOne = false ; for ( int i = R - 1 ; i >= 0 ; i -- ) { if ( mat [ i ] [ j ] == 1 ) isOne = true ; else if ( isOne ) res ++ ; } } return res ; }", "python": "def getTotalCoverageOfMatrix ( mat ) :\n    res = 0\n    for i in range ( R ) :\n        isOne = False\n        for j in range ( C ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                isOne = True\n            elif ( isOne ) :\n                res += 1\n        isOne = False\n        for j in range ( C - 1 , - 1 , - 1 ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                isOne = True\n            elif ( isOne ) :\n                res += 1\n    for j in range ( C ) :\n        isOne = False\n        for i in range ( R ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                isOne = True\n            elif ( isOne ) :\n                res += 1\n        isOne = False\n        for i in range ( R - 1 , - 1 , - 1 ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                isOne = True\n            elif ( isOne ) :\n                res += 1\n    return res\n"}
{"java": "static int minimizeDiff ( int [ ] arr , int n , int k ) { int max = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; if ( ( max - min ) <= k ) { return ( max - min ) ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; min = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return ( max - min ) ; }", "python": "def minimizeDiff ( arr , n , k ) :\n    max_element = max ( arr )\n    min_element = min ( arr )\n    if ( ( max_element - min_element ) <= k ) :\n        return ( max_element - min_element )\n    avg = ( max_element + min_element ) // 2\n    for i in range ( n ) :\n        if ( arr [ i ] > avg ) :\n            arr [ i ] -= k\n        else :\n            arr [ i ] += k\n    max_element = max ( arr )\n    min_element = min ( arr )\n    return ( max_element - min_element ) ;\n"}
{"java": "static float avgOfFirstN ( int n ) { return ( float ) ( 1 + n ) / 2 ; }", "python": "def avgOfFirstN ( n ) :\n    return ( float ) ( 1 + n ) / 2 ;\n"}
{"java": "static int squareDigitSum ( String number ) { int summ = 0 ; int num = Integer . parseInt ( number ) ; int squareNum = num * num ; while ( squareNum > 0 ) { summ = summ + ( squareNum % 10 ) ; squareNum = squareNum / 10 ; } return summ ; }", "python": "def squareDigitSum ( num ) :\n    summ = 0\n    num = int ( num )\n    squareNum = num * num\n    while squareNum > 0 :\n        summ = summ + ( squareNum % 10 )\n        squareNum = squareNum // 10\n    return summ\n"}
{"java": "static void findPhoneNumber ( int n ) { int temp = n ; int sum = 0 ; while ( temp != 0 ) { sum += temp % 10 ; temp = temp / 10 ; } if ( sum < 10 ) System . out . print ( n + \"0\" + sum ) ; else System . out . print ( n + \" \" + sum ) ; }", "python": "def findPhoneNumber ( n ) :\n    temp = n\n    sum = 0\n    while ( temp != 0 ) :\n        sum += temp % 10\n        temp = temp // 10\n    if ( sum < 10 ) :\n        print ( n , \"0\" , sum )\n    else :\n        n = str ( n )\n        sum = str ( sum )\n        n += sum\n        print ( n )\n"}
{"java": "static void shuffle ( int N , int key ) { int NO_OF_BITS = N ; int reverse_num = 0 , temp ; for ( int i = 0 ; i < NO_OF_BITS ; i ++ ) { temp = ( key & ( 1 << i ) ) ; if ( temp > 0 ) reverse_num |= ( 1 << ( ( NO_OF_BITS - 1 ) - i ) ) ; } System . out . print ( reverse_num ) ; }", "python": "def shuffle ( N , key ) :\n    NO_OF_BITS = N\n    reverse_num = 0\n    for i in range ( NO_OF_BITS ) :\n        temp = ( key & ( 1 << i ) )\n        if ( temp ) :\n            reverse_num |= ( 1 << ( ( NO_OF_BITS - 1 ) - i ) )\n    print ( reverse_num )\n"}
{"java": "static int minimumRemoval ( int n , int a [ ] ) { Map < Integer , Integer > c = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( c . containsKey ( a [ i ] ) ) { c . put ( a [ i ] , c . get ( a [ i ] ) + 1 ) ; } else { c . put ( a [ i ] , 1 ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { boolean ok = false ; for ( int j = 0 ; j < 31 ; j ++ ) { int x = ( 1 << j ) - a [ i ] ; if ( ( c . get ( x ) != null && ( c . get ( x ) > 1 ) ) || c . get ( x ) != null && ( c . get ( x ) == 1 && x != a [ i ] ) ) { ok = true ; break ; } } if ( ! ok ) ans ++ ; } return ans ; }", "python": "def minimumRemoval ( n , a ) :\n    c = dict . fromkeys ( a , 0 ) ;\n    for i in range ( n ) :\n        c [ a [ i ] ] += 1 ;\n    ans = 0 ;\n    for i in range ( n ) :\n        ok = False ;\n        for j in range ( 31 ) :\n            x = ( 1 << j ) - a [ i ] ;\n            if ( x in c and ( c [ x ] > 1 or ( c [ x ] == 1 and x != a [ i ] ) ) ) :\n                ok = True ;\n                break ;\n        if ( not ok ) :\n            ans += 1 ;\n    return ans ;\n"}
{"java": "static int countIntervals ( int [ ] [ ] arr , int V , int N ) { int count = 0 ; int li , ri ; for ( int i = 0 ; i < N ; i ++ ) { li = arr [ i ] [ 0 ] ; ri = arr [ i ] [ 1 ] ; if ( V >= li && V <= ri ) count ++ ; } return count ; }", "python": "def countIntervals ( arr , V , N ) :\n    count = 0\n    for i in range ( N ) :\n        li = arr [ i ] [ 0 ]\n        ri = arr [ i ] [ 1 ]\n        if ( V >= li and V <= ri ) :\n            count += 1\n    return count ;\n"}
{"java": "static int min_elimination ( int n , int [ ] arr ) { int count = 0 ; int prev_val = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int curr_val = arr [ i ] ; if ( curr_val % 2 == prev_val % 2 ) count ++ ; prev_val = curr_val ; } return count ; }", "python": "def min_elimination ( n , arr ) :\n    count = 0\n    prev_val = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        curr_val = arr [ i ] ;\n        if ( curr_val % 2 == prev_val % 2 ) :\n            count = count + 1\n        prev_val = curr_val\n    return count\n"}
{"java": "static boolean isFactorial ( int n ) { for ( int i = 1 ; ; i ++ ) { if ( n % i == 0 ) { n /= i ; } else { break ; } } if ( n == 1 ) { return true ; } else { return false ; } }", "python": "def isFactorial ( n ) :\n    i = 1 ;\n    while ( True ) :\n        if ( n % i == 0 ) :\n            n //= i ;\n        else :\n            break ;\n        i += 1 ;\n    if ( n == 1 ) :\n        return True ;\n    else :\n        return False ;\n"}
{"java": "public static int sumDivisorsOfDivisors ( int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int j = 2 ; j <= Math . sqrt ( n ) ; j ++ ) { int count = 0 ; while ( n % j == 0 ) { n /= j ; count ++ ; } if ( count != 0 ) mp . put ( j , count ) ; } if ( n != 1 ) mp . put ( n , 1 ) ; int ans = 1 ; for ( HashMap . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { int pw = 1 ; int sum = 0 ; for ( int i = entry . getValue ( ) + 1 ; i >= 1 ; i -- ) { sum += ( i * pw ) ; pw = entry . getKey ( ) ; } ans *= sum ; } return ans ; }", "python": "def sumDivisorsOfDivisors ( n ) :\n    mp = dict ( )\n    for j in range ( 2 , mt . ceil ( mt . sqrt ( n ) ) ) :\n        count = 0\n        while ( n % j == 0 ) :\n            n //= j\n            count += 1\n        if ( count ) :\n            mp [ j ] = count\n    if ( n != 1 ) :\n        mp [ n ] = 1\n    ans = 1\n    for it in mp :\n        pw = 1\n        summ = 0\n        for i in range ( mp [ it ] + 1 , 0 , - 1 ) :\n            summ += ( i * pw )\n            pw *= it\n        ans *= summ\n    return ans\n"}
{"java": "static void maxProductSum ( String str , int m ) { int n = str . length ( ) ; int product = 1 , sum = 0 ; for ( int i = 0 ; i < m ; i ++ ) { sum += ( str . charAt ( i ) - '0' ) ; product *= ( str . charAt ( i ) - '0' ) ; } int maxProd = product ; int maxSum = sum ; for ( int i = m ; i < n ; i ++ ) { product = product * ( str . charAt ( i ) - '0' ) / ( ( str . charAt ( i - m ) ) - '0' ) ; sum = sum + ( str . charAt ( i ) - '0' ) - ( ( str . charAt ( i - m ) ) - '0' ) ; maxProd = Math . max ( maxProd , product ) ; maxSum = Math . max ( maxSum , sum ) ; } System . out . println ( \" Maximum \u2581 Product \u2581 = \u2581 \" + maxProd ) ; System . out . println ( \" \\n Maximum \u2581 Sum \u2581 = \u2581 \" + maxSum ) ; }", "python": "def maxProductSum ( str , m ) :\n    n = len ( str )\n    product = 1\n    sum = 0\n    for i in range ( m ) :\n        sum += ( ord ( str [ i ] ) - ord ( '0' ) )\n        product *= ( ord ( str [ i ] ) - ord ( '0' ) )\n    maxProd = product\n    maxSum = sum\n    for i in range ( m , n ) :\n        product = ( product * ( ord ( str [ i ] ) - ord ( '0' ) ) // ( ( ord ( str [ i - m ] ) ) - ord ( '0' ) ) )\n        sum = ( sum + ( ord ( str [ i ] ) - ord ( '0' ) ) - ( ( ord ( str [ i - m ] ) ) - ord ( '0' ) ) )\n        maxProd = max ( maxProd , product )\n        maxSum = max ( maxSum , sum )\n    print ( \" Maximum \u2581 Product \u2581 = \" , maxProd )\n    print ( \" Maximum \u2581 Sum \u2581 = \" , maxSum )\n"}
{"java": "static int subsetXOR ( int arr [ ] , int n , int K ) { int max_ele = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] > max_ele ) max_ele = arr [ i ] ; int m = ( 1 << ( int ) ( Math . log ( max_ele ) / Math . log ( 2 ) + 1 ) ) - 1 ; int [ ] [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= m ; j ++ ) for ( int k = 0 ; k <= n ; k ++ ) dp [ i ] [ j ] [ k ] = 0 ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ] ; if ( k != 0 ) { dp [ i ] [ j ] [ k ] += k * dp [ i - 1 ] [ j ^ arr [ i - 1 ] ] [ k - 1 ] ; } } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += dp [ n ] [ K ] [ i ] ; } return ans ; }", "python": "def subsetXOR ( arr , n , K ) :\n    max_ele = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > max_ele ) :\n            max_ele = arr [ i ]\n    m = ( 1 << int ( log2 ( max_ele ) + 1 ) ) - 1\n    dp = [ [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ] for k in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        for j in range ( m + 1 ) :\n            for k in range ( n + 1 ) :\n                dp [ i ] [ j ] [ k ] = 0\n    for i in range ( n + 1 ) :\n        dp [ i ] [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( m + 1 ) :\n            for k in range ( n + 1 ) :\n                dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ]\n                if ( k != 0 ) :\n                    dp [ i ] [ j ] [ k ] += k * dp [ i - 1 ] [ j ^ arr [ i - 1 ] ] [ k - 1 ]\n    ans = 0\n    for i in range ( 1 , n + 1 ) :\n        ans += dp [ n ] [ K ] [ i ]\n    return ans\n"}
{"java": "static int calculateLeaps ( int n ) { if ( n == 0 || n == 1 ) { return 1 ; } else { int leaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) leaps += calculateLeaps ( i ) ; return leaps ; } }", "python": "def calculateLeaps ( n ) :\n    if n == 0 or n == 1 :\n        return 1 ;\n    else :\n        leaps = 0 ;\n        for i in range ( 0 , n ) :\n            leaps = leaps + calculateLeaps ( i ) ;\n        return leaps ;\n"}
{"java": "static boolean sumSquare ( int n ) { for ( long i = 1 ; i * i <= n ; i ++ ) for ( long j = 1 ; j * j <= n ; j ++ ) if ( i * i + j * j == n ) { System . out . println ( i + \" ^ 2 \u2581 + \u2581 \" + j + \" ^ 2\" ) ; return true ; } return false ; }", "python": "def sumSquare ( n ) :\n    i = 1\n    while i * i <= n :\n        j = 1\n        while ( j * j <= n ) :\n            if ( i * i + j * j == n ) :\n                print ( i , \" ^ 2 \u2581 + \u2581 \" , j , \" ^ 2\" )\n                return True\n            j = j + 1\n        i = i + 1\n    return False\n"}
{"java": "public static int findY ( int x ) { if ( x > 2 ) return x - 2 ; return x + 2 ; }", "python": "def findY ( x ) :\n    if ( x > 2 ) :\n        return x - 2\n    return x + 2\n"}
{"java": "static int maxOnesIndex ( boolean arr [ ] , int n ) { int start = 0 ; int end = 0 ; int maxIndex = - 1 ; int lastInd = - 1 ; int maxCnt = 0 ; while ( end < n ) { while ( end < n && arr [ end ] ) { end ++ ; } if ( maxCnt < end - start && lastInd != - 1 ) { maxCnt = end - start ; maxIndex = lastInd ; } start = lastInd + 1 ; lastInd = end ; end ++ ; } if ( maxCnt < end - start && lastInd != - 1 ) { maxCnt = end - start ; maxIndex = lastInd ; } return maxIndex ; }", "python": "def maxOnesIndex ( arr , n ) :\n    start = 0\n    end = 0\n    maxIndex = - 1\n    lastInd = - 1\n    maxCnt = 0\n    while ( end < n ) :\n        while ( end < n and arr [ end ] ) :\n            end += 1\n        if ( maxCnt < end - start and lastInd != - 1 ) :\n            maxCnt = end - start\n            maxIndex = lastInd\n        start = lastInd + 1\n        lastInd = end\n        end += 1\n    if ( maxCnt < end - start and lastInd != - 1 ) :\n        maxCnt = end - start\n        maxIndex = lastInd\n    return maxIndex\n"}
{"java": "static Vector < String > splitStrings ( String str , char dl ) { String word = \" \" ; int num = 0 ; str = str + dl ; int l = str . length ( ) ; Vector < String > substr_list = new Vector < String > ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( str . charAt ( i ) != dl ) { word = word + str . charAt ( i ) ; } else { if ( ( int ) word . length ( ) != 0 ) { substr_list . add ( word ) ; } word = \" \" ; } } return substr_list ; }", "python": "def splitStrings ( st , dl ) :\n    word = \" \"\n    num = 0\n    st += dl\n    l = len ( st )\n    substr_list = [ ]\n    for i in range ( l ) :\n        if ( st [ i ] != dl ) :\n            word += st [ i ]\n        else :\n            if ( len ( word ) != 0 ) :\n                substr_list . append ( word )\n            word = \" \"\n    return substr_list\n"}
{"java": "static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int max = Integer . MIN_VALUE ; int min = Integer . MAX_VALUE ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] <= min ) { min = array [ i ] ; } if ( array [ i ] >= max ) { max = array [ i ] ; } } System . out . println ( max - min ) ; }", "python": "def main ( ) :\n    N = int ( input ( ) )\n    A = list ( map ( int , input ( ) . split ( ) ) )\n    ans = - INF\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            ans = max ( ans , abs ( A [ i ] - A [ j ] ) )\n    print ( ans )\n"}
{"java": "static int findMod4 ( String s , int n ) { int k ; if ( n == 1 ) k = s . charAt ( 0 ) - '0' ; else k = ( s . charAt ( n - 2 ) - '0' ) * 10 + s . charAt ( n - 1 ) - '0' ; return ( k % 4 ) ; }", "python": "def findMod4 ( s , n ) :\n    if ( n == 1 ) :\n        k = ord ( s [ 0 ] ) - ord ( '0' )\n    else :\n        k = ( ( ord ( s [ n - 2 ] ) - ord ( '0' ) ) * 10 + ord ( s [ n - 1 ] ) - ord ( '0' ) )\n    return ( k % 4 )\n"}
{"java": "static int pairAndSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { int k = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) != 0 ) k ++ ; } ans += ( 1 << i ) * ( k * ( k - 1 ) / 2 ) ; } return ans ; }", "python": "def pairAndSum ( arr , n ) :\n    ans = 0\n    for i in range ( 0 , 32 ) :\n        k = 0\n        for j in range ( 0 , n ) :\n            if ( ( arr [ j ] & ( 1 << i ) ) ) :\n                k = k + 1\n        ans = ans + ( 1 << i ) * ( k * ( k - 1 ) // 2 )\n    return ans\n"}
{"java": "static int pairAndSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += arr [ i ] & arr [ j ] ; return ans ; }", "python": "def pairAndSum ( arr , n ) :\n    ans = 0\n    for i in range ( 0 , n ) :\n        for j in range ( ( i + 1 ) , n ) :\n            ans = ans + arr [ i ] & arr [ j ]\n    return ans\n"}
{"java": "static boolean productDivisible ( int n , int k ) { int product = 1 , position = 1 ; while ( n > 0 ) { if ( position % 2 == 0 ) { product *= n % 10 ; } n = n / 10 ; position ++ ; } if ( product % k == 0 ) { return true ; } return false ; }", "python": "def productDivisible ( n , k ) :\n    product = 1\n    position = 1\n    while n > 0 :\n        if position % 2 == 0 :\n            product *= n % 10\n        n = n / 10\n        position += 1\n    if product % k == 0 :\n        return True\n    return False\n"}
{"java": "static boolean checkPowerof8 ( int n ) { double i = Math . log ( n ) / Math . log ( 8 ) ; return ( i - Math . floor ( i ) < 0.000001 ) ; }", "python": "def checkPowerof8 ( n ) :\n    i = log ( n , 8 )\n    return ( i - trunc ( i ) < 0.000001 ) ;\n"}
{"java": "static int MaxIncreasingSub ( int arr [ ] , int n , int k ) { int dp [ ] [ ] = new int [ n ] [ k + 1 ] , ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < k + 1 ; j ++ ) dp [ i ] [ j ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 1 ] = arr [ i ] ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] < arr [ i ] ) { for ( int l = 1 ; l <= k - 1 ; l ++ ) { if ( dp [ j ] [ l ] != - 1 ) { dp [ i ] [ l + 1 ] = Math . max ( dp [ i ] [ l + 1 ] , dp [ j ] [ l ] + arr [ i ] ) ; } } } } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans < dp [ i ] [ k ] ) ans = dp [ i ] [ k ] ; } return ( ans == - 1 ) ? 0 : ans ; }", "python": "def MaxIncreasingSub ( arr , n , k ) :\n    dp = [ - 1 ] * n\n    ans = - 1\n    for i in range ( n ) :\n        dp [ i ] = [ - 1 ] * ( k + 1 )\n    for i in range ( n ) :\n        dp [ i ] [ 1 ] = arr [ i ]\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if arr [ j ] < arr [ i ] :\n                for l in range ( 1 , k ) :\n                    if dp [ j ] [ l ] != - 1 :\n                        dp [ i ] [ l + 1 ] = max ( dp [ i ] [ l + 1 ] , dp [ j ] [ l ] + arr [ i ] )\n    for i in range ( n ) :\n        if ans < dp [ i ] [ k ] :\n            ans = dp [ i ] [ k ]\n    return ( 0 if ans == - 1 else ans )\n"}
{"java": "static int countX ( int n ) { String binary = Integer . toBinaryString ( n ) ; int count = 0 ; for ( int i = 0 ; i < binary . length ( ) ; i ++ ) { if ( binary . charAt ( i ) == '1' ) count ++ ; } int answer = ( int ) Math . pow ( 2 , count ) ; return answer ; }", "python": "def countX ( n ) :\n    binary = \" { 0 : b } \" . format ( n )\n    count = 0\n    for i in range ( len ( binary ) ) :\n        if ( binary [ i ] == '1' ) :\n            count += 1\n    answer = int ( pow ( 2 , count ) )\n    return answer\n"}
{"java": "static int maximum_middle_value ( int n , int k , int arr [ ] ) { int ans = - 1 ; int low = ( n + 1 - k ) / 2 ; int high = ( n + 1 - k ) / 2 + k ; for ( int i = low ; i <= high ; i ++ ) { ans = Math . max ( ans , arr [ i - 1 ] ) ; } return ans ; }", "python": "def maximum_middle_value ( n , k , arr ) :\n    ans = - 1\n    low = ( n + 1 - k ) // 2\n    high = ( n + 1 - k ) // 2 + k\n    for i in range ( low , high + 1 ) :\n        ans = max ( ans , arr [ i - 1 ] )\n    return ans\n"}
{"java": "static int findSubarrCnt ( int arr [ ] , int n ) { int ans = 0 , XOR = 0 ; int prefix [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { XOR = XOR ^ arr [ i ] ; prefix [ i ] = XOR ; } HashMap < Integer , Integer > evenGroup = new HashMap < > ( ) ; HashMap < Integer , Integer > oddGroup = new HashMap < > ( ) ; oddGroup . put ( 0 , 1 ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( i % 2 == 1 ) { if ( oddGroup . containsKey ( prefix [ i ] ) ) { ans += oddGroup . get ( prefix [ i ] ) ; oddGroup . put ( prefix [ i ] , oddGroup . get ( prefix [ i ] + 1 ) ) ; } else { oddGroup . put ( prefix [ i ] , 1 ) ; } } else { if ( evenGroup . containsKey ( prefix [ i ] ) ) { ans += evenGroup . get ( prefix [ i ] ) ; evenGroup . put ( prefix [ i ] , evenGroup . get ( prefix [ i ] + 1 ) ) ; } else { evenGroup . put ( prefix [ i ] , 1 ) ; } } } return ans ; }", "python": "def findSubarrCnt ( arr , n ) :\n    ans = 0 ; XOR = 0 ;\n    prefix = [ 0 ] * n ;\n    for i in range ( n ) :\n        XOR = XOR ^ arr [ i ] ;\n        prefix [ i ] = XOR ;\n    oddGroup = dict . fromkeys ( prefix , 0 )\n    evenGroup = dict . fromkeys ( prefix , 0 )\n    oddGroup [ 0 ] = 1 ;\n    for i in range ( n ) :\n        if ( i & 1 ) :\n            ans += oddGroup [ prefix [ i ] ] ;\n            oddGroup [ prefix [ i ] ] += 1 ;\n        else :\n            ans += evenGroup [ prefix [ i ] ] ;\n            evenGroup [ prefix [ i ] ] += 1 ;\n    return ans ;\n"}
{"java": "static long removeRecur ( long n ) { long prev_digit = n % 10 ; long pow = 10 ; long res = prev_digit ; while ( n > 0 ) { long curr_digit = n % 10 ; if ( curr_digit != prev_digit ) { res += curr_digit * pow ; prev_digit = curr_digit ; pow *= 10 ; } n = n / 10 ; } return res ; }", "python": "def removeRecur ( n ) :\n    prev_digit = n % 10\n    pow = 10\n    res = prev_digit\n    while ( n ) :\n        curr_digit = n % 10\n        if ( curr_digit != prev_digit ) :\n            res += curr_digit * pow\n            prev_digit = curr_digit\n            pow *= 10\n        n = int ( n / 10 )\n    return res\n"}
{"java": "static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( \" Invalid \u2581 Input \" ) ; return - 1 ; } return ( n + 1 ) / 2 ; }", "python": "def averageOdd ( n ) :\n    if ( n % 2 == 0 ) :\n        print ( \" Invalid \u2581 Input \" )\n        return - 1\n    return ( n + 1 ) // 2\n"}
{"java": "static void dupLastIndex ( int arr [ ] , int n ) { if ( arr == null || n <= 0 ) return ; for ( int i = n - 1 ; i > 0 ; i -- ) { if ( arr [ i ] == arr [ i - 1 ] ) { System . out . println ( \" Last \u2581 index : \" + i ) ; System . out . println ( \" Last \u2581 duplicate \u2581 item : \u2581 \" + arr [ i ] ) ; return ; } } System . out . print ( \" no \u2581 duplicate \u2581 found \" ) ; }", "python": "def dupLastIndex ( arr , n ) :\n    if ( arr == None or n <= 0 ) :\n        return\n    for i in range ( n - 1 , 0 , - 1 ) :\n        if ( arr [ i ] == arr [ i - 1 ] ) :\n            print ( \" Last \u2581 index : \" , i , \" \\n Last \" , \" duplicate \u2581 item : \" , arr [ i ] )\n            return\n    print ( \" no \u2581 duplicate \u2581 found \" )\n"}
{"java": "static void makeTree ( int n , int h , int d ) { int even1 , even2 , i , count ; even1 = even2 = i = count = 0 ; if ( 2 * h < d || d < h || ( d == 1 && h == 1 && n > 2 ) ) System . out . println ( \" - 1\" ) ; else { for ( i = 1 ; i <= h ; i ++ , ++ count ) System . out . println ( ( i ) + \" \u2581 \" + ( 1 + i ) ) ; for ( int k = 1 ; k <= ( d - h ) && count < n - 1 ; k ++ , ++ count ) { if ( k == 1 ) System . out . println ( 1 + \" \u2581 \" + ( ++ i ) ) ; else System . out . println ( i + \" \u2581 \" + ( ++ i ) ) ; } for ( ; count < n - 1 ; ++ count ) if ( ( d - h ) > 0 ) System . out . println ( 1 + \" \u2581 \" + ( ++ i ) ) ; else System . out . println ( 2 + \" \u2581 \" + ( ++ i ) ) ; } }", "python": "def solve ( ) :\n    if 2 * h < d :\n        return False\n    L = [ ]\n    for i in range ( 1 , h + 1 ) :\n        L . append ( ( i , i + 1 ) )\n    remain = d - h\n    now = h + 2\n    if not remain and n > h + 1 :\n        if d == 1 :\n            return False\n        while now <= n :\n            L . append ( ( 2 , now ) )\n            now += 1\n    else :\n        while now <= n :\n            L . append ( ( 1 , now ) )\n            for _ in range ( remain - 1 ) :\n                if now == n :\n                    break\n                L . append ( ( now , now + 1 ) )\n                now += 1\n            now += 1\n    for x , y in L :\n        print ( x , y )\n    return True\n"}
{"java": "public static int rec ( int [ ] arr ) { int res = arr [ 0 ] , prev = arr [ 0 ] , l1 = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] == 1 ) l1 = i ; } for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] == 0 ) { if ( i == l1 + 1 ) break ; if ( prev == 1 ) res ++ ; else continue ; } else { res ++ ; } prev = arr [ i ] ; } return res ; }", "python": "def solution ( ) :\n    _ = int ( input ( ) )\n    arr = list ( map ( int , input ( ) . split ( ) ) )\n    start = 0\n    while start < len ( arr ) and arr [ start ] == 0 :\n        start += 1\n    if start >= len ( arr ) :\n        print ( 0 )\n        return ;\n    start += 1\n    res = 1\n    while start < len ( arr ) :\n        if arr [ start ] == 1 :\n            res += 1 if arr [ start - 1 ] == 1 else 2\n        start += 1\n    print ( res )\n"}
{"java": "static void findGreater ( int a , int b ) { double x = ( double ) a * ( double ) ( Math . log ( ( double ) ( b ) ) ) ; double y = ( double ) b * ( double ) ( Math . log ( ( double ) ( a ) ) ) ; if ( y > x ) { System . out . println ( \" a ^ b \u2581 is \u2581 greater \" ) ; } else if ( y < x ) { System . out . println ( \" b ^ a \u2581 is \u2581 greater \" ) ; } else { System . out . println ( \" Both \u2581 are \u2581 equal \" ) ; } }", "python": "def findGreater ( a , b ) :\n    x = a * ( math . log ( b ) ) ;\n    y = b * ( math . log ( a ) ) ;\n    if ( y > x ) :\n        print ( \" a ^ b \u2581 is \u2581 greater \" ) ;\n    elif ( y < x ) :\n        print ( \" b ^ a \u2581 is \u2581 greater \" ) ;\n    else :\n        print ( \" Both \u2581 are \u2581 equal \" ) ;\n"}
{"java": "static boolean isFrequencyEqual ( String str , int len ) { if ( len % 2 == 1 ) { return false ; } int i , freq [ ] = new int [ 26 ] ; for ( i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( freq [ i ] == len / 2 ) { return true ; } } return false ; }", "python": "def isFrequencyEqual ( string , length ) :\n    if length % 2 == 1 :\n        return False\n    freq = [ 0 ] * 26\n    for i in range ( 0 , length ) :\n        freq [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( 0 , 26 ) :\n        if freq [ i ] == length // 2 :\n            return True\n    return False\n"}
{"java": "static void vietaFormula ( int roots [ ] , int n ) { int coeff [ ] = new int [ ++ n + 1 ] ; Arrays . fill ( coeff , 0 ) ; coeff [ n ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = n - i - 1 ; j < n ; j ++ ) { coeff [ j ] = coeff [ j ] + ( - 1 ) * roots [ i - 1 ] * coeff [ j + 1 ] ; } } System . out . print ( \" Polynomial \u2581 Coefficients : \u2581 \" ) ; for ( int i = n ; i > 0 ; i -- ) { System . out . print ( coeff [ i ] + \" \u2581 \" ) ; } }", "python": "def vietaFormula ( roots , n ) :\n    coeff = [ 0 ] * ( n + 1 )\n    coeff [ n ] = 1\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( n - i - 1 , n ) :\n            coeff [ j ] += ( ( - 1 ) * roots [ i - 1 ] * coeff [ j + 1 ] )\n    coeff = coeff [ : : - 1 ]\n    print ( \" Polynomial \u2581 Coefficients \u2581 : \u2581 \" , end = \" \" )\n    for i in coeff :\n        print ( i , end = \" \u2581 \" )\n    print ( )\n"}
{"java": "static int lastElement ( int a [ ] , int n ) { int steps = 1 ; Vector < Integer > [ ] v = new Vector [ N ] ; for ( int i = 0 ; i < N ; i ++ ) v [ i ] = new Vector < Integer > ( ) ; if ( n == 1 ) return a [ 0 ] ; for ( int i = 0 ; i < n ; i += 2 ) v [ steps ] . add ( a [ i ] | a [ i + 1 ] ) ; while ( v [ steps ] . size ( ) > 1 ) { steps += 1 ; for ( int i = 0 ; i < v [ steps - 1 ] . size ( ) ; i += 2 ) { if ( steps % 2 == 1 ) v [ steps ] . add ( v [ steps - 1 ] . get ( i ) | v [ steps - 1 ] . get ( i + 1 ) ) ; else v [ steps ] . add ( v [ steps - 1 ] . get ( i ) ^ v [ steps - 1 ] . get ( i + 1 ) ) ; } } return v [ steps ] . get ( 0 ) ; }", "python": "def lastElement ( a , n ) :\n    steps = 1\n    v = [ [ ] for i in range ( n ) ]\n    if n == 1 : return a [ 0 ]\n    for i in range ( 0 , n , 2 ) :\n        v [ steps ] . append ( a [ i ] | a [ i + 1 ] )\n    while len ( v [ steps ] ) > 1 :\n        steps += 1\n        for i in range ( 0 , len ( v [ steps - 1 ] ) , 2 ) :\n            if steps & 1 :\n                v [ steps ] . append ( v [ steps - 1 ] [ i ] | v [ steps - 1 ] [ i + 1 ] )\n            else :\n                v [ steps ] . append ( v [ steps - 1 ] [ i ] ^ v [ steps - 1 ] [ i + 1 ] )\n    return v [ steps ] [ 0 ]\n"}
{"java": "public static int gcd ( int a , int b ) { int r = a % b ; if ( b % r != 0 ) { r = gcd ( b , r ) ; } return r ; }", "python": "def gcd ( a , b ) :\n    while b != 0 :\n        a , b = b , a % b\n    return a\n"}
{"java": "static int product ( int ar [ ] , int n ) { int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) result = ( result * ar [ i ] ) % MOD ; return result ; }", "python": "def product ( ar , n ) :\n    result = 1\n    for i in range ( 0 , n ) :\n        result = ( result * ar [ i ] ) % MOD\n    return result\n"}
{"java": "static int product ( int ar [ ] , int n ) { int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) result = result * ar [ i ] ; return result ; }", "python": "def product ( ar , n ) :\n    result = 1\n    for i in range ( 0 , n ) :\n        result = result * ar [ i ]\n    return result\n"}
{"java": "static boolean canDo ( int [ ] data , long max ) { long count = 1 , sum = 0 ; int n = data . length ; for ( int i = 0 ; i < n ; i ++ ) { if ( data [ i ] > max ) return false ; sum += data [ i ] ; if ( sum > max ) { count ++ ; sum = data [ i ] ; if ( count > 3 ) return false ; } } return count <= 3 ; }", "python": "def solve ( n , p , q , r , s ) :\n    l = [ ( i * p + q ) % r + s for i in range ( n ) ]\n    vsota = sum ( l )\n    cum = [ 0 ]\n    for x in l :\n        cum . append ( cum [ - 1 ] + x )\n    best = 0.0\n    for b in range ( n - 1 , - 1 , - 1 ) :\n        rem = vsota - ( cum [ n ] - cum [ b ] )\n        al = 0\n        ar = b\n        while al + 1 < ar :\n            amid = ( al + ar ) // 2\n            left = cum [ amid ]\n            right = cum [ b ] - cum [ amid ]\n            if left > right :\n                ar = amid\n            else :\n                al = amid\n        s = [ cum [ al ] , cum [ b ] - cum [ al ] , cum [ n ] - cum [ b ] ]\n        s . sort ( )\n        p = ( s [ 0 ] + s [ 1 ] ) / vsota\n        best = max ( best , p )\n        s = [ cum [ ar ] , cum [ b ] - cum [ ar ] , cum [ n ] - cum [ b ] ]\n        s . sort ( )\n        p = ( s [ 0 ] + s [ 1 ] ) / vsota\n        best = max ( best , p )\n    return best\n"}
{"java": "static int solve ( int arr [ ] , int n , int k ) { int minx = INT_MAX ; int i ; for ( i = 0 ; i < n ; i ++ ) { minx = Math . min ( minx , arr [ i ] ) ; } int decrements = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] - minx ) % k != 0 ) { return - 1 ; } else { decrements += ( ( arr [ i ] - minx ) / k ) ; } } return decrements ; }", "python": "def solve ( arr , n , k ) :\n    minx = sys . maxsize ;\n    for i in range ( n ) :\n        minx = min ( minx , arr [ i ] ) ;\n    decrements = 0 ;\n    for i in range ( n ) :\n        if ( ( arr [ i ] - minx ) % k != 0 ) :\n            return - 1 ;\n        else :\n            decrements += ( ( arr [ i ] - minx ) // k ) ;\n    return decrements ;\n"}
{"java": "static int minCost ( String str , int K ) { int n = str . length ( ) ; int res = 999999999 , count = 0 , a , b ; int cnt [ ] = new int [ 27 ] ; Arrays . fill ( cnt , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) cnt [ str . charAt ( i ) - ' a ' + 1 ] ++ ; for ( int i = 1 ; i < ( 26 - K + 1 ) ; i ++ ) { a = i ; b = i + K ; count = 0 ; for ( int j = 1 ; j <= 26 ; j ++ ) { if ( cnt [ j ] > 0 ) { if ( j >= a && j >= b ) count = count + ( Math . min ( j - b , 25 - j + a + 1 ) ) * cnt [ j ] ; else if ( j <= a && j <= b ) count = count + ( Math . min ( a - j , 25 + j - b + 1 ) ) * cnt [ j ] ; } } res = Math . min ( res , count ) ; } for ( int i = 26 - K + 1 ; i <= 26 ; i ++ ) { a = i ; b = ( i + K ) % 26 ; count = 0 ; for ( int j = 1 ; j <= 26 ; j ++ ) { if ( cnt [ j ] > 0 ) { if ( j >= b && j <= a ) count = count + ( Math . min ( j - b , a - j ) ) * cnt [ j ] ; } } res = Math . min ( res , count ) ; } return res ; }", "python": "def minCost ( str1 , K ) :\n    n = len ( str1 )\n    res = 999999999\n    count = 0\n    cnt = [ 0 for i in range ( 27 ) ]\n    for i in range ( n ) :\n        cnt [ ord ( str1 [ i ] ) - ord ( ' a ' ) + 1 ] += 1\n    for i in range ( 1 , 26 - K + 1 , 1 ) :\n        a = i\n        b = i + K\n        count = 0\n        for j in range ( 1 , 27 , 1 ) :\n            if ( cnt [ j ] > 0 ) :\n                if ( j >= a and j >= b ) :\n                    count = count + ( min ( j - b , 25 - j + a + 1 ) ) * cnt [ j ]\n                elif ( j <= a and j <= b ) :\n                    count = count + ( min ( a - j , 25 + j - b + 1 ) ) * cnt [ j ]\n        res = min ( res , count )\n    for i in range ( 26 - K + 1 , 27 , 1 ) :\n        a = i\n        b = ( i + K ) % 26\n        count = 0\n        for j in range ( 1 , 27 , 1 ) :\n            if ( cnt [ j ] > 0 ) :\n                if ( j >= b and j <= a ) :\n                    count = count + ( min ( j - b , a - j ) ) * cnt [ j ]\n        res = min ( res , count )\n    return res\n"}
{"java": "static void findTangent ( int A , int x , int y ) { int dif = A - x * 2 ; if ( y == ( 2 * x - x * x ) ) { if ( dif < 0 ) System . out . println ( \" y \u2581 = \u2581 \" + dif + \" x \" + ( x * dif + y ) ) ; else if ( dif > 0 ) System . out . println ( \" y \u2581 = \u2581 \" + dif + \" x + \" + - x * dif + y ) ; else System . out . println ( \" Not \u2581 possible \" ) ; } }", "python": "def findTangent ( A , x , y ) :\n    dif = A - x * 2\n    if y == ( 2 * x - x * x ) :\n        if dif < 0 :\n            print ( \" y \u2581 = \" , dif , \" x \" , ( x * dif ) + ( y ) )\n        elif dif > 0 :\n            print ( \" y \u2581 = \" , dif , \" x + \" , - x * dif + y )\n        else :\n            print ( \" Not \u2581 Possible \" )\n"}
{"java": "static boolean peterson ( int n ) { int num = n ; int sum = 0 ; while ( n > 0 ) { int digit = n % 10 ; sum += fact [ digit ] ; n = n / 10 ; } return ( sum == num ) ; }", "python": "def peterson ( n ) :\n    num = n\n    sum = 0\n    while n > 0 :\n        digit = int ( n % 10 )\n        sum += fact [ digit ]\n        n = int ( n / 10 )\n    return ( sum == num )\n"}
{"java": "static int centeredSquare_number ( int N ) { float n = ( 9 + ( float ) Math . sqrt ( 36 * N + 45 ) ) / 18 ; if ( n - ( int ) n == 0 ) return 1 ; else return 0 ; }", "python": "def centeredSquare_number ( N ) :\n    n = ( 9 + sqrt ( 36 * N + 45 ) ) / 18 ;\n    if ( n - int ( n ) ) == 0 :\n        return 1\n    else :\n        return 0\n"}
{"java": "static int countDecreasing ( int A [ ] , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( A [ i + 1 ] < A [ i ] ) len ++ ; else { cnt += ( ( ( len - 1 ) * len ) / 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) / 2 ) ; return cnt ; }", "python": "def countDecreasing ( A , n ) :\n    cnt = 0\n    len = 1\n    for i in range ( n - 1 ) :\n        if ( A [ i + 1 ] < A [ i ] ) :\n            len += 1\n        else :\n            cnt += ( ( ( len - 1 ) * len ) // 2 ) ;\n            len = 1\n    if ( len > 1 ) :\n        cnt += ( ( ( len - 1 ) * len ) // 2 )\n    return cnt\n"}
{"java": "static int minimumSwaps ( int [ ] arr ) { int count = 0 ; int i = 0 ; while ( i < arr . length ) { if ( arr [ i ] != i + 1 ) { while ( arr [ i ] != i + 1 ) { int temp = 0 ; temp = arr [ arr [ i ] - 1 ] ; arr [ arr [ i ] - 1 ] = arr [ i ] ; arr [ i ] = temp ; count ++ ; } } i ++ ; } return count ; }", "python": "def minimumSwaps ( arr ) :\n    count = 0 ;\n    i = 0 ;\n    while ( i < len ( arr ) ) :\n        if ( arr [ i ] != i + 1 ) :\n            while ( arr [ i ] != i + 1 ) :\n                temp = 0 ;\n                temp = arr [ arr [ i ] - 1 ] ;\n                arr [ arr [ i ] - 1 ] = arr [ i ] ;\n                arr [ i ] = temp ;\n                count += 1 ;\n        i += 1 ;\n    return count ;\n"}
{"java": "public static float circlearea ( double a , double b ) { if ( a < 0 || b < 0 ) return - 1 ; float A = ( float ) ( ( 3.14 * Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) / ( 4 * ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) ) ) ; return A ; }", "python": "def circlearea ( a , b ) :\n    if ( a < 0 or b < 0 ) :\n        return - 1\n    A = ( ( 3.14 * pow ( a , 2 ) * pow ( b , 2 ) ) / ( 4 * ( pow ( a , 2 ) + pow ( b , 2 ) ) ) )\n    return A\n"}
{"java": "static void twoParts ( String str ) { int flag = 0 ; String a = \" \" ; char [ ] gfg = str . toCharArray ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( gfg [ i ] == '4' ) { gfg [ i ] = '3' ; a += '1' ; flag = 1 ; } else if ( flag != 0 ) a += '0' ; } str = new String ( gfg ) ; System . out . print ( str + \" \u2581 \" + a ) ; }", "python": "def twoParts ( string ) :\n    flag = 0 ;\n    a = \" \" ;\n    for i in range ( len ( string ) ) :\n        if ( string [ i ] == '4' ) :\n            string [ i ] = '3' ;\n            a += '1' ;\n            flag = 1 ;\n        elif ( flag ) :\n            a += '0' ;\n    string = \" \" . join ( string ) ;\n    print ( string , a ) ;\n"}
{"java": "static void findNumbers ( String s ) { int n = s . length ( ) ; int count = 1 ; int result = 0 ; int left = 0 ; int right = 1 ; while ( right < n ) { if ( s . charAt ( left ) == s . charAt ( right ) ) { count ++ ; } else { result += count * ( count + 1 ) / 2 ; left = right ; count = 1 ; } right ++ ; } result += count * ( count + 1 ) / 2 ; System . out . println ( result ) ; }", "python": "def findNumbers ( s ) :\n    n = len ( s )\n    count = 1\n    result = 0\n    left = 0\n    right = 1\n    while ( right < n ) :\n        if ( s [ left ] == s [ right ] ) :\n            count += 1\n        else :\n            result += count * ( count + 1 ) // 2\n            left = right\n            count = 1\n        right += 1\n    result += count * ( count + 1 ) // 2\n    print ( result )\n"}
{"java": "static boolean check ( String s , int l ) { int freq [ ] = new int [ 26 ] ; Arrays . fill ( freq , 0 ) ; for ( int i = 0 ; i < l ; i ++ ) { freq [ s . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( freq [ i ] >= 2 ) return true ; } return false ; }", "python": "def check ( s , l ) :\n    freq = [ 0 for i in range ( 26 ) ]\n    for i in range ( l ) :\n        freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( 26 ) :\n        if ( freq [ i ] >= 2 ) :\n            return True\n    return False\n"}
{"java": "static int getMinCost ( int n , int m ) { int cost = ( n - 1 ) * m + ( m - 1 ) * n ; return cost ; }", "python": "def getMinCost ( n , m ) :\n    cost = ( n - 1 ) * m + ( m - 1 ) * n\n    return cost\n"}
{"java": "static void find_Solution ( double x , int n ) { double sum = x , e = 2 , o = 1 , p = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { p += 2 ; sum += ( double ) ( o / e ) * ( double ) ( Math . pow ( x , p ) / p ) ; o = o * ( o + 2 ) ; e = e * ( e + 2 ) ; } System . out . println ( sum ) ; }", "python": "def find_Solution ( x , n ) :\n    Sum = x\n    e = 2\n    o = 1\n    p = 1\n    for i in range ( 2 , n + 1 ) :\n        p += 2\n        Sum += ( o / e ) * ( pow ( x , p ) / p )\n        o = o * ( o + 2 )\n        e = e * ( e + 2 )\n    print ( round ( Sum , 10 ) )\n"}
{"java": "static void maxSum ( long arr [ ] [ ] ) { long [ ] [ ] dp = new long [ n + 1 ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { long m1 = 0 , m2 = 0 , m3 = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( ( j / ( m / 3 ) ) == 0 ) { m1 = Math . max ( m1 , arr [ i ] [ j ] ) ; } else if ( ( j / ( m / 3 ) ) == 1 ) { m2 = Math . max ( m2 , arr [ i ] [ j ] ) ; } else if ( ( j / ( m / 3 ) ) == 2 ) { m3 = Math . max ( m3 , arr [ i ] [ j ] ) ; } } dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 1 ] , dp [ i ] [ 2 ] ) + m1 ; dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i ] [ 2 ] ) + m2 ; dp [ i + 1 ] [ 2 ] = Math . max ( dp [ i ] [ 1 ] , dp [ i ] [ 0 ] ) + m3 ; } System . out . print ( Math . max ( Math . max ( dp [ n ] [ 0 ] , dp [ n ] [ 1 ] ) , dp [ n ] [ 2 ] ) + \" \\n \" ) ; }", "python": "def maxSum ( arr ) :\n    dp = np . zeros ( ( n + 1 , 3 ) ) ;\n    for i in range ( n ) :\n        m1 = 0 ; m2 = 0 ; m3 = 0 ;\n        for j in range ( m ) :\n            if ( ( j // ( m // 3 ) ) == 0 ) :\n                m1 = max ( m1 , arr [ i ] [ j ] ) ;\n            elif ( ( j // ( m // 3 ) ) == 1 ) :\n                m2 = max ( m2 , arr [ i ] [ j ] ) ;\n            elif ( ( j // ( m // 3 ) ) == 2 ) :\n                m3 = max ( m3 , arr [ i ] [ j ] ) ;\n        dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 1 ] , dp [ i ] [ 2 ] ) + m1 ;\n        dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 2 ] ) + m2 ;\n        dp [ i + 1 ] [ 2 ] = max ( dp [ i ] [ 1 ] , dp [ i ] [ 0 ] ) + m3 ;\n    print ( max ( max ( dp [ n ] [ 0 ] , dp [ n ] [ 1 ] ) , dp [ n ] [ 2 ] ) ) ;\n"}
{"java": "static ArrayList < Integer [ ] > getRanking ( ArrayList < Integer > list ) { ArrayList < Integer [ ] > ranking = new ArrayList ( N ) ; list . sort ( null ) ; for ( int i = 0 ; i < N ; ) { for ( int j = i + 1 ; j <= N ; j ++ ) { if ( j == N || ! list . get ( j ) . equals ( list . get ( i ) ) ) { ranking . add ( new Integer [ ] { j - i , list . get ( i ) } ) ; i = j ; break ; } } } ranking . sort ( ( x , y ) -> y [ 0 ] - x [ 0 ] ) ; if ( ranking . size ( ) == 1 ) { ranking . add ( new Integer [ ] { 0 , - 1 } ) ; } return ranking ; }", "python": "def main ( ) :\n    N = int ( input ( ) )\n    A = [ int ( i ) for i in input ( ) . split ( ) ]\n    A_odd = A [ 1 : : 2 ]\n    A_even = A [ 0 : : 2 ]\n    dict_odd = { - 1 : 0 }\n    dict_even = { - 1 : 0 }\n    for i in A_odd :\n        if i not in dict_odd :\n            dict_odd [ i ] = 1\n        else :\n            dict_odd [ i ] += 1\n    for i in A_even :\n        if i not in dict_even :\n            dict_even [ i ] = 1\n        else :\n            dict_even [ i ] += 1\n    dict_odd = sorted ( dict_odd . items ( ) , key = lambda x : x [ 1 ] , reverse = True )\n    dict_even = sorted ( dict_even . items ( ) , key = lambda x : x [ 1 ] , reverse = True )\n    if dict_even [ 0 ] [ 0 ] != dict_odd [ 0 ] [ 0 ] :\n        max_odd = dict_odd [ 0 ] [ 1 ]\n        max_even = dict_even [ 0 ] [ 1 ]\n        print ( N - max_even - max_odd )\n    else :\n        if dict_odd [ 0 ] [ 1 ] > dict_even [ 0 ] [ 1 ] :\n            max_odd = dict_odd [ 0 ] [ 1 ]\n            max_even = dict_even [ 1 ] [ 1 ]\n            print ( N - max_even - max_odd )\n        elif dict_even [ 0 ] [ 1 ] > dict_odd [ 0 ] [ 1 ] :\n            max_odd = dict_odd [ 1 ] [ 1 ]\n            max_even = dict_even [ 0 ] [ 1 ]\n            print ( N - max_even - max_odd )\n        else :\n            max_odd = max ( dict_even [ 1 ] [ 1 ] , dict_odd [ 1 ] [ 1 ] )\n            print ( N - dict_even [ 0 ] [ 1 ] - max_odd )\n"}
{"java": "private static int solve ( ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == b ) { return a * 2 ; } else if ( a > b ) { return a * 2 - 1 ; } else { return b * 2 - 1 ; } }", "python": "def main ( ) :\n    ab = list ( map ( int , input ( ) . split ( ) ) )\n    ans = 0\n    for _ in range ( 2 ) :\n        button = max ( ab )\n        indx = ab . index ( button )\n        ans += button\n        ab [ indx ] -= 1\n    print ( ans )\n"}
{"java": "static int minMoves ( int n , int a [ ] , int k ) { int ct1 [ ] = new int [ k ] ; int ct0 [ ] = new int [ k ] ; int moves = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == 1 ) ct1 [ i % k ] ++ ; else ct0 [ i % k ] ++ ; for ( int i = 0 ; i < k ; i ++ ) moves += Math . min ( ct1 [ i ] , ct0 [ i ] ) ; return moves ; }", "python": "def minMoves ( n , a , k ) :\n    ct1 = [ 0 for i in range ( k ) ]\n    ct0 = [ 0 for i in range ( k ) ]\n    moves = 0\n    for i in range ( n ) :\n        if ( a [ i ] == 1 ) :\n            ct1 [ i % k ] += 1\n        else :\n            ct0 [ i % k ] += 1\n    for i in range ( k ) :\n        moves += min ( ct1 [ i ] , ct0 [ i ] )\n    return moves\n"}
{"java": "static void find_array ( int [ ] a , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] += x ; System . out . print ( a [ i ] + \" \u2581 \" ) ; x = Math . max ( x , a [ i ] ) ; } }", "python": "def find_array ( a , n ) :\n    x = 0 ;\n    for i in range ( n ) :\n        a [ i ] += x ;\n        print ( a [ i ] , end = ' \u2581 ' ) ;\n        x = max ( x , a [ i ] ) ;\n"}
{"java": "static int findCost ( String s1 , String s2 , int a , int b , int c , int d , int n ) { int cost = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s1 . charAt ( i ) == s2 . charAt ( i ) ) continue ; else { if ( ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '2' ) || ( s2 . charAt ( i ) == '1' && s1 . charAt ( i ) == '2' ) ) cost += Math . min ( d , Math . min ( a , b + c ) ) ; else if ( ( s1 . charAt ( i ) == '2' && s2 . charAt ( i ) == '3' ) || ( s2 . charAt ( i ) == '2' && s1 . charAt ( i ) == '3' ) ) cost += Math . min ( d , Math . min ( b , a + c ) ) ; else if ( ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '3' ) || ( s2 . charAt ( i ) == '1' && s1 . charAt ( i ) == '3' ) ) cost += Math . min ( d , Math . min ( c , a + b ) ) ; } } return cost ; }", "python": "def findCost ( s1 , s2 , a , b , c , d , n ) :\n    cost = 0\n    for i in range ( n ) :\n        if ( s1 [ i ] == s2 [ i ] ) :\n            continue\n        else :\n            if ( ( s1 [ i ] == '1' and s2 [ i ] == '2' ) or ( s2 [ i ] == '1' and s1 [ i ] == '2' ) ) :\n                cost += min ( d , min ( a , b + c ) )\n            elif ( ( s1 [ i ] == '2' and s2 [ i ] == '3' ) or ( s2 [ i ] == '2' and s1 [ i ] == '3' ) ) :\n                cost += min ( d , min ( b , a + c ) )\n            elif ( ( s1 [ i ] == '1' and s2 [ i ] == '3' ) or ( s2 [ i ] == '1' and s1 [ i ] == '3' ) ) :\n                cost += min ( d , min ( c , a + b ) )\n    return cost\n"}
{"java": "static String printString ( int n , String str ) { String str2 = \" \" ; int extraChar = n % 26 ; if ( extraChar >= 1 ) { for ( int i = 26 - ( extraChar + 1 ) ; i <= 25 ; i ++ ) { str2 += str . charAt ( i ) ; } } int countOfStr = n / 26 ; for ( int i = 1 ; i <= countOfStr ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { str2 += str . charAt ( j ) ; } } return str2 ; }", "python": "def printString ( n , str ) :\n    str2 = \" \"\n    extraChar = n % 26\n    if ( extraChar >= 1 ) :\n        for i in range ( 26 - ( extraChar + 1 ) , 26 ) :\n            str2 += str [ i ]\n    countOfStr = n // 26\n    for i in range ( 1 , countOfStr + 1 ) :\n        for j in range ( 26 ) :\n            str2 += str [ j ]\n    return str2\n"}
{"java": "static int per ( int n ) { if ( n == 0 ) return 3 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 2 ; return per ( n - 2 ) + per ( n - 3 ) ; }", "python": "def per ( n ) :\n    if ( n == 0 ) :\n        return 3 ;\n    if ( n == 1 ) :\n        return 0 ;\n    if ( n == 2 ) :\n        return 2 ;\n    return per ( n - 2 ) + per ( n - 3 ) ;\n"}
{"java": "public static int next ( int x , int a , int b , int c ) { return ( x * a + b ) % c ; }", "python": "def main ( ) :\n    while True :\n        n , a , b , c , x = map ( int , input ( ) . split ( ) )\n        if ( n , a , b , c , x ) == ( 0 , 0 , 0 , 0 , 0 ) :\n            return\n        yy = list ( map ( int , input ( ) . split ( ) ) )\n        yi = 0\n        for i in range ( 10002 ) :\n            if yi == len ( yy ) :\n                print ( i - 1 )\n                break\n            elif i > 10000 :\n                print ( - 1 )\n                break\n            if x == yy [ yi ] :\n                yi += 1\n            x = ( a * x + b ) % c\n"}
{"java": "static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i <= MAX ; i ++ ) prime [ i ] = true ; for ( int i = 0 ; i <= MAX ; i ++ ) sum [ i ] = 0 ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } for ( int i = 1 ; i <= MAX ; i ++ ) { if ( prime [ i ] == true ) sum [ i ] = 1 ; sum [ i ] += sum [ i - 1 ] ; } }", "python": "def SieveOfEratosthenes ( ) :\n    prime [ 1 ] = False\n    p = 2\n    while p * p <= MAX :\n        if ( prime [ p ] ) :\n            i = p * 2\n            while i <= MAX :\n                prime [ i ] = False\n                i += p\n        p += 1\n    for i in range ( 1 , MAX + 1 ) :\n        if ( prime [ i ] == True ) :\n            sum [ i ] = 1\n        sum [ i ] += sum [ i - 1 ]\n"}
{"java": "static void findMajority ( int arr [ ] , int n ) { int len = 32 ; int number = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) != 0 ) count ++ ; } if ( count > ( n / 2 ) ) number += ( 1 << i ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == number ) count ++ ; if ( count > ( n / 2 ) ) System . out . println ( number ) ; else System . out . println ( \" Majority \u2581 Element \u2581 Not \u2581 Present \" ) ; }", "python": "def findMajority ( arr , n ) :\n    Len = 32\n    number = 0\n    for i in range ( Len ) :\n        count = 0\n        for j in range ( n ) :\n            if ( arr [ j ] & ( 1 << i ) ) :\n                count += 1\n        if ( count > ( n // 2 ) ) :\n            number += ( 1 << i )\n    count = 0\n    for i in range ( n ) :\n        if ( arr [ i ] == number ) :\n            count += 1\n    if ( count > ( n // 2 ) ) :\n        print ( number )\n    else :\n        print ( \" Majority \u2581 Element \u2581 Not \u2581 Present \" )\n"}
{"java": "static void checkEqualMatrix ( int arr [ ] [ ] , int n , int m , int k ) { int c = 0 , cnt1 = 0 , cnt2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( c % 2 == 0 ) { if ( arr [ i ] [ j ] == k ) { cnt1 ++ ; } } else { if ( arr [ i ] [ j ] == k ) { cnt2 ++ ; } } c = c + 1 ; } } if ( cnt1 >= 1 && cnt2 >= 1 ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } }", "python": "def checkEqualMatrix ( arr , n , m , k ) :\n    c = 0 ; cnt1 = 0 ; cnt2 = 0 ;\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( c % 2 == 0 ) :\n                if ( arr [ i ] [ j ] == k ) :\n                    cnt1 += 1 ;\n            else :\n                if ( arr [ i ] [ j ] == k ) :\n                    cnt2 += 1 ;\n            c = c + 1 ;\n    if ( cnt1 >= 1 and cnt2 >= 1 ) :\n        print ( \" Yes \" ) ;\n    else :\n        print ( \" No \" ) ;\n"}
{"java": "static int fnMod ( int n ) { if ( n % 5 == 1 ) return 4 ; else return 0 ; }", "python": "def fnMod ( n ) :\n    if ( n % 5 == 1 ) :\n        return 4\n    else :\n        return 0\n"}
{"java": "static String strBitwiseAND ( String [ ] arr , int n ) { String res = \" \" ; int smallest_size = Integer . MAX_VALUE ; int largest_size = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { StringBuilder temp = new StringBuilder ( ) ; temp . append ( arr [ i ] ) ; arr [ i ] = temp . reverse ( ) . toString ( ) ; smallest_size = Math . min ( smallest_size , arr [ i ] . length ( ) ) ; largest_size = Math . max ( largest_size , arr [ i ] . length ( ) ) ; } for ( int i = 0 ; i < smallest_size ; i ++ ) { boolean all_ones = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] . charAt ( i ) == '0' ) { all_ones = false ; break ; } } res += ( all_ones ? '1' : '0' ) ; } for ( int i = 0 ; i < largest_size - smallest_size ; i ++ ) res += '0' ; StringBuilder temp = new StringBuilder ( ) ; temp . append ( res ) ; res = temp . reverse ( ) . toString ( ) ; return res ; }", "python": "def strBitwiseAND ( arr , n ) :\n    res = \" \"\n    smallest_size = sys . maxsize ;\n    largest_size = - ( sys . maxsize - 1 ) ;\n    for i in range ( n ) :\n        arr [ i ] = arr [ i ] [ : : - 1 ] ;\n        smallest_size = min ( smallest_size , len ( arr [ i ] ) ) ;\n        largest_size = max ( largest_size , len ( arr [ i ] ) ) ;\n    for i in range ( smallest_size ) :\n        all_ones = True ;\n        for j in range ( n ) :\n            if ( arr [ j ] [ i ] == '0' ) :\n                all_ones = False ;\n                break ;\n        if all_ones :\n            res += '1' ;\n        else :\n            res += '0' ;\n    for i in range ( largest_size - smallest_size ) :\n        res += '0' ;\n    res = res [ : : - 1 ] ;\n    return res ;\n"}
{"java": "static int stringToInt ( String str ) { if ( str . length ( ) == 1 ) return ( str . charAt ( 0 ) - '0' ) ; double y = stringToInt ( str . substring ( 1 ) ) ; double x = str . charAt ( 0 ) - '0' ; x = x * Math . pow ( 10 , str . length ( ) - 1 ) + y ; return ( int ) ( x ) ; }", "python": "def stringToInt ( str ) :\n    if ( len ( str ) == 1 ) :\n        return ord ( str [ 0 ] ) - ord ( '0' ) ;\n    y = stringToInt ( str [ 1 : ] ) ;\n    x = ord ( str [ 0 ] ) - ord ( '0' ) ;\n    x = x * ( 10 ** ( len ( str ) - 1 ) ) + y ;\n    return int ( x ) ;\n"}
{"java": "static int Count_subarray ( int arr [ ] , int n ) { int total_sum = 0 , subarray_sum , remaining_sum , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { total_sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { subarray_sum = 0 ; for ( int j = i ; j < n ; j ++ ) { subarray_sum += arr [ j ] ; remaining_sum = total_sum - subarray_sum ; if ( subarray_sum > remaining_sum ) { count += 1 ; } } } return count ; }", "python": "def Count_subarray ( arr , n ) :\n    total_sum = 0 ;\n    count = 0 ;\n    for i in range ( n ) :\n        total_sum += arr [ i ] ;\n    for i in range ( n ) :\n        subarray_sum = 0 ;\n        for j in range ( i , n ) :\n            subarray_sum += arr [ j ] ;\n            remaining_sum = total_sum - subarray_sum ;\n            if ( subarray_sum > remaining_sum ) :\n                count += 1 ;\n    return count ;\n"}
{"java": "static void knowPair ( int a , int b , int n , int s , int m ) { int i = 0 , rem = 0 ; int count_b = 0 , flag = 0 ; while ( i <= a ) { rem = s - ( n * i ) ; count_b = rem / m ; if ( rem % m == 0 && count_b <= b ) { flag = 1 ; } i ++ ; } if ( flag == 1 ) { System . out . print ( \" YES \" + \" \\n \" ) ; } else { System . out . print ( \" NO \" + \" \\n \" ) ; } }", "python": "def knowPair ( a , b , n , s , m ) :\n    i = 0\n    rem = 0\n    count_b = 0\n    flag = 0\n    while ( i <= a ) :\n        rem = s - ( n * i )\n        count_b = rem // m\n        if ( rem % m == 0 and count_b <= b ) :\n            flag = 1\n        i += 1\n    if ( flag == 1 ) :\n        print ( \" YES \" )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static int calculateSum ( int n ) { int r1 = 2 , r2 = 3 ; int a1 = 1 , a2 = 1 ; return ( int ) ( a1 * ( Math . pow ( r1 , n ) - 1 ) / ( r1 - 1 ) + a2 * ( Math . pow ( r2 , n ) - 1 ) / ( r2 - 1 ) ) ; }", "python": "def calculateSum ( n ) :\n    r1 , r2 = 2 , 3\n    a1 , a2 = 1 , 1\n    return ( a1 * ( pow ( r1 , n ) - 1 ) // ( r1 - 1 ) + a2 * ( pow ( r2 , n ) - 1 ) // ( r2 - 1 ) )\n"}
{"java": "static int kthOdd ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) k -- ; if ( k == 0 ) return arr [ i ] ; } return - 1 ; }", "python": "def kthOdd ( arr , n , k ) :\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 == 1 ) :\n            k -= 1 ;\n        if ( k == 0 ) :\n            return arr [ i ] ;\n    return - 1 ;\n"}
{"java": "static int maxEvenSum ( int arr [ ] , int n ) { int pos_sum = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( arr [ i ] > 0 ) pos_sum += arr [ i ] ; if ( pos_sum % 2 == 0 ) return pos_sum ; int ans = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; ++ i ) { if ( arr [ i ] % 2 != 0 ) { if ( arr [ i ] > 0 ) ans = ans > ( pos_sum - arr [ i ] ) ? ans : ( pos_sum - arr [ i ] ) ; else ans = ans > ( pos_sum + arr [ i ] ) ? ans : ( pos_sum + arr [ i ] ) ; } } return ans ; }", "python": "def maxEvenSum ( arr , n ) :\n    pos_sum = 0\n    for i in range ( n ) :\n        if ( arr [ i ] > 0 ) :\n            pos_sum += arr [ i ]\n    if ( pos_sum % 2 == 0 ) :\n        return pos_sum\n    ans = INT_MIN ;\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 != 0 ) :\n            if ( arr [ i ] > 0 ) :\n                ans = max ( ans , pos_sum - arr [ i ] )\n            else :\n                ans = max ( ans , pos_sum + arr [ i ] )\n    return ans\n"}
{"java": "static int triplets ( int N ) { return ( ( N + 1 ) * ( N + 2 ) ) / 2 ; }", "python": "def triplets ( N ) :\n    return ( ( N + 1 ) * ( N + 2 ) ) // 2 ;\n"}
{"java": "static Collection < Integer > generateModulusArray ( String word ) { HashMap < Integer , Integer > seen = new HashMap < > ( ) ; seen . put ( 0 , 1 ) ; int prevMod = 0 ; int tensMod = 1 ; for ( int i = word . length ( ) - 1 ; i >= 0 ; i -- ) { prevMod = ( tensMod * ( word . charAt ( i ) - '0' ) + prevMod ) % 2019 ; seen . merge ( prevMod , 1 , Integer :: sum ) ; tensMod = ( tensMod * 10 ) % 2019 ; } return seen . values ( ) ; }", "python": "def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LS ( ) : return sys . stdin . readline ( ) . split ( )\ndef I ( ) : return int ( sys . stdin . readline ( ) )\ndef F ( ) : return float ( sys . stdin . readline ( ) )\ndef S ( ) : return input ( )\ndef main ( ) :\n    s = S ( )\n    k = 2019\n    tens = [ 1 for _ in range ( len ( s ) + 1 ) ]\n    for i in range ( 1 , len ( s ) + 1 ) :\n        tens [ i ] = tens [ i - 1 ] * 10 % k\n    mods0toi = [ 0 for _ in range ( len ( s ) ) ]\n    cur = 0\n    for i in range ( len ( s ) ) [ : : - 1 ] :\n        j = len ( s ) - i - 1\n        mods0toi [ i ] = ( cur + int ( s [ i ] ) * tens [ j ] ) % k\n        cur = mods0toi [ i ]\n    s = collections . Counter ( mods0toi )\n    ans = 0\n    t = s . keys ( )\n    for c in t :\n        if c == 0 :\n            ans += s [ c ]\n        ans += ( s [ c ] ) * ( s [ c ] - 1 ) // 2\n    print ( ans )\n"}
{"java": "static void vowelOrConsonant ( char x ) { if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' A ' || x == ' E ' || x == ' I ' || x == ' O ' || x == ' U ' ) System . out . println ( \" Vowel \" ) ; else System . out . println ( \" Consonant \" ) ; }", "python": "def vowelOrConsonant ( x ) :\n    if ( x == ' a ' or x == ' e ' or x == ' i ' or x == ' o ' or x == ' u ' or x == ' A ' or x == ' E ' or x == ' I ' or x == ' O ' or x == ' U ' ) :\n        print ( \" Vowel \" )\n    else :\n        print ( \" Consonant \" )\n"}
{"java": "static int complement ( int num ) { int i , len = 0 , temp , comp ; temp = num ; while ( true ) { len ++ ; num = num / 10 ; if ( Math . abs ( num ) == 0 ) break ; } num = temp ; comp = ( int ) Math . pow ( 10 , len ) - num ; return comp ; }", "python": "def complement ( num ) :\n    i = 0 ;\n    len = 0 ;\n    comp = 0 ;\n    temp = num ;\n    while ( 1 ) :\n        len += 1 ;\n        num = int ( num / 10 ) ;\n        if ( abs ( num ) == 0 ) :\n            break ;\n    num = temp ;\n    comp = math . pow ( 10 , len ) - num ;\n    return int ( comp ) ;\n"}
{"java": "public static long solve ( long n ) { if ( n % 2 != 0 || n < 10 ) { return 0 ; } long ret = 0 ; int i = 0 ; while ( 10 * Math . pow ( 5 , i ) <= n ) { long def = 10 * ( long ) Math . pow ( 5 , i ) ; ret += n / def ; i ++ ; } return ret ; }", "python": "def run ( ) :\n    N = int ( input ( ) )\n    if N % 2 :\n        print ( 0 )\n    else :\n        ans = 0\n        div = 10\n        while True :\n            val = N // div\n            ans += val\n            if not val : break\n            div *= 5\n        print ( ans )\n"}
{"java": "static int findNumber ( int n ) { for ( int i = n - 1 ; i >= 0 ; i -- ) { int [ ] count = new int [ 10 ] ; int x = i ; int count1 = 0 , count2 = 0 ; while ( x > 0 ) { count [ x % 10 ] ++ ; x /= 10 ; count1 ++ ; } for ( int j = 0 ; j < 10 ; j ++ ) { if ( count [ j ] == 1 ) count2 ++ ; } if ( count1 == count2 ) return i ; } return - 1 ; }", "python": "def findNumber ( n ) :\n    i = n - 1\n    while ( i >= 0 ) :\n        count = [ 0 for i in range ( 10 ) ]\n        x = i\n        count1 = 0\n        count2 = 0\n        while ( x ) :\n            count [ x % 10 ] += 1\n            x = int ( x / 10 )\n            count1 += 1\n        for j in range ( 0 , 10 , 1 ) :\n            if ( count [ j ] == 1 ) :\n                count2 += 1\n        if ( count1 == count2 ) :\n            return i\n        i -= 1\n"}
{"java": "static void printPattern ( int r ) { r = r / 2 ; int count = r ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = r ; j > i ; j -- ) { if ( j != r ) { System . out . print ( \" * \" + count ) ; } else { System . out . print ( count ) ; } } count -- ; System . out . print ( \" \\n \" ) ; } count ++ ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j != 0 ) { System . out . print ( \" * \" + count ) ; } else { System . out . print ( count ) ; } } count ++ ; System . out . print ( \" \\n \" ) ; } }", "python": "def printPattern ( r ) :\n    r = r // 2\n    count = r\n    for i in range ( r ) :\n        for j in range ( r , i , - 1 ) :\n            if j != r :\n                print ( \" * \" + str ( count ) , end = \" \" )\n            else :\n                print ( count , end = \" \" )\n        count -= 1\n        print ( )\n    count += 1\n    for i in range ( r ) :\n        for j in range ( i + 1 ) :\n            if j != 0 :\n                print ( \" * \" + str ( count ) , end = \" \" )\n            else :\n                print ( count , end = \" \" )\n        count += 1\n        print ( )\n"}
{"java": "static void lexicoSmallestPermuatation ( int arr [ ] , int n ) { int cnt [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; ++ i ) { ++ cnt [ arr [ i ] ] ; } int ele = 1 , replacement = 0 ; boolean vis [ ] = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n ; ++ i ) { if ( cnt [ arr [ i ] ] == 1 ) { continue ; } while ( cnt [ ele ] > 0 ) { ++ ele ; } if ( ele > arr [ i ] && ! vis [ arr [ i ] ] ) { vis [ arr [ i ] ] = true ; } else { -- cnt [ arr [ i ] ] ; arr [ i ] = ele ; ++ replacement ; ++ ele ; } } System . out . print ( replacement + \" \\n \" ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" \u2581 \" ) ; } }", "python": "def lexicoSmallestPermuatation ( arr , n ) :\n    cnt = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n ) :\n        cnt [ arr [ i ] ] += 1\n    ele = 1\n    replacement = 0\n    vis = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n ) :\n        if ( cnt [ arr [ i ] ] == 1 ) :\n            continue\n        while ( cnt [ ele ] ) :\n            ele += 1\n        if ( ele > arr [ i ] and vis [ arr [ i ] ] == 0 ) :\n            vis [ arr [ i ] ] = 1 ;\n        else :\n            cnt [ arr [ i ] ] -= 1\n            arr [ i ] = ele\n            replacement += 1\n            ele += 1\n    print ( replacement )\n    for i in range ( n ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "public static void printGraph ( int n ) { boolean [ ] [ ] edges = new boolean [ 101 ] [ 101 ] ; for ( int i = 0 ; i < 99 ; i ++ ) { edges [ i ] [ i + 1 ] = edges [ i + 1 ] [ i ] = true ; } for ( int i = 2 ; i < 100 ; i ++ ) { for ( int j = 0 , add = 1 ; j < i - 1 && add <= n ; j ++ , add ++ ) { n -= add ; edges [ i ] [ j ] = edges [ j ] [ i ] = true ; } } StringBuilder sb = new StringBuilder ( ) ; sb . append ( 100 ) . append ( \" \\n \" ) ; for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 100 ; j ++ ) { sb . append ( edges [ i ] [ j ] ? 1 : 0 ) ; } sb . append ( \" \\n \" ) ; } System . out . println ( sb ) ; }", "python": "def calc ( a , u , v ) :\n    s = 0\n    u = a [ u ]\n    v = a [ v ]\n    for i in range ( 100 ) :\n        if u [ i ] & v [ i ] :\n            s += 1\n    return s\n"}
{"java": "private static void process ( ) throws Throwable { for ( int caseNumber = 1 , T = Integer . parseInt ( in . readLine ( ) ) ; caseNumber <= T ; caseNumber ++ ) { long N = Long . parseLong ( in . readLine ( ) ) ; long n = 0L , m = 0L ; if ( N > 0 ) { boolean [ ] visited = new boolean [ 10 ] ; int visitedCount = 0 ; loop : for ( n = N ; visitedCount < 10 ; n += N ) { for ( m = n ; m > 0 ; m /= 10 ) { if ( ! visited [ ( int ) ( m % 10 ) ] ) { visited [ ( int ) ( m % 10 ) ] = true ; visitedCount ++ ; if ( visitedCount == 10 ) break loop ; } } } } out . println ( \" Case \u2581 # \" + caseNumber + \" : \u2581 \" + ( n == 0L ? \" INSOMNIA \" : n ) ) ; } }", "python": "def Run ( N ) :\n    st = set ( )\n    m = 0\n    for i in range ( 10000000 ) :\n        m += N\n        for ch in str ( m ) : st . add ( ch )\n        if len ( st ) == 10 :\n            return str ( m )\n    return ' INSOMNIA '\n"}
{"java": "static int findAnswer ( String str1 , String str2 , int n ) { int l = 0 , r = 0 ; int ans = 2 ; for ( int i = 0 ; i < n ; ++ i ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { l = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { r = i ; break ; } } if ( r < l ) return 26 * ( n + 1 ) ; else if ( l == r ) return ans ; else { for ( int i = l + 1 ; i <= r ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i - 1 ) ) { ans -- ; break ; } } for ( int i = l + 1 ; i <= r ; i ++ ) { if ( str1 . charAt ( i - 1 ) != str2 . charAt ( i ) ) { ans -- ; break ; } } return ans ; } }", "python": "def findAnswer ( str1 , str2 , n ) :\n    l , r = 0 , 0\n    ans = 2\n    for i in range ( n ) :\n        if ( str1 [ i ] != str2 [ i ] ) :\n            l = i\n            break\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( str1 [ i ] != str2 [ i ] ) :\n            r = i\n            break\n    if ( r < l ) :\n        return 26 * ( n + 1 )\n    elif ( l == r ) :\n        return ans\n    else :\n        for i in range ( l + 1 , r + 1 ) :\n            if ( str1 [ i ] != str2 [ i - 1 ] ) :\n                ans -= 1\n                break\n        for i in range ( l + 1 , r + 1 ) :\n            if ( str1 [ i - 1 ] != str2 [ i ] ) :\n                ans -= 1\n                break\n        return ans\n"}
{"java": "static boolean check ( int mat [ ] [ ] ) { int xorr = 0 ; for ( int i = 0 ; i < N ; i ++ ) { xorr ^= mat [ i ] [ 0 ] ; } if ( xorr != 0 ) return true ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j < M ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ 0 ] ) return true ; } } return false ; }", "python": "def check ( mat ) :\n    xorr = 0\n    for i in range ( N ) :\n        xorr ^= mat [ i ] [ 0 ]\n    if ( xorr != 0 ) :\n        return True\n    for i in range ( N ) :\n        for j in range ( 1 , M ) :\n            if ( mat [ i ] [ j ] != mat [ i ] [ 0 ] ) :\n                return True\n    return False\n"}
{"java": "static int maxOperations ( int X , int Y ) { if ( X > Y ) return - 1 ; int diff = Y - X ; if ( diff == 1 ) return - 1 ; if ( diff % 2 == 0 ) return ( diff / 2 ) ; return ( 1 + ( ( diff - 3 ) / 2 ) ) ; }", "python": "def maxOperations ( X , Y ) :\n    if ( X > Y ) :\n        return - 1 ;\n    diff = Y - X ;\n    if ( diff == 1 ) :\n        return - 1 ;\n    if ( diff % 2 == 0 ) :\n        return ( diff // 2 ) ;\n    return ( 1 + ( ( diff - 3 ) // 2 ) ) ;\n"}
{"java": "static String newString ( String s , int k ) { String X = \" \" ; while ( s . length ( ) > 0 ) { char temp = s . charAt ( 0 ) ; for ( int i = 1 ; i < k && i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) < temp ) { temp = s . charAt ( i ) ; } } X = X + temp ; for ( int i = 0 ; i < k ; i ++ ) { if ( s . charAt ( i ) == temp ) { s = s . substring ( 0 , i ) + s . substring ( i + 1 ) ; break ; } } } return X ; }", "python": "def newString ( s , k ) :\n    X = \" \"\n    while ( len ( s ) > 0 ) :\n        temp = s [ 0 ]\n        i = 1\n        while ( i < k and i < len ( s ) ) :\n            if ( s [ i ] < temp ) :\n                temp = s [ i ]\n            i += 1\n        X = X + temp\n        for i in range ( k ) :\n            if ( s [ i ] == temp ) :\n                s = s [ 0 : i ] + s [ i + 1 : ]\n                break\n    return X\n"}
{"java": "static void ReplaceElements ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , 1 ) ; } else { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } } for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = n - mp . get ( arr [ i ] ) ; } }", "python": "def ReplaceElements ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] = mp . get ( arr [ i ] , 0 ) + 1\n    for i in range ( n ) :\n        arr [ i ] = n - mp [ arr [ i ] ]\n"}
{"java": "static void printWordsWithoutIfSwitch ( int n ) { int digits [ ] = new int [ 10 ] ; int dc = 0 ; do { digits [ dc ] = n % 10 ; n = n / 10 ; dc ++ ; } while ( n != 0 ) ; for ( int i = dc - 1 ; i >= 0 ; i -- ) System . out . print ( word [ digits [ i ] ] + \" \u2581 \" ) ; }", "python": "def printWordsWithoutIfSwitch ( n ) :\n    digits = [ 0 for i in range ( 10 ) ]\n    dc = 0\n    while True :\n        digits [ dc ] = n % 10\n        n = n // 10\n        dc += 1\n        if ( n == 0 ) :\n            break\n    for i in range ( dc - 1 , - 1 , - 1 ) :\n        print ( word [ digits [ i ] ] , end = \" \u2581 \" )\n"}
{"java": "static int FindSubarray ( int arr [ ] , int n , int k ) { int [ ] count_one = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { count_one [ i ] = Integer . bitCount ( arr [ i ] ) ; } int sum = count_one [ 0 ] ; if ( n == 1 ) { if ( count_one [ 0 ] >= k ) return 1 ; else return - 1 ; } int ans = Integer . MAX_VALUE ; int i = 1 ; int j = 0 ; while ( i < n ) { if ( k == count_one [ j ] ) { ans = 1 ; break ; } else if ( k == count_one [ i ] ) { ans = 1 ; break ; } else if ( sum + count_one [ i ] < k ) { sum += count_one [ i ] ; i ++ ; } else if ( sum + count_one [ i ] > k ) { ans = Math . min ( ans , ( i - j ) + 1 ) ; sum -= count_one [ j ] ; j ++ ; } else if ( sum + count_one [ i ] == k ) { ans = Math . min ( ans , ( i - j ) + 1 ) ; sum += count_one [ i ] ; i ++ ; } } if ( ans != Integer . MAX_VALUE ) return ans ; else return - 1 ; }", "python": "def FindSubarray ( arr , n , k ) :\n    count_one = [ 0 ] * n ;\n    for i in range ( n ) :\n        count_one [ i ] = bin ( arr [ i ] ) . count ( '1' ) ;\n    sum = count_one [ 0 ] ;\n    if ( n == 1 ) :\n        if ( count_one [ 0 ] >= k ) :\n            return 1 ;\n        else :\n            return - 1 ;\n    ans = sys . maxsize ;\n    i = 1 ;\n    j = 0 ;\n    while ( i < n ) :\n        if ( k == count_one [ j ] ) :\n            ans = 1 ;\n            break ;\n        elif ( k == count_one [ i ] ) :\n            ans = 1 ;\n            break ;\n        elif ( sum + count_one [ i ] < k ) :\n            sum += count_one [ i ] ;\n            i += 1 ;\n        elif ( sum + count_one [ i ] > k ) :\n            ans = min ( ans , ( i - j ) + 1 ) ;\n            sum -= count_one [ j ] ;\n            j += 1 ;\n        elif ( sum + count_one [ i ] == k ) :\n            ans = min ( ans , ( i - j ) + 1 ) ;\n            sum += count_one [ i ] ;\n            i += 1 ;\n    if ( ans != sys . maxsize ) :\n        return ans ;\n    else :\n        return - 1 ;\n"}
{"java": "static int findXorSum ( int arr [ ] , int n ) { int sum = 0 ; int mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { int c_odd = 0 ; boolean odd = false ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) odd = ( ! odd ) ; if ( odd ) c_odd ++ ; } for ( int j = 0 ; j < n ; j ++ ) { sum += ( mul * c_odd ) ; if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) c_odd = ( n - j - c_odd ) ; } mul *= 2 ; } return sum ; }", "python": "def findXorSum ( arr , n ) :\n    Sum = 0\n    mul = 1\n    for i in range ( 30 ) :\n        c_odd = 0\n        odd = 0\n        for j in range ( n ) :\n            if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) :\n                odd = ( ~ odd )\n            if ( odd ) :\n                c_odd += 1\n        for j in range ( n ) :\n            Sum += ( mul * c_odd )\n            if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) :\n                c_odd = ( n - j - c_odd )\n        mul *= 2\n    return Sum\n"}
{"java": "static int findKHCF ( int x , int y , int k ) { int small = Math . min ( x , y ) ; int count = 1 ; for ( int i = 2 ; i <= small ; i ++ ) { if ( x % i == 0 && y % i == 0 ) count ++ ; if ( count == k ) return i ; } return - 1 ; }", "python": "def findKHCF ( x , y , k ) :\n    small = min ( x , y )\n    count = 1\n    for i in range ( 2 , small + 1 ) :\n        if ( x % i == 0 and y % i == 0 ) :\n            count = count + 1\n        if ( count == k ) :\n            return i\n    return - 1\n"}
{"java": "static void findModulo ( String s ) { int l = s . length ( ) ; int i , modulus = 0 ; if ( s . contains ( \" + \" ) ) { i = s . indexOf ( \" + \" ) ; } else { i = s . indexOf ( \" - \" ) ; } String real = s . substring ( 0 , i ) ; String imaginary = s . substring ( i + 1 , l - 1 ) ; int x = Integer . parseInt ( real ) ; int y = Integer . parseInt ( imaginary ) ; System . out . print ( Math . sqrt ( x * x + y * y ) + \" \\n \" ) ; }", "python": "def findModulo ( s ) :\n    l = len ( s )\n    modulus = 0\n    if ( ' + ' in s ) :\n        i = s . index ( ' + ' )\n    else :\n        i = s . index ( ' - ' )\n    real = s [ 0 : i ]\n    imaginary = s [ i + 1 : l - 1 ]\n    x = int ( real )\n    y = int ( imaginary )\n    print ( int ( sqrt ( x * x + y * y ) ) )\n"}
{"java": "static int cntSplits ( String s ) { if ( s . charAt ( s . length ( ) - 1 ) == '1' ) return 0 ; int c_zero = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) c_zero += ( s . charAt ( i ) == '0' ) ? 1 : 0 ; return ( int ) Math . pow ( 2 , c_zero - 1 ) ; }", "python": "def cntSplits ( s ) :\n    if ( s [ len ( s ) - 1 ] == '1' ) :\n        return 0 ;\n    c_zero = 0 ;\n    for i in range ( len ( s ) ) :\n        c_zero += ( s [ i ] == '0' ) ;\n    return int ( pow ( 2 , c_zero - 1 ) ) ;\n"}
{"java": "static int printMinimumProduct ( int arr [ ] , int n ) { int first_min = Math . min ( arr [ 0 ] , arr [ 1 ] ) ; int second_min = Math . max ( arr [ 0 ] , arr [ 1 ] ) ; for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] < first_min ) { second_min = first_min ; first_min = arr [ i ] ; } else if ( arr [ i ] < second_min ) second_min = arr [ i ] ; } return first_min * second_min ; }", "python": "def printMinimumProduct ( arr , n ) :\n    first_min = min ( arr [ 0 ] , arr [ 1 ] )\n    second_min = max ( arr [ 0 ] , arr [ 1 ] )\n    for i in range ( 2 , n ) :\n        if ( arr [ i ] < first_min ) :\n            second_min = first_min\n            first_min = arr [ i ]\n        elif ( arr [ i ] < second_min ) :\n            second_min = arr [ i ]\n    return first_min * second_min\n"}
{"java": "public static int countPairs ( int n ) { if ( n == 2 ) return 4 ; int num = ( ( n / 2 ) + 1 ) ; int max = n % num ; int count = n - max ; return count ; }", "python": "def countPairs ( n ) :\n    if ( n == 2 ) :\n        return 4\n    num = ( ( n // 2 ) + 1 ) ;\n    max = n % num ;\n    count = n - max ;\n    return count\n"}
{"java": "public static int getArea ( char [ ] field , int start ) { int i , area , cnt , s , t ; area = cnt = s = t = 0 ; for ( i = start ; i < fieldlen ; i ++ ) { if ( ' \\ \\' == field [ i ] ) { cnt ++ ; t ++ ; area += cnt ; } else if ( 0 < cnt && ' / ' == field [ i ] ) { area += cnt ; cnt -- ; if ( 0 == cnt ) { break ; } } else if ( ' _ ' == field [ i ] ) { s += cnt ; } } if ( fieldlen == i ) { area = 0 ; } else { area = ( area - t + s ) ; fieldstart = i ; } return area ; }", "python": "def partialSqu ( h , sig ) :\n    if sig == \" \\ \\ \" :\n        squ = h + 1 / 2\n        h += 1\n    elif sig == \" / \" :\n        squ = h - 1 / 2\n        h -= 1\n    elif sig == \" _ \" :\n        squ = h\n    return squ , h\n"}
{"java": "static int solution ( int [ ] A ) { int n = A . length ; boolean [ ] present = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( A [ i ] > 0 && A [ i ] <= n ) present [ A [ i ] ] = true ; } for ( int i = 1 ; i <= n ; i ++ ) if ( ! present [ i ] ) return i ; return n + 1 ; }", "python": "def solution ( A ) :\n    m = max ( A )\n    if m < 1 :\n        return 1\n    if len ( A ) == 1 :\n        return 2 if A [ 0 ] == 1 else 1\n    l = [ 0 ] * m\n    for i in range ( len ( A ) ) :\n        if A [ i ] > 0 :\n            if l [ A [ i ] - 1 ] != 1 :\n                l [ A [ i ] - 1 ] = 1\n    for i in range ( len ( l ) ) :\n        if l [ i ] == 0 :\n            return i + 1\n    return i + 2\n"}
{"java": "static boolean isTwoAlter ( String s ) { for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i + 2 ) ) { return false ; } } if ( s . charAt ( 0 ) == s . charAt ( 1 ) ) return false ; return true ; }", "python": "def isTwoAlter ( s ) :\n    for i in range ( len ( s ) - 2 ) :\n        if ( s [ i ] != s [ i + 2 ] ) :\n            return False\n    if ( s [ 0 ] == s [ 1 ] ) :\n        return False\n    return True\n"}
{"java": "static Boolean isPentagonal ( int N ) { double n = ( 1 + Math . sqrt ( 24 * N + 1 ) ) / 6 ; return ( n - ( int ) n ) == 0 ; }", "python": "def isPentagonal ( n ) :\n    n = ( 1 + m . sqrt ( 24 * N + 1 ) ) / 6\n    return ( ( n - int ( n ) ) == 0 )\n"}
{"java": "static boolean func ( int a [ ] , int k ) { for ( int i = 0 ; i < a . length ; i ++ ) if ( a [ i ] % k == 0 ) return true ; return false ; }", "python": "def func ( a , k , n ) :\n    for i in range ( 0 , n ) :\n        if ( a [ i ] % k == 0 ) :\n            return True\n"}
{"java": "public static void solve ( BufferedReader br , PrintWriter pr ) throws IOException { int a = Integer . parseInt ( br . readLine ( ) ) ; pr . println ( 2 * a - 1 + \" \u2581 \" + 2 ) ; pr . println ( 1 + \" \u2581 \" + 2 ) ; }", "python": "def main ( ) :\n    count = int ( input ( ) )\n    print ( ' { } \u2581 2' . format ( count * 2 - 1 ) )\n    print ( '1 \u2581 2' )\n"}
{"java": "public static int fibonacciArray ( int [ ] arr , int n ) { Set < Integer > s = new HashSet < Integer > ( ) ; int a = 1 , b = 1 ; int c ; s . add ( a ) ; if ( n > 2 ) s . add ( b ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { c = a + b ; s . add ( c ) ; a = b ; b = c ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s . contains ( arr [ i ] ) ) s . remove ( arr [ i ] ) ; } return s . size ( ) ; }", "python": "def fibonacciArray ( arr , n ) :\n    s = set ( )\n    a , b = 1 , 1\n    s . add ( a )\n    if n >= 2 :\n        s . add ( b )\n    for i in range ( 0 , n - 2 ) :\n        c = a + b\n        s . add ( c )\n        a , b = b , c\n    for i in range ( 0 , n ) :\n        if arr [ i ] in s :\n            s . remove ( arr [ i ] )\n    return len ( s )\n"}
{"java": "static int findEvenPair ( int A [ ] , int N ) { int evenPair = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) { if ( ( A [ i ] | A [ j ] ) % 2 == 0 ) evenPair ++ ; } } return evenPair ; }", "python": "def findEvenPair ( A , N ) :\n    evenPair = 0\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            if ( A [ i ] | A [ j ] ) % 2 == 0 :\n                evenPair += 1\n    return evenPair\n"}
{"java": "static Character findKthChar ( String s , int k ) { int len = s . length ( ) ; int i = 0 ; int total_len = 0 ; while ( i < len ) { if ( Character . isLetter ( s . charAt ( i ) ) ) { total_len ++ ; if ( total_len == k ) return s . charAt ( i ) ; i ++ ; } else { int n = 0 ; while ( i < len && ! Character . isLetter ( s . charAt ( i ) ) ) { n = n * 10 + ( s . charAt ( i ) - '0' ) ; i ++ ; } int next_total_len = total_len * n ; if ( k <= next_total_len ) { int pos = k % total_len ; if ( pos == 0 ) { pos = total_len ; } return findKthChar ( s , pos ) ; } else { total_len = next_total_len ; } } } return ' \u2581 ' ; }", "python": "def findKthChar ( s , k ) :\n    len1 = len ( s )\n    i = 0\n    total_len = 0\n    while ( i < len1 ) :\n        if ( s [ i ] . isalpha ( ) ) :\n            total_len += 1\n            if ( total_len == k ) :\n                return s [ i ]\n            i += 1\n        else :\n            n = 0\n            while ( i < len1 and s [ i ] . isalpha ( ) == False ) :\n                n = n * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )\n                i += 1\n            next_total_len = total_len * n\n            if ( k <= next_total_len ) :\n                pos = k % total_len\n                if ( pos == 0 ) :\n                    pos = total_len\n                return findKthChar ( s , pos )\n            else :\n                total_len = next_total_len\n    return - 1\n"}
{"java": "static float sumOfAP ( float a , float d , float n ) { float sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; }", "python": "def sumOfAP ( a , d , n ) :\n    sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d )\n    return sum\n"}
{"java": "static boolean asPowerSum ( int w , int m ) { while ( m > 0 ) { if ( ( m - 1 ) % w == 0 ) m = ( m - 1 ) / w ; else if ( ( m + 1 ) % w == 0 ) m = ( m + 1 ) / w ; else if ( m % w == 0 ) m = m / w ; else break ; } return ( m == 0 ) ; }", "python": "def asPowerSum ( w , m ) :\n    while ( m > 0 ) :\n        if ( ( m - 1 ) % w == 0 ) :\n            m = ( m - 1 ) / w ;\n        elif ( ( m + 1 ) % w == 0 ) :\n            m = ( m + 1 ) / w ;\n        elif ( m % w == 0 ) :\n            m = m / w ;\n        else :\n            break ;\n    return ( m == 0 ) ;\n"}
{"java": "static void anglequichord ( int z ) { System . out . println ( \" The \u2581 angle \u2581 is \u2581 \" + z + \" \u2581 degrees \" ) ; }", "python": "def anglequichord ( z ) :\n    print ( \" The \u2581 angle \u2581 is \u2581 \" , z , \" \u2581 degrees \" )\n"}
{"java": "static void printAsMaximalPrimeSum ( int n ) { if ( n % 2 == 1 ) { System . out . print ( \"3 \u2581 \" ) ; n -= 3 ; } while ( n > 0 ) { System . out . print ( \"2 \u2581 \" ) ; n -= 2 ; } }", "python": "def printAsMaximalPrimeSum ( n ) :\n    if ( n % 2 == 1 ) :\n        print ( \"3 \u2581 \" , end = \" \" )\n        n -= 3\n    while ( n > 0 ) :\n        print ( \"2 \u2581 \" , end = \" \" )\n        n -= 2\n"}
{"java": "static void printNonDivisible ( int [ ] A , int [ ] B , int n , int m ) { for ( int i = 0 ; i < m ; i ++ ) { int j = 0 ; for ( j = 0 ; j < n ; j ++ ) if ( B [ i ] % A [ j ] == 0 ) break ; if ( j == n ) System . out . println ( B [ i ] ) ; } }", "python": "def printNonDivisible ( A , B , n , m ) :\n    for i in range ( m ) :\n        j = 0\n        for j in range ( n ) :\n            if ( B [ i ] % A [ j ] == 0 ) :\n                break\n        if ( j == n - 1 ) :\n            print ( B [ i ] )\n"}
{"java": "static double calcDeterminant ( int arr [ ] ) { double determinant = 0 ; for ( int i = 0 ; i < N ; i ++ ) { determinant += Math . pow ( arr [ i ] , 3 ) ; } determinant -= 3 * arr [ 0 ] * arr [ 1 ] * arr [ 2 ] ; return determinant ; }", "python": "def calcDeterminant ( arr , n ) :\n    determinant = 0\n    for i in range ( n ) :\n        determinant += pow ( arr [ i ] , 3 )\n    determinant -= 3 * arr [ 0 ] * arr [ 1 ] * arr [ 2 ]\n    return determinant\n"}
{"java": "static int nDigitPalindromes ( int n ) { return ( 9 * ( int ) Math . pow ( 10 , ( n - 1 ) / 2 ) ) ; }", "python": "def nDigitPalindromes ( n ) :\n    return ( 9 * pow ( 10 , ( n - 1 ) // 2 ) ) ;\n"}
{"java": "private static int rec ( int sum , int pre , int cnt ) { if ( sum > n ) return 0 ; if ( sum == n ) return 1 ; if ( cnt >= 3 ) { int dif = n - sum ; int res = ( int ) Math . sqrt ( dif ) ; if ( res >= pre ) { if ( res * res == dif ) return 1 ; } return 0 ; } int counter = 0 ; for ( int i = pre ; sum + Math . pow ( i , 2 ) <= n ; i ++ ) { counter += rec ( sum + i * i , i , cnt + 1 ) ; } return counter ; }", "python": "def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LS ( ) : return sys . stdin . readline ( ) . split ( )\ndef I ( ) : return int ( sys . stdin . readline ( ) )\ndef F ( ) : return float ( sys . stdin . readline ( ) )\ndef S ( ) : return input ( )\ndef pf ( s ) : return print ( s , flush = True )\ndef main ( ) :\n    rr = [ ]\n    m = 2 ** 15\n    a = [ [ 0 ] * ( m + 1 ) for _ in range ( 5 ) ]\n    a [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , m ) :\n        ii = i ** 2\n        if ii > m :\n            break\n        for k in range ( 4 ) :\n            for j in range ( ii , m + 1 ) :\n                a [ k + 1 ] [ j ] += a [ k ] [ j - ii ]\n    def f ( n ) :\n        r = 0\n        for i in range ( 5 ) :\n            r += a [ i ] [ n ]\n        return r\n    while True :\n        n = I ( )\n        if n == 0 :\n            break\n        rr . append ( f ( n ) )\n    return ' \\n ' . join ( map ( str , rr ) )\n"}
{"java": "static int findX ( int a [ ] , int n ) { Arrays . sort ( a ) ; int x = a [ 0 ] * a [ n - 1 ] ; Vector < Integer > vec = new Vector < Integer > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( n % i == 0 ) { vec . add ( i ) ; if ( ( n / i ) != i ) vec . add ( n / i ) ; } } if ( vec . size ( ) == n ) { int i = 0 ; for ( int it : vec ) { if ( a [ i ++ ] != it ) return - 1 ; } } return x ; }", "python": "def findX ( list , int ) :\n    list . sort ( )\n    x = list [ 0 ] * list [ int - 1 ] ;\n    vec = [ ]\n    i = 2\n    while ( i * i <= x ) :\n        if ( n % i == 0 ) :\n            vec . append ( i )\n            if ( ( int // i ) != i ) :\n                vec . append ( int // i )\n        i += 1\n    if ( len ( vec ) == int ) :\n        j = 0\n        for it in range ( int ) :\n            if ( a [ j ] != it ) :\n                return - 1\n            else :\n                j += 1\n    return x\n"}
{"java": "static int maxOR ( int arr [ ] , int n ) { int maxVal = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) { maxVal = Math . max ( maxVal , arr [ i ] | arr [ j ] ) ; } return maxVal ; }", "python": "def maxOR ( arr , n ) :\n    maxVal = 0 ;\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            maxVal = max ( maxVal , arr [ i ] | arr [ j ] ) ;\n    return maxVal ;\n"}
{"java": "static void findNums ( int n ) { if ( n <= 11 ) { if ( n == 8 ) System . out . print ( \"4 \u2581 4\" ) ; if ( n == 10 ) System . out . print ( \"4 \u2581 6\" ) ; else System . out . print ( \" - 1\" ) ; return ; } if ( n % 2 == 0 ) System . out . print ( \"4 \u2581 \" + ( n - 4 ) ) ; else System . out . print ( \"9 \u2581 \" + ( n - 9 ) ) ; }", "python": "def findNums ( n ) :\n    if ( n <= 11 ) :\n        if ( n == 8 ) :\n            print ( \"4 \u2581 4\" , end = \" \u2581 \" )\n        if ( n == 10 ) :\n            print ( \"4 \u2581 6\" , end = \" \u2581 \" )\n        else :\n            print ( \" - 1\" , end = \" \u2581 \" )\n    if ( n % 2 == 0 ) :\n        print ( \"4 \u2581 \" , ( n - 4 ) , end = \" \u2581 \" )\n    else :\n        print ( \"9 \u2581 \" , n - 9 , end = \" \u2581 \" )\n"}
{"java": "public static void sort ( int a [ ] ) { for ( int i = 0 ; i < a . length - 1 ; i ++ ) { for ( int j = a . length - 1 ; j > i ; j -- ) { if ( a [ j ] < a [ j - 1 ] ) { int t = a [ j ] ; a [ j ] = a [ j - 1 ] ; a [ j - 1 ] = t ; } } } }", "python": "def main ( ) :\n    L = sorted ( map ( int , input ( ) . split ( ) ) )\n    print ( * L )\n"}
{"java": "static int find ( int start , int n , int k ) { int count = 0 ; while ( start <= n ) { start += k ; count += 1 ; } return count ; }", "python": "def input ( ) : return sys . stdin . readline ( ) . strip ( )\ndef main ( ) :\n    N , K = map ( int , input ( ) . split ( ) )\n    if K % 2 != 0 :\n        val1 = ( N // K ) * ( N // K - 1 ) * ( N // K - 2 )\n        val2 = ( N // K ) * ( N // K - 1 ) * 3\n        val3 = N // K\n        print ( val1 + val2 + val3 )\n    else :\n        val1 = ( N // K ) * ( N // K - 1 ) * ( N // K - 2 )\n        val2 = ( N // K ) * ( N // K - 1 ) * 3\n        val3 = N // K\n        N -= K // 2\n        val4 = ( N // K + 1 ) * ( N // K ) * ( N // K - 1 )\n        val5 = ( N // K + 1 ) * ( N // K ) * 3\n        val6 = N // K + 1\n        print ( val1 + val2 + val3 + val4 + val5 + val6 )\n"}
{"java": "static void normalSieve ( int n ) { boolean prime [ ] = new boolean [ n / 2 ] ; Arrays . fill ( prime , false ) ; for ( int i = 3 ; i * i < n ; i += 2 ) { if ( prime [ i / 2 ] == false ) for ( int j = i * i ; j < n ; j += i * 2 ) prime [ j / 2 ] = true ; } System . out . print ( \"2 \u2581 \" ) ; for ( int i = 3 ; i < n ; i += 2 ) if ( prime [ i / 2 ] == false ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def normalSieve ( n ) :\n    prime = [ 0 ] * int ( n / 2 ) ;\n    i = 3 ;\n    while ( i * i < n ) :\n        if ( prime [ int ( i / 2 ) ] == 0 ) :\n            j = i * i ;\n            while ( j < n ) :\n                prime [ int ( j / 2 ) ] = 1 ;\n                j += i * 2 ;\n        i += 2 ;\n    print ( 2 , end = \" \u2581 \" ) ;\n    i = 3 ;\n    while ( i < n ) :\n        if ( prime [ int ( i / 2 ) ] == 0 ) :\n            print ( i , end = \" \u2581 \" ) ;\n        i += 2 ;\n"}
{"java": "static long dfw ( int count , int idx ) { if ( idx < 1 ) { return 0 ; } if ( dp [ count ] [ idx ] != 0 ) { return dp [ count ] [ idx ] ; } long ans = Long . MAX_VALUE ; for ( int i = 0 ; i <= count && i <= idx - 1 ; i ++ ) { ans = Math . min ( ans , dfw ( count - i , idx - 1 - i ) + Math . max ( 0 , arr [ idx ] - arr [ idx - 1 - i ] ) ) ; } dp [ count ] [ idx ] = ans ; return ans ; }", "python": "def solve ( ) :\n    INF = float ( ' inf ' )\n    def max2 ( x , y ) : return x if x >= y else y\n    N , K = map ( int , input ( ) . split ( ) )\n    Hs = [ 0 ] + list ( map ( int , input ( ) . split ( ) ) )\n    if N == K :\n        return 0\n    dp = [ INF ] * ( N + 1 )\n    dp [ 0 ] = 0\n    for j in range ( 1 , N - K + 1 ) :\n        dp2 = [ INF ] * ( N + 1 )\n        for i , H in enumerate ( Hs [ j : ] , j ) :\n            for k in range ( j - 1 , i ) :\n                dp2 [ i ] = min ( dp2 [ i ] , dp [ k ] + max2 ( 0 , H - Hs [ k ] ) )\n        dp = dp2\n    return min ( dp )\n"}
{"java": "static int Permutations ( int n , int k ) { int ans = 1 ; if ( k >= 2 ) ans += ( n ) * ( n - 1 ) / 2 ; if ( k >= 3 ) ans += ( n ) * ( n - 1 ) * ( n - 2 ) * 2 / 6 ; if ( k >= 4 ) ans += ( n ) * ( n - 1 ) * ( n - 2 ) * ( n - 3 ) * 9 / 24 ; return ans ; }", "python": "def Permutations ( n , k ) :\n    ans = 1\n    if k >= 2 :\n        ans += ( n ) * ( n - 1 ) // 2\n    if k >= 3 :\n        ans += ( ( n ) * ( n - 1 ) * ( n - 2 ) * 2 // 6 )\n    if k >= 4 :\n        ans += ( ( n ) * ( n - 1 ) * ( n - 2 ) * ( n - 3 ) * 9 // 24 )\n    return ans\n"}
{"java": "static String check ( int k , int d0 , int d1 ) { int s = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 + ( 6 * ( d0 + d1 ) ) % 10 ; int a = ( k - 3 ) % 4 ; int x = 0 ; switch ( a ) { case 0 : x = 0 ; break ; case 1 : x = ( 2 * ( d0 + d1 ) ) % 10 ; break ; case 2 : x = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 ; break ; case 3 : x = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 ; break ; } int sum = d0 + d1 + ( ( ( k - 3 ) / 4 ) * s + x ) ; if ( sum % 3 == 0 ) return \" YES \" ; return \" NO \" ; }", "python": "def check ( k , d0 , d1 ) :\n    s = ( ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 + ( 6 * ( d0 + d1 ) ) % 10 )\n    a = ( k - 3 ) % 4\n    if ( a == 0 ) :\n        x = 0\n    elif ( a == 1 ) :\n        x = ( 2 * ( d0 + d1 ) ) % 10\n    elif ( a == 2 ) :\n        x = ( ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 )\n    elif ( a == 3 ) :\n        x = ( ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 )\n    sum = d0 + d1 + ( ( k - 3 ) // 4 ) * s + x\n    if ( sum % 3 == 0 ) :\n        return \" YES \"\n    else :\n        return \" NO \"\n"}
{"java": "static int division ( int num1 , int num2 ) { if ( num1 == 0 ) return 0 ; if ( num2 == 0 ) return Integer . MAX_VALUE ; boolean negResult = false ; if ( num1 < 0 ) { num1 = - num1 ; if ( num2 < 0 ) num2 = - num2 ; else negResult = true ; } else if ( num2 < 0 ) { num2 = - num2 ; negResult = true ; } int quotient = 0 ; while ( num1 >= num2 ) { num1 = num1 - num2 ; quotient ++ ; } if ( negResult ) quotient = - quotient ; return quotient ; }", "python": "def division ( num1 , num2 ) :\n    if ( num1 == 0 ) : return 0\n    if ( num2 == 0 ) : return INT_MAX\n    negResult = 0\n    if ( num1 < 0 ) :\n        num1 = - num1\n        if ( num2 < 0 ) :\n            num2 = - num2\n        else :\n            negResult = true\n    elif ( num2 < 0 ) :\n        num2 = - num2\n        negResult = true\n    quotient = 0\n    while ( num1 >= num2 ) :\n        num1 = num1 - num2\n        quotient += 1\n    if ( negResult ) :\n        quotient = - quotient\n    return quotient\n"}
{"java": "static void countDigit ( int n ) { int temp = n , sum = 0 , product = 1 ; while ( temp != 0 ) { int d = temp % 10 ; temp /= 10 ; if ( d > 0 && n % d == 0 ) { sum += d ; product *= d ; } } System . out . print ( \" Sum \u2581 = \u2581 \" + sum ) ; System . out . print ( \" \\n Product \u2581 = \u2581 \" + product ) ; }", "python": "def countDigit ( n ) :\n    temp = n\n    sum = 0\n    product = 1\n    while ( temp != 0 ) :\n        d = temp % 10\n        temp //= 10\n        if ( d > 0 and n % d == 0 ) :\n            sum += d\n            product *= d\n    print ( \" Sum \u2581 = \" , sum )\n    print ( \" Product \u2581 = \" , product )\n"}
{"java": "private static int maxConsecutiveOnes ( int x ) { int count = 0 ; while ( x != 0 ) { x = ( x & ( x << 1 ) ) ; count ++ ; } return count ; }", "python": "def maxConsecutiveOnes ( x ) :\n    count = 0\n    while ( x != 0 ) :\n        x = ( x & ( x << 1 ) )\n        count = count + 1\n    return count\n"}
{"java": "public static String judgeClass ( double timeOf500m , double timeOf1000m ) { for ( int timeClassOf500m = 0 ; timeClassOf500m < timeTable . length ; timeClassOf500m ++ ) { if ( timeOf500m < timeTable [ timeClassOf500m ] [ 0 ] ) for ( int timeClassOf1000m = timeClassOf500m ; timeClassOf1000m < timeTable . length ; timeClassOf1000m ++ ) { if ( timeOf1000m < timeTable [ timeClassOf1000m ] [ 1 ] ) { return timeClass [ timeClassOf1000m ] ; } } } return timeClass [ timeClass . length - 1 ] ; }", "python": "def rank ( time , limit ) :\n    for i , l in enumerate ( limit ) :\n        if time < l :\n            return i\n"}
{"java": "static float area ( float a ) { if ( a < 0 ) return - 1 ; float area = ( float ) Math . sqrt ( a ) / 6 ; return area ; }", "python": "def area ( a ) :\n    if a < 0 :\n        return - 1\n    area = sqrt ( a ) / 6\n    return area\n"}
{"java": "static void find ( int a [ ] , int n ) { int count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 != 0 ) { count_odd += 1 ; } } int result = ( int ) ( Math . pow ( 2 , n ) - 1 ) ; result -= ( Math . pow ( 2 , count_odd ) - 1 ) ; System . out . println ( result ) ; }", "python": "def find ( a ) :\n    count_odd = 0\n    for i in a :\n        if ( i % 2 != 0 ) :\n            count_odd += 1\n    result = pow ( 2 , len ( a ) ) - 1\n    result = result - ( pow ( 2 , count_odd ) - 1 )\n    print ( result )\n"}
{"java": "private static void floyd ( int [ ] [ ] map ) { int n = map . length - 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { map [ i ] [ j ] = map [ i ] [ j ] == 0 ? MAX : map [ i ] [ j ] ; } } for ( int k = 1 ; k <= n ; k ++ ) { for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i == j ) continue ; map [ i ] [ j ] = Math . min ( map [ i ] [ j ] , map [ i ] [ k ] + map [ k ] [ j ] ) ; } } } }", "python": "def transport ( s , g ) :\n    distance = [ 10 ** 10 for i in range ( n + 1 ) ]\n    distance [ s ] = 0\n    next = [ s ]\n    for i in range ( 1 , n + 1 ) :\n        _next = [ ]\n        for j in next :\n            _next += router [ j ]\n        next = list ( set ( _next ) )\n        for j in next :\n            distance [ j ] = min ( i , distance [ j ] )\n    return distance [ g ] + 1\n"}
{"java": "static int findNthDigit ( int p , int q , int N ) { int res = 0 ; while ( N > 0 ) { N -- ; p *= 10 ; res = p / q ; p %= q ; } return res ; }", "python": "def findNthDigit ( p , q , N ) :\n    while ( N > 0 ) :\n        N -= 1 ;\n        p *= 10 ;\n        res = p // q ;\n        p %= q ;\n    return res ;\n"}
{"java": "static float squarearea ( float r ) { if ( r < 0 ) return - 1 ; float a = 4 * ( float ) ( Math . pow ( r , 2 ) / 5 ) ; return a ; }", "python": "def squarearea ( r ) :\n    if ( r < 0 ) :\n        return - 1\n    a = 4 * ( pow ( r , 2 ) / 5 )\n    return a\n"}
{"java": "static void ReverseCharBridge ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = ' A ' ; j < ' A ' + ( 2 * n ) - 1 ; j ++ ) { if ( j >= ( ' A ' + n - 1 ) + i ) System . out . print ( ( char ) ( ( ' A ' + n - 1 ) - ( j % ( ' A ' + n - 1 ) ) ) ) ; else if ( j <= ( ' A ' + n - 1 ) - i ) System . out . print ( ( char ) j ) ; else System . out . print ( \" \u2581 \" ) ; } System . out . println ( ) ; } }", "python": "def ReverseCharBridge ( n ) :\n    for i in range ( n ) :\n        for j in range ( ord ( ' A ' ) , ord ( ' A ' ) + ( 2 * n ) - 1 ) :\n            if j >= ( ord ( ' A ' ) + n - 1 ) + i :\n                print ( chr ( ( ord ( ' A ' ) + n - 1 ) - ( j % ( ord ( ' A ' ) + n - 1 ) ) ) , end = ' ' )\n            elif j <= ( ord ( ' A ' ) + n - 1 ) - i :\n                print ( chr ( j ) , end = ' ' )\n            else :\n                print ( end = \" \u2581 \" )\n        print ( \" \\n \" , end = ' ' )\n"}
{"java": "static int maxnumber ( int n , int k ) { for ( int j = 0 ; j < k ; j ++ ) { int ans = 0 ; int i = 1 ; while ( n / i > 0 ) { int temp = ( n / ( i * 10 ) ) * i + ( n % i ) ; i *= 10 ; ans = Math . max ( ans , temp ) ; } n = ans ; } return n ; }", "python": "def maxnumber ( n , k ) :\n    for i in range ( 0 , k ) :\n        ans = 0\n        i = 1\n        while n // i > 0 :\n            temp = ( n // ( i * 10 ) ) * i + ( n % i )\n            i *= 10\n            if temp > ans :\n                ans = temp\n        n = ans\n    return ans ;\n"}
{"java": "public static void pattern ( int n ) { for ( int i = 1 ; i <= n * 2 ; i ++ ) System . out . print ( \" \u2581 \" ) ; System . out . print ( 0 + \" \\n \" ) ; for ( int i = 1 ; i <= ( n * 2 ) - 1 ; i ++ ) { if ( i < n ) { for ( int j = 1 ; j <= ( n - i ) * 2 ; j ++ ) System . out . print ( \" \u2581 \" ) ; } else { for ( int j = 1 ; j <= ( i % n ) * 2 ; j ++ ) System . out . print ( \" \u2581 \" ) ; } if ( i < n ) { for ( int j = 0 ; j <= i % n ; j ++ ) System . out . print ( j + \" \u2581 \" ) ; for ( int j = ( i % n ) - 1 ; j > 0 ; j -- ) System . out . print ( j + \" \u2581 \" ) ; System . out . print ( 0 ) ; } else if ( i > n ) { for ( int j = 0 ; j <= n - ( i - n ) ; j ++ ) System . out . print ( j + \" \u2581 \" ) ; for ( int j = ( n - ( i - n ) ) - 1 ; j > 0 ; j -- ) System . out . print ( j + \" \u2581 \" ) ; System . out . print ( 0 ) ; } else { for ( int j = 0 ; j <= n ; j ++ ) System . out . print ( j + \" \u2581 \" ) ; for ( int j = n - 1 ; j > 0 ; j -- ) System . out . print ( j + \" \u2581 \" ) ; System . out . print ( 0 ) ; } System . out . print ( \" \\n \" ) ; } for ( int i = 1 ; i <= n * 2 ; i ++ ) System . out . print ( \" \u2581 \" ) ; System . out . print ( 0 ) ; }", "python": "def pattern ( n ) :\n    for i in range ( 1 , n * 2 + 1 ) :\n        print ( end = \" \u2581 \" )\n    print ( \"0\" )\n    for i in range ( 1 , n * 2 ) :\n        if ( i < n ) :\n            for j in range ( 1 , ( n - i ) * 2 + 1 ) :\n                print ( end = \" \u2581 \" )\n        else :\n            for j in range ( 1 , ( i % n ) * 2 + 1 ) :\n                print ( end = \" \u2581 \" )\n        if ( i < n ) :\n            for j in range ( i % n + 1 ) :\n                print ( j , end = \" \u2581 \" )\n            for j in range ( i % n - 1 , - 1 , - 1 ) :\n                print ( j , end = \" \u2581 \" )\n        elif ( i > n ) :\n            for j in range ( n - ( i - n ) + 1 ) :\n                print ( j , end = \" \u2581 \" )\n            for j in range ( ( n - ( i - n ) ) - 1 , - 1 , - 1 ) :\n                print ( j , end = \" \u2581 \" )\n        else :\n            for j in range ( n + 1 ) :\n                print ( j , end = \" \u2581 \" )\n            for j in range ( n - 1 , - 1 , - 1 ) :\n                print ( j , end = \" \u2581 \" )\n        print ( )\n    for i in range ( 1 , n * 2 + 1 ) :\n        print ( end = \" \u2581 \" )\n    print ( \"0\" , end = \" \" )\n"}
{"java": "static int count ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int cnt = 0 ; int i = 0 , j = 1 ; while ( i < n && j < n ) { j = ( j <= i ) ? ( i + 1 ) : j ; while ( j < n && ( arr [ j ] - arr [ i ] ) < k ) j ++ ; cnt += ( n - j ) ; i ++ ; } return cnt ; }", "python": "def count ( arr , n , k ) :\n    arr . sort ( ) ;\n    cnt = 0 ;\n    i = 0 ; j = 1 ;\n    while ( i < n and j < n ) :\n        if j <= i :\n            j = i + 1\n        else :\n            j = j\n        while ( j < n and ( arr [ j ] - arr [ i ] ) < k ) :\n            j += 1 ;\n        cnt += ( n - j ) ;\n        i += 1 ;\n    return cnt ;\n"}
{"java": "static int countStrings ( String s ) { int sum = 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i % 2 == 0 && s . charAt ( i ) == ' $ ' ) sum *= 21 ; else if ( s . charAt ( i ) == ' $ ' ) sum *= 5 ; } return sum ; }", "python": "def countStrings ( s ) :\n    sum = 1\n    for i in range ( len ( s ) ) :\n        if ( i % 2 == 0 and s [ i ] == ' $ ' ) :\n            sum *= 21\n        elif ( s [ i ] == ' $ ' ) :\n            sum *= 5\n    return sum\n"}
{"java": "static int maxSum ( int arr [ ] , int n ) { if ( n < 2 ) return - 1 ; int ans = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i + 1 < n ; i ++ ) ans = Math . min ( ans , ( arr [ i ] + arr [ i + 1 ] ) ) ; return ans ; }", "python": "def maxSum ( arr , n ) :\n    if ( n < 2 ) :\n        return - 1\n    ans = arr [ 0 ] + arr [ 1 ]\n    for i in range ( 1 , n - 1 , 1 ) :\n        ans = min ( ans , ( arr [ i ] + arr [ i + 1 ] ) )\n    return ans\n"}
{"java": "public static int CountPair ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( i * arr [ i ] > j * arr [ j ] ) result ++ ; } return result ; }", "python": "def CountPair ( arr , n ) :\n    result = 0 ;\n    for i in range ( 0 , n ) :\n        j = i + 1\n        while ( j < n ) :\n            if ( i * arr [ i ] > j * arr [ j ] ) :\n                result = result + 1\n            j = j + 1\n    return result ;\n"}
{"java": "static int totalSumDivisibleByNum ( int n , int number ) { int firstnum = ( int ) Math . pow ( 10 , n - 1 ) ; int lastnum = ( int ) Math . pow ( 10 , n ) ; int sum = 0 ; for ( int i = firstnum ; i < lastnum ; i ++ ) if ( i % number == 0 ) sum += i ; return sum ; }", "python": "def totalSumDivisibleByNum ( n , number ) :\n    firstnum = pow ( 10 , n - 1 )\n    lastnum = pow ( 10 , n )\n    sum = 0\n    for i in range ( firstnum , lastnum ) :\n        if ( i % number == 0 ) :\n            sum += i\n    return sum\n"}
{"java": "public static long maxSubarrayXOR ( long A [ ] ) { int idx = 0 ; for ( int bit = 60 ; bit >= 0 ; bit -- ) { int find = idx ; while ( find < A . length ) { if ( ( A [ find ] & ( 1L << bit ) ) != 0 ) { break ; } find ++ ; } if ( find == A . length ) continue ; if ( idx != find ) { A [ idx ] ^= A [ find ] ; A [ find ] ^= A [ idx ] ; A [ idx ] ^= A [ find ] ; find = idx ; } for ( int i = 0 ; i < A . length ; i ++ ) { if ( i != find && ( A [ i ] & ( 1L << bit ) ) != 0 ) { A [ i ] ^= A [ find ] ; } } idx ++ ; } long ret = 0 ; for ( long l : A ) { ret ^= l ; } return ret ; }", "python": "def solve ( * args : str ) -> str :\n    n = int ( args [ 0 ] )\n    A = np . array ( args [ 1 ] . split ( ) , dtype = np . int64 )\n    n_bit = len ( np . binary_repr ( max ( A ) ) )\n    xor = np . bitwise_xor . reduce ( A )\n    A &= ~ xor\n    for b in reversed ( range ( n_bit ) ) :\n        b_set = A & 1 << b != 0\n        msb_args = np . where ( b_set & ( A < 1 << b + 1 ) ) [ 0 ]\n        if len ( msb_args ) :\n            b_set [ msb_args [ 0 ] ] = False\n            A [ b_set ] ^= A [ msb_args [ 0 ] ]\n    ret = 2 * np . bitwise_xor . reduce ( A ) + xor\n    return str ( ret )\n"}
{"java": "public static void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { System . out . print ( \" \u2581 Invalid \u2581 Input \u2581 \" ) ; return ; } first = second = Integer . MIN_VALUE ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } if ( second == Integer . MIN_VALUE ) System . out . print ( \" There \u2581 is \u2581 no \u2581 second \u2581 largest \" + \" \u2581 element \\n \" ) ; else System . out . print ( \" The \u2581 second \u2581 largest \u2581 element \" + \" \u2581 is \u2581 \" + second ) ; }", "python": "def print2largest ( arr , arr_size ) :\n    if ( arr_size < 2 ) :\n        print ( \" \u2581 Invalid \u2581 Input \u2581 \" )\n        return\n    first = second = - 2147483648\n    for i in range ( arr_size ) :\n        if ( arr [ i ] > first ) :\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second and arr [ i ] != first ) :\n            second = arr [ i ]\n    if ( second == - 2147483648 ) :\n        print ( \" There \u2581 is \u2581 no \u2581 second \u2581 largest \u2581 element \" )\n    else :\n        print ( \" The \u2581 second \u2581 largest \u2581 element \u2581 is \" , second )\n"}
{"java": "static int longestSubarray ( int arr [ ] , int n ) { int i , d ; int hash [ ] [ ] = new int [ 2 ] [ 10 ] ; for ( i = 0 ; i < 2 ; i ++ ) for ( int j = 0 ; j < 10 ; j ++ ) hash [ i ] [ j ] = 0 ; int currRow ; int maxLen = 1 ; int len = 0 ; int tmp ; tmp = arr [ 0 ] ; while ( tmp > 0 ) { hash [ 0 ] [ tmp % 10 ] = 1 ; tmp /= 10 ; } currRow = 1 ; for ( i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; for ( d = 0 ; d <= 9 ; d ++ ) hash [ currRow ] [ d ] = 0 ; while ( tmp > 0 ) { hash [ currRow ] [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( d = 0 ; d <= 9 ; d ++ ) { if ( hash [ currRow ] [ d ] != 0 && hash [ 1 - currRow ] [ d ] != 0 ) { len ++ ; break ; } } if ( d == 10 ) { len = 1 ; } maxLen = Math . max ( maxLen , len ) ; currRow = 1 - currRow ; } return maxLen ; }", "python": "def longestSubarray ( arr , n ) :\n    i = d = 0 ;\n    HASH1 = [ [ 0 for x in range ( 10 ) ] for y in range ( 2 ) ] ;\n    currRow = 0 ;\n    maxLen = 1 ;\n    len1 = 0 ;\n    tmp = 0 ;\n    tmp = arr [ 0 ] ;\n    while ( tmp > 0 ) :\n        HASH1 [ 0 ] [ tmp % 10 ] = 1 ;\n        tmp = tmp // 10 ;\n    currRow = 1 ;\n    for i in range ( 0 , n ) :\n        tmp = arr [ i ] ;\n        for d in range ( 0 , 10 ) :\n            HASH1 [ currRow ] [ d ] = 0 ;\n        while ( tmp > 0 ) :\n            HASH1 [ currRow ] [ tmp % 10 ] = 1 ;\n            tmp = tmp // 10 ;\n        for d in range ( 0 , 10 ) :\n            if ( HASH1 [ currRow ] [ d ] and HASH1 [ 1 - currRow ] [ d ] ) :\n                len1 += 1 ;\n                break ;\n        if ( d == 10 ) :\n            len1 = 1 ;\n        maxLen = max ( maxLen , len1 ) ;\n        currRow = 1 - currRow ;\n    return maxLen ;\n"}
{"java": "static int evenNumSubstring ( String str ) { int len = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int temp = str . charAt ( i ) - '0' ; if ( temp % 2 == 0 ) count += ( i + 1 ) ; } return count ; }", "python": "def evenNumSubstring ( str ) :\n    length = len ( str )\n    count = 0\n    for i in range ( 0 , length , 1 ) :\n        temp = ord ( str [ i ] ) - ord ( '0' )\n        if ( temp % 2 == 0 ) :\n            count += ( i + 1 )\n    return count\n"}
{"java": "public static double area_leaf ( double a ) { return ( a * a * ( PI / 2 - 1 ) ) ; }", "python": "def area_leaf ( a ) :\n    return ( a * a * ( PI / 2 - 1 ) )\n"}
{"java": "static int sameOccurrence ( int arr [ ] , int n , int x , int y ) { int [ ] countX = new int [ n ] ; int [ ] countY = new int [ n ] ; Map < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { if ( i != 0 ) countX [ i ] = countX [ i - 1 ] + 1 ; else countX [ i ] = 1 ; } else { if ( i != 0 ) countX [ i ] = countX [ i - 1 ] ; else countX [ i ] = 0 ; } if ( arr [ i ] == y ) { if ( i != 0 ) countY [ i ] = countY [ i - 1 ] + 1 ; else countY [ i ] = 1 ; } else { if ( i != 0 ) countY [ i ] = countY [ i - 1 ] ; else countY [ i ] = 0 ; } if ( m . containsKey ( countX [ i ] - countY [ i ] ) ) { m . put ( countX [ i ] - countY [ i ] , m . get ( countX [ i ] - countY [ i ] ) + 1 ) ; } else { m . put ( countX [ i ] - countY [ i ] , 1 ) ; } } int result = m . get ( 0 ) ; for ( Map . Entry < Integer , Integer > it : m . entrySet ( ) ) result = result + ( ( it . getValue ( ) ) * ( ( it . getValue ( ) ) - 1 ) ) / 2 ; return ( result ) ; }", "python": "def sameOccurrence ( arr , n , x , y ) :\n    countX = [ 0 for i in range ( n ) ]\n    countY = [ 0 for i in range ( n ) ]\n    m = dict ( )\n    for i in range ( n ) :\n        if ( arr [ i ] == x ) :\n            if ( i != 0 ) :\n                countX [ i ] = countX [ i - 1 ] + 1\n            else :\n                countX [ i ] = 1\n        else :\n            if ( i != 0 ) :\n                countX [ i ] = countX [ i - 1 ]\n            else :\n                countX [ i ] = 0\n        if ( arr [ i ] == y ) :\n            if ( i != 0 ) :\n                countY [ i ] = countY [ i - 1 ] + 1\n            else :\n                countY [ i ] = 1\n        else :\n            if ( i != 0 ) :\n                countY [ i ] = countY [ i - 1 ]\n            else :\n                countY [ i ] = 0\n        m [ countX [ i ] - countY [ i ] ] = m . get ( countX [ i ] - countY [ i ] , 0 ) + 1\n    result = m [ 0 ]\n    for j in m :\n        result += ( m [ j ] * ( m [ j ] - 1 ) ) // 2\n    return result\n"}
{"java": "static int findPairCount ( int N , int K ) { int count = 0 ; int rem [ ] = new int [ K ] ; rem [ 0 ] = N / K ; for ( int i = 1 ; i < K ; i ++ ) rem [ i ] = ( N - i ) / K + 1 ; if ( K % 2 == 0 ) { count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; for ( int i = 1 ; i < K / 2 ; i ++ ) count += rem [ i ] * rem [ K - i ] ; count += ( rem [ K / 2 ] * ( rem [ K / 2 ] - 1 ) ) / 2 ; } else { count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; for ( int i = 1 ; i <= K / 2 ; i ++ ) count += rem [ i ] * rem [ K - i ] ; } return count ; }", "python": "def findPairCount ( N , K ) :\n    count = 0 ;\n    rem = [ 0 ] * K ;\n    rem [ 0 ] = N // K ;\n    for i in range ( 1 , K ) :\n        rem [ i ] = ( N - i ) // K + 1 ;\n    if ( K % 2 == 0 ) :\n        count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) // 2 ;\n        for i in range ( 1 , K // 2 ) :\n            count += rem [ i ] * rem [ K - i ] ;\n        count += ( rem [ K // 2 ] * ( rem [ K // 2 ] - 1 ) ) // 2 ;\n    else :\n        count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) // 2 ;\n        for i in rage ( 1 , K // 2 + 1 ) :\n            count += rem [ i ] * rem [ K - i ] ;\n    return count ;\n"}
{"java": "static int minOperations ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) hashTable [ arr [ i ] ] ++ ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( hashTable [ arr [ i ] ] != 0 ) { for ( int j = i ; j < n ; j ++ ) if ( arr [ j ] % arr [ i ] == 0 ) hashTable [ arr [ j ] ] = 0 ; res ++ ; } } return res ; }", "python": "def minOperations ( arr , n ) :\n    arr . sort ( )\n    for i in range ( n ) :\n        hashTable [ arr [ i ] ] += 1\n    res = 0\n    for i in range ( n ) :\n        if ( hashTable [ arr [ i ] ] ) :\n            for j in range ( i , n ) :\n                if ( arr [ j ] % arr [ i ] == 0 ) :\n                    hashTable [ arr [ j ] ] = 0\n            res += 1\n    return res\n"}
{"java": "public static int calc ( int [ ] [ ] red , int [ ] [ ] blue , int n ) { int ret = 0 , maxtemp = - 1 , index = 0 , maxindex = 0 , flag = 0 ; for ( int i = 0 ; i < n ; i ++ ) { index = 0 ; flag = 0 ; maxtemp = - 1 ; while ( index < n && red [ index ] [ 0 ] < blue [ i ] [ 0 ] ) { if ( maxtemp <= red [ index ] [ 1 ] && red [ index ] [ 1 ] < blue [ i ] [ 1 ] ) { maxtemp = red [ index ] [ 1 ] ; maxindex = index ; flag = 1 ; } index ++ ; } if ( flag == 1 ) { ret ++ ; red [ maxindex ] [ 1 ] = 201 ; } } return ret ; }", "python": "def I ( ) : return int ( input ( ) )\ndef F ( ) : return float ( input ( ) )\ndef SS ( ) : return input ( )\ndef LI ( ) : return [ int ( x ) for x in input ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in input ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in input ( ) . split ( ) ]\ndef LSS ( ) : return input ( ) . split ( )\ndef resolve ( ) :\n    N = I ( )\n    ab = [ LI ( ) for _ in range ( N ) ]\n    cd = [ LI ( ) for _ in range ( N ) ]\n    ab . sort ( )\n    ab_used = collections . OrderedDict ( )\n    for i in ab :\n        ab_used [ tuple ( i ) ] = False\n    cd . sort ( )\n    ans = 0\n    for c , d in cd :\n        m = - 1\n        m_ab = ( - 1 , - 1 )\n        for a , b in ab :\n            if a > c :\n                break\n            if not ab_used [ ( a , b ) ] and d > b > m :\n                m = b\n                m_ab = ( a , b )\n        if m_ab != ( - 1 , - 1 ) :\n            ab_used [ m_ab ] = True\n            ans += 1\n    print ( ans )\n"}
{"java": "static int CountWays ( int n , boolean flag ) { if ( n == 0 ) return 1 ; int sum = 0 ; if ( flag == false && n > 1 ) sum = sum + CountWays ( n - 1 , false ) + CountWays ( n - 2 , true ) ; else sum = sum + CountWays ( n - 1 , false ) ; return sum ; }", "python": "def CountWays ( n , flag ) :\n    if n == 0 :\n        return 1\n    sum = 0\n    if flag == False and n > 1 :\n        sum = sum + CountWays ( n - 1 , False ) + CountWays ( n - 2 , True )\n    else :\n        sum = sum + CountWays ( n - 1 , False )\n    return sum\n"}
{"java": "static int countOperations ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { arr [ i ] ++ ; arr [ i + 1 ] ++ ; count += 2 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) return - 1 ; } return count ; }", "python": "def countOperations ( arr , n ) :\n    count = 0 ;\n    for i in range ( n - 1 ) :\n        if ( arr [ i ] & 1 ) :\n            arr [ i ] += 1 ;\n            arr [ i + 1 ] += 1 ;\n            count += 2 ;\n    for i in range ( n ) :\n        if ( arr [ i ] & 1 ) :\n            return - 1 ;\n    return count ;\n"}
{"java": "static void printTwoDivisibleParts ( String num , int f , int s ) { int N = num . length ( ) ; int [ ] prefixReminder = new int [ N + 1 ] ; int [ ] suffixReminder = new int [ N + 1 ] ; suffixReminder [ 0 ] = 0 ; for ( int i = 1 ; i < N ; i ++ ) suffixReminder [ i ] = ( suffixReminder [ i - 1 ] * 10 + ( num . charAt ( i - 1 ) - '0' ) ) % f ; prefixReminder [ N ] = 0 ; int base = 1 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { prefixReminder [ i ] = ( prefixReminder [ i + 1 ] + ( num . charAt ( i ) - '0' ) * base ) % s ; base = ( base * 10 ) % s ; } for ( int i = 0 ; i < N ; i ++ ) { if ( prefixReminder [ i ] == 0 && suffixReminder [ i ] == 0 && num . charAt ( i ) != '0' ) { System . out . println ( num . substring ( 0 , i ) + \" \u2581 \" + num . substring ( i ) ) ; return ; } } System . out . println ( \" Not \u2581 Possible \" ) ; }", "python": "def printTwoDivisibleParts ( num , f , s ) :\n    N = len ( num ) ;\n    prefixReminder = [ 0 ] * ( N + 1 ) ;\n    suffixReminder = [ 0 ] * ( N + 1 ) ;\n    for i in range ( 1 , N ) :\n        suffixReminder [ i ] = ( suffixReminder [ i - 1 ] * 10 + ( ord ( num [ i - 1 ] ) - 48 ) ) % f ;\n    base = 1 ;\n    for i in range ( N - 1 , - 1 , - 1 ) :\n        prefixReminder [ i ] = ( prefixReminder [ i + 1 ] + ( ord ( num [ i ] ) - 48 ) * base ) % s ;\n        base = ( base * 10 ) % s ;\n    for i in range ( N ) :\n        if ( prefixReminder [ i ] == 0 and suffixReminder [ i ] == 0 and num [ i ] != '0' ) :\n            print ( num [ 0 : i ] , num [ i : N ] ) ;\n            return 0 ;\n    print ( \" Not \u2581 Possible \" ) ;\n"}
{"java": "static void pythagoreanTriplet ( int n ) { for ( int i = 1 ; i <= n / 3 ; i ++ ) { for ( int j = i + 1 ; j <= n / 2 ; j ++ ) { int k = n - i - j ; if ( i * i + j * j == k * k ) { System . out . print ( i + \" , \u2581 \" + j + \" , \u2581 \" + k ) ; return ; } } } System . out . print ( \" No \u2581 Triplet \" ) ; }", "python": "def pythagoreanTriplet ( n ) :\n    for i in range ( 1 , int ( n / 3 ) + 1 ) :\n        for j in range ( i + 1 , int ( n / 2 ) + 1 ) :\n            k = n - i - j\n            if ( i * i + j * j == k * k ) :\n                print ( i , \" , \u2581 \" , j , \" , \u2581 \" , k , sep = \" \" )\n                return\n    print ( \" No \u2581 Triplet \" )\n"}
{"java": "static int maximumPoints ( int arr [ ] , int n , int k , int i ) { int start ; if ( k > i ) start = 0 ; else start = i - k ; int res = 0 ; for ( int j = start ; j <= start + k && j < n ; j ++ ) res += arr [ j ] ; int curr_sum = res ; for ( int j = start + k + 1 ; j < n && j <= i + k ; j ++ ) { curr_sum += arr [ j ] - arr [ j - k - 1 ] ; res = Math . max ( res , curr_sum ) ; } return res ; }", "python": "def maximumPoints ( arr , n , k , i ) :\n    start = 0\n    if ( k > i ) :\n        start = 0\n    else :\n        start = i - k\n    res = 0\n    j = start\n    while ( j <= start + k and j < n ) :\n        res += arr [ j ]\n        j += 1\n    curr_sum = res\n    j = start + k + 1\n    while ( j < n and j <= i + k ) :\n        curr_sum += arr [ j ] - arr [ j - k - 1 ]\n        res = max ( res , curr_sum )\n        j += 1\n    return res\n"}
{"java": "static int solve ( int N , int M , int cp [ ] , int sp [ ] ) { Integer [ ] profit = new Integer [ N ] ; for ( int i = 0 ; i < N ; i ++ ) profit [ i ] = sp [ i ] - cp [ i ] ; Arrays . sort ( profit , Collections . reverseOrder ( ) ) ; int sum = 0 ; for ( int i = 0 ; i < M ; i ++ ) { if ( profit [ i ] > 0 ) sum += profit [ i ] ; else break ; } return sum ; }", "python": "def solve ( N , M , cp , sp ) :\n    profit = [ ]\n    for i in range ( N ) :\n        profit . append ( sp [ i ] - cp [ i ] )\n    profit . sort ( reverse = True )\n    sum = 0\n    for i in range ( M ) :\n        if profit [ i ] > 0 :\n            sum += profit [ i ]\n        else :\n            break\n    return sum\n"}
{"java": "static void sortArray ( int a [ ] , int n ) { Vector < Integer > ans = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= 0 ) ans . add ( a [ i ] ) ; } Collections . sort ( ans ) ; int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= 0 ) { a [ i ] = ans . get ( j ) ; j ++ ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \u2581 \" ) ; }", "python": "def sortArray ( a , n ) :\n    ans = [ ]\n    for i in range ( n ) :\n        if ( a [ i ] >= 0 ) :\n            ans . append ( a [ i ] )\n    ans = sorted ( ans )\n    j = 0\n    for i in range ( n ) :\n        if ( a [ i ] >= 0 ) :\n            a [ i ] = ans [ j ]\n            j += 1\n    for i in range ( n ) :\n        print ( a [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int countNumber ( int N , int S ) { int countElements = 0 ; int currSum = 0 ; while ( currSum <= S ) { currSum += N ; N -- ; countElements ++ ; } return countElements ; }", "python": "def countNumber ( N , S ) :\n    countElements = 0 ;\n    currentSum = 0\n    currSum = 0 ;\n    while ( currSum <= S ) :\n        currSum += N ;\n        N = N - 1 ;\n        countElements = countElements + 1 ;\n    return countElements ;\n"}
{"java": "static void findRemainder ( int n ) { int l = n % 10 ; while ( n >= 10 ) n /= 10 ; int f = n ; int remainder = f % l ; System . out . println ( remainder ) ; }", "python": "def findRemainder ( n ) :\n    l = n % 10\n    while ( n >= 10 ) :\n        n //= 10\n    f = n\n    remainder = f % l\n    print ( remainder )\n"}
{"java": "static int maxSubStr ( char [ ] str1 , int len1 , char [ ] str2 , int len2 ) { if ( len1 > len2 ) return 0 ; int freq1 [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len1 ; i ++ ) freq1 [ i ] = 0 ; for ( int i = 0 ; i < len1 ; i ++ ) freq1 [ str1 [ i ] - ' a ' ] ++ ; int freq2 [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len2 ; i ++ ) freq2 [ i ] = 0 ; for ( int i = 0 ; i < len2 ; i ++ ) freq2 [ str2 [ i ] - ' a ' ] ++ ; int minPoss = Integer . MAX_VALUE ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq1 [ i ] == 0 ) continue ; if ( freq1 [ i ] > freq2 [ i ] ) return 0 ; minPoss = Math . min ( minPoss , freq2 [ i ] / freq1 [ i ] ) ; } return minPoss ; }", "python": "def maxSubStr ( str1 , len1 , str2 , len2 ) :\n    if ( len1 > len2 ) :\n        return 0 ;\n    freq1 = [ 0 ] * MAX ;\n    for i in range ( len1 ) :\n        freq1 [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] += 1 ;\n    freq2 = [ 0 ] * MAX ;\n    for i in range ( len2 ) :\n        freq2 [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] += 1 ;\n    minPoss = sys . maxsize ;\n    for i in range ( MAX ) :\n        if ( freq1 [ i ] == 0 ) :\n            continue ;\n        if ( freq1 [ i ] > freq2 [ i ] ) :\n            return 0 ;\n        minPoss = min ( minPoss , freq2 [ i ] / freq1 [ i ] ) ;\n    return int ( minPoss ) ;\n"}
{"java": "static void calcSum ( int arr [ ] , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; System . out . print ( sum + \" \u2581 \" ) ; for ( int i = k ; i < n ; i ++ ) { sum = ( sum - arr [ i - k ] ) + arr [ i ] ; System . out . print ( sum + \" \u2581 \" ) ; } }", "python": "def calcSum ( arr , n , k ) :\n    sum = 0\n    for i in range ( k ) :\n        sum += arr [ i ]\n    print ( sum , end = \" \u2581 \" )\n    for i in range ( k , n ) :\n        sum = ( sum - arr [ i - k ] ) + arr [ i ]\n        print ( sum , end = \" \u2581 \" )\n"}
{"java": "static boolean isFrequencyEqual ( int arr [ ] , int len ) { if ( len % 2 == 1 ) { System . out . print ( \" No \u2581 Such \u2581 Element \" ) ; return false ; } HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < len ; i ++ ) if ( freq . containsKey ( arr [ i ] ) ) { freq . put ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) ; } else { freq . put ( arr [ i ] , 1 ) ; } for ( int i = 0 ; i < len ; i ++ ) { if ( freq . containsKey ( arr [ i ] ) && freq . get ( arr [ i ] ) == len / 2 ) { System . out . print ( arr [ i ] + \" \\n \" ) ; return true ; } } System . out . print ( \" No \u2581 such \u2581 element \" ) ; return false ; }", "python": "def isFrequencyEqual ( arr , length ) :\n    if ( length % 2 == 1 ) :\n        print ( \" No \u2581 Such \u2581 Element \" ) ;\n        return False ;\n    freq = dict . fromkeys ( arr , 0 ) ;\n    for i in range ( length ) :\n        freq [ arr [ i ] ] += 1 ;\n    for i in range ( length ) :\n        if ( freq [ arr [ i ] ] == length / 2 ) :\n            print ( arr [ i ] ) ;\n            return True ;\n    print ( \" No \u2581 such \u2581 element \" , end = \" \" ) ;\n    return False ;\n"}
{"java": "static int nondecdigits ( int n ) { int x = 0 ; for ( x = n ; x >= 1 ; x -- ) { int no = x ; int prev_dig = 11 ; boolean flag = true ; while ( no != 0 ) { if ( prev_dig < no % 10 ) { flag = false ; break ; } prev_dig = no % 10 ; no /= 10 ; } if ( flag == true ) break ; } return x ; }", "python": "def nondecdigits ( n ) :\n    x = 0\n    for x in range ( n , 0 , - 1 ) :\n        no = x\n        prev_dig = 11\n        flag = True\n        while ( no != 0 ) :\n            if ( prev_dig < no % 10 ) :\n                flag = False\n                break\n            prev_dig = no % 10\n            no //= 10\n        if ( flag == True ) :\n            break\n    return x\n"}
{"java": "static int evenDecimalValue ( String str , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimalValue = 0 ; int powerOf2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimalValue += ( ( str . charAt ( k ) - '0' ) * powerOf2 ) ; powerOf2 *= 2 ; } if ( decimalValue % 2 == 0 ) result ++ ; } } return result ; }", "python": "def evenDecimalValue ( str , n ) :\n    result = 0\n    for i in range ( 0 , n ) :\n        for j in range ( i , n ) :\n            decimalValue = 0 ;\n            powerOf2 = 1 ;\n            for k in range ( i , j + 1 ) :\n                decimalValue += ( ( int ( str [ k ] ) - 0 ) * powerOf2 )\n                powerOf2 *= 2\n            if ( decimalValue % 2 == 0 ) :\n                result += 1\n    return result\n"}
{"java": "static int grayCode ( int n ) { return n ^ ( n >> 1 ) ; }", "python": "def grayCode ( n ) :\n    return n ^ ( n >> 1 )\n"}
{"java": "static void printXYZ ( int n ) { if ( n == 1 ) System . out . println ( - 1 ) ; else { System . out . println ( \" x \u2581 is \u2581 \" + n ) ; System . out . println ( \" y \u2581 is \u2581 \" + ( n + 1 ) ) ; System . out . println ( \" z \u2581 is \u2581 \" + ( n * ( n + 1 ) ) ) ; } }", "python": "def printXYZ ( n ) :\n    if n == 1 :\n        print ( - 1 )\n    else :\n        print ( \" x \u2581 is \u2581 \" , n )\n        print ( \" y \u2581 is \u2581 \" , n + 1 )\n        print ( \" z \u2581 is \u2581 \" , n * ( n + 1 ) )\n"}
{"java": "static int countWays ( int n , int arr [ ] , int len ) { if ( n == 0 ) return 1 ; int no_ways = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( n - arr [ i ] >= 0 ) { no_ways += countWays ( n - arr [ i ] , arr , len ) ; } } return no_ways ; }", "python": "def countWays ( n , arr ) :\n    if ( n == 0 ) :\n        return 1\n    no_ways = 0\n    for i in arr :\n        if ( n - i >= 0 ) :\n            no_ways = no_ways + countWays ( n - i , arr )\n    return no_ways\n"}
{"java": "static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . sqrt ( n ) ; n -= ( largest * largest ) ; steps ++ ; } return steps ; }", "python": "def countSteps ( n ) :\n    steps = 0 ;\n    while ( n ) :\n        largest = int ( sqrt ( n ) ) ;\n        n -= ( largest * largest ) ;\n        steps += 1 ;\n    return steps ;\n"}
{"java": "public static void solve ( BufferedReader br , PrintWriter pr ) throws IOException { int n = Integer . parseInt ( br . readLine ( ) ) ; PriorityQueue < Integer > negative = new PriorityQueue < > ( ( a , b ) -> ( b - a ) ) ; PriorityQueue < Integer > odd = new PriorityQueue < > ( ) ; int sum = 0 ; String [ ] temp = br . readLine ( ) . split ( \" \u2581 \" ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = Integer . parseInt ( temp [ i ] ) ; if ( num > 0 ) { sum += num ; if ( num % 2 == 1 ) { odd . add ( num ) ; } } else if ( num < 0 ) { negative . add ( num ) ; } } if ( sum % 2 == 1 ) { pr . println ( sum ) ; return ; } if ( odd . size ( ) == 0 ) { while ( negative . size ( ) != 0 ) { int current = negative . poll ( ) ; if ( current % 2 != 0 ) { pr . println ( sum + current ) ; return ; } } } else if ( odd . size ( ) != 0 ) { int res1 = sum - odd . peek ( ) ; while ( negative . size ( ) != 0 ) { int current = negative . poll ( ) ; if ( current % 2 != 0 ) { pr . println ( Math . max ( res1 , sum + current ) ) ; return ; } } pr . println ( res1 ) ; } }", "python": "def solve ( table , n ) :\n    positiveOdds = [ e for e in table if e % 2 == 1 and e >= 0 ]\n    negativeOdds = [ e for e in table if e % 2 == 1 and e < 0 ]\n    positiveEvens = [ e for e in table if e % 2 == 0 and e >= 0 ]\n    negativeEvens = [ e for e in table if e % 2 == 0 and e < 0 ]\n    if len ( positiveOdds ) % 2 == 1 :\n        out = sum ( positiveEvens ) + sum ( positiveOdds )\n    elif len ( positiveOdds ) > 0 or len ( negativeOdds ) > 0 :\n        a = b = float ( \" - inf \" )\n        if len ( positiveOdds ) : a = sum ( positiveOdds [ - 1 : 0 : - 1 ] ) + sum ( positiveEvens )\n        if len ( negativeOdds ) : b = sum ( positiveOdds ) + sum ( positiveEvens ) + negativeOdds [ - 1 ]\n        out = max ( a , b )\n    elif len ( positiveOdds ) == 0 :\n        out = sum ( positiveEvens ) + negativeOdds [ - 1 ]\n    elif len ( negativeOdds ) == 0 :\n        out = sum ( positiveEvens ) + negativeOdds [ - 1 ]\n    print ( out )\n"}
{"java": "static double ReuleauxArea ( float a ) { if ( a < 0 ) return - 1 ; double A = ( double ) 0.70477 * Math . pow ( a , 2 ) ; return A ; }", "python": "def ReuleauxArea ( a ) :\n    if a < 0 :\n        return - 1\n    return 0.70477 * pow ( a , 2 )\n"}
{"java": "public static int ones ( String st ) { int sum = 0 ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { if ( st . charAt ( i ) == '0' ) sum ++ ; } return sum ; }", "python": "def solves ( ) :\n    n = int ( input ( ) )\n    s = input ( )\n    if s . count ( '1' ) == 0 :\n        print ( 0 )\n    else :\n        print ( '1' + '0' * s . count ( '0' ) )\n"}
{"java": "static void printPattern ( int radius ) { double dist ; for ( int i = 0 ; i <= 2 * radius ; i ++ ) { for ( int j = 0 ; j <= 2 * radius ; j ++ ) { dist = Math . sqrt ( ( i - radius ) * ( i - radius ) + ( j - radius ) * ( j - radius ) ) ; if ( dist > radius - 0.5 && dist < radius + 0.5 ) System . out . print ( \" * \" ) ; else System . out . print ( \" \u2581 \" ) ; } System . out . print ( \" \\n \" ) ; } }", "python": "def printPattern ( radius ) :\n    for i in range ( ( 2 * radius ) + 1 ) :\n        for j in range ( ( 2 * radius ) + 1 ) :\n            dist = math . sqrt ( ( i - radius ) * ( i - radius ) + ( j - radius ) * ( j - radius ) )\n            if ( dist > radius - 0.5 and dist < radius + 0.5 ) :\n                print ( \" * \" , end = \" \" )\n            else :\n                print ( \" \u2581 \" , end = \" \" )\n        print ( )\n"}
{"java": "static Integer solve ( char [ ] s , char c ) { if ( s . length == 1 ) return 0 ; if ( s . length == 2 ) { if ( s [ 0 ] == s [ 1 ] && s [ 0 ] == c ) return 1 ; else return 0 ; } if ( dp . containsKey ( String . valueOf ( s ) + \" \u2581 \" + c ) ) return dp . get ( String . valueOf ( s ) + \" \u2581 \" + c ) ; Integer ans = 0 ; if ( s [ 0 ] == s [ s . length - 1 ] && s [ 0 ] == c ) { for ( char c1 = ' a ' ; c1 <= ' z ' ; c1 ++ ) if ( c1 != c ) ans = Math . max ( ans , 1 + solve ( Arrays . copyOfRange ( s , 1 , s . length - 1 ) , c1 ) ) ; } else { for ( Integer i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == c ) { for ( Integer j = s . length - 1 ; j > i ; j -- ) if ( s [ j ] == c ) { if ( j == i ) break ; ans = solve ( Arrays . copyOfRange ( s , i , j + 1 ) , c ) ; break ; } break ; } } } dp . put ( String . valueOf ( s ) + \" \u2581 \" + c , ans ) ; return dp . get ( String . valueOf ( s ) + \" \u2581 \" + c ) ; }", "python": "def solve ( s , c ) :\n    if ( len ( s ) == 1 ) :\n        return 0 ;\n    if ( len ( s ) == 2 ) :\n        if ( s [ 0 ] == s [ 1 ] and s [ 0 ] == c ) :\n            return 1 ;\n        else :\n            return 0 ;\n    if ( s + \" \u2581 \" + c ) in dp :\n        return dp [ s + \" \u2581 \" + c ] ;\n    ans = 0 ;\n    if ( s [ 0 ] == s [ len ( s ) - 1 ] and s [ 0 ] == c ) :\n        for c1 in range ( 97 , 123 ) :\n            if ( chr ( c1 ) != c ) :\n                ans = max ( ans , 1 + solve ( s [ 1 : len ( s ) - 1 ] , chr ( c1 ) ) ) ;\n    else :\n        for i in range ( len ( s ) ) :\n            if ( s [ i ] == c ) :\n                for j in range ( len ( s ) - 1 , i , - 1 ) :\n                    if ( s [ j ] == c ) :\n                        if ( j == i ) :\n                            break ;\n                        ans = solve ( s [ i : j - i + 2 ] , c ) ;\n                        break ;\n                break ;\n    dp [ s + \" \u2581 \" + c ] = ans ;\n    return dp [ s + \" \u2581 \" + c ] ;\n"}
{"java": "static void expressDigit ( int arr [ ] , int n ) { int min = 9 , index = 0 , temp = 0 ; temp = arr [ 0 ] ; for ( int i = 1 ; i < 10 ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; index = i ; } } if ( temp < min ) { System . out . print ( 1 ) ; for ( int i = 1 ; i <= temp + 1 ; i ++ ) System . out . print ( 0 ) ; } else { for ( int i = 0 ; i < min ; i ++ ) System . out . print ( index ) ; System . out . print ( index ) ; } }", "python": "def expressDigit ( arr , n ) :\n    min = 9\n    index = 0\n    temp = 0\n    temp = arr [ 0 ]\n    for i in range ( 1 , 10 ) :\n        if ( arr [ i ] < min ) :\n            min = arr [ i ]\n            index = i\n    if ( temp < min ) :\n        print ( 1 , end = \" \" )\n        for i in range ( 1 , temp + 1 ) :\n            print ( 0 , end = \" \" )\n    else :\n        for i in range ( min ) :\n            print ( index , end = \" \" )\n        print ( index )\n"}
{"java": "static void subString ( char str [ ] , int n ) { for ( int len = 1 ; len <= n ; len ++ ) { for ( int i = 0 ; i <= n - len ; i ++ ) { int j = i + len - 1 ; for ( int k = i ; k <= j ; k ++ ) { System . out . print ( str [ k ] ) ; } System . out . println ( ) ; } } }", "python": "def subString ( Str , n ) :\n    for Len in range ( 1 , n + 1 ) :\n        for i in range ( n - Len + 1 ) :\n            j = i + Len - 1\n            for k in range ( i , j + 1 ) :\n                print ( Str [ k ] , end = \" \" )\n            print ( )\n"}
{"java": "static char stringPalindrome ( String A , String B ) { int [ ] countA = new int [ MAX_CHAR ] ; int [ ] countB = new int [ MAX_CHAR ] ; int l1 = A . length ( ) ; int l2 = B . length ( ) ; for ( int i = 0 ; i < l1 ; i ++ ) countA [ A . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < l2 ; i ++ ) countB [ B . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < 26 ; i ++ ) if ( ( countA [ i ] > 1 && countB [ i ] == 0 ) ) return ' A ' ; return ' B ' ; }", "python": "def stringPalindrome ( A , B ) :\n    countA = [ 0 ] * MAX_CHAR\n    countB = [ 0 ] * MAX_CHAR\n    l1 = len ( A )\n    l2 = len ( B )\n    for i in range ( l1 ) :\n        countA [ ord ( A [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( l2 ) :\n        countB [ ord ( B [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( 26 ) :\n        if ( ( countA [ i ] > 1 and countB [ i ] == 0 ) ) :\n            return ' A '\n    return ' B '\n"}
{"java": "static long firstkdigits ( int n , int k ) { long product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product *= n ; while ( ( int ) ( product / Math . pow ( 10 , k ) ) != 0 ) product = product / 10 ; return product ; }", "python": "def firstkdigits ( n , k ) :\n    product = 1\n    for i in range ( n ) :\n        product *= n\n    while ( ( product // pow ( 10 , k ) ) != 0 ) :\n        product = product // 10\n    return product\n"}
{"java": "static int count ( String s , int k ) { int n = s . length ( ) ; int d = 0 , i ; int count = 0 ; for ( i = 0 ; i < n ; i ++ ) d += s . charAt ( i ) ; if ( d % k == 0 ) count += 1 ; for ( i = k ; i < n ; i ++ ) { int prev = s . charAt ( i - k ) ; d -= prev ; d += s . charAt ( i ) ; if ( d % k == 0 ) count += 1 ; } return count ; }", "python": "def count ( s , k ) :\n    n = len ( s )\n    d , count = 0 , 0\n    for i in range ( k ) :\n        d += ord ( s [ i ] )\n        if ( d % k == 0 ) :\n            count += 1\n            for i in range ( k , n ) :\n                prev = ord ( s [ i - k ] )\n                d -= prev\n                d += ord ( s [ i ] )\n                if ( d % k == 0 ) :\n                    count += 1\n                    return count\n"}
{"java": "static void pattern ( int min_stars , int p_height ) { int p_space ; p_space = p_height - 1 ; int i , j , k , n , x ; x = 1 ; for ( i = 0 ; i < p_height ; i ++ ) { for ( j = p_space ; j > i ; j -- ) { System . out . print ( \" \u2581 \" ) ; } for ( k = 0 ; k < min_stars ; k ++ ) System . out . print ( \" * \" ) ; for ( n = ( p_height + p_height - 2 ) ; n >= x ; n -- ) System . out . print ( \" \u2581 \" ) ; for ( k = 0 ; k < min_stars ; k ++ ) System . out . print ( \" * \" ) ; min_stars = min_stars + 2 ; x = x + 2 ; System . out . println ( ) ; } }", "python": "def pattern ( min_stars , p_height ) :\n    p_space = p_height - 1\n    x = 1\n    for i in range ( 0 , p_height ) :\n        for j in range ( p_space , i , - 1 ) :\n            print ( \" \u2581 \" , end = \" \" )\n        for k in range ( 0 , min_stars ) :\n            print ( \" * \" , end = \" \" )\n        for n in range ( ( p_height + p_height - 2 ) , x - 1 , - 1 ) :\n            print ( \" \u2581 \" , end = \" \" )\n        for k in range ( 0 , min_stars ) :\n            print ( \" * \" , end = \" \" )\n        min_stars = min_stars + 2\n        x = x + 2\n        print ( \" \" )\n"}
{"java": "static float rmsValue ( int arr [ ] , int n ) { int square = 0 ; float mean = 0 ; float root = 0 ; for ( int i = 0 ; i < n ; i ++ ) { square += Math . pow ( arr [ i ] , 2 ) ; } mean = ( square / ( float ) ( n ) ) ; root = ( float ) Math . sqrt ( mean ) ; return root ; }", "python": "def rmsValue ( arr , n ) :\n    square = 0\n    mean = 0.0\n    root = 0.0\n    for i in range ( 0 , n ) :\n        square += ( arr [ i ] ** 2 )\n    mean = ( square / ( float ) ( n ) )\n    root = math . sqrt ( mean )\n    return root\n"}
{"java": "static boolean isInside ( int circle_x , int circle_y , int rad , int x , int y ) { if ( ( x - circle_x ) * ( x - circle_x ) + ( y - circle_y ) * ( y - circle_y ) <= rad * rad ) return true ; else return false ; }", "python": "def isInside ( circle_x , circle_y , rad , x , y ) :\n    if ( ( x - circle_x ) * ( x - circle_x ) + ( y - circle_y ) * ( y - circle_y ) <= rad * rad ) :\n        return True ;\n    else :\n        return False ;\n"}
{"java": "static void EvenOddAbsoluteDifference ( int arr [ ] , int n ) { int even = 0 ; int odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) even = Math . abs ( even - arr [ i ] ) ; else odd = Math . abs ( odd - arr [ i ] ) ; } System . out . println ( \" Even \u2581 Index \u2581 absolute \u2581 difference \u2581 : \u2581 \" + even ) ; System . out . println ( \" Odd \u2581 Index \u2581 absolute \u2581 difference \u2581 : \u2581 \" + odd ) ; }", "python": "def EvenOddAbsoluteDifference ( arr , n ) :\n    even = 0\n    odd = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( i % 2 == 0 ) :\n            even = abs ( even - arr [ i ] ) ;\n        else :\n            odd = abs ( odd - arr [ i ] ) ;\n    print ( \" Even \u2581 Index \u2581 absolute \u2581 difference \u2581 : \" , even )\n    print ( \" Odd \u2581 Index \u2581 absolute \u2581 difference \u2581 : \" , odd )\n"}
{"java": "static int findMinimumSubsequences ( String A , String B ) { int numberOfSubsequences = 1 ; int sizeOfB = B . length ( ) ; int sizeOfA = A . length ( ) ; int inf = 1000000 ; int [ ] [ ] next = new int [ 26 ] [ sizeOfB ] ; for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 0 ; j < sizeOfB ; j ++ ) { next [ i ] [ j ] = inf ; } } for ( int i = 0 ; i < sizeOfB ; i ++ ) { next [ B . charAt ( i ) - ' a ' ] [ i ] = i ; } for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = sizeOfB - 2 ; j >= 0 ; j -- ) { if ( next [ i ] [ j ] == inf ) { next [ i ] [ j ] = next [ i ] [ j + 1 ] ; } } } int pos = 0 ; int i = 0 ; while ( i < sizeOfA ) { if ( pos == 0 && next [ A . charAt ( i ) - ' a ' ] [ pos ] == inf ) { numberOfSubsequences = - 1 ; break ; } else if ( pos < sizeOfB && next [ A . charAt ( i ) - ' a ' ] [ pos ] < inf ) { int nextIndex = next [ A . charAt ( i ) - ' a ' ] [ pos ] + 1 ; pos = nextIndex ; i ++ ; } else { numberOfSubsequences ++ ; pos = 0 ; } } return numberOfSubsequences ; }", "python": "def findMinimumSubsequences ( A , B ) :\n    numberOfSubsequences = 1\n    sizeOfB = len ( B )\n    sizeOfA = len ( A )\n    inf = 1000000\n    next = [ [ inf for i in range ( sizeOfB ) ] for i in range ( 26 ) ]\n    for i in range ( sizeOfB ) :\n        next [ ord ( B [ i ] ) - ord ( ' a ' ) ] [ i ] = i\n    for i in range ( 26 ) :\n        for j in range ( sizeOfB - 2 , - 1 , - 1 ) :\n            if ( next [ i ] [ j ] == inf ) :\n                next [ i ] [ j ] = next [ i ] [ j + 1 ]\n    pos = 0\n    i = 0\n    while ( i < sizeOfA ) :\n        if ( pos == 0 and next [ ord ( A [ i ] ) - ord ( ' a ' ) ] [ pos ] == inf ) :\n            numberOfSubsequences = - 1\n            break\n        elif ( pos < sizeOfB and next [ ord ( A [ i ] ) - ord ( ' a ' ) ] [ pos ] < inf ) :\n            nextIndex = next [ ord ( A [ i ] ) - ord ( ' a ' ) ] [ pos ] + 1\n            pos = nextIndex\n            i += 1\n        else :\n            numberOfSubsequences += 1\n            pos = 0\n    return numberOfSubsequences\n"}
{"java": "public static int arraySum ( int arr [ ] , int n ) { int x = ( n + 1 ) / 2 ; return ( arr [ 0 ] - 1 ) * n + x * x ; }", "python": "def arraySum ( arr , n ) :\n    x = ( n + 1 ) / 2\n    return ( arr [ 0 ] - 1 ) * n + x * x\n"}
{"java": "static void countPermutations ( int N , int B ) { int x = ( int ) Math . pow ( B , N ) ; int y = ( int ) Math . pow ( B , N - 1 ) ; System . out . println ( x - y ) ; }", "python": "def countPermutations ( N , B ) :\n    x = B ** N\n    y = B ** ( N - 1 )\n    print ( x - y )\n"}
{"java": "public static void findDandZeroes ( int [ ] a , int [ ] b , int n ) { HashMap < Double , Integer > mpp = new HashMap < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != 0 && a [ i ] != 0 ) { double val = ( double ) ( - 1.0 * b [ i ] ) / ( double ) ( a [ i ] ) ; if ( mpp . get ( val ) != null ) { int x = mpp . get ( val ) ; mpp . put ( val , ++ x ) ; } else mpp . put ( val , 1 ) ; } else if ( b [ i ] == 0 && a [ i ] == 0 ) count += 1 ; } int maxi = 0 ; for ( HashMap . Entry < Double , Integer > entry : mpp . entrySet ( ) ) { maxi = Math . max ( entry . getValue ( ) , maxi ) ; } for ( HashMap . Entry < Double , Integer > entry : mpp . entrySet ( ) ) { if ( entry . getValue ( ) == maxi ) { System . out . println ( \" Value \u2581 of \u2581 d \u2581 is : \u2581 \" + entry . getKey ( ) ) ; break ; } } System . out . println ( \" The \u2581 number \u2581 of \u2581 zeros \u2581 in \u2581 array \u2581 C \u2581 is : \u2581 \" + ( maxi + count ) ) ; }", "python": "def findDandZeros ( a , b , n ) :\n    mpp = { } ;\n    count = 0 ;\n    for i in range ( n ) :\n        if ( b [ i ] != 0 and a [ i ] != 0 ) :\n            val = ( - 1.0 * b [ i ] ) / a [ i ] ;\n            if val not in mpp :\n                mpp [ val ] = 0 ;\n            mpp [ val ] += 1 ;\n        elif ( b [ i ] == 0 and a [ i ] == 0 ) :\n            count += 1 ;\n    maxi = 0 ;\n    for item in mpp :\n        maxi = max ( mpp [ item ] , maxi ) ;\n    for keys , values in mpp . items ( ) :\n        if ( values == maxi ) :\n            print ( \" Value \u2581 of \u2581 d \u2581 is : \" , keys ) ;\n            break ;\n    print ( \" The \u2581 number \u2581 of \u2581 zeros \u2581 in \u2581 array \u2581 C \u2581 is : \" , maxi + count ) ;\n"}
{"java": "static int countDigit ( long n ) { if ( n == 0 ) return 0 ; return 1 + countDigit ( n / 10 ) ; }", "python": "def countDigit ( n ) :\n    if n == 0 :\n        return 0\n    return 1 + countDigit ( n // 10 )\n"}
{"java": "static void Positive_Divisors ( ) { for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j * j <= i ; j ++ ) { if ( i % j == 0 ) { if ( j * j == i ) d [ i ] ++ ; else d [ i ] += 2 ; } } } int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { if ( d [ i ] == d [ i - 1 ] ) ans ++ ; pre [ i ] = ans ; } }", "python": "def Positive_Divisors ( ) :\n    for i in range ( N ) :\n        for j in range ( 1 , int ( sqrt ( i ) ) + 1 ) :\n            if ( i % j == 0 ) :\n                if ( j * j == i ) :\n                    d [ i ] += 1\n                else :\n                    d [ i ] += 2\n    ans = 0\n    for i in range ( 2 , N ) :\n        if ( d [ i ] == d [ i - 1 ] ) :\n            ans += 1\n        pre [ i ] = ans\n"}
{"java": "static int surfaceArea ( int b , int s ) { return 2 * b * s + ( int ) Math . pow ( b , 2 ) ; }", "python": "def surfaceArea ( b , s ) :\n    return 2 * b * s + pow ( b , 2 )\n"}
{"java": "static void findSeries ( int num , int first , int sec ) { System . out . print ( first + \" \u2581 \" + sec + \" \u2581 \" ) ; int counter = 0 , sum ; while ( counter < num - 2 ) { sum = first + sec ; System . out . print ( sum + \" \u2581 \" ) ; first = sec ; sec = sum ; counter ++ ; } }", "python": "def findSeries ( num , first , sec ) :\n    print ( \" { } \u2581 { } \u2581 \" . format ( first , sec ) , end = \" \" )\n    counter = 0\n    while ( counter < num - 2 ) :\n        sum = first + sec\n        print ( \" { } \u2581 \" . format ( sum ) , end = \" \" )\n        first = sec\n        sec = sum\n        counter = counter + 1\n"}
{"java": "static int sum_series ( int n ) { int nSquare = n * n ; return nSquare * ( nSquare - 1 ) / 4 ; }", "python": "def sum_series ( n ) :\n    nSquare = n * n\n    return int ( nSquare * ( nSquare - 1 ) / 4 )\n"}
{"java": "static int sumNth ( int A [ ] , int B [ ] , int m , int n ) { int res = 0 ; if ( n == 1 ) { for ( int i = 0 ; i < m ; i ++ ) res = res + A [ i ] ; } else if ( n == 2 ) { for ( int i = 0 ; i < m ; i ++ ) res = res + B [ i ] * m ; } else { int f [ ] = new int [ n ] ; f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; for ( int i = 0 ; i < m ; i ++ ) { res = res + ( m * ( B [ i ] * f [ n - 1 ] ) ) + ( m * ( A [ i ] * f [ n - 2 ] ) ) ; } } return res ; }", "python": "def sumNth ( A , B , m , n ) :\n    res = 0 ;\n    if ( n == 1 ) :\n        for i in range ( m ) :\n            res = res + A [ i ] ;\n    elif ( n == 2 ) :\n        for i in range ( m ) :\n            res = res + B [ i ] * m ;\n    else :\n        f = [ 0 ] * n ;\n        f [ 0 ] = 0 ;\n        f [ 1 ] = 1 ;\n        for i in range ( 2 , n ) :\n            f [ i ] = f [ i - 1 ] + f [ i - 2 ] ;\n        for i in range ( m ) :\n            res = ( res + ( m * ( B [ i ] * f [ n - 1 ] ) ) + ( m * ( A [ i ] * f [ n - 2 ] ) ) ) ;\n    return res ;\n"}
{"java": "private static int findX ( int n , int k ) { int r = n , v , u ; int m = ( int ) Math . sqrt ( k ) + 1 ; for ( int i = 2 ; i <= m && k > 1 ; i ++ ) { if ( i == m ) { i = k ; } for ( u = v = 0 ; k % i == 0 ; v ++ ) { k /= i ; } if ( v > 0 ) { int t = n ; while ( t > 0 ) { t /= i ; u += t ; } r = Math . min ( r , u / v ) ; } } return r ; }", "python": "def findX ( n , k ) :\n    r = n\n    m = int ( math . sqrt ( k ) ) + 1\n    i = 2\n    while i <= m and k > 1 :\n        if ( i == m ) :\n            i = k\n        u = 0\n        v = 0\n        while k % i == 0 :\n            k //= i\n            v += 1\n        if ( v > 0 ) :\n            t = n\n            while ( t > 0 ) :\n                t //= i\n                u += t\n            r = min ( r , u // v )\n        i += 1\n    return r\n"}
{"java": "static void printRepeating ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int index = arr [ i ] % n ; arr [ index ] += n ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] / n ) > 1 ) System . out . println ( i + \" \u2581 \" ) ; } }", "python": "def printRepeating ( arr , n ) :\n    for i in range ( 0 , n ) :\n        index = arr [ i ] % n\n        arr [ index ] += n\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] / n ) > 1 :\n            print ( i , end = \" \u2581 \" )\n"}
{"java": "static int maxProfit ( int profitA [ ] , int profitB [ ] , int n ) { int preSum [ ] = new int [ n ] ; preSum [ 0 ] = profitA [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { preSum [ i ] = preSum [ i - 1 ] + profitA [ i ] ; } int suffSum [ ] = new int [ n ] ; suffSum [ n - 1 ] = profitB [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { suffSum [ i ] = suffSum [ i + 1 ] + profitB [ i ] ; } int res = preSum [ n - 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { res = Math . max ( res , preSum [ i ] + suffSum [ i + 1 ] ) ; } res = Math . max ( res , suffSum [ 0 ] ) ; return res ; }", "python": "def maxProfit ( profitA , profitB , n ) :\n    preSum = [ 0 ] * n ;\n    preSum [ 0 ] = profitA [ 0 ] ;\n    for i in range ( 1 , n ) :\n        preSum [ i ] = preSum [ i - 1 ] + profitA [ i ] ;\n    suffSum = [ 0 ] * n ;\n    suffSum [ n - 1 ] = profitB [ n - 1 ] ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        suffSum [ i ] = suffSum [ i + 1 ] + profitB [ i ] ;\n    res = preSum [ n - 1 ] ;\n    for i in range ( 1 , n - 1 ) :\n        res = max ( res , preSum [ i ] + suffSum [ i + 1 ] ) ;\n    res = max ( res , suffSum [ 0 ] ) ;\n    return res ;\n"}
{"java": "static int countSteps ( int x , int y ) { if ( x % y == 0 ) return x / y ; return x / y + countSteps ( y , x % y ) ; }", "python": "def countSteps ( x , y ) :\n    if ( x % y == 0 ) :\n        return math . floor ( x / y ) ;\n    return math . floor ( ( x / y ) + countSteps ( y , x % y ) ) ;\n"}
{"java": "static int countSteps ( int x , int y ) { if ( x < y ) { return x + y + 2 * ( ( y - x ) / 2 ) ; } else { return x + y + 2 * ( ( ( x - y ) + 1 ) / 2 ) ; } }", "python": "def countSteps ( x , y ) :\n    if x < y :\n        return x + y + 2 * ( ( y - x ) // 2 )\n    else :\n        return x + y + 2 * ( ( ( x - y ) + 1 ) // 2 )\n"}
{"java": "static int maxFreq ( String s , int a , int b ) { int fre [ ] = new int [ 10 ] ; int n = s . length ( ) ; if ( a > b ) { int temp = a ; a = b ; b = temp ; } for ( int i = 0 ; i < n ; i ++ ) fre [ s . charAt ( i ) - '0' ] ++ ; if ( fre [ a ] == 0 && fre [ b ] == 0 ) return - 1 ; else if ( fre [ a ] >= fre [ b ] ) return a ; else return b ; }", "python": "def maxFreq ( s , a , b ) :\n    fre = [ 0 for i in range ( 10 ) ]\n    n = len ( s )\n    if ( a > b ) :\n        swap ( a , b )\n    for i in range ( 0 , n , 1 ) :\n        a = ord ( s [ i ] ) - ord ( '0' )\n        fre [ a ] += 1\n    if ( fre [ a ] == 0 and fre [ b ] == 0 ) :\n        return - 1\n    elif ( fre [ a ] >= fre [ b ] ) :\n        return a\n    else :\n        return b\n"}
{"java": "static int getNext ( Map < Integer , Integer > count ) { int loop = 1 ; for ( Entry < Integer , Integer > e : count . entrySet ( ) ) { if ( e . getValue ( ) > 1 ) { return e . getKey ( ) ; } if ( loop > 1 ) { return e . getKey ( ) ; } loop ++ ; } return 0 ; }", "python": "def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) )\nN = int ( input ( ) )\nA = [ 0 for i in range ( N ) ]\nfor i in range ( N ) :\n    A [ i ] = int ( input ( ) )\n"}
{"java": "static int pairCount ( int arr [ ] , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; Vector < Boolean > prime = new Vector < > ( max_val + 1 ) ; for ( int i = 0 ; i < max_val + 1 ; i ++ ) { prime . add ( true ) ; } prime . add ( 0 , Boolean . FALSE ) ; prime . add ( 1 , Boolean . FALSE ) ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime . get ( p ) == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) { prime . add ( i , Boolean . FALSE ) ; } } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime . get ( arr [ i ] ) ) { count ++ ; } } return ( count * ( count - 1 ) ) / 2 ; }", "python": "def pairCount ( arr , n ) :\n    max_val = arr [ 0 ]\n    for i in range ( len ( arr ) ) :\n        if ( arr [ i ] > max_val ) :\n            max_val = arr [ i ]\n    prime = [ True for i in range ( max_val + 1 ) ]\n    prime [ 0 ] = False\n    prime [ 1 ] = False\n    k = int ( sqrt ( max_val ) ) + 1\n    for p in range ( 2 , k , 1 ) :\n        if ( prime [ p ] == True ) :\n            for i in range ( p * 2 , max_val + 1 , p ) :\n                prime [ i ] = False\n    count = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( prime [ arr [ i ] ] ) :\n            count += 1\n    return ( count * ( count - 1 ) ) / 2\n"}
{"java": "static int getHermiteNumber ( int n ) { if ( n == 0 ) return 1 ; else if ( n == 1 ) return 1 ; else return - 2 * ( n - 1 ) * getHermiteNumber ( n - 2 ) ; }", "python": "def getHermiteNumber ( n ) :\n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 0\n    else :\n        return ( - 2 * ( n - 1 ) * getHermiteNumber ( n - 2 ) )\n"}
{"java": "static int evenSum ( int n ) { int curr = 2 , sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += curr ; curr += 2 ; } return sum ; }", "python": "def evensum ( n ) :\n    curr = 2\n    sum = 0\n    i = 1\n    while i <= n :\n        sum += curr\n        curr += 2\n        i = i + 1\n    return sum\n"}
{"java": "static int maxAND ( int L , int R ) { int maximum = L & R ; for ( int i = L ; i < R ; i ++ ) for ( int j = i + 1 ; j <= R ; j ++ ) maximum = Math . max ( maximum , ( i & j ) ) ; return maximum ; }", "python": "def maxAND ( L , R ) :\n    maximum = L & R\n    for i in range ( L , R , 1 ) :\n        for j in range ( i + 1 , R + 1 , 1 ) :\n            maximum = max ( maximum , ( i & j ) )\n    return maximum\n"}
{"java": "public static long maxOR ( long arr [ ] , int n , int k , int x ) { long preSum [ ] = new long [ n + 1 ] ; long suffSum [ ] = new long [ n + 1 ] ; long res = 0 , pow = 1 ; for ( int i = 0 ; i < k ; i ++ ) pow *= x ; preSum [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) preSum [ i + 1 ] = preSum [ i ] | arr [ i ] ; suffSum [ n ] = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) suffSum [ i ] = suffSum [ i + 1 ] | arr [ i ] ; res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res = Math . max ( res , preSum [ i ] | ( arr [ i ] * pow ) | suffSum [ i + 1 ] ) ; return res ; }", "python": "def maxOR ( arr , n , k , x ) :\n    preSum = [ 0 ] * ( n + 1 )\n    suffSum = [ 0 ] * ( n + 1 )\n    pow = 1\n    for i in range ( 0 , k ) :\n        pow *= x\n    preSum [ 0 ] = 0\n    for i in range ( 0 , n ) :\n        preSum [ i + 1 ] = preSum [ i ] | arr [ i ]\n    suffSum [ n ] = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        suffSum [ i ] = suffSum [ i + 1 ] | arr [ i ]\n    res = 0\n    for i in range ( 0 , n ) :\n        res = max ( res , preSum [ i ] | ( arr [ i ] * pow ) | suffSum [ i + 1 ] )\n    return res\n"}
{"java": "public static void find ( ArrayList < Integer > list ) { Collections . sort ( list ) ; int n = list . size ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( list . get ( i ) <= i + 1 ) { System . out . println ( i + 2 ) ; return ; } } System . out . println ( 1 ) ; }", "python": "def main ( ) :\n    n = int ( input ( ) )\n    arr = list ( map ( int , input ( ) . split ( ) ) )\n    arr . sort ( )\n    ans = 0\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] <= i + 1 ) :\n            ans = i + 1\n    print ( ans + 1 )\n"}
{"java": "static void CalPeri ( ) { int S = 5 , Perimeter ; Perimeter = 10 * S ; System . out . println ( \" The \u2581 Perimeter \u2581 of \u2581 Decagon \u2581 is \u2581 : \u2581 \" + Perimeter ) ; }", "python": "def CalPeri ( ) :\n    s = 5\n    Perimeter = 10 * s\n    print ( \" The \u2581 Perimeter \u2581 of \u2581 Decagon \u2581 is \u2581 : \u2581 \" , Perimeter )\n"}
{"java": "static int minToggle ( int arr [ ] , int n ) { int zero [ ] = new int [ n + 1 ] ; zero [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( arr [ i - 1 ] == 0 ) zero [ i ] = zero [ i - 1 ] + 1 ; else zero [ i ] = zero [ i - 1 ] ; } int ans = n ; for ( int i = 1 ; i <= n ; ++ i ) ans = Math . min ( ans , i - zero [ i ] + zero [ n ] - zero [ i ] ) ; return ans ; }", "python": "def minToggle ( arr , n ) :\n    zero = [ 0 for i in range ( n + 1 + 1 ) ]\n    zero [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( arr [ i - 1 ] == 0 ) :\n            zero [ i ] = zero [ i - 1 ] + 1\n        else :\n            zero [ i ] = zero [ i - 1 ]\n    ans = n\n    for i in range ( 1 , n + 1 ) :\n        ans = min ( ans , i - zero [ i ] + zero [ n ] - zero [ i ] )\n    return ans\n"}
{"java": "static int totalNumber ( int n ) { return 8 * ( int ) Math . pow ( 9 , n - 1 ) ; }", "python": "def totalNumber ( n ) :\n    return 8 * pow ( 9 , n - 1 ) ;\n"}
{"java": "static void findNextNumber ( int n ) { int h [ ] = new int [ 10 ] ; int i = 0 , msb = n , rem = 0 ; int next_num = - 1 , count = 0 ; while ( msb > 9 ) { rem = msb % 10 ; h [ rem ] = 1 ; msb /= 10 ; count ++ ; } h [ msb ] = 1 ; count ++ ; for ( i = msb + 1 ; i < 10 ; i ++ ) { if ( h [ i ] == 0 ) { next_num = i ; break ; } } if ( next_num == - 1 ) { for ( i = 1 ; i < msb ; i ++ ) { if ( h [ i ] == 0 ) { next_num = i ; count ++ ; break ; } } } if ( next_num > 0 ) { for ( i = 0 ; i < 10 ; i ++ ) { if ( h [ i ] == 0 ) { msb = i ; break ; } } for ( i = 1 ; i < count ; i ++ ) { next_num = ( ( next_num * 10 ) + msb ) ; } if ( next_num > n ) System . out . print ( next_num + \" \\n \" ) ; else System . out . print ( \" Not \u2581 Possible \u2581 \\n \" ) ; } else { System . out . print ( \" Not \u2581 Possible \u2581 \\n \" ) ; } }", "python": "def findNextNumber ( n ) :\n    h = [ 0 for i in range ( 10 ) ]\n    i = 0\n    msb = n\n    rem = 0\n    next_num = - 1\n    count = 0\n    while ( msb > 9 ) :\n        rem = msb % 10\n        h [ rem ] = 1\n        msb //= 10\n        count += 1\n    h [ msb ] = 1\n    count += 1\n    for i in range ( msb + 1 , 10 , 1 ) :\n        if ( h [ i ] == 0 ) :\n            next_num = i\n            break\n    if ( next_num == - 1 ) :\n        for i in range ( 1 , msb , 1 ) :\n            if ( h [ i ] == 0 ) :\n                next_num = i\n                count += 1\n                break\n    if ( next_num > 0 ) :\n        for i in range ( 0 , 10 , 1 ) :\n            if ( h [ i ] == 0 ) :\n                msb = i\n                break\n        for i in range ( 1 , count , 1 ) :\n            next_num = ( ( next_num * 10 ) + msb )\n        if ( next_num > n ) :\n            print ( next_num )\n        else :\n            print ( \" Not \u2581 Possible \" )\n    else :\n        print ( \" Not \u2581 Possible \" )\n"}
{"java": "static String smallestFreq ( String S1 , String S2 ) { HashMap < String , Integer > banned = new HashMap < > ( ) ; for ( int i = 0 ; i < S2 . length ( ) ; i ++ ) { String s = \" \" ; while ( i < S2 . length ( ) && S2 . charAt ( i ) != ' \u2581 ' ) s += S2 . charAt ( i ++ ) ; banned . put ( s , banned . get ( s ) == null ? 1 : banned . get ( s ) + 1 ) ; } HashMap < String , Integer > result = new HashMap < > ( ) ; String ans = \" \" ; int freq = 0 ; for ( int i = 0 ; i < S1 . length ( ) ; i ++ ) { String s = \" \" ; while ( i < S1 . length ( ) && S1 . charAt ( i ) != ' \u2581 ' ) s += S1 . charAt ( i ++ ) ; if ( banned . get ( s ) == null ) { result . put ( s , result . get ( s ) == null ? 1 : result . get ( s ) + 1 ) ; if ( result . get ( s ) > freq || ( result . get ( s ) == freq && s . compareTo ( ans ) < 0 ) ) { ans = s ; freq = result . get ( s ) ; } } } return ans ; }", "python": "def smallestFreq ( S1 , S2 ) :\n    banned = defaultdict ( lambda : 0 )\n    i = 0\n    while i < len ( S2 ) :\n        s = \" \"\n        while i < len ( S2 ) and S2 [ i ] != ' \u2581 ' :\n            s += S2 [ i ]\n            i += 1\n        i += 1\n        banned [ s ] += 1\n    result = defaultdict ( lambda : 0 )\n    ans = \" \"\n    freq = 0\n    i = 0\n    while i < len ( S1 ) :\n        s = \" \"\n        while i < len ( S1 ) and S1 [ i ] != ' \u2581 ' :\n            s += S1 [ i ]\n            i += 1\n        i += 1\n        if banned [ s ] == 0 :\n            result [ s ] += 1\n            if ( result [ s ] > freq or ( result [ s ] == freq and s < ans ) ) :\n                ans = s\n                freq = result [ s ]\n    return ans\n"}
{"java": "static int productDiagonals ( int arr [ ] [ ] , int n ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { product = product * arr [ i ] [ i ] ; product = product * arr [ i ] [ n - i - 1 ] ; } if ( n % 2 == 1 ) { product = product / arr [ n / 2 ] [ n / 2 ] ; } return product ; }", "python": "def productDiagonals ( arr , n ) :\n    product = 1 ;\n    for i in range ( n ) :\n        product = product * arr [ i ] [ i ] ;\n        product = product * arr [ i ] [ n - i - 1 ] ;\n    if ( n % 2 == 1 ) :\n        product = product // arr [ n // 2 ] [ n // 2 ] ;\n    return product ;\n"}
{"java": "static int sumOfDivisblePowers ( int L , int R , int P ) { int res = 0 ; for ( int i = L ; i <= R ; i ++ ) { int x = i ; while ( x % P == 0 ) { res ++ ; x /= P ; } } return res ; }", "python": "def sumOfDivisblePowers ( L , R , P ) :\n    res = 0\n    for i in range ( L , R + 1 ) :\n        x = i\n        while ( x % P == 0 ) :\n            res += 1\n            x /= P\n    return res\n"}
{"java": "static int calculate ( int n , int power ) { int sum = 0 ; int bp = ( int ) Math . pow ( n , power ) ; while ( bp != 0 ) { int d = bp % 10 ; sum += d ; bp /= 10 ; } return sum ; }", "python": "def calculate ( n , power ) :\n    return sum ( [ int ( i ) for i in str ( pow ( n , power ) ) ] )\n"}
{"java": "static int minSum ( int arr [ ] , int n ) { int sum = arr [ 0 ] , prev = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= prev ) { prev = prev + 1 ; sum = sum + prev ; } else { sum = sum + arr [ i ] ; prev = arr [ i ] ; } } return sum ; }", "python": "def minSum ( arr , n ) :\n    sum = arr [ 0 ] ; prev = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if arr [ i ] <= prev :\n            prev = prev + 1\n            sum = sum + prev\n        else :\n            sum = sum + arr [ i ]\n            prev = arr [ i ]\n    return sum\n"}
{"java": "static int countSolutions ( int n , int val ) { int total = 0 ; if ( n == 1 && val >= 0 ) return 1 ; for ( int i = 0 ; i <= val ; i ++ ) { total += countSolutions ( n - 1 , val - i ) ; } return total ; }", "python": "def countSolutions ( n , val ) :\n    total = 0\n    if n == 1 and val >= 0 :\n        return 1\n    for i in range ( val + 1 ) :\n        total += countSolutions ( n - 1 , val - i )\n    return total\n"}
{"java": "static void printCharWithFreq ( String str ) { int n = str . length ( ) ; int [ ] freq = new int [ SIZE ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] != 0 ) { System . out . print ( str . charAt ( i ) ) ; System . out . print ( freq [ str . charAt ( i ) - ' a ' ] + \" \u2581 \" ) ; freq [ str . charAt ( i ) - ' a ' ] = 0 ; } } }", "python": "def prCharWithFreq ( str ) :\n    n = len ( str )\n    freq = np . zeros ( 26 , dtype = np . int )\n    for i in range ( 0 , n ) :\n        freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1\n    for i in range ( 0 , n ) :\n        if ( freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] != 0 ) :\n            print ( str [ i ] , freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] , end = \" \u2581 \" )\n            freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] = 0\n"}
{"java": "public static int computePolish ( String in ) { Stack < Integer > polishStack = new Stack < Integer > ( ) ; Scanner scan = new Scanner ( in ) ; while ( scan . hasNext ( ) ) { String current = scan . next ( ) ; switch ( current ) { case \" * \" : int mult1 = polishStack . pop ( ) ; int mult2 = polishStack . pop ( ) ; polishStack . push ( mult1 * mult2 ) ; break ; case \" + \" : int plus1 = polishStack . pop ( ) ; int plus2 = polishStack . pop ( ) ; polishStack . push ( plus1 + plus2 ) ; break ; case \" - \" : int subt1 = polishStack . pop ( ) ; int subt2 = polishStack . pop ( ) ; polishStack . push ( subt2 - subt1 ) ; break ; default : polishStack . push ( Integer . parseInt ( current ) ) ; break ; } } return polishStack . pop ( ) ; }", "python": "def cal ( operand , a , b ) :\n    if operand == \" + \" :\n        return int ( a ) + int ( b )\n    elif operand == \" - \" :\n        return int ( a ) - int ( b )\n    elif operand == \" * \" :\n        return int ( a ) * int ( b )\n"}
{"java": "static void countCharacterType ( String str ) { int vowels = 0 , consonant = 0 , specialChar = 0 , digit = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ( ch >= ' a ' && ch <= ' z ' ) || ( ch >= ' A ' && ch <= ' Z ' ) ) { ch = Character . toLowerCase ( ch ) ; ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) vowels ++ ; else consonant ++ ; } else if ( ch >= '0' && ch <= '9' ) digit ++ ; else specialChar ++ ; } System . out . println ( \" Vowels : \u2581 \" + vowels ) ; System . out . println ( \" Consonant : \u2581 \" + consonant ) ; System . out . println ( \" Digit : \u2581 \" + digit ) ; System . out . println ( \" Special \u2581 Character : \u2581 \" + specialChar ) ; }", "python": "def countCharacterType ( str ) :\n    vowels = 0\n    consonant = 0\n    specialChar = 0\n    digit = 0\n    for i in range ( 0 , len ( str ) ) :\n        ch = str [ i ]\n        if ( ( ch >= ' a ' and ch <= ' z ' ) or ( ch >= ' A ' and ch <= ' Z ' ) ) :\n            ch = ch . lower ( )\n            if ( ch == ' a ' or ch == ' e ' or ch == ' i ' or ch == ' o ' or ch == ' u ' ) :\n                vowels += 1\n            else :\n                consonant += 1\n        elif ( ch >= '0' and ch <= '9' ) :\n            digit += 1\n        else :\n            specialChar += 1\n    print ( \" Vowels : \" , vowels )\n    print ( \" Consonant : \" , consonant )\n    print ( \" Digit : \" , digit )\n    print ( \" Special \u2581 Character : \" , specialChar )\n"}
{"java": "static int minOperations ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = Integer . MIN_VALUE ; maxFreq = Collections . max ( mp . entrySet ( ) , Comparator . comparingInt ( Map . Entry :: getKey ) ) . getValue ( ) ; return ( n - maxFreq ) ; }", "python": "def minOperations ( arr , n ) :\n    mp = dict . fromkeys ( arr , 0 ) ;\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += 1 ;\n    maxFreq = - ( sys . maxsize - 1 ) ;\n    for key in mp :\n        maxFreq = max ( maxFreq , mp [ key ] ) ;\n    return ( n - maxFreq ) ;\n"}
{"java": "static float harmonicMean ( int arr [ ] , int freq [ ] , int n ) { float sum = 0 , frequency_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( float ) freq [ i ] / arr [ i ] ; frequency_sum = frequency_sum + freq [ i ] ; } return ( frequency_sum / sum ) ; }", "python": "def harmonicMean ( arr , freq , n ) :\n    sm = 0\n    frequency_sum = 0\n    for i in range ( 0 , n ) :\n        sm = sm + freq [ i ] / arr [ i ]\n        frequency_sum = frequency_sum + freq [ i ]\n    return ( round ( frequency_sum / sm , 4 ) )\n"}
{"java": "static void printDiamond ( int n ) { int space = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < space ; j ++ ) System . out . print ( \" \u2581 \" ) ; for ( int j = 0 ; j <= i ; j ++ ) System . out . print ( \" * \u2581 \" ) ; System . out . print ( \" \\n \" ) ; space -- ; } space = 0 ; for ( int i = n ; i > 0 ; i -- ) { for ( int j = 0 ; j < space ; j ++ ) System . out . print ( \" \u2581 \" ) ; for ( int j = 0 ; j < i ; j ++ ) System . out . print ( \" * \u2581 \" ) ; System . out . print ( \" \\n \" ) ; space ++ ; } }", "python": "def Diamond ( rows ) :\n    n = 0\n    for i in range ( 1 , rows + 1 ) :\n        for j in range ( 1 , ( rows - i ) + 1 ) :\n            print ( end = \" \u2581 \" )\n        while n != ( 2 * i - 1 ) :\n            print ( \" * \" , end = \" \" )\n            n = n + 1\n        n = 0\n        print ( )\n    k = 1\n    n = 1\n    for i in range ( 1 , rows ) :\n        for j in range ( 1 , k + 1 ) :\n            print ( end = \" \u2581 \" )\n        k = k + 1\n        while n <= ( 2 * ( rows - i ) - 1 ) :\n            print ( \" * \" , end = \" \" )\n            n = n + 1\n        n = 1\n        print ( )\n"}
{"java": "static boolean isTidy ( int num ) { int prev = 10 ; while ( num != 0 ) { int rem = num % 10 ; num /= 10 ; if ( rem > prev ) return false ; prev = rem ; } return true ; }", "python": "def isTidy ( num ) :\n    prev = 10\n    while ( num ) :\n        rem = num % 10\n        num /= 10\n        if rem > prev :\n            return False\n        prev = rem\n    return True\n"}
{"java": "static void printTrib ( int n ) { if ( n < 1 ) return ; int first = 0 , second = 0 ; int third = 1 ; System . out . print ( first + \" \u2581 \" ) ; if ( n > 1 ) System . out . print ( second + \" \u2581 \" ) ; if ( n > 2 ) System . out . print ( second + \" \u2581 \" ) ; for ( int i = 3 ; i < n ; i ++ ) { int curr = first + second + third ; first = second ; second = third ; third = curr ; System . out . print ( curr + \" \u2581 \" ) ; } }", "python": "def printTrib ( n ) :\n    if ( n < 1 ) :\n        return\n    first = 0\n    second = 0\n    third = 1\n    print ( first , \" \u2581 \" , end = \" \" )\n    if ( n > 1 ) :\n        print ( second , \" \u2581 \" , end = \" \" )\n    if ( n > 2 ) :\n        print ( second , \" \u2581 \" , end = \" \" )\n    for i in range ( 3 , n ) :\n        curr = first + second + third\n        first = second\n        second = third\n        third = curr\n        print ( curr , \" \u2581 \" , end = \" \" )\n"}
{"java": "static int edgeCover ( int n ) { int result = 0 ; result = ( int ) Math . ceil ( ( double ) n / 2.0 ) ; return result ; }", "python": "def edgeCover ( n ) :\n    result = 0\n    result = math . ceil ( n / 2.0 )\n    return result\n"}
{"java": "static int ways ( int i , int arr [ ] , int n ) { if ( i == n - 1 ) return 1 ; int sum = 0 ; for ( int j = 1 ; j + i < n && j <= arr [ i ] ; j ++ ) { sum += ( ways ( i + j , arr , n ) ) % mod ; sum %= mod ; } return sum % mod ; }", "python": "def ways ( i , arr , n ) :\n    if ( i == n - 1 ) :\n        return 1 ;\n    sum = 0 ;\n    for j in range ( 1 , arr [ i ] + 1 ) :\n        if ( i + j < n ) :\n            sum += ( ways ( i + j , arr , n ) ) % mod ;\n            sum %= mod ;\n    return int ( sum % mod ) ;\n"}
{"java": "static String solve ( int a [ ] , int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) return \" YES \" ; } return \" NO \" ; }", "python": "def helper ( arr ) :\n    m = sorted ( arr )\n    for i in range ( len ( arr ) ) :\n        if arr [ i ] != m [ i ] :\n            return ' YES '\n    return ' NO '\n"}
{"java": "static int Rate ( int N1 , int N2 ) { float rate = ( N2 - N1 ) * 100 / N1 ; return ( int ) rate ; }", "python": "def Rate ( N1 , N2 ) :\n    rate = ( N2 - N1 ) * 100 // ( N1 ) ;\n    return rate\n"}
{"java": "static void solveQuery ( int n , int q , int qi [ ] , int qj [ ] ) { int [ ] arr = new int [ MAX ] ; for ( int i = 0 ; i <= n ; i ++ ) arr [ i ] = 0 ; for ( int k = 0 ; k < q ; k ++ ) { int flag = 0 ; if ( qj [ k ] < qi [ k ] ) { int temp = qi [ k ] ; qi [ k ] = qj [ k ] ; qj [ k ] = temp ; } if ( arr [ qi [ k ] ] != 0 || arr [ qj [ k ] ] != 0 ) flag = 1 ; else if ( qi [ k ] == qj [ k ] ) flag = 1 ; else { for ( int i = 1 ; i < qi [ k ] ; i ++ ) { if ( arr [ i ] != 0 && arr [ i ] < qj [ k ] && qi [ k ] < arr [ i ] ) { flag = 1 ; break ; } } if ( flag == 0 ) { for ( int i = qi [ k ] + 1 ; i < qj [ k ] ; i ++ ) { if ( arr [ i ] != 0 && arr [ i ] > qj [ k ] ) { flag = 1 ; break ; } } } } if ( flag == 0 ) { System . out . println ( \" YES \" ) ; arr [ qi [ k ] ] = qj [ k ] ; arr [ qj [ k ] ] = qi [ k ] ; } else System . out . println ( \" NO \" ) ; } }", "python": "def solveQuery ( n , q , qi , qj ) :\n    arr = [ None ] * MAX\n    for i in range ( n + 1 ) :\n        arr [ i ] = 0\n    for k in range ( q ) :\n        flag = 0\n        if ( qj [ k ] < qi [ k ] ) :\n            qj [ k ] , qi [ k ] = qi [ k ] , qj [ k ]\n        if ( arr [ qi [ k ] ] != 0 or arr [ qj [ k ] ] != 0 ) :\n            flag = 1\n        elif ( qi [ k ] == qj [ k ] ) :\n            flag = 1\n        else :\n            for i in range ( 1 , qi [ k ] ) :\n                if ( arr [ i ] != 0 and arr [ i ] < qj [ k ] and qi [ k ] < arr [ i ] ) :\n                    flag = 1\n                    break\n            if ( flag == 0 ) :\n                for i in range ( qi [ k ] + 1 , qj [ k ] ) :\n                    if ( arr [ i ] != 0 and arr [ i ] > qj [ k ] ) :\n                        flag = 1\n                        break\n        if ( flag == 0 ) :\n            print ( \" YES \" )\n            arr [ qi [ k ] ] = qj [ k ]\n            arr [ qj [ k ] ] = qi [ k ]\n        else :\n            print ( \" NO \" )\n"}
{"java": "static int uniqueNumbers ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int freq [ ] = new int [ n + 2 ] ; for ( int i = 0 ; i < n + 2 ; i ++ ) freq [ i ] = 0 ; for ( int x = 0 ; x < n ; x ++ ) { if ( freq [ arr [ x ] - 1 ] == 0 ) { freq [ arr [ x ] - 1 ] ++ ; } else if ( freq [ arr [ x ] ] == 0 ) { freq [ arr [ x ] ] ++ ; } else { freq [ arr [ x ] + 1 ] ++ ; } } int unique = 0 ; for ( int x = 0 ; x <= n + 1 ; x ++ ) { if ( freq [ x ] != 0 ) { unique ++ ; } } return unique ; }", "python": "def uniqueNumbers ( arr , n ) :\n    arr . sort ( )\n    freq = [ 0 ] * ( n + 2 )\n    for val in arr :\n        if ( freq [ val - 1 ] == 0 ) :\n            freq [ val - 1 ] += 1\n        elif ( freq [ val ] == 0 ) :\n            freq [ val ] += 1\n        else :\n            freq [ val + 1 ] += 1\n    unique = 0\n    for val in freq :\n        if ( val > 0 ) :\n            unique += 1\n    return unique\n"}
{"java": "static boolean checkHalfFrequency ( String str ) { int L = str . length ( ) ; int fre [ ] = new int [ MAXN ] ; for ( int i = 0 ; i < L ; i ++ ) { fre [ str . charAt ( i ) ] ++ ; } for ( int i = 0 ; i < MAXN ; i ++ ) { if ( fre [ i ] > L / 2 ) { return true ; } } return false ; }", "python": "def checkHalfFrequency ( Str ) :\n    L = len ( Str )\n    fre = [ 0 for i in range ( MAXN ) ]\n    for i in range ( L ) :\n        fre [ ord ( Str [ i ] ) ] += 1\n    for i in range ( MAXN ) :\n        if ( fre [ i ] > L // 2 ) :\n            return True\n    return False\n"}
{"java": "static int solve ( int M , int N , int s ) { if ( N % s == 0 ) { N = N / s ; } else { N = ( N / s ) + 1 ; } if ( M % s == 0 ) { M = M / s ; } else { M = ( M / s ) + 1 ; } return M * N ; }", "python": "def solve ( M , N , s ) :\n    if ( N % s == 0 ) :\n        N = N // s\n    else :\n        N = ( N // s ) + 1\n    if ( M % s == 0 ) :\n        M = M // s\n    else :\n        M = ( M // s ) + 1\n    return M * N\n"}
{"java": "static int divisibleby37 ( String n1 ) { int l = n1 . length ( ) ; if ( n1 == \"0\" ) return 0 ; if ( l % 3 == 1 ) { n1 = \"00\" + n1 ; l += 2 ; } else if ( l % 3 == 2 ) { n1 = \"0\" + n1 ; l += 1 ; } char [ ] n = n1 . toCharArray ( ) ; int gSum = 0 ; while ( l != 0 ) { int gvalue ; if ( l == 2 ) gvalue = ( ( int ) n [ ( l - 2 ) ] - 48 ) * 100 + ( ( int ) n [ ( l - 1 ) ] - 48 ) * 10 ; else if ( l == 1 ) gvalue = ( ( int ) n [ ( l - 1 ) ] - 48 ) * 100 ; else gvalue = ( ( int ) n [ ( l - 3 ) ] - 48 ) * 100 + ( ( int ) n [ ( l - 2 ) ] - 48 ) * 10 + ( ( int ) n [ ( l - 1 ) ] - 48 ) * 1 ; l = l - 3 ; gSum = gSum + gvalue ; } if ( gSum >= 1000 ) return ( divisibleby37 ( String . valueOf ( gSum ) ) ) ; else return ( gSum % 37 == 0 ) ? 1 : 0 ; }", "python": "def divisibleby37 ( n ) :\n    l = len ( n )\n    if ( n == 0 ) :\n        return True\n    if ( l % 3 == 1 ) :\n        n = \"00\" + n\n        l += 2\n    elif ( l % 3 == 2 ) :\n        n = \"0\" + n\n        l += 1\n    gSum = 0\n    while ( l != 0 ) :\n        group = int ( n [ l - 3 : l ] )\n        l = l - 3\n        gSum = gSum + group\n    if ( gSum >= 1000 ) :\n        return ( divisibleby37 ( str ( gSum ) ) )\n    else :\n        return ( gSum % 37 == 0 )\n"}
{"java": "static void SubarraysWithSumS ( int n , int k , int s ) { for ( int i = 0 ; i < k ; i ++ ) System . out . print ( s + \" \u2581 \" ) ; for ( int i = k ; i < n ; i ++ ) System . out . print ( s + 1 + \" \u2581 \" ) ; }", "python": "def SubarraysWithSumS ( n , k , s ) :\n    for i in range ( k ) :\n        print ( s , end = \" \u2581 \" )\n    for i in range ( k , n ) :\n        print ( s + 1 , end = \" \u2581 \" )\n"}
{"java": "static int findNth ( int N ) { int b = 14 ; int i ; for ( i = 2 ; i <= N ; i ++ ) { if ( i % 2 == 0 ) b = b * 2 ; else b = b - 8 ; } return b ; }", "python": "def findNth ( N ) :\n    b = 14\n    for i in range ( 2 , N + 1 ) :\n        if ( i % 2 == 0 ) :\n            b = b * 2\n        else :\n            b = b - 8\n    return b\n"}
{"java": "static void distinctAdjacentElement ( int a [ ] , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( a [ i ] ) ) { int x = m . get ( a [ i ] ) + 1 ; m . put ( a [ i ] , x ) ; } else { m . put ( a [ i ] , 1 ) ; } } int mx = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( mx < m . get ( a [ i ] ) ) mx = m . get ( a [ i ] ) ; if ( mx > ( n + 1 ) / 2 ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; }", "python": "def distantAdjacentElement ( a , n ) :\n    m = dict ( )\n    for i in range ( n ) :\n        if a [ i ] in m :\n            m [ a [ i ] ] += 1\n        else :\n            m [ a [ i ] ] = 1\n    mx = 0\n    for i in range ( n ) :\n        if mx < m [ a [ i ] ] :\n            mx = m [ a [ i ] ]\n    if mx > ( n + 1 ) // 2 :\n        print ( \" NO \" )\n    else :\n        print ( \" YES \" )\n"}
{"java": "public static long execute ( long [ ] s , long n ) { long m = n ; for ( int i = 0 ; i < s . length ; i ++ ) { m = m - ( m % s [ i ] ) ; } return m ; }", "python": "def input ( ) : return sys . stdin . readline ( ) . strip ( )\ndef STR ( ) : return input ( )\ndef INT ( ) : return int ( input ( ) )\ndef MAP ( ) : return map ( int , input ( ) . split ( ) )\ndef S_MAP ( ) : return map ( str , input ( ) . split ( ) )\ndef LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef S_LIST ( ) : return list ( map ( str , input ( ) . split ( ) ) )\nsys . setrecursionlimit ( 10 ** 9 )\ninf = sys . maxsize\nmod = 10 ** 9 + 7\nk = INT ( )\na = LIST ( )\nl = 2\nr = 2\nfor i in reversed ( range ( k ) ) :\n    l = ( l + a [ i ] - 1 ) // a [ i ] * a [ i ]\n    r = r // a [ i ] * a [ i ] + a [ i ] - 1\n    if l > r :\n        print ( - 1 )\n        exit ( )\n"}
{"java": "static int getPassingCars ( int [ ] A , int n ) { int result = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( A [ i ] == 0 ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( A [ j ] == 1 ) result ++ ; } } return result ; }", "python": "def getPassingCars ( A , n ) :\n    result = 0\n    for i in range ( 0 , n - 1 , 1 ) :\n        if ( A [ i ] == 0 ) :\n            for j in range ( i + 1 , n , 1 ) :\n                if ( A [ j ] ) :\n                    result += 1\n    return result\n"}
{"java": "static int sum ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; }", "python": "def summ ( m , n ) :\n    return 8 * m * n - 6 * m - 6 * n + 4\n"}
{"java": "static void pairwiseSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i + 1 < n ; i ++ ) { sum = arr [ i ] + arr [ i + 1 ] ; System . out . print ( sum + \" \u2581 \" ) ; } }", "python": "def pairwiseSum ( lst , n ) :\n    sum = 0 ;\n    for i in range ( len ( lst ) - 1 ) :\n        sum = lst [ i ] + lst [ i + 1 ]\n        print ( sum , end = \" \u2581 \" )\n"}
{"java": "static void getPermutation ( int a [ ] , int n ) { int [ ] ans = new int [ n ] ; ans [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) ans [ i ] = a [ i ] - a [ i - 1 ] ; boolean [ ] present = new boolean [ n + 1 ] ; for ( int i = 0 ; i < ans . length ; i ++ ) { if ( present [ ans [ i ] ] ) { System . out . print ( \" - 1\" ) ; return ; } else present [ ans [ i ] ] = true ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( ans [ i ] + \" \u2581 \" ) ; }", "python": "def getPermutation ( a , n ) :\n    ans = [ 0 ] * n ;\n    ans [ 0 ] = a [ 0 ] ;\n    for i in range ( 1 , n ) :\n        ans [ i ] = a [ i ] - a [ i - 1 ] ;\n    present = [ 0 ] * ( n + 1 ) ;\n    for i in range ( n ) :\n        if ( present [ ans [ i ] ] ) :\n            print ( \" - 1\" , end = \" \" ) ;\n            return ;\n        else :\n            present [ ans [ i ] ] = True ;\n    for i in range ( n ) :\n        print ( ans [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "static boolean isMember ( int a , int d , int x ) { if ( d == 0 ) return ( x == a ) ; return ( ( x - a ) % d == 0 && ( x - a ) / d >= 0 ) ; }", "python": "def isMember ( a , d , x ) :\n    if d == 0 :\n        return x == a\n    return ( ( x - a ) % d == 0 & int ( ( x - a ) / d ) >= 0 )\n"}
{"java": "static int xorPairCount ( int arr [ ] , int n , int x ) { int result = 0 ; HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . contains ( x ^ arr [ i ] ) && ( x ^ arr [ i ] ) == ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) { result ++ ; } s . add ( arr [ i ] ) ; } return result ; }", "python": "def xorPairCount ( arr , n , x ) :\n    result = 0\n    s = set ( )\n    for i in range ( 0 , n ) :\n        if ( x ^ arr [ i ] in s ) :\n            result = result + 1\n        s . add ( arr [ i ] )\n    return result\n"}
{"java": "static int nextPerfectCube ( int N ) { int nextN = ( int ) Math . floor ( Math . cbrt ( N ) ) + 1 ; return nextN * nextN * nextN ; }", "python": "def nextPerfectCube ( N ) :\n    nextN = floor ( N ** ( 1 / 3 ) ) + 1\n    return nextN ** 3\n"}
{"java": "public static boolean isMagic ( int n ) { int sum = 0 ; while ( n > 0 || sum > 9 ) { if ( n == 0 ) { n = sum ; sum = 0 ; } sum += n % 10 ; n /= 10 ; } return ( sum == 1 ) ; }", "python": "def isMagic ( n ) :\n    sum = 0 ;\n    while ( n > 0 or sum > 9 ) :\n        if ( n == 0 ) :\n            n = sum ;\n            sum = 0 ;\n        sum = sum + n % 10 ;\n        n = int ( n / 10 ) ;\n    return True if ( sum == 1 ) else False ;\n"}
{"java": "static int numberOfDays ( int a , int b , int n ) { int Days = b * ( n + a ) / ( a + b ) ; return Days ; }", "python": "def numberOfDays ( a , b , n ) :\n    Days = b * ( n + a ) // ( a + b )\n    return Days\n"}
{"java": "static void find ( int n ) { int b = n ; int a = b * ( n - 1 ) ; if ( a * b > n && a / b < n ) { System . out . print ( \" a \u2581 = \u2581 \" + a + \" , \u2581 b \u2581 = \u2581 \" + b ) ; } else System . out . println ( - 1 ) ; }", "python": "def find ( n ) :\n    b = n\n    a = b * ( n - 1 )\n    if a * b > n and a // b < n :\n        print ( \" a \u2581 = \u2581 { } , \u2581 b \u2581 = \u2581 { } \" . format ( a , b ) )\n    else :\n        print ( - 1 )\n"}
{"java": "public static void countEle ( Stack < Integer > s , int [ ] a , int N ) { HashMap < Integer , Boolean > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; ++ i ) { int num = a [ i ] ; if ( mp . containsKey ( num ) ) System . out . print ( \"0 \u2581 \" ) ; else { int cnt = 0 ; while ( s . peek ( ) != num ) { mp . put ( s . peek ( ) , true ) ; s . pop ( ) ; cnt ++ ; } s . pop ( ) ; cnt ++ ; System . out . print ( cnt + \" \u2581 \" ) ; } } }", "python": "def countEle ( s , a , N ) :\n    mp = { }\n    for i in range ( 0 , N ) :\n        num = a [ i ]\n        if num in mp :\n            print ( \"0\" , end = \" \u2581 \" )\n        else :\n            cnt = 0\n            while s [ - 1 ] != num :\n                mp [ s . pop ( ) ] = True\n                cnt += 1\n            s . pop ( )\n            cnt += 1\n            print ( cnt , end = \" \u2581 \" )\n"}
{"java": "static void getAverageCountArray ( int [ ] a , int x , int N ) { HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; int [ ] avg = new int [ N ] ; int val , av ; for ( int i = 0 ; i < N ; i ++ ) { if ( ! map . containsKey ( a [ i ] ) ) { map . put ( a [ i ] , 1 ) ; } else { val = map . get ( a [ i ] ) ; val ++ ; map . remove ( a [ i ] ) ; map . put ( a [ i ] , val ) ; } } for ( int i = 0 ; i < N ; i ++ ) { av = ( a [ i ] + x ) / 2 ; if ( map . containsKey ( av ) ) { val = map . get ( av ) ; avg [ i ] = val ; } } for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( avg [ i ] + \" \u2581 \" ) ; } }", "python": "def getAverageCountArray ( a , x , N ) :\n    map = { }\n    avg = [ 0 ] * N\n    for i in range ( N ) :\n        if a [ i ] not in map :\n            map [ a [ i ] ] = 1\n        else :\n            map [ a [ i ] ] += 1\n    for i in range ( N ) :\n        av = ( a [ i ] + x ) // 2\n        if av in map :\n            val = map [ av ]\n            avg [ i ] = val\n    for i in range ( N ) :\n        print ( avg [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int findevenPair ( int A [ ] , int N ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( A [ i ] % 2 != 0 ) count ++ ; int oddCount = count * ( count - 1 ) / 2 ; return ( N * ( N - 1 ) / 2 ) - oddCount ; }", "python": "def findevenPair ( A , N ) :\n    count = 0\n    for i in range ( 0 , N ) :\n        if ( A [ i ] % 2 != 0 ) :\n            count += 1\n    oddCount = count * ( count - 1 ) / 2\n    return ( int ) ( ( N * ( N - 1 ) / 2 ) - oddCount )\n"}
{"java": "static boolean check ( int arr [ ] , int N , int K ) { HashSet < Integer > unique = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) unique . add ( arr [ i ] ) ; if ( unique . size ( ) == K ) return true ; return false ; }", "python": "def check ( arr , N , K ) :\n    unique = dict ( )\n    for i in range ( N ) :\n        unique [ arr [ i ] ] = 1\n    if len ( unique ) == K :\n        return True\n    return False\n"}
{"java": "static int sum ( int h ) { return ( int ) Math . pow ( 2 , h - 1 ) ; }", "python": "def summ ( h ) :\n    return pow ( 2 , h - 1 )\n"}
{"java": "static int getMaxValue ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { return 0 ; } first = second = Integer . MIN_VALUE ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) { second = arr [ i ] ; } } if ( second == Integer . MIN_VALUE ) { return 0 ; } else { return second ; } }", "python": "def getMaxValue ( arr , arr_size ) :\n    if ( arr_size < 2 ) :\n        return 0\n    first = - sys . maxsize - 1\n    second = - sys . maxsize - 1\n    for i in range ( arr_size ) :\n        if ( arr [ i ] > first ) :\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second and arr [ i ] != first ) :\n            second = arr [ i ]\n    if ( second == - sys . maxsize - 1 ) :\n        return 0\n    else :\n        return second\n"}
{"java": "static int number_cake ( int n ) { return ( n * n * n + 5 * n + 6 ) / 6 ; }", "python": "def number_cake ( n ) :\n    return ( n * n * n + 5 * n + 6 ) // 6\n"}
{"java": "static boolean isPossible ( int n ) { int cnt = Integer . bitCount ( n ) ; if ( cnt == TOTAL_BITS / 2 ) return true ; return false ; }", "python": "def isPossible ( n ) :\n    cnt = bin ( n ) . count ( '1' ) ;\n    if ( cnt == TOTAL_BITS // 2 ) :\n        return True ;\n    return False ;\n"}
{"java": "static int solve ( double M , double N , double s ) { int ans = ( ( int ) ( Math . ceil ( M / s ) ) * ( int ) ( Math . ceil ( N / s ) ) ) ; return ans ; }", "python": "def solve ( M , N , s ) :\n    ans = ( ( math . ceil ( M / s ) ) * ( math . ceil ( N / s ) ) ) ;\n    return ans\n"}
{"java": "static int FirstDigit ( int arr [ ] , int n ) { double S = 0 ; for ( int i = 0 ; i < n ; i ++ ) S = S + Math . log10 ( arr [ i ] * 1.0 ) ; double fract_S = S - Math . floor ( S ) ; int ans = ( int ) Math . pow ( 10 , fract_S ) ; return ans ; }", "python": "def FirstDigit ( arr , n ) :\n    S = 0\n    for i in range ( n ) :\n        S = S + math . log10 ( arr [ i ] * 1.0 )\n    fract_S = S - math . floor ( S )\n    ans = math . pow ( 10 , fract_S )\n    return ans\n"}
{"java": "static int minSwaps ( int arr [ ] , int n ) { int noOfOnes = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) noOfOnes ++ ; } int x = noOfOnes ; int maxOnes = Integer . MIN_VALUE ; int preCompute [ ] = new int [ n ] ; if ( arr [ 0 ] == 1 ) preCompute [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { preCompute [ i ] = preCompute [ i - 1 ] + 1 ; } else preCompute [ i ] = preCompute [ i - 1 ] ; } for ( int i = x - 1 ; i < n ; i ++ ) { if ( i == ( x - 1 ) ) noOfOnes = preCompute [ i ] ; else noOfOnes = preCompute [ i ] - preCompute [ i - x ] ; if ( maxOnes < noOfOnes ) maxOnes = noOfOnes ; } int noOfZeroes = x - maxOnes ; return noOfZeroes ; }", "python": "def minSwaps ( arr , n ) :\n    noOfOnes = 0\n    for i in range ( n ) :\n        if ( arr [ i ] == 1 ) :\n            noOfOnes = noOfOnes + 1\n    x = noOfOnes\n    maxOnes = - 2147483648\n    preCompute = { }\n    if ( arr [ 0 ] == 1 ) :\n        preCompute [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] == 1 ) :\n            preCompute [ i ] = preCompute [ i - 1 ] + 1\n        else :\n            preCompute [ i ] = preCompute [ i - 1 ]\n    for i in range ( x - 1 , n ) :\n        if ( i == ( x - 1 ) ) :\n            noOfOnes = preCompute [ i ]\n        else :\n            noOfOnes = preCompute [ i ] - preCompute [ i - x ]\n        if ( maxOnes < noOfOnes ) :\n            maxOnes = noOfOnes\n    noOfZeroes = x - maxOnes\n    return noOfZeroes\n"}
{"java": "static void reArrange ( String words [ ] , int n ) { HashMap < String , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( words [ i ] , ( i + 1 ) ) ; } Arrays . sort ( words ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( freq . get ( words [ i ] ) + \" \u2581 \" ) ; }", "python": "def reArrange ( words , n ) :\n    mp = { }\n    for i in range ( n ) :\n        mp [ words [ i ] ] = i + 1\n    words . sort ( ) ;\n    for i in range ( n ) :\n        print ( mp [ words [ i ] ] , end = \" \u2581 \" )\n"}
{"java": "static void removeElements ( int [ ] arr , int n ) { int [ ] brr = new int [ n ] ; int l = 1 ; brr [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( brr [ l - 1 ] <= arr [ i ] ) { brr [ l ] = arr [ i ] ; l ++ ; } } for ( int i = 0 ; i < l ; i ++ ) System . out . print ( brr [ i ] + \" \u2581 \" ) ; }", "python": "def removeElements ( arr , n ) :\n    brr = [ 0 ] * n ; l = 1 ;\n    brr [ 0 ] = arr [ 0 ] ;\n    for i in range ( 1 , n ) :\n        if ( brr [ l - 1 ] <= arr [ i ] ) :\n            brr [ l ] = arr [ i ] ;\n            l += 1 ;\n    for i in range ( l ) :\n        print ( brr [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "static int minOperations ( String str , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( i + 1 ) ) count ++ ; } return ( count + 1 ) / 2 ; }", "python": "def minOperations ( str , n ) :\n    count = 0\n    for i in range ( n - 1 ) :\n        if ( str [ i ] != str [ i + 1 ] ) :\n            count += 1\n    return ( count + 1 ) // 2\n"}
{"java": "static int findNumbers ( int n , int w ) { int x = 0 , sum = 0 ; if ( w >= 0 && w <= 8 ) { x = 9 - w ; } else if ( w >= - 9 && w <= - 1 ) { x = 10 + w ; } sum = ( int ) Math . pow ( 10 , n - 2 ) ; sum = ( x * sum ) ; return sum ; }", "python": "def findNumbers ( n , w ) :\n    x = 0 ;\n    sum = 0 ;\n    if ( w >= 0 and w <= 8 ) :\n        x = 9 - w ;\n    elif ( w >= - 9 and w <= - 1 ) :\n        x = 10 + w ;\n    sum = pow ( 10 , n - 2 ) ;\n    sum = ( x * sum ) ;\n    return sum ;\n"}
{"java": "static int ways ( String s , int n ) { int dp [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { String temp = \" \" ; for ( int j = i ; j < n ; j ++ ) { temp += s . charAt ( j ) ; String test = \" \" ; for ( int k = i - 1 ; k >= 0 ; k -- ) { test += s . charAt ( k ) ; if ( test . compareTo ( temp ) < 0 ) { dp [ i ] [ j ] += dp [ k ] [ i - 1 ] ; } } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += dp [ i ] [ n - 1 ] ; } return ans ; }", "python": "def ways ( s , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    for i in range ( n ) :\n        dp [ 0 ] [ i ] = 1\n    for i in range ( 1 , n ) :\n        temp = \" \"\n        for j in range ( i , n ) :\n            temp += s [ j ]\n            test = \" \"\n            for k in range ( i - 1 , - 1 , - 1 ) :\n                test += s [ k ]\n                if ( test < temp ) :\n                    dp [ i ] [ j ] += dp [ k ] [ i - 1 ]\n    ans = 0\n    for i in range ( n ) :\n        ans += dp [ i ] [ n - 1 ]\n    return ans\n"}
{"java": "static void printGroups ( int n ) { int x = 1 ; int y = n * n ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n / 2 ; j ++ ) { System . out . print ( \" { \u2581 \" + x + \" , \u2581 \" + y + \" } \u2581 \" ) ; x ++ ; y -- ; } System . out . println ( ) ; } }", "python": "def printGroups ( n ) :\n    x = 1\n    y = n * n\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n // 2 + 1 ) :\n            print ( \" { \" , x , \" , \" , y , \" } \" , end = \" \u2581 \" )\n            x += 1\n            y -= 1\n        print ( )\n"}
{"java": "static void solve ( int N , int K ) { int Array [ ] = new int [ N + 1 ] ; if ( N <= K ) { System . out . println ( \"1\" ) ; return ; } int i = 0 ; int sum = K ; for ( i = 1 ; i <= K ; ++ i ) { Array [ i ] = 1 ; } Array [ i ] = sum ; for ( i = K + 2 ; i <= N ; ++ i ) { Array [ i ] = sum - Array [ i - K - 1 ] + Array [ i - 1 ] ; sum = Array [ i ] ; } System . out . println ( Array [ N ] ) ; }", "python": "def solve ( N , K ) :\n    Array = [ 0 ] * ( N + 1 )\n    if ( N <= K ) :\n        print ( \"1\" )\n        return\n    i = 0\n    sm = K\n    for i in range ( 1 , K + 1 ) :\n        Array [ i ] = 1\n    Array [ i + 1 ] = sm\n    for i in range ( K + 2 , N + 1 ) :\n        Array [ i ] = sm - Array [ i - K - 1 ] + Array [ i - 1 ]\n        sm = Array [ i ]\n    print ( Array [ N ] )\n"}
{"java": "static int getIndex ( int a [ ] , int n ) { if ( n == 1 ) return 0 ; int ptrL = 0 , ptrR = n - 1 , sumL = a [ 0 ] , sumR = a [ n - 1 ] ; while ( ptrR - ptrL > 1 ) { if ( sumL < sumR ) { ptrL ++ ; sumL += a [ ptrL ] ; } else if ( sumL > sumR ) { ptrR -- ; sumR += a [ ptrR ] ; } else { break ; } } return ptrL ; }", "python": "def getIndex ( a , n ) :\n    if ( n == 1 ) :\n        return 0\n    ptrL = 0\n    ptrR = n - 1\n    sumL = a [ 0 ]\n    sumR = a [ n - 1 ]\n    while ( ptrR - ptrL > 1 ) :\n        if ( sumL < sumR ) :\n            ptrL += 1\n            sumL += a [ ptrL ]\n        elif ( sumL > sumR ) :\n            ptrR -= 1\n            sumR += a [ ptrR ]\n        else :\n            break\n    return ptrL\n"}
{"java": "static int Nth_Term ( int n ) { return ( int ) ( 3 * Math . pow ( n , 2 ) - n + 2 ) / ( 2 ) ; }", "python": "def Nth_Term ( n ) :\n    return ( 3 * pow ( n , 2 ) - n + 2 ) // ( 2 )\n"}
{"java": "static int totalDigits ( int n ) { int number_of_digits = 0 ; for ( int i = 1 ; i <= n ; i *= 10 ) number_of_digits += ( n - i + 1 ) ; return number_of_digits ; }", "python": "def totalDigits ( n ) :\n    number_of_digits = 0 ;\n    for i in range ( 1 , n , 10 ) :\n        number_of_digits = ( number_of_digits + ( n - i + 1 ) ) ;\n    return number_of_digits ;\n"}
{"java": "public static int countDistinct ( int arr [ ] , int n ) { HashSet < Integer > hs = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hs . add ( arr [ i ] ) ; } return hs . size ( ) ; }", "python": "def countDistinct ( arr , n ) :\n    s = set ( )\n    res = 0\n    for i in range ( n ) :\n        if ( arr [ i ] not in s ) :\n            s . add ( arr [ i ] )\n            res += 1\n    return res\n"}
{"java": "static int getMin ( int arr [ ] , int n ) { int minVal = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return minVal ; }", "python": "def getMin ( arr , n ) :\n    minVal = min ( arr ) ;\n    return minVal ;\n"}
{"java": "static String permutation ( int arr [ ] , int N ) { int [ ] hash = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { hash [ arr [ i ] ] ++ ; } for ( int i = 1 ; i <= N ; i ++ ) { if ( hash [ i ] != 1 ) return \" No \" ; } return \" Yes \" ; }", "python": "def permutation ( arr , N ) :\n    hash = [ 0 ] * ( N + 1 ) ;\n    for i in range ( N ) :\n        hash [ arr [ i ] ] += 1 ;\n    for i in range ( 1 , N + 1 ) :\n        if ( hash [ i ] != 1 ) :\n            return \" No \" ;\n    return \" Yes \" ;\n"}
{"java": "static void solve ( int interval [ ] [ ] , int N , int Q ) { int Mark [ ] = new int [ Q ] ; for ( int i = 0 ; i < N ; i ++ ) { int l = interval [ i ] [ 0 ] - 1 ; int r = interval [ i ] [ 1 ] - 1 ; for ( int j = l ; j <= r ; j ++ ) Mark [ j ] ++ ; } int count = 0 ; for ( int i = 0 ; i < Q ; i ++ ) { if ( Mark [ i ] != 0 ) count ++ ; } int count1 [ ] = new int [ Q ] ; if ( Mark [ 0 ] == 1 ) count1 [ 0 ] = 1 ; for ( int i = 1 ; i < Q ; i ++ ) { if ( Mark [ i ] == 1 ) count1 [ i ] = count1 [ i - 1 ] + 1 ; else count1 [ i ] = count1 [ i - 1 ] ; } int maxindex = 0 ; int maxcoverage = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int l = interval [ i ] [ 0 ] - 1 ; int r = interval [ i ] [ 1 ] - 1 ; int elem1 ; if ( l != 0 ) elem1 = count1 [ r ] - count1 [ l - 1 ] ; else elem1 = count1 [ r ] ; if ( count - elem1 >= maxcoverage ) { maxcoverage = count - elem1 ; maxindex = i ; } } System . out . println ( \" Maximum \u2581 Coverage \u2581 is \u2581 \" + maxcoverage + \" \u2581 after \u2581 removing \u2581 interval \u2581 at \u2581 index \u2581 \" + maxindex ) ; }", "python": "def solve ( interval , N , Q ) :\n    Mark = [ 0 for i in range ( Q ) ]\n    for i in range ( N ) :\n        l = interval [ i ] [ 0 ] - 1\n        r = interval [ i ] [ 1 ] - 1\n        for j in range ( l , r + 1 ) :\n            Mark [ j ] += 1\n    count = 0\n    for i in range ( Q ) :\n        if ( Mark [ i ] ) :\n            count += 1\n    count1 = [ 0 for i in range ( Q ) ]\n    if ( Mark [ 0 ] == 1 ) :\n        count1 [ 0 ] = 1\n    for i in range ( 1 , Q ) :\n        if ( Mark [ i ] == 1 ) :\n            count1 [ i ] = count1 [ i - 1 ] + 1\n        else :\n            count1 [ i ] = count1 [ i - 1 ]\n    maxindex = 0\n    maxcoverage = 0\n    for i in range ( N ) :\n        l = interval [ i ] [ 0 ] - 1\n        r = interval [ i ] [ 1 ] - 1\n        elem1 = 0\n        if ( l != 0 ) :\n            elem1 = count1 [ r ] - count1 [ l - 1 ]\n        else :\n            elem1 = count1 [ r ]\n        if ( count - elem1 >= maxcoverage ) :\n            maxcoverage = count - elem1\n            maxindex = i\n    print ( \" Maximum \u2581 Coverage \u2581 is \" , maxcoverage , \" after \u2581 removing \u2581 interval \u2581 at \u2581 index \" , maxindex )\n"}
{"java": "static int countPoints ( int n , int m , int a [ ] , int [ ] b , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else j ++ ; } } return count ; }", "python": "def countPoints ( n , m , a , b , x , y ) :\n    a . sort ( )\n    b . sort ( )\n    j , count = 0 , 0\n    for i in range ( 0 , n ) :\n        while j < m :\n            if a [ i ] + y < b [ j ] :\n                break\n            if ( b [ j ] >= a [ i ] - x and b [ j ] <= a [ i ] + y ) :\n                count += 1\n                j += 1\n                break\n            else :\n                j += 1\n    return count\n"}
{"java": "static float area ( float a ) { if ( a < 0 ) return - 1 ; float area = ( float ) Math . pow ( ( a * Math . sqrt ( 3 ) ) / ( Math . sqrt ( 2 ) ) , 2 ) ; return area ; }", "python": "def area ( a ) :\n    if ( a < 0 ) :\n        return - 1\n    area = pow ( ( a * sqrt ( 3 ) ) / ( sqrt ( 2 ) ) , 2 )\n    return area\n"}
{"java": "public static int smallestX ( int n ) { int [ ] temp = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) temp [ i ] = 0 ; if ( n == 0 ) return - 1 ; int count = 0 , x = 0 ; for ( x = 1 ; count < 10 ; x ++ ) { int y = x * n ; while ( y > 0 ) { if ( temp [ y % 10 ] == 0 ) { count ++ ; temp [ y % 10 ] = 1 ; } y /= 10 ; } } return x - 1 ; }", "python": "def smallestX ( n ) :\n    temp = [ 0 ] * 10\n    if ( n == 0 ) :\n        return - 1\n    count = 0\n    x = 1\n    while ( count < 10 ) :\n        y = x * n\n        while ( y > 0 ) :\n            if ( temp [ y % 10 ] == 0 ) :\n                count += 1\n                temp [ y % 10 ] = 1\n            y = int ( y / 10 )\n        x += 1\n    return x - 1\n"}
{"java": "static int countEvenSum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { int sum = 0 ; for ( int j = i ; j <= n - 1 ; j ++ ) { sum = sum + arr [ j ] ; if ( sum % 2 == 0 ) result ++ ; } } return ( result ) ; }", "python": "def countEvenSum ( arr , n ) :\n    result = 0\n    for i in range ( 0 , n , 1 ) :\n        sum = 0\n        for j in range ( i , n , 1 ) :\n            sum = sum + arr [ j ]\n            if ( sum % 2 == 0 ) :\n                result = result + 1\n    return ( result )\n"}
{"java": "static void majority ( int a [ ] , int p , int q , int size ) { int start = 0 , ends = q ; int [ ] arr = new int [ p ] ; int k = 0 ; while ( k < p ) { int one = 0 ; for ( int j = start ; j < ends ; j ++ ) { if ( a [ j ] == 1 ) { one ++ ; } } start = ends ; ends = ends + q ; arr [ k ] = one ; k ++ ; } start = 0 ; ends = q ; boolean found = false ; while ( ends > 0 ) { int dist_one = 0 ; for ( int i = 0 ; i < p ; i ++ ) if ( arr [ i ] > q / 2 ) dist_one ++ ; if ( dist_one > p / 2 ) { found = true ; System . out . println ( \" Yes \" ) ; return ; } start -- ; ends -- ; if ( start < 0 ) start = size + start ; int st = start , en = ends , l = 0 ; while ( en < size ) { if ( a [ st % size ] != a [ en % size ] ) { if ( a [ st % size ] == 1 ) arr [ l ] ++ ; else arr [ l ] -- ; } l ++ ; st = ( st + q ) ; en = en + q ; } } if ( found == false ) { System . out . println ( \" No \" ) ; } }", "python": "def majority ( a , p , q , size ) :\n    start = 0\n    ends = q\n    arr = [ None ] * p\n    k = 0\n    while ( k < p ) :\n        one = 0\n        for j in range ( start , ends ) :\n            if ( a [ j ] == 1 ) :\n                one = one + 1\n        start = ends\n        ends = ends + q\n        arr [ k ] = one\n        k = k + 1\n    start = 0\n    ends = q\n    found = 0\n    while ( ends > 0 ) :\n        dist_one = 0\n        for i in range ( 0 , p ) :\n            if ( arr [ i ] > q / 2 ) :\n                dist_one = dist_one + 1\n        if ( dist_one > p / 2 ) :\n            found = 1\n            print ( \" Yes \" )\n            return\n        start = start - 1\n        ends = ends - 1\n        if ( start < 0 ) :\n            start = size + start\n        st = start\n        en = ends\n        l = 0\n        while ( en < size ) :\n            if ( a [ st % size ] != a [ en % size ] ) :\n                if ( a [ st % size ] == 1 ) :\n                    arr [ l ] = arr [ l ] + 1\n                else :\n                    arr [ l ] = arr [ l ] - 1\n            l = l + 1\n            st = ( st + q )\n            en = en + q\n    if ( found == 0 ) :\n        print ( \" No \" )\n"}
{"java": "static boolean isInGivenBase ( String str , int base ) { if ( base > 16 ) return false ; else if ( base <= 10 ) { for ( int i = 0 ; i < str . length ( ) ; i ++ ) if ( ! ( str . charAt ( i ) >= '0' && str . charAt ( i ) < ( '0' + base ) ) ) return false ; } else { for ( int i = 0 ; i < str . length ( ) ; i ++ ) if ( ! ( ( str . charAt ( i ) >= '0' && str . charAt ( i ) < ( '0' + base ) ) || ( str . charAt ( i ) >= ' A ' && str . charAt ( i ) < ( ' A ' + base - 10 ) ) ) ) return false ; } return true ; }", "python": "def isInGivenBase ( Str , base ) :\n    if ( base > 16 ) :\n        return False\n    elif ( base <= 10 ) :\n        for i in range ( len ( Str ) ) :\n            if ( Str [ i ] . isnumeric ( ) and ( ord ( Str [ i ] ) >= ord ( '0' ) and ord ( Str [ i ] ) < ( ord ( '0' ) + base ) ) == False ) :\n                return False\n    else :\n        for i in range ( len ( Str ) ) :\n            if ( Str [ i ] . isnumeric ( ) and ( ( ord ( Str [ i ] ) >= ord ( '0' ) and ord ( Str [ i ] ) < ( ord ( '0' ) + base ) ) or ( ord ( Str [ i ] ) >= ord ( ' A ' ) and ord ( Str [ i ] ) < ( ord ( ' A ' ) + base - 10 ) ) ) == False ) :\n                return False\n    return True\n"}
{"java": "static int getPairs ( int a [ ] , int n ) { HashSet < Integer > visited1 = new HashSet < Integer > ( ) ; int un [ ] = new int [ n ] ; un [ n - 1 ] = 0 ; int count = 0 ; for ( int i = n - 1 ; i > 0 ; i -- ) { if ( visited1 . contains ( a [ i ] ) ) un [ i - 1 ] = count ; else un [ i - 1 ] = ++ count ; visited1 . add ( a [ i ] ) ; } HashSet < Integer > visited2 = new HashSet < Integer > ( ) ; int answer = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( visited2 . contains ( a [ i ] ) ) continue ; answer += un [ i ] ; visited2 . add ( a [ i ] ) ; } return answer ; }", "python": "def getPairs ( a , n ) :\n    visited1 = set ( )\n    un = [ 0 ] * n\n    un [ n - 1 ] = 0\n    count = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( a [ i ] in visited1 ) :\n            un [ i - 1 ] = count\n        else :\n            count += 1\n            un [ i - 1 ] = count\n        visited1 . add ( a [ i ] )\n    visited2 = set ( )\n    answer = 0\n    for i in range ( n - 1 ) :\n        if ( a [ i ] in visited2 ) :\n            continue\n        answer += un [ i ]\n        visited2 . add ( a [ i ] )\n    return answer\n"}
{"java": "private static String remainingDigit ( String S , int N ) { char c [ ] = S . toCharArray ( ) ; int del [ ] = { 0 , 0 } ; int count [ ] = { 0 , 0 } ; Queue < Integer > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int x = c [ i ] == '1' ? 1 : 0 ; count [ x ] ++ ; q . add ( x ) ; } while ( count [ 0 ] > 0 && count [ 1 ] > 0 ) { int t = q . poll ( ) ; if ( del [ t ] > 0 ) { del [ t ] -- ; count [ t ] -- ; } else { del [ t ^ 1 ] ++ ; q . add ( t ) ; } } if ( count [ 0 ] > 0 ) return \"0\" ; return \"1\" ; }", "python": "def remainingDigit ( S , N ) :\n    c = [ i for i in S ]\n    de = [ 0 , 0 ]\n    count = [ 0 , 0 ]\n    q = deque ( )\n    for i in c :\n        x = 0\n        if i == '1' :\n            x = 1\n        count [ x ] += 1\n        q . append ( x )\n    while ( count [ 0 ] > 0 and count [ 1 ] > 0 ) :\n        t = q . popleft ( )\n        if ( de [ t ] > 0 ) :\n            de [ t ] -= 1\n            count [ t ] -= 1\n        else :\n            de [ t ^ 1 ] += 1\n            q . append ( t )\n    if ( count [ 0 ] > 0 ) :\n        return \"0\"\n    return \"1\"\n"}
{"java": "static boolean isDivisibleBy25 ( String str ) { int n = str . length ( ) ; if ( n == 1 ) return false ; return ( ( str . charAt ( n - 1 ) - '0' == 0 && str . charAt ( n - 2 ) - '0' == 0 ) || ( ( str . charAt ( n - 2 ) - '0' ) * 10 + ( str . charAt ( n - 1 ) - '0' ) ) % 25 == 0 ) ; }", "python": "def isDivisibleBy25 ( st ) :\n    n = len ( st )\n    if ( n == 1 ) :\n        return False\n    return ( ( int ) ( st [ n - 1 ] ) == 0 and ( ( int ) ( st [ n - 2 ] ) == 0 ) or ( ( int ) ( st [ n - 2 ] ) * 10 + ( int ) ( st [ n - 1 ] ) % 25 == 0 ) )\n"}
{"java": "public static int getMaximal ( int n , int [ ] a ) { int maximum = 0 ; int current = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = i - 1 ; int r = i + 1 ; while ( l >= 0 && a [ l ] <= a [ l + 1 ] ) { l -- ; } l ++ ; while ( r <= a . length - 1 && a [ r ] <= a [ r - 1 ] ) { r ++ ; } r -- ; current = r - l + 1 ; maximum = Math . max ( maximum , current ) ; } return maximum ; }", "python": "def lm ( ) : return map ( int , input ( ) . split ( ) )\ndef xd ( ) : return int ( input ( ) )\ndef ll ( ) : return list ( map ( int , input ( ) . split ( ) ) )\nN = xd ( )\na = ll ( )\ni = 0\nmaxcount = 0\nfor j in range ( len ( a ) ) :\n    i = j\n    count = 1\n    peak = False\n    while i < len ( a ) - 1 :\n        if ( a [ i ] < a [ i + 1 ] ) :\n            if ( peak == True ) :\n                break\n            count += 1\n        elif ( a [ i ] == a [ i + 1 ] ) :\n            count += 1\n        elif ( a [ i ] > a [ i + 1 ] ) :\n            if ( peak == False ) :\n                peak = True\n            if ( peak == True ) :\n                count += 1\n            else :\n                break\n        i += 1\n    if ( count > maxcount ) :\n        maxcount = count\n"}
{"java": "static void Divide ( int a , int b ) { long dividend = ( long ) a ; long divisor = ( long ) b ; long sign = ( dividend < 0 ) ^ ( divisor < 0 ) ? - 1 : 1 ; dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; if ( divisor == 0 ) { System . out . println ( \" Cannot \u2581 Divide \u2581 by \u2581 0\" ) ; return ; } if ( dividend == 0 ) { System . out . println ( a + \" \u2581 / \u2581 \" + b + \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \" + 0 ) ; return ; } if ( divisor == 1 ) { System . out . println ( a + \" \u2581 / \u2581 \" + b + \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \" + sign * dividend ) ; return ; } System . out . println ( a + \" \u2581 / \u2581 \" + b + \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \" + Math . floor ( sign * ( Math . exp ( Math . log ( dividend ) - Math . log ( divisor ) ) ) ) ) ; }", "python": "def Divide ( a , b ) :\n    dividend = a ;\n    divisor = b ;\n    sign = - 1 if ( ( dividend < 0 ) ^ ( divisor < 0 ) ) else 1 ;\n    dividend = abs ( dividend ) ;\n    divisor = abs ( divisor ) ;\n    if ( divisor == 0 ) :\n        print ( \" Cannot \u2581 Divide \u2581 by \u2581 0\" ) ;\n    if ( dividend == 0 ) :\n        print ( a , \" / \" , b , \" is \u2581 equal \u2581 to \u2581 : \" , 0 ) ;\n    if ( divisor == 1 ) :\n        print ( a , \" / \" , b , \" is \u2581 equal \u2581 to \u2581 : \" , ( sign * dividend ) ) ;\n    print ( a , \" / \" , b , \" is \u2581 equal \u2581 to \u2581 : \" , math . floor ( sign * math . exp ( math . log ( dividend ) - math . log ( divisor ) ) ) ) ;\n"}
{"java": "private static char findExtraCharacter ( String s1 , String s2 ) { String smallStr ; String largeStr ; if ( s1 . length ( ) > s2 . length ( ) ) { smallStr = s2 ; largeStr = s1 ; } else { smallStr = s1 ; largeStr = s2 ; } int smallStrCodeTotal = 0 ; int largeStrCodeTotal = 0 ; int i = 0 ; for ( ; i < smallStr . length ( ) ; i ++ ) { smallStrCodeTotal += smallStr . charAt ( i ) ; largeStrCodeTotal += largeStr . charAt ( i ) ; } largeStrCodeTotal += largeStr . charAt ( i ) ; int intChar = largeStrCodeTotal - smallStrCodeTotal ; return ( char ) intChar ; }", "python": "def findExtraCharacter ( s1 , s2 ) :\n    smallStr = \" \"\n    largeStr = \" \"\n    if ( len ( s1 ) > len ( s2 ) ) :\n        smallStr = s2\n        largeStr = s1\n    else :\n        smallStr = s1\n        largeStr = s2\n    smallStrCodeTotal = 0\n    largeStrCodeTotal = 0\n    i = 0\n    while ( i < len ( smallStr ) ) :\n        smallStrCodeTotal += ord ( smallStr [ i ] )\n        largeStrCodeTotal += ord ( largeStr [ i ] )\n        i += 1\n    largeStrCodeTotal += ord ( largeStr [ i ] )\n    intChar = largeStrCodeTotal - smallStrCodeTotal\n    return chr ( intChar )\n"}
{"java": "static void arrange ( int N ) { if ( N == 1 ) { System . out . println ( \"1\" ) ; return ; } if ( N == 2 || N == 3 ) { System . out . println ( \" - 1\" ) ; return ; } int even = - 1 , odd = - 1 ; if ( N % 2 == 0 ) { even = N ; odd = N - 1 ; } else { odd = N ; even = N - 1 ; } while ( odd >= 1 ) { System . out . print ( odd ) ; System . out . print ( \" \u2581 \" ) ; odd = odd - 2 ; } while ( even >= 2 ) { System . out . print ( even ) ; System . out . print ( \" \u2581 \" ) ; even = even - 2 ; } }", "python": "def arrange ( N ) :\n    if ( N == 1 ) :\n        print ( \"1\" )\n        return\n    if ( N == 2 or N == 3 ) :\n        print ( \" - 1\" )\n        return\n    even = - 1\n    odd = - 1\n    if ( N % 2 == 0 ) :\n        even = N\n        odd = N - 1\n    else :\n        odd = N\n        even = N - 1\n    while ( odd >= 1 ) :\n        print ( odd , end = \" \u2581 \" )\n        odd = odd - 2\n    while ( even >= 2 ) :\n        print ( even , end = \" \u2581 \" )\n        even = even - 2\n"}
{"java": "static void printArray ( int arr [ ] , int len ) { int i ; for ( i = 0 ; i < len ; i ++ ) { System . out . printf ( \" % d \u2581 \" , arr [ i ] ) ; } }", "python": "def printArray ( arr , Len ) :\n    for i in range ( Len ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int countDigitsToBeRemoved ( int N , int K ) { String s = Integer . toString ( N ) ; int res = 0 ; int f_zero = 0 ; for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) { if ( K == 0 ) return res ; if ( s . charAt ( i ) == '0' ) { f_zero = 1 ; K -- ; } else res ++ ; } if ( K == 0 ) return res ; else if ( f_zero == 1 ) return s . length ( ) - 1 ; return - 1 ; }", "python": "def countDigitsToBeRemoved ( N , K ) :\n    s = str ( N ) ;\n    res = 0 ;\n    f_zero = 0 ;\n    for i in range ( len ( s ) - 1 , - 1 , - 1 ) :\n        if ( K == 0 ) :\n            return res ;\n        if ( s [ i ] == '0' ) :\n            f_zero = 1 ;\n            K -= 1 ;\n        else :\n            res += 1 ;\n    if ( K == 0 ) :\n        return res ;\n    elif ( f_zero > 0 ) :\n        return len ( s ) - 1 ;\n    return - 1 ;\n"}
{"java": "private static String getReverse ( String str ) { String revString = \" \" ; for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) revString += str . charAt ( i ) + \" \" ; return revString ; }", "python": "def solves ( ) :\n    n = list ( input ( ) )\n    s = reversed ( n )\n    if ( s == n ) :\n        print ( n )\n    else :\n        n = ' ' . join ( n )\n        s = ' ' . join ( s )\n        print ( n + s )\n"}
{"java": "static boolean multipleOfThree ( int K , int dig0 , int dig1 ) { long sum = 0 ; int temp = ( dig0 + dig1 ) % 10 ; sum = dig0 + dig1 ; if ( K == 2 ) { if ( sum % 3 == 0 ) return true ; else return false ; } sum += temp ; long numberofGroups = ( K - 3 ) / 4 ; int remNumberofDigits = ( K - 3 ) % 4 ; sum += ( numberofGroups * 20 ) ; for ( int i = 0 ; i < remNumberofDigits ; i ++ ) { temp = ( 2 * temp ) % 10 ; sum += temp ; } if ( sum % 3 == 0 ) return true ; else return false ; }", "python": "def multipleOfThree ( K , dig0 , dig1 ) :\n    sum = 0\n    temp = ( dig0 + dig1 ) % 10\n    sum = dig0 + dig1\n    if ( K == 2 ) :\n        if ( sum % 3 == 0 ) :\n            return True\n        else :\n            return False\n    sum += temp\n    numberofGroups = ( K - 3 ) // 4\n    remNumberofDigits = ( K - 3 ) % 4\n    sum += ( numberofGroups * 20 )\n    for i in range ( remNumberofDigits ) :\n        temp = ( 2 * temp ) % 10\n        sum += temp\n    if ( sum % 3 == 0 ) :\n        return True\n    else :\n        return False\n"}
{"java": "static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += arr [ i ] | arr [ j ] ; return ans ; }", "python": "def pairORSum ( arr , n ) :\n    ans = 0\n    for i in range ( 0 , n ) :\n        for j in range ( ( i + 1 ) , n ) :\n            ans = ans + arr [ i ] | arr [ j ]\n    return ans\n"}
{"java": "static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += arr [ i ] ^ arr [ j ] ; return ans ; }", "python": "def pairORSum ( arr , n ) :\n    ans = 0\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            ans = ans + ( arr [ i ] ^ arr [ j ] )\n    return ans\n"}
{"java": "static float CalculateRatio ( float m , float n ) { return ( 2 * m - 1 ) / ( 2 * n - 1 ) ; }", "python": "def CalculateRatio ( m , n ) :\n    return ( 2 * m - 1 ) / ( 2 * n - 1 ) ;\n"}
{"java": "static int setallbitgivenrange ( int n , int l , int r ) { int range = ( ( ( 1 << ( l - 1 ) ) - 1 ) ^ ( ( 1 << ( r ) ) - 1 ) ) ; return ( n | range ) ; }", "python": "def setallbitgivenrange ( n , l , r ) :\n    range = ( ( ( 1 << ( l - 1 ) ) - 1 ) ^ ( ( 1 << ( r ) ) - 1 ) )\n    return ( n | range )\n"}
{"java": "static void solve ( int d1 , int d2 , int d3 ) { int maxx = Math . max ( d1 , Math . max ( d2 , d3 ) ) ; int sum = ( d1 + d2 + d3 ) ; if ( 2 * maxx > sum || sum % 2 == 1 ) { System . out . print ( \" - 1\" ) ; return ; } int x1 = 0 , y1 = 0 ; int x2 = d1 , y2 = 0 ; int x3 = ( d1 + d2 - d3 ) / 2 ; int y3 = ( d2 + d3 - d1 ) / 2 ; System . out . print ( \" ( \" + x1 + \" , \u2581 \" + y1 + \" ) , \u2581 ( \" + x2 + \" , \u2581 \" + y2 + \" ) \u2581 and \u2581 ( \" + x3 + \" , \u2581 \" + y3 + \" ) \" ) ; }", "python": "def solve ( d1 , d2 , d3 ) :\n    maxx = max ( d1 , max ( d2 , d3 ) )\n    sum = ( d1 + d2 + d3 )\n    if ( 2 * maxx > sum or sum % 2 == 1 ) :\n        print ( \" - 1\" )\n        return\n    x1 = 0\n    y1 = 0\n    x2 = d1\n    y2 = 0\n    x3 = ( d1 + d2 - d3 ) // 2\n    y3 = ( d2 + d3 - d1 ) // 2\n    print ( \" ( \" , x1 , \" , \" , y1 , \" ) , \u2581 ( \" , x2 , \" , \" , y2 , \" ) \u2581 and \u2581 ( \" , x3 , \" , \" , y3 , \" ) \" )\n"}
{"java": "static void removeElements ( int arr [ ] , int n , int l , int r ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int val = 0 ; if ( mp . get ( arr [ i ] ) == null ) { val = 1 ; } else { val = mp . get ( arr [ i ] ) + 1 ; } mp . put ( arr [ i ] , val ) ; } for ( int i = 0 ; i < n ; ++ i ) { if ( mp . get ( arr [ i ] ) < l || mp . get ( arr [ i ] ) > r ) { System . out . print ( arr [ i ] + \" \u2581 \" ) ; } } }", "python": "def removeElements ( arr , n , l , r ) :\n    mp = { i : 0 for i in range ( len ( arr ) ) }\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += 1\n    for i in range ( n ) :\n        if ( mp [ arr [ i ] ] < l or mp [ arr [ i ] > r ] ) :\n            print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static void findkth ( int n , int k ) { Vector < Integer > v1 = new Vector < Integer > ( ) ; Vector < Integer > v2 = new Vector < Integer > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v1 . add ( i ) ; if ( i != Math . sqrt ( n ) ) v2 . add ( n / i ) ; } } Collections . reverse ( v2 ) ; if ( k > ( v1 . size ( ) + v2 . size ( ) ) ) System . out . print ( \" Doesn ' t \u2581 Exist \" ) ; else { if ( k <= v1 . size ( ) ) System . out . print ( v1 . get ( k - 1 ) ) ; else System . out . print ( v2 . get ( k - v1 . size ( ) - 1 ) ) ; } }", "python": "def findkth ( n , k ) :\n    v1 = list ( )\n    v2 = list ( )\n    for i in range ( 1 , mt . ceil ( n ** ( .5 ) ) ) :\n        if ( n % i == 0 ) :\n            v1 . append ( i )\n            if ( i != mt . ceil ( mt . sqrt ( n ) ) ) :\n                v2 . append ( n // i )\n    v2 [ : : - 1 ]\n    if ( k > ( len ( v1 ) + len ( v2 ) ) ) :\n        print ( \" Doesn ' t \u2581 Exist \" , end = \" \" )\n    else :\n        if ( k <= len ( v1 ) ) :\n            print ( v1 [ k - 1 ] )\n        else :\n            print ( v2 [ k - len ( v1 ) - 1 ] )\n"}
{"java": "static String solveEquation ( String equation ) { int n = equation . length ( ) , sign = 1 , coeff = 0 ; int total = 0 , i = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( equation . charAt ( j ) == ' + ' || equation . charAt ( j ) == ' - ' ) { if ( j > i ) total += sign * Integer . parseInt ( equation . substring ( i , j ) ) ; i = j ; } else if ( equation . charAt ( j ) == ' x ' ) { if ( ( i == j ) || equation . charAt ( j - 1 ) == ' + ' ) coeff += sign ; else if ( equation . charAt ( j - 1 ) == ' - ' ) coeff -= sign ; else coeff += sign * Integer . parseInt ( equation . substring ( i , j ) ) ; i = j + 1 ; } else if ( equation . charAt ( j ) == ' = ' ) { if ( j > i ) total += sign * Integer . parseInt ( equation . substring ( i , j ) ) ; sign = - 1 ; i = j + 1 ; } } if ( i < n ) total = total + sign * Integer . parseInt ( equation . substring ( i ) ) ; if ( coeff == 0 && total == 0 ) return \" Infinite \u2581 solutions \" ; if ( coeff == 0 && total != 0 ) return \" No \u2581 solution \" ; int ans = - total / coeff ; return ( Integer . toString ( ans ) ) ; }", "python": "def solveEquation ( equation ) :\n    n = len ( equation )\n    sign = 1\n    coeff = 0\n    total = 0\n    i = 0\n    for j in range ( 0 , n ) :\n        if ( equation [ j ] == ' + ' or equation [ j ] == ' - ' ) :\n            if ( j > i ) :\n                total = ( total + sign * int ( equation [ i : j ] ) )\n            i = j\n        elif ( equation [ j ] == ' x ' ) :\n            if ( ( i == j ) or equation [ j - 1 ] == ' + ' ) :\n                coeff += sign\n            elif ( equation [ j - 1 ] == ' - ' ) :\n                coeff = coeff - sign\n            else :\n                coeff = ( coeff + sign * int ( equation [ i : j ] ) )\n            i = j + 1\n        elif ( equation [ j ] == ' = ' ) :\n            if ( j > i ) :\n                total = ( total + sign * int ( equation [ i : j ] ) )\n            sign = - 1\n            i = j + 1\n    if ( i < n ) :\n        total = ( total + sign * int ( equation [ i : len ( equation ) ] ) )\n    if ( coeff == 0 and total == 0 ) :\n        return \" Infinite \u2581 solutions \"\n    if ( coeff == 0 and total ) :\n        return \" No \u2581 solution \"\n    ans = - total / coeff\n    return int ( ans )\n"}
{"java": "static long cal_minimum_time ( long X ) { long t = 0 ; long sum = 0 ; while ( sum < X ) { t ++ ; sum = sum + t ; } return t ; }", "python": "def cal_minimum_time ( X ) :\n    t = 0\n    sum = 0\n    while ( sum < X ) :\n        t = t + 1\n        sum = sum + t ;\n    return t ;\n"}
{"java": "public static int sumOfSeries ( int n ) { int x ; if ( n % 2 == 0 ) x = ( n / 2 ) * ( n + 1 ) ; else x = ( ( n + 1 ) / 2 ) * n ; return x * x ; }", "python": "def sumOfSeries ( n ) :\n    x = 0\n    if n % 2 == 0 :\n        x = ( n / 2 ) * ( n + 1 )\n    else :\n        x = ( ( n + 1 ) / 2 ) * n\n    return ( int ) ( x * x )\n"}
{"java": "static void pattern ( int rows_no ) { int i , j , k ; for ( i = 1 ; i <= rows_no ; i ++ ) { for ( k = 1 ; k < i ; k ++ ) System . out . print ( \" \u2581 \" ) ; for ( j = i ; j <= rows_no ; j ++ ) System . out . print ( j + \" \u2581 \" ) ; System . out . println ( ) ; } for ( i = rows_no - 1 ; i >= 1 ; i -- ) { for ( k = 1 ; k < i ; k ++ ) System . out . print ( \" \u2581 \" ) ; for ( j = i ; j <= rows_no ; j ++ ) System . out . print ( j + \" \u2581 \" ) ; System . out . println ( ) ; } }", "python": "def pattern ( rows_no ) :\n    for i in range ( 1 , rows_no + 1 ) :\n        for k in range ( 1 , i ) :\n            print ( \" \u2581 \" , end = \" \" )\n        for j in range ( i , rows_no + 1 ) :\n            print ( j , end = \" \u2581 \" )\n        print ( )\n    for i in range ( rows_no - 1 , 0 , - 1 ) :\n        for k in range ( 1 , i ) :\n            print ( \" \u2581 \" , end = \" \" )\n        for j in range ( i , rows_no + 1 ) :\n            print ( j , end = \" \u2581 \" )\n        print ( )\n"}
{"java": "static int findMaximum ( int l , int p , int q , int r ) { int dp [ ] = new int [ l + 1 ] ; for ( int i = 0 ; i < l + 1 ; i ++ ) dp [ i ] = - 1 ; dp [ 0 ] = 0 ; for ( int i = 0 ; i <= l ; i ++ ) { if ( dp [ i ] == - 1 ) continue ; if ( i + p <= l ) dp [ i + p ] = Math . max ( dp [ i + p ] , dp [ i ] + 1 ) ; if ( i + q <= l ) dp [ i + q ] = Math . max ( dp [ i + q ] , dp [ i ] + 1 ) ; if ( i + r <= l ) dp [ i + r ] = Math . max ( dp [ i + r ] , dp [ i ] + 1 ) ; } return dp [ l ] ; }", "python": "def findMaximum ( l , p , q , r ) :\n    dp = [ - 1 ] * ( l + 1 )\n    dp [ 0 ] = 0\n    for i in range ( l + 1 ) :\n        if ( dp [ i ] == - 1 ) :\n            continue\n        if ( i + p <= l ) :\n            dp [ i + p ] = ( max ( dp [ i + p ] , dp [ i ] + 1 ) )\n        if ( i + q <= l ) :\n            dp [ i + q ] = ( max ( dp [ i + q ] , dp [ i ] + 1 ) )\n        if ( i + r <= l ) :\n            dp [ i + r ] = ( max ( dp [ i + r ] , dp [ i ] + 1 ) )\n    return dp [ l ]\n"}
{"java": "static void candies ( int n , int k ) { int count = 0 ; int ind = 1 ; int [ ] arr = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) arr [ i ] = 0 ; while ( n > 0 ) { int f1 = ( ind - 1 ) * k ; int f2 = ind * k ; int sum1 = ( f1 * ( f1 + 1 ) ) / 2 ; int sum2 = ( f2 * ( f2 + 1 ) ) / 2 ; int res = sum2 - sum1 ; if ( res <= n ) { count ++ ; n -= res ; ind ++ ; } else { int i = 0 ; int term = ( ( ind - 1 ) * k ) + 1 ; while ( n > 0 ) { if ( term <= n ) { arr [ i ++ ] = term ; n -= term ; term ++ ; } else { arr [ i ++ ] = n ; n = 0 ; } } } } for ( int i = 0 ; i < k ; i ++ ) arr [ i ] += ( count * ( i + 1 ) ) + ( k * ( count * ( count - 1 ) ) / 2 ) ; for ( int i = 0 ; i < k ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def candies ( n , k ) :\n    count = 0\n    ind = 1\n    arr = [ 0 for i in range ( k ) ]\n    while n > 0 :\n        f1 = ( ind - 1 ) * k\n        f2 = ind * k\n        sum1 = ( f1 * ( f1 + 1 ) ) // 2\n        sum2 = ( f2 * ( f2 + 1 ) ) // 2\n        res = sum2 - sum1\n        if ( res <= n ) :\n            count += 1\n            n -= res\n            ind += 1\n        else :\n            i = 0\n            term = ( ( ind - 1 ) * k ) + 1\n            while ( n > 0 ) :\n                if ( term <= n ) :\n                    arr [ i ] = term\n                    i += 1\n                    n -= term\n                    term += 1\n                else :\n                    arr [ i ] = n\n                    i += 1\n                    n = 0\n    for i in range ( k ) :\n        arr [ i ] += ( ( count * ( i + 1 ) ) + ( k * ( count * ( count - 1 ) ) // 2 ) )\n    for i in range ( k ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static long getNthTerm ( long N ) { return ( 7 * ( int ) Math . pow ( N , 2 ) - 19 * N + 15 ) ; }", "python": "def getNthTerm ( N ) :\n    return ( 7 * pow ( N , 2 ) - 19 * N + 15 )\n"}
{"java": "static long getNthTerm ( long N ) { return 4 * ( long ) Math . pow ( N , 2 ) - 3 * N + 2 ; }", "python": "def getNthTerm ( N ) :\n    return 4 * pow ( N , 2 ) - 3 * N + 2\n"}
{"java": "static long getNthTerm ( long N ) { return ( ( int ) Math . pow ( N , 2 ) + N + 1 ) ; }", "python": "def getNthTerm ( N ) :\n    return ( pow ( N , 2 ) + N + 1 )\n"}
{"java": "static int nextGreater ( int N ) { int power_of_2 = 1 , shift_count = 0 ; while ( true ) { if ( ( ( N >> shift_count ) & 1 ) % 2 == 0 ) break ; shift_count ++ ; power_of_2 = power_of_2 * 2 ; } return ( N + power_of_2 ) ; }", "python": "def nextGreater ( N ) :\n    power_of_2 = 1 ;\n    shift_count = 0 ;\n    while ( True ) :\n        if ( ( ( N >> shift_count ) & 1 ) % 2 == 0 ) :\n            break ;\n        shift_count += 1 ;\n        power_of_2 = power_of_2 * 2 ;\n    return ( N + power_of_2 ) ;\n"}
{"java": "static void prefix ( char [ ] str ) { int k = 1 , j ; int n = str . length ; Vector < Integer > g = new Vector < > ( ) ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( str [ i ] == str [ 0 ] ) { g . add ( i ) ; flag = 1 ; } } if ( flag == 0 ) { System . out . println ( String . valueOf ( str ) ) ; } else { int len = g . size ( ) ; while ( k < g . get ( 0 ) ) { int cnt = 0 ; for ( j = 0 ; j < len ; j ++ ) { if ( ( g . get ( j ) + k ) < n && str [ g . get ( j ) + k ] == str [ k ] ) { cnt ++ ; } } if ( cnt == len ) { k ++ ; } else { break ; } } for ( int i = 0 ; i < k ; i ++ ) { System . out . print ( str [ i ] ) ; } System . out . println ( ) ; } }", "python": "def prefix ( string ) :\n    k = 1 ;\n    n = len ( string ) ;\n    g = [ ] ;\n    flag = 0 ;\n    for i in range ( 1 , n ) :\n        if ( string [ i ] == string [ 0 ] ) :\n            g . append ( i ) ;\n            flag = 1 ;\n    if ( flag == 0 ) :\n        print ( string ) ;\n    else :\n        length = len ( g ) ;\n        while ( k < g [ 0 ] ) :\n            cnt = 0 ;\n            for j in range ( length ) :\n                if ( string [ g [ j ] + k ] == string [ k ] ) :\n                    cnt += 1 ;\n            if ( cnt == len ) :\n                k += 1 ;\n            else :\n                break ;\n        for i in range ( k + 1 ) :\n            print ( string [ i ] , end = \" \" ) ;\n        print ( )\n"}
{"java": "static int printSmallest ( int a [ ] ) { int sum , sum1 ; Arrays . sort ( a ) ; int i , j , k , num ; for ( i = 0 ; i < 3 ; i ++ ) { if ( a [ i ] % 3 == 0 ) { return a [ i ] ; } } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { num = ( a [ i ] * 10 ) + a [ j ] ; if ( num % 3 == 0 ) { return num ; } } } return a [ 0 ] * 100 + a [ 0 ] * 10 + a [ 0 ] ; }", "python": "def printSmallest ( a , n ) :\n    sum0 , sum1 = 0 , 0\n    a = sorted ( a )\n    for i in range ( n ) :\n        if ( a [ i ] % 3 == 0 ) :\n            return a [ i ]\n    for i in range ( n ) :\n        for j in range ( n ) :\n            num = ( a [ i ] * 10 ) + a [ j ]\n            if ( num % 3 == 0 ) :\n                return num\n    return a [ 0 ] * 100 + a [ 0 ] * 10 + a [ 0 ]\n"}
{"java": "static int solve ( String test , int MOD ) { int size = test . length ( ) ; int total = 0 ; for ( int i = 0 ; i <= 8 ; i ++ ) { int x = i ; int y = i + 1 ; String newtest = \" \" ; for ( int j = 0 ; j < size ; j ++ ) { if ( test . charAt ( j ) == x + 48 || test . charAt ( j ) == y + 48 ) { newtest += test . charAt ( j ) ; } } if ( newtest . length ( ) > 0 ) { int size1 = newtest . length ( ) ; int [ ] prefix = new int [ size1 ] ; for ( int j = 0 ; j < size1 ; j ++ ) { prefix [ j ] = 0 ; if ( newtest . charAt ( j ) == y + 48 ) { prefix [ j ] ++ ; } } for ( int j = 1 ; j < size1 ; j ++ ) { prefix [ j ] += prefix [ j - 1 ] ; } int count = 0 ; int firstcount = 0 ; int ss = 0 ; int prev = 0 ; for ( int j = 0 ; j < size1 ; j ++ ) { if ( newtest . charAt ( j ) == x + 48 ) { count ++ ; firstcount ++ ; } else { ss += count * count ; int pairsum = ( firstcount * firstcount - ss ) / 2 ; int temp = pairsum ; pairsum -= prev ; prev = temp ; int secondway = prefix [ size1 - 1 ] ; if ( j != 0 ) secondway -= prefix [ j - 1 ] ; int answer = count * ( count - 1 ) * secondway * ( secondway - 1 ) ; answer /= 4 ; answer += ( pairsum * secondway * ( secondway - 1 ) ) / 2 ; total += answer ; count = 0 ; } } } } return total ; }", "python": "def solve ( test ) :\n    size = len ( test )\n    total = 0\n    for i in range ( 9 ) :\n        x = i\n        y = i + 1\n        newtest = \" \"\n        for j in range ( size ) :\n            if ( ord ( test [ j ] ) == x + 48 or ord ( test [ j ] ) == y + 48 ) :\n                newtest += test [ j ]\n        if ( len ( newtest ) > 0 ) :\n            size1 = len ( newtest )\n            prefix = [ 0 for i in range ( size1 ) ]\n            for j in range ( size1 ) :\n                if ( ord ( newtest [ j ] ) == y + 48 ) :\n                    prefix [ j ] += 1\n            for j in range ( 1 , size1 ) :\n                prefix [ j ] += prefix [ j - 1 ]\n            count = 0\n            firstcount = 0\n            ss = 0\n            prev = 0\n            for j in range ( size1 ) :\n                if ( ord ( newtest [ j ] ) == x + 48 ) :\n                    count += 1\n                    firstcount += 1\n                else :\n                    ss += count * count\n                    pairsum = ( firstcount * firstcount - ss ) // 2\n                    temp = pairsum\n                    pairsum -= prev\n                    prev = temp\n                    secondway = prefix [ size1 - 1 ]\n                    if ( j != 0 ) :\n                        secondway -= prefix [ j - 1 ]\n                    answer = count * ( count - 1 ) * secondway * ( secondway - 1 )\n                    answer //= 4\n                    answer += ( pairsum * secondway * ( secondway - 1 ) ) // 2\n                    total += answer\n                    count = 0\n    return total\n"}
{"java": "static boolean firstWin ( int N , int [ ] a ) { Arrays . sort ( a ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( N - i <= a [ i ] ) { boolean win = ( a [ i ] - ( N - i ) ) % 2 == 1 ; int sameSize = 0 ; for ( int j = i - 1 ; j >= 0 && a [ j ] == N - i ; j -- ) sameSize ++ ; win |= sameSize % 2 == 1 ; return win ; } } return false ; }", "python": "def f ( ) :\n    n = int ( input ( ) )\n    a = list ( map ( int , input ( ) . split ( ) ) )\n    a . sort ( )\n    a . reverse ( )\n    i = j = 0\n    while i + 1 < n and a [ i + 1 ] > j + 1 :\n        i += 1\n        j += 1\n    if ( a [ i ] - j - 1 ) % 2 == 1 :\n        return ' First '\n    k = 0\n    while i + 1 < n and a [ i + 1 ] > j :\n        i += 1\n        k += 1\n    if k % 2 == 1 :\n        return ' First '\n    return ' Second '\n"}
{"java": "static int countWays ( String str , int m ) { HashSet < Character > set = new HashSet < Character > ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) set . add ( str . charAt ( i ) ) ; int result = 0 ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) { HashMap < Character , Integer > first_map = new HashMap < Character , Integer > ( ) ; HashMap < Character , Integer > second_map = new HashMap < Character , Integer > ( ) ; for ( int j = 0 ; j < i ; j ++ ) { if ( first_map . containsKey ( str . charAt ( j ) ) ) first_map . put ( str . charAt ( j ) , ( first_map . get ( str . charAt ( j ) ) + 1 ) ) ; else first_map . put ( str . charAt ( j ) , 1 ) ; } for ( int k = i ; k < str . length ( ) ; k ++ ) { if ( second_map . containsKey ( str . charAt ( k ) ) ) second_map . put ( str . charAt ( k ) , ( second_map . get ( str . charAt ( k ) ) + 1 ) ) ; else second_map . put ( str . charAt ( k ) , 1 ) ; } Iterator itr = set . iterator ( ) ; int total_count = 0 ; while ( itr . hasNext ( ) ) { int first_count = 0 , second_count = 0 ; char ch = ( char ) itr . next ( ) ; if ( first_map . containsKey ( ch ) ) first_count = first_map . get ( ch ) ; if ( second_map . containsKey ( ch ) ) second_count = second_map . get ( ch ) ; if ( first_count == second_count && first_count != 0 ) total_count += 1 ; } if ( total_count >= m ) result += 1 ; } return result ; }", "python": "def countWays ( string , m ) :\n    Set = set ( )\n    for i in range ( 0 , len ( string ) ) :\n        Set . add ( string [ i ] )\n    result = 0\n    for i in range ( 1 , len ( string ) ) :\n        first_map = defaultdict ( lambda : 0 )\n        second_map = defaultdict ( lambda : 0 )\n        for j in range ( 0 , i ) :\n            first_map [ string [ j ] ] += 1\n        for k in range ( i , len ( string ) ) :\n            second_map [ string [ k ] ] += 1\n        total_count = 0\n        for ch in Set :\n            first_count , second_count = 0 , 0\n            if ch in first_map :\n                first_count = first_map [ ch ]\n            if ch in second_map :\n                second_count = second_map [ ch ]\n            if first_count == second_count and first_count != 0 :\n                total_count += 1\n        if total_count >= m :\n            result += 1\n    return result\n"}
{"java": "static void Vertices ( int x , int y ) { int val = Math . abs ( x ) + Math . abs ( y ) ; System . out . print ( val * ( x < 0 ? - 1 : 1 ) + \" \u2581 0 \u2581 \" ) ; System . out . print ( \"0 \u2581 \" + val * ( y < 0 ? - 1 : 1 ) ) ; }", "python": "def Vertices ( x , y ) :\n    val = abs ( x ) + abs ( y ) ;\n    if x < 0 :\n        x = - 1\n    else :\n        x = 1\n    print ( val * x , \"0\" , end = \" \u2581 \" ) ;\n    if y < 0 :\n        y = - 1\n    else :\n        y = 1\n    print ( \"0\" , val * y ) ;\n"}
{"java": "public static int min ( int a , int b , int s ) { if ( a >= b ) { if ( b >= s ) return s ; else { return b ; } } else { if ( a >= s ) return s ; return a ; } }", "python": "def earn ( s , d ) :\n    if ( s and d ) == 0 : return 0\n    item1 = min ( s , d )\n    item2 = max ( s , d )\n    if item2 >= 2 * item1 : return item1\n    return int ( ( item1 + item2 ) / 3 )\n"}
{"java": "static int solve ( int x , int y , int a , int b ) { return ( ( y - x ) % ( a + b ) == 0 ) ? ( ( y - x ) / ( a + b ) ) : - 1 ; }", "python": "def f ( x , y , a , b ) :\n    if ( y - x ) % ( a + b ) == 0 :\n        print ( int ( ( y - x ) / ( a + b ) ) )\n        return 0\n    else :\n        print ( - 1 )\n        return 0\n"}
{"java": "static void printElements ( int arr [ ] , int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; } }", "python": "def printElements ( arr , n ) :\n    for i in range ( 1 , n - 1 , 1 ) :\n        if ( arr [ i ] > arr [ i - 1 ] and arr [ i ] > arr [ i + 1 ] ) :\n            print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "public static int minimumOperations ( int [ ] a , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( a [ i ] ) != null ) { int x = mp . get ( a [ i ] ) ; mp . put ( a [ i ] , ++ x ) ; } else mp . put ( a [ i ] , 1 ) ; } int count = 0 ; for ( HashMap . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += ( entry . getValue ( ) - 1 ) ; } } return count ; }", "python": "def minimumOperations ( a , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if a [ i ] in mp . keys ( ) :\n            mp [ a [ i ] ] += 1\n        else :\n            mp [ a [ i ] ] = 1\n    count = 0\n    for it in mp :\n        if ( mp [ it ] > 1 ) :\n            count += mp [ it ] - 1\n    return count\n"}
{"java": "static double Nth_Term ( int n ) { return ( 2 * Math . pow ( n , 3 ) - 3 * Math . pow ( n , 2 ) + n + 6 ) / 6 ; }", "python": "def Nth_Term ( n ) :\n    return ( 2 * pow ( n , 3 ) - 3 * pow ( n , 2 ) + n + 6 ) // 6\n"}
{"java": "static void ReplaceElements ( int arr [ ] , int n ) { if ( n <= 1 ) { return ; } int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev + arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev + arr [ n - 1 ] ; }", "python": "def ReplaceElements ( arr , n ) :\n    if ( n <= 1 ) :\n        return\n    prev = arr [ 0 ]\n    arr [ 0 ] = arr [ 0 ] + arr [ 1 ]\n    for i in range ( 1 , n - 1 ) :\n        curr = arr [ i ]\n        arr [ i ] = prev + arr [ i + 1 ]\n        prev = curr\n    arr [ n - 1 ] = prev + arr [ n - 1 ]\n"}
{"java": "static void ReplaceElements ( int [ ] arr , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] ^ arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev ^ arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev ^ arr [ n - 1 ] ; }", "python": "def ReplaceElements ( arr , n ) :\n    if n <= 1 :\n        return\n    prev = arr [ 0 ]\n    arr [ 0 ] = arr [ 0 ] ^ arr [ 1 ]\n    for i in range ( 1 , n - 1 ) :\n        curr = arr [ i ]\n        arr [ i ] = prev ^ arr [ i + 1 ]\n        prev = curr\n    arr [ n - 1 ] = prev ^ arr [ n - 1 ]\n"}
{"java": "static int [ ] orgazineInOrder ( int [ ] vec , int [ ] op , int n ) { int [ ] result = new int [ n ] ; Arrays . sort ( vec ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == ' < ' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }", "python": "def orgazineInOrder ( vec , op , n ) :\n    result = [ 0 ] * n ;\n    vec . sort ( ) ;\n    i = 0 ;\n    j = n - 1 ;\n    k = 0 ;\n    while ( i <= j and k <= n - 2 ) :\n        if ( op [ k ] == ' < ' ) :\n            result [ k ] = vec [ i ] ;\n            i += 1 ;\n        else :\n            result [ k ] = vec [ j ] ;\n            j -= 1 ;\n        k += 1 ;\n    result [ n - 1 ] = vec [ i ] ;\n    return result ;\n"}
{"java": "static void findPair ( int arr [ ] , int n ) { if ( n < 2 ) { System . out . print ( \" - 1\" ) ; return ; } int i , first , second ; first = second = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) { second = arr [ i ] ; } } System . out . println ( \" n \u2581 = \u2581 \" + first + \" \u2581 and \u2581 r \u2581 = \u2581 \" + second ) ; }", "python": "def findPair ( arr , n ) :\n    if ( n < 2 ) :\n        print ( \" - 1\" )\n        return\n    i = 0\n    first = - 1\n    second = - 1\n    for i in range ( n ) :\n        if ( arr [ i ] > first ) :\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            second = arr [ i ]\n    print ( \" n \u2581 = \" , first , \" and \u2581 r \u2581 = \" , second )\n"}
{"java": "static void printSeriesSum ( int N ) { long sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += Math . pow ( i , i - 1 ) ; } System . out . print ( sum + \" \\n \" ) ; }", "python": "def printSeriessumm ( N ) :\n    summ = 0\n    for i in range ( 1 , N + 1 ) :\n        summ += pow ( i , i - 1 )\n    print ( summ )\n"}
{"java": "public static void solve ( BufferedReader br , PrintWriter pr ) throws IOException { int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] temp = br . readLine ( ) . split ( \" \u2581 \" ) ; int [ ] nums = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { nums [ i ] = Integer . parseInt ( temp [ i ] ) ; } TreeSet < Integer > set = new TreeSet < > ( ) ; Set < Integer > res = new HashSet < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { set . add ( i ) ; } for ( int i = 0 ; i < n ; i ++ ) { set . remove ( nums [ i ] ) ; if ( set . first ( ) == i + 2 ) { res . add ( i + 1 ) ; } } set = new TreeSet < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { set . add ( i ) ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { set . remove ( nums [ i ] ) ; if ( set . first ( ) != n - i + 1 ) { res . remove ( i ) ; } } pr . println ( res . size ( ) ) ; for ( int i : res ) { pr . println ( i + \" \u2581 \" + ( n - i ) ) ; } }", "python": "def fun ( lst , ele , n ) :\n    dic1 = { }\n    for j in range ( 1 , ele + 1 ) :\n        dic1 [ j ] = 0\n    e = 0\n    for j in range ( ele ) :\n        if lst [ j ] not in dic1 :\n            e += 1\n            break\n        else :\n            dic1 [ lst [ j ] ] += 1\n    for j in dic1 . keys ( ) :\n        if dic1 [ j ] != 1 :\n            e += 1\n            break\n    dic1 = { }\n    for j in range ( 1 , n - ele + 1 ) :\n        dic1 [ j ] = 0\n    for j in range ( ele , n ) :\n        if lst [ j ] not in dic1 :\n            e += 1\n            break\n        else :\n            dic1 [ lst [ j ] ] += 1\n    for j in dic1 . keys ( ) :\n        if dic1 [ j ] != 1 :\n            e += 1\n            break\n    if e == 0 :\n        return 1\n    return 0\n"}
{"java": "static int getNumToAdd ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int d = arr [ 1 ] - arr [ 0 ] ; int numToAdd = - 1 ; boolean numAdded = false ; for ( int i = 2 ; i < n ; i ++ ) { int diff = arr [ i ] - arr [ i - 1 ] ; if ( diff != d ) { if ( numAdded ) return - 1 ; if ( diff == 2 * d ) { numToAdd = arr [ i ] - d ; numAdded = true ; } else return - 1 ; } } if ( numToAdd == - 1 ) return ( arr [ n - 1 ] + d ) ; return numToAdd ; }", "python": "def getNumToAdd ( arr , n ) :\n    arr . sort ( reverse = False )\n    d = arr [ 1 ] - arr [ 0 ]\n    numToAdd = - 1\n    numAdded = False\n    for i in range ( 2 , n , 1 ) :\n        diff = arr [ i ] - arr [ i - 1 ]\n        if ( diff != d ) :\n            if ( numAdded ) :\n                return - 1\n            if ( diff == 2 * d ) :\n                numToAdd = arr [ i ] - d\n                numAdded = True\n            else :\n                return - 1\n    if ( numToAdd == - 1 ) :\n        return ( arr [ n - 1 ] + d )\n    return numToAdd\n"}
{"java": "static int digSum ( int n ) { int sum = 0 ; while ( n > 0 || sum > 9 ) { if ( n == 0 ) { n = sum ; sum = 0 ; } sum += n % 10 ; n /= 10 ; } return sum ; }", "python": "def digSum ( n ) :\n    sum = 0\n    while ( n > 0 or sum > 9 ) :\n        if ( n == 0 ) :\n            n = sum\n            sum = 0\n        sum += n % 10\n        n /= 10\n    return sum\n"}
{"java": "static int countHexadecimal ( int L , int R ) { int count = 0 ; for ( int i = L ; i <= R ; i ++ ) { if ( i >= 10 && i <= 15 ) count ++ ; else if ( i > 15 ) { int k = i ; while ( k != 0 ) { if ( k % 16 >= 10 ) count ++ ; k = k / 16 ; } } } return count ; }", "python": "def countHexadecimal ( L , R ) :\n    count = 0 ;\n    for i in range ( L , R + 1 ) :\n        if ( i >= 10 and i <= 15 ) :\n            count += 1 ;\n        elif ( i > 15 ) :\n            k = i ;\n            while ( k != 0 ) :\n                if ( k % 16 >= 10 ) :\n                    count += 1 ;\n                k = k // 16 ;\n    return count ;\n"}
{"java": "public static void solve ( int n ) { double a = n / 2 ; if ( n % 2 != 0 ) { System . out . println ( ( Math . ceil ( a ) - 1 ) + \" \u2581 \" + ( Math . floor ( a ) + 1 ) ) ; } else { if ( ( int ) ( a ) % 2 == 0 ) { System . out . println ( ( Math . ceil ( a ) - 1 ) + \" \u2581 \" + ( Math . floor ( a ) + 1 ) ) ; } else { System . out . println ( ( Math . ceil ( a ) - 2 ) + \" \u2581 \" + ( Math . floor ( a ) + 2 ) ) ; } } }", "python": "def solve ( n ) :\n    a = float ( n / 2 ) ;\n    if ( n % 2 != 0 ) :\n        print ( ( math . ceil ( a ) - 1 ) , ( math . floor ( a ) + 1 ) ) ;\n    else :\n        if ( a % 2 == 0 ) :\n            print ( ( math . ceil ( a ) - 1 ) , ( math . floor ( a ) + 1 ) ) ;\n        else :\n            print ( ( math . ceil ( a ) - 2 ) , ( math . floor ( a ) + 2 ) ) ;\n"}
{"java": "static int sqrtByLongDivision ( int n ) { int i = 0 , udigit , j ; int cur_divisor = 0 ; int quotient_units_digit = 0 ; int cur_quotient = 0 ; int cur_dividend = 0 ; int cur_remainder = 0 ; int a [ ] = new int [ 10 ] ; while ( n > 0 ) { a [ i ] = n % 100 ; n = n / 100 ; i ++ ; } i -- ; for ( j = i ; j >= 0 ; j -- ) { cur_remainder = INFINITY_ ; cur_dividend = cur_dividend * 100 + a [ j ] ; for ( udigit = 0 ; udigit <= 9 ; udigit ++ ) { if ( cur_remainder >= cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) && cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) >= 0 ) { cur_remainder = cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) ; quotient_units_digit = udigit ; } } cur_quotient = cur_quotient * 10 + quotient_units_digit ; cur_divisor = cur_quotient * 2 ; cur_dividend = cur_remainder ; } return cur_quotient ; }", "python": "def sqrtByLongDivision ( n ) :\n    i = 0\n    udigit , j = 0 , 0\n    cur_divisor = 0\n    quotient_units_digit = 0\n    cur_quotient = 0\n    cur_dividend = 0\n    cur_remainder = 0\n    a = [ 0 ] * 10\n    while ( n > 0 ) :\n        a [ i ] = n % 100\n        n = n // 100\n        i += 1\n    i -= 1\n    for j in range ( i , - 1 , - 1 ) :\n        cur_remainder = INFINITY_\n        cur_dividend = cur_dividend * 100 + a [ j ]\n        for udigit in range ( 10 ) :\n            if ( cur_remainder >= cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) and cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) >= 0 ) :\n                cur_remainder = cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit )\n                quotient_units_digit = udigit\n        cur_quotient = cur_quotient * 10 + quotient_units_digit\n        cur_divisor = cur_quotient * 2\n        cur_dividend = cur_remainder\n    return cur_quotient\n"}
{"java": "static int min_changes ( int a [ ] , int n ) { int ans_a = 0 , ans_b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { if ( a [ i ] == 0 ) ans_a ++ ; else ans_b ++ ; } else { if ( a [ i ] == 0 ) ans_b ++ ; else ans_a ++ ; } } return Math . min ( ans_a , ans_b ) ; }", "python": "def min_changes ( a , n ) :\n    ans_a = 0 ;\n    ans_b = 0 ;\n    for i in range ( n ) :\n        if ( i % 2 == 0 ) :\n            if ( a [ i ] == 0 ) :\n                ans_a += 1 ;\n            else :\n                ans_b += 1 ;\n        else :\n            if ( a [ i ] == 0 ) :\n                ans_b += 1 ;\n            else :\n                ans_a += 1 ;\n    return min ( ans_a , ans_b ) ;\n"}
{"java": "static int getPassingCars ( int A [ ] , int n ) { int countOne = 0 , result = 0 ; while ( n >= 1 ) { if ( A [ n - 1 ] == 1 ) countOne ++ ; else result += countOne ; n -- ; } return result ; }", "python": "def getPassingCars ( A , n ) :\n    countOne = 0 ; result = 0\n    while n >= 1 :\n        if A [ n - 1 ] == 1 :\n            countOne += 1\n        else :\n            result += countOne\n        n -= 1\n    return result\n"}
{"java": "static int cntPairs ( int a [ ] , int n ) { int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) odd ++ ; else if ( ( a [ i ] / 2 ) % 2 == 1 ) even ++ ; } int ans = odd * even + ( odd * ( odd - 1 ) ) / 2 ; return ans ; }", "python": "def cntPairs ( a , n ) :\n    odd = 0 ; even = 0 ;\n    for i in range ( n ) :\n        if ( a [ i ] % 2 == 1 ) :\n            odd += 1 ;\n        elif ( ( a [ i ] / 2 ) % 2 == 1 ) :\n            even += 1 ;\n    ans = odd * even + ( odd * ( odd - 1 ) ) // 2 ;\n    return ans ;\n"}
{"java": "static void printCombination ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( i % 3 != 0 ) { for ( int j = 1 ; j < n ; j ++ ) { if ( j % 3 != 0 ) { for ( int k = 1 ; k < n ; k ++ ) { if ( k % 3 != 0 && ( i + j + k ) == n ) { System . out . println ( i + \" \u2581 \" + j + \" \u2581 \" + k ) ; return ; } } } } } } }", "python": "def printCombination ( n ) :\n    for i in range ( 1 , n ) :\n        if ( i % 3 != 0 ) :\n            for j in range ( 1 , n ) :\n                if ( j % 3 != 0 ) :\n                    for k in range ( 1 , n ) :\n                        if ( k % 3 != 0 and ( i + j + k ) == n ) :\n                            print ( i , j , k ) ;\n                            return ;\n"}
{"java": "public static void solve ( Scanner sc ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == b ) { System . out . println ( \" Draw \" ) ; return ; } if ( a == 1 ) { System . out . println ( \" Alice \" ) ; return ; } if ( b == 1 ) { System . out . println ( \" Bob \" ) ; return ; } System . out . println ( a > b ? \" Alice \" : \" Bob \" ) ; }", "python": "def one_card_poker ( A : int , B : int ) -> str :\n    if A == B :\n        return ' Draw '\n    if A == 1 :\n        return ' Alice '\n    if B == 1 :\n        return ' Bob '\n    if A > B :\n        return ' Alice '\n    return ' Bob '\n"}
{"java": "private static void sport ( String [ ] a ) { int [ ] [ ] dp = new int [ 26 ] [ 26 ] ; boolean [ ] [ ] can = new boolean [ 26 ] [ 26 ] ; int ans = 0 ; for ( String s : a ) { int l = s . charAt ( 0 ) - ' a ' ; int r = s . charAt ( s . length ( ) - 1 ) - ' a ' ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( can [ i ] [ l ] ) { can [ i ] [ r ] = true ; dp [ i ] [ r ] = Math . max ( dp [ i ] [ r ] , dp [ i ] [ l ] + s . length ( ) ) ; } } can [ l ] [ r ] = true ; dp [ l ] [ r ] = Math . max ( dp [ l ] [ r ] , s . length ( ) ) ; } for ( int i = 0 ; i < 26 ; i ++ ) { ans = Math . max ( ans , dp [ i ] [ i ] ) ; } System . out . println ( ans ) ; }", "python": "def ii ( ) : return list ( map ( int , input ( ) . strip ( ) . split ( ) ) )\ndef ist ( ) : return list ( input ( ) . strip ( ) . split ( ) )\nn , = ii ( )\nl = [ [ 0 for i in range ( 26 ) ] for i in range ( 26 ) ]\nfor i in range ( n ) :\n    s = input ( ) . strip ( )\n    a , b = ord ( s [ 0 ] ) - 97 , ord ( s [ - 1 ] ) - 97\n    for j in range ( 26 ) :\n        if l [ j ] [ a ] > 0 :\n            l [ j ] [ b ] = max ( l [ j ] [ a ] + len ( s ) , l [ j ] [ b ] )\n    l [ a ] [ b ] = max ( l [ a ] [ b ] , len ( s ) )\n"}
{"java": "static int findSplTripletsSum ( int a [ ] , int b [ ] , int c [ ] , int p , int q , int r ) { int sum = 0 ; for ( int i = 0 ; i < p ; i ++ ) { for ( int j = 0 ; j < q ; j ++ ) { for ( int k = 0 ; k < r ; k ++ ) { if ( a [ i ] <= b [ j ] && c [ k ] <= b [ j ] ) { sum += ( a [ i ] + b [ j ] ) * ( b [ j ] + c [ k ] ) ; } } } } return sum ; }", "python": "def findSplTripletsSum ( a , b , c , p , q , r ) :\n    summ = 0\n    for i in range ( p ) :\n        for j in range ( q ) :\n            for k in range ( r ) :\n                if ( a [ i ] <= b [ j ] and c [ k ] <= b [ j ] ) :\n                    summ += ( a [ i ] + b [ j ] ) * ( b [ j ] + c [ k ] )\n    return summ\n"}
{"java": "static void printSeriesSum ( int N ) { double sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( i % 2 == 1 ) { sum += ( double ) i / ( i + 1 ) ; } else { sum -= ( double ) i / ( i + 1 ) ; } } System . out . print ( sum + \" \\n \" ) ; }", "python": "def printSeriesSum ( N ) :\n    sum = 0 ;\n    for i in range ( 1 , N + 1 ) :\n        if ( i & 1 ) :\n            sum += i / ( i + 1 ) ;\n        else :\n            sum -= i / ( i + 1 ) ;\n    print ( sum ) ;\n"}
{"java": "static int CountSubSet ( int arr [ ] , int n , int X ) { int N = ( int ) Math . pow ( 2 , n ) ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) if ( arr [ j ] == X ) count += 1 ; } } return count ; }", "python": "def CountSubSet ( arr , n , X ) :\n    N = 2 ** n ;\n    count = 0 ;\n    for i in range ( N ) :\n        for j in range ( n ) :\n            if ( i & ( 1 << j ) ) :\n                if ( arr [ j ] == X ) :\n                    count += 1 ;\n    return count ;\n"}
{"java": "static int sum_of_series ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) result = result - ( int ) Math . pow ( i , 2 ) ; else result = result + ( int ) Math . pow ( i , 2 ) ; } return result ; }", "python": "def sum_of_series ( n ) :\n    result = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( i % 2 == 0 ) :\n            result = result - pow ( i , 2 )\n        else :\n            result = result + pow ( i , 2 )\n    return result\n"}
{"java": "static boolean adjacentSet ( int n ) { int x = ( n & ( n >> 1 ) ) ; if ( x == 1 ) return true ; else return false ; }", "python": "def adjacentSet ( n ) :\n    return ( n & ( n >> 1 ) )\n"}
{"java": "static int maxAbsDiff ( int arr [ ] , int n ) { int minEle = arr [ 0 ] ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minEle = Math . min ( minEle , arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } return ( maxEle - minEle ) ; }", "python": "def maxAbsDiff ( arr , n ) :\n    minEle = arr [ 0 ]\n    maxEle = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        minEle = min ( minEle , arr [ i ] )\n        maxEle = max ( maxEle , arr [ i ] )\n    return ( maxEle - minEle )\n"}
{"java": "static int count_numbers ( int k , int n , boolean flag ) { if ( n == 1 ) { if ( flag ) { return ( k - 1 ) ; } else { return 1 ; } } if ( flag ) return ( k - 1 ) * ( count_numbers ( k , n - 1 , false ) + count_numbers ( k , n - 1 , true ) ) ; else return count_numbers ( k , n - 1 , true ) ; }", "python": "def count_numbers ( k , n , flag ) :\n    if ( n == 1 ) :\n        if ( flag ) :\n            return ( k - 1 )\n        else :\n            return 1\n    if ( flag ) :\n        return ( k - 1 ) * ( count_numbers ( k , n - 1 , 0 ) + count_numbers ( k , n - 1 , 1 ) )\n    else :\n        return count_numbers ( k , n - 1 , 1 )\n"}
{"java": "public static int findMinRec ( int A [ ] , int n ) { if ( n == 1 ) return A [ 0 ] ; return Math . min ( A [ n - 1 ] , findMinRec ( A , n - 1 ) ) ; }", "python": "def findMinRec ( A , n ) :\n    if ( n == 1 ) :\n        return A [ 0 ]\n    return min ( A [ n - 1 ] , findMinRec ( A , n - 1 ) )\n"}
{"java": "static int linearCheck ( int ar [ ] [ ] , int arr [ ] ) { for ( int i = 0 ; i < m ; i ++ ) { boolean matched = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( ar [ i ] [ j ] != arr [ j ] ) { matched = false ; break ; } } if ( matched ) return i + 1 ; } return - 1 ; }", "python": "def linearCheck ( ar , arr ) :\n    for i in range ( m ) :\n        matched = True ;\n        for j in range ( n ) :\n            if ( ar [ i ] [ j ] != arr [ j ] ) :\n                matched = False ;\n                break ;\n        if ( matched ) :\n            return i + 1 ;\n    return - 1 ;\n"}
{"java": "static boolean isCorrectOrder ( int n ) { boolean flag = true ; int prev = - 1 ; int type = - 1 ; while ( n != 0 ) { if ( type == - 1 ) { if ( prev == - 1 ) { prev = n % 10 ; n = n / 10 ; continue ; } if ( prev == n % 10 ) { flag = false ; break ; } if ( prev > n % 10 ) { type = 1 ; prev = n % 10 ; n = n / 10 ; continue ; } prev = n % 10 ; n = n / 10 ; } else { if ( prev == n % 10 ) { flag = false ; break ; } if ( prev < n % 10 ) { flag = false ; break ; } prev = n % 10 ; n = n / 10 ; } } return flag ; }", "python": "def isCorrectOrder ( n ) :\n    flag = True ;\n    prev = - 1 ;\n    type = - 1 ;\n    while ( n != 0 ) :\n        if ( type == - 1 ) :\n            if ( prev == - 1 ) :\n                prev = n % 10 ;\n                n = int ( n / 10 ) ;\n                continue ;\n            if ( prev == n % 10 ) :\n                flag = False ;\n                break ;\n            if ( prev > n % 10 ) :\n                type = 1 ;\n                prev = n % 10 ;\n                n = int ( n / 10 ) ;\n                continue ;\n            prev = n % 10 ;\n            n = int ( n / 10 ) ;\n        else :\n            if ( prev == n % 10 ) :\n                flag = False ;\n                break ;\n            if ( prev < n % 10 ) :\n                flag = False ;\n                break ;\n            prev = n % 10 ;\n            n = int ( n / 10 ) ;\n    return flag ;\n"}
{"java": "static long f ( int n ) { if ( n == 0 ) { return 1 ; } else { return n * f ( n - 1 ) ; } }", "python": "def Factorial ( n ) :\n    fac = 1\n    for i in range ( 1 , n + 1 ) :\n        fac *= i\n    return fac\n"}
{"java": "static int XorSum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) result += arr [ i ] ; } return result ; }", "python": "def XorSum ( arr , n ) :\n    result = 0\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 != 0 ) :\n            result += arr [ i ]\n    return result\n"}
{"java": "public static int [ ] revpos ( int [ ] p , int [ ] q ) { int [ ] vec = { 0 , 0 } ; for ( int i = 0 ; i < vec . length ; i ++ ) { vec [ i ] = p [ i ] - q [ i ] ; } int tmp = 0 ; tmp = vec [ 0 ] ; vec [ 0 ] = vec [ 1 ] ; vec [ 1 ] = - tmp ; int [ ] newpos = { 0 , 0 } ; for ( int i = 0 ; i < newpos . length ; i ++ ) { newpos [ i ] = q [ i ] + vec [ i ] ; } return newpos ; }", "python": "def run ( p1 , p4 ) :\n    v = p4 - p1\n    A = np . array ( [ [ v [ 0 ] , v [ 1 ] ] , [ v [ 1 ] , - v [ 0 ] ] ] )\n    b = np . array ( [ 0 , np . dot ( v , v ) ] )\n    x = np . dot ( np . linalg . inv ( A ) , b )\n    return x + p1\n"}
{"java": "static int findNumber ( int n , int m ) { int num = ( m - 1 ) * 9 + n ; return num ; }", "python": "def findNumber ( n , m ) :\n    num = ( m - 1 ) * 9 + n ;\n    return num ;\n"}
{"java": "public static void breadthexpl ( int now ) { int i , j , hz ; Queue < Integer > que = new ArrayDeque < > ( ) ; que . offer ( now ) ; while ( que . peek ( ) != null ) { hz = que . poll ( ) ; for ( j = 1 ; j <= n ; j ++ ) { if ( graph [ hz ] [ j ] != 0 && check [ j ] == 0 ) { check [ j ] = 2 ; dis [ j ] = dis [ hz ] + 1 ; if ( dis [ hz ] == - 1 && dis [ j ] != - 1 ) dis [ hz ] ++ ; que . offer ( j ) ; } check [ hz ] = 1 ; } } for ( i = 1 ; i <= n ; i ++ ) { if ( check [ i ] == 0 ) dis [ i ] = - 1 ; System . out . println ( i + \" \u2581 \" + dis [ i ] ) ; } }", "python": "def bfs ( adj_list : List [ List [ int ] ] ) -> List [ int ] :\n    n = len ( adj_list )\n    result : List [ int ] = [ sys . maxsize for _ in range ( n ) ]\n    result [ 0 ] = 0\n    queue : deque = deque ( )\n    queue . append ( 0 )\n    while len ( queue ) > 0 :\n        cur = queue . popleft ( )\n        for vertex in adj_list [ cur ] :\n            if result [ cur ] + 1 < result [ vertex ] :\n                result [ vertex ] = result [ cur ] + 1\n                queue . append ( vertex )\n    return result\n"}
{"java": "static int dist ( int x1 , int y1 , int x2 , int y2 ) { if ( x1 > x2 ) { int tmp = x1 ; x1 = x2 ; x2 = tmp ; tmp = y1 ; y1 = y2 ; y2 = tmp ; } if ( y1 < y2 ) { int diag = Math . min ( x2 - x1 , y2 - y1 ) ; x1 += diag ; y1 += diag ; return diag + x2 - x1 + y2 - y1 ; } else { return x2 - x1 + Math . abs ( y2 - y1 ) ; } }", "python": "def get_distance ( pre_x , pre_y , x , y ) :\n    if ( x > pre_x and y > pre_y ) or ( x < pre_x and y < pre_y ) :\n        x_num = abs ( x - pre_x )\n        y_num = abs ( y - pre_y )\n        if x_num >= y_num :\n            return x_num\n        else :\n            return y_num\n    else :\n        return abs ( x - pre_x ) + abs ( y - pre_y )\n"}
{"java": "static int find_k ( int a , int b ) { if ( ( a + b ) % 2 == 0 ) return ( ( a + b ) / 2 ) ; return - 1 ; }", "python": "def find_k ( a , b ) :\n    if ( ( a + b ) % 2 == 0 ) :\n        return ( ( a + b ) // 2 ) ;\n    return - 1 ;\n"}
{"java": "static int inversegrayCode ( int n ) { int inv = 0 ; for ( ; n != 0 ; n = n >> 1 ) inv ^= n ; return inv ; }", "python": "def inversegrayCode ( n ) :\n    inv = 0 ;\n    while ( n ) :\n        inv = inv ^ n ;\n        n = n >> 1 ;\n    return inv ;\n"}
{"java": "private static int next ( int [ ] arr , int target ) { int start = 0 , end = arr . length - 1 ; int ans = - 1 ; while ( start <= end ) { int mid = ( start + end ) / 2 ; if ( arr [ mid ] <= target ) { start = mid + 1 ; } else { ans = mid ; end = mid - 1 ; } } return ans ; }", "python": "def next ( arr , target ) :\n    start = 0 ;\n    end = len ( arr ) - 1 ;\n    ans = - 1 ;\n    while ( start <= end ) :\n        mid = ( start + end ) // 2 ;\n        if ( arr [ mid ] <= target ) :\n            start = mid + 1 ;\n        else :\n            ans = mid ;\n            end = mid - 1 ;\n    return ans ;\n"}
{"java": "static void convert12 ( String str ) { int h1 = ( int ) str . charAt ( 0 ) - '0' ; int h2 = ( int ) str . charAt ( 1 ) - '0' ; int hh = h1 * 10 + h2 ; String Meridien ; if ( hh < 12 ) { Meridien = \" AM \" ; } else Meridien = \" PM \" ; hh %= 12 ; if ( hh == 0 ) { System . out . print ( \"12\" ) ; for ( int i = 2 ; i < 8 ; ++ i ) { System . out . print ( str . charAt ( i ) ) ; } } else { System . out . print ( hh ) ; for ( int i = 2 ; i < 8 ; ++ i ) { System . out . print ( str . charAt ( i ) ) ; } } System . out . println ( \" \u2581 \" + Meridien ) ; }", "python": "def convert12 ( str ) :\n    h1 = ord ( str [ 0 ] ) - ord ( '0' ) ;\n    h2 = ord ( str [ 1 ] ) - ord ( '0' ) ;\n    hh = h1 * 10 + h2 ;\n    Meridien = \" \" ;\n    if ( hh < 12 ) :\n        Meridien = \" AM \" ;\n    else :\n        Meridien = \" PM \" ;\n    hh %= 12 ;\n    if ( hh == 0 ) :\n        print ( \"12\" , end = \" \" ) ;\n        for i in range ( 2 , 8 ) :\n            print ( str [ i ] , end = \" \" ) ;\n    else :\n        print ( hh , end = \" \" ) ;\n        for i in range ( 2 , 8 ) :\n            print ( str [ i ] , end = \" \" ) ;\n    print ( \" \u2581 \" + Meridien ) ;\n"}
{"java": "public static int findRemainder ( int n ) { int x = n & 3 ; return x ; }", "python": "def findRemainder ( n ) :\n    x = n & 3\n    return x\n"}
{"java": "static int exponentMod ( int A , int B , int C ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; long y ; if ( B % 2 == 0 ) { y = exponentMod ( A , B / 2 , C ) ; y = ( y * y ) % C ; } else { y = A % C ; y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C ; } return ( int ) ( ( y + C ) % C ) ; }", "python": "def exponentMod ( A , B , C ) :\n    if ( A == 0 ) :\n        return 0\n    if ( B == 0 ) :\n        return 1\n    y = 0\n    if ( B % 2 == 0 ) :\n        y = exponentMod ( A , B / 2 , C )\n        y = ( y * y ) % C\n    else :\n        y = A % C\n        y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C\n    return ( ( y + C ) % C )\n"}
{"java": "static void printReverseFloyd ( int n ) { int curr_val = n * ( n + 1 ) / 2 ; for ( int i = n ; i >= 1 ; i -- ) { for ( int j = i ; j >= 1 ; j -- ) { System . out . printf ( \" % 2d \u2581 \u2581 \" , curr_val -- ) ; } System . out . println ( \" \" ) ; } }", "python": "def printReverseFloyd ( n ) :\n    curr_val = int ( n * ( n + 1 ) / 2 )\n    for i in range ( n + 1 , 1 , - 1 ) :\n        for j in range ( i , 1 , - 1 ) :\n            print ( curr_val , end = \" \u2581 \u2581 \" )\n            curr_val -= 1\n        print ( \" \" )\n"}
{"java": "static void printOrder ( Integer [ ] arr , int k ) { int n = arr . length ; Arrays . sort ( arr , 0 , k ) ; Arrays . sort ( arr , k , n , Collections . reverseOrder ( ) ) ; }", "python": "def printOrder ( arr , n , k ) :\n    a = arr [ 0 : k ] ;\n    a . sort ( ) ;\n    b = arr [ k : n ] ;\n    b . sort ( ) ;\n    b . reverse ( ) ;\n    return a + b ;\n"}
{"java": "static void findDistinctOddSum ( int n , int k ) { if ( ( k * k ) <= n && ( n + k ) % 2 == 0 ) { int val = 1 ; int sum = 0 ; for ( int i = 1 ; i < k ; i ++ ) { System . out . print ( val + \" \u2581 \" ) ; sum += val ; val += 2 ; } System . out . print ( n - sum + \" \\n \" ) ; } else System . out . print ( \" NO \u2581 \\n \" ) ; }", "python": "def findDistinctOddsumm ( n , k ) :\n    if ( ( k * k ) <= n and ( n + k ) % 2 == 0 ) :\n        val = 1\n        summ = 0\n        for i in range ( 1 , k ) :\n            print ( val , end = \" \u2581 \" )\n            summ += val\n            val += 2\n        print ( n - summ )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static int minimumMoves ( int k , int l , int r ) { int count = r - l + 1 ; if ( count % k == 0 ) return 0 ; return ( k - ( count % k ) ) ; }", "python": "def minimumMoves ( k , l , r ) :\n    count = r - l + 1\n    if ( count % k == 0 ) :\n        return 0\n    return ( k - ( count % k ) )\n"}
{"java": "static String solve ( char X , char Y ) { if ( X < Y ) { return \" < \" ; } else if ( X > Y ) { return \" > \" ; } else { return \" = \" ; } }", "python": "def main ( x , y ) :\n    if x < y :\n        return ' < '\n    elif x > y :\n        return ' > '\n    else :\n        return ' = '\n"}
{"java": "static int countMinSwaps ( String st ) { int min_swaps = 0 ; int odd_0 = 0 , even_0 = 0 ; int odd_1 = 0 , even_1 = 0 ; int n = st . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { if ( st . charAt ( i ) == '1' ) even_1 ++ ; else even_0 ++ ; } else { if ( st . charAt ( i ) == '1' ) odd_1 ++ ; else odd_0 ++ ; } } int cnt_swaps_1 = Math . min ( even_0 , odd_1 ) ; int cnt_swaps_2 = Math . min ( even_1 , odd_0 ) ; return Math . min ( cnt_swaps_1 , cnt_swaps_2 ) ; }", "python": "def countMinSwaps ( st ) :\n    min_swaps = 0\n    odd_0 , even_0 = 0 , 0\n    odd_1 , even_1 = 0 , 0\n    n = len ( st )\n    for i in range ( 0 , n ) :\n        if i % 2 == 0 :\n            if st [ i ] == \"1\" :\n                even_1 += 1\n            else :\n                even_0 += 1\n        else :\n            if st [ i ] == \"1\" :\n                odd_1 += 1\n            else :\n                odd_0 += 1\n    cnt_swaps_1 = min ( even_0 , odd_1 )\n    cnt_swaps_2 = min ( even_1 , odd_0 )\n    return min ( cnt_swaps_1 , cnt_swaps_2 )\n"}
{"java": "static void mySort ( Integer [ ] arr ) { int n = arr . length ; Arrays . sort ( arr , 0 , n / 2 ) ; Arrays . sort ( arr , n / 2 , n ) ; int low = n / 2 , high = n - 1 ; while ( low < high ) { Integer temp = arr [ low ] ; arr [ low ] = arr [ high ] ; arr [ high ] = temp ; low ++ ; high -- ; } }", "python": "def mySort ( arr ) :\n    n = len ( arr ) ;\n    arr1 = arr [ : n // 2 ]\n    arr2 = arr [ n // 2 : ]\n    arr1 . sort ( )\n    arr2 . sort ( )\n    arr = arr1 + arr2\n    low = n // 2 ;\n    high = n - 1 ;\n    while ( low < high ) :\n        temp = arr [ low ] ;\n        arr [ low ] = arr [ high ] ;\n        arr [ high ] = temp ;\n        low += 1 ;\n        high -= 1 ;\n    return arr ;\n"}
{"java": "static void quadrant ( String s ) { int l = s . length ( ) ; int i ; if ( s . contains ( \" + \" ) ) { i = s . indexOf ( ' + ' ) ; } else { i = s . indexOf ( ' - ' ) ; } String real = s . substring ( 0 , i ) ; String imaginary = s . substring ( i + 1 , l - 1 ) ; int x = Integer . valueOf ( real ) ; int y = Integer . valueOf ( imaginary ) ; if ( x > 0 && y > 0 ) System . out . print ( \" Quadrant \u2581 1\" ) ; else if ( x < 0 && y > 0 ) System . out . print ( \" Quadrant \u2581 2\" ) ; else if ( x < 0 && y < 0 ) System . out . print ( \" Quadrant \u2581 3\" ) ; else if ( x > 0 && y < 0 ) System . out . print ( \" Quadrant \u2581 4\" ) ; else if ( x == 0 && y > 0 ) System . out . print ( \" Lies \u2581 on \u2581 positive \" + \" \u2581 Imaginary \u2581 axis \" ) ; else if ( x == 0 && y < 0 ) System . out . print ( \" Lies \u2581 on \u2581 negative \" + \" \u2581 Imaginary \u2581 axis \" ) ; else if ( y == 0 && x < 0 ) System . out . print ( \" Lies \u2581 on \u2581 negative \" + \" \u2581 X - axis \" ) ; else if ( y == 0 && x > 0 ) System . out . print ( \" Lies \u2581 on \u2581 positive \" + \" \u2581 X - axis \" ) ; else System . out . print ( \" Lies \u2581 on \u2581 the \u2581 Origin \" ) ; }", "python": "def quadrant ( s ) :\n    l = len ( s )\n    if ( ' + ' in s ) :\n        i = s . index ( ' + ' )\n    else :\n        i = s . index ( ' - ' )\n    real = s [ 0 : i ]\n    imaginary = s [ i + 1 : l - 1 ]\n    x = int ( real )\n    y = int ( imaginary )\n    if ( x > 0 and y > 0 ) :\n        print ( \" Quadrant \u2581 1\" )\n    elif ( x < 0 and y > 0 ) :\n        print ( \" Quadrant \u2581 2\" )\n    elif ( x < 0 and y < 0 ) :\n        print ( \" Quadrant \u2581 3\" )\n    elif ( x > 0 and y < 0 ) :\n        print ( \" Quadrant \u2581 4\" )\n    elif ( x == 0 and y > 0 ) :\n        print ( \" Lies \u2581 on \u2581 positive \" , \" Imaginary \u2581 axis \" )\n    elif ( x == 0 and y < 0 ) :\n        print ( \" Lies \u2581 on \u2581 negative \" , \" Imaginary \u2581 axis \" )\n    elif ( y == 0 and x < 0 ) :\n        print ( \" Lies \u2581 on \u2581 negative \" , \" X - axis \" )\n    elif ( y == 0 and x > 0 ) :\n        print ( \" Lies \u2581 on \u2581 positive \" , \" X - axis \" )\n    else :\n        print ( \" Lies \u2581 on \u2581 the \u2581 Origin \" )\n"}
{"java": "static int findN ( int k ) { int ans ; if ( k == 0 ) ans = 3 ; if ( k == 1 ) ans = 1 ; else if ( k % 4 == 0 ) ans = k ; else if ( k % 4 == 3 ) ans = k - 1 ; else ans = - 1 ; return ans ; }", "python": "def findN ( k ) :\n    if ( k == 0 ) :\n        ans = 3\n    if ( k == 1 ) :\n        ans = 1\n    elif ( k % 4 == 0 ) :\n        ans = k\n    elif ( k % 4 == 3 ) :\n        ans = k - 1\n    else :\n        ans = - 1\n    return ans\n"}
{"java": "public static void print ( char a [ ] , int n , int ind ) { for ( int i = ind ; i < n + ind ; i ++ ) System . out . print ( a [ ( i % n ) ] + \" \u2581 \" ) ; }", "python": "def prints ( a , n , ind ) :\n    i = ind\n    while i < n + ind :\n        print ( a [ ( i % n ) ] , end = \" \u2581 \" )\n        i = i + 1\n"}
{"java": "static int reduceString ( String s , int l ) { int count = 1 , steps = 0 ; for ( int i = 1 ; i < l ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) count += 1 ; else { steps += ( count / 2 ) ; count = 1 ; } } steps += count / 2 ; return steps ; }", "python": "def reduceString ( s , l ) :\n    count = 1 ;\n    steps = 0 ;\n    for i in range ( 1 , l ) :\n        if ( s [ i ] is s [ i - 1 ] ) :\n            count += 1 ;\n        else :\n            steps += ( int ) ( count / 2 ) ;\n            count = 1 ;\n        steps += ( int ) ( count / 2 ) ;\n    return steps ;\n"}
{"java": "static void swap ( int [ ] array , int i , int j ) { int tmp = array [ i ] ; array [ i ] = array [ j ] ; array [ j ] = tmp ; }", "python": "def solve ( ) :\n    numLocation , totalPeople = map ( int , input ( ) . split ( ) )\n    location = dict ( )\n    for i in range ( numLocation ) :\n        x , y , people = map ( int , input ( ) . split ( ) )\n        r = x * x + y * y\n        if r in location :\n            location [ r ] += people\n        else :\n            location [ r ] = people\n    radius = [ ]\n    for r in location :\n        radius . append ( r )\n    radius . sort ( )\n    for r in radius :\n        totalPeople += location [ r ]\n        if totalPeople >= 1000000 :\n            print ( math . sqrt ( r ) )\n            return\n    print ( \" - 1\" )\n"}
{"java": "static boolean validate ( long n ) { for ( int i = 0 ; i < 10 ; i ++ ) { long temp = n ; int count = 0 ; while ( temp > 0 ) { if ( temp % 10 == i ) count ++ ; if ( count > i ) return false ; temp /= 10 ; } } return true ; }", "python": "def validate ( n ) :\n    for i in range ( 10 ) :\n        temp = n ;\n        count = 0 ;\n        while ( temp ) :\n            if ( temp % 10 == i ) :\n                count += 1 ;\n            if ( count > i ) :\n                return - 1 ;\n            temp //= 10 ;\n    return 1 ;\n"}
{"java": "static boolean find ( String s1 , String s2 ) { int len = s1 . length ( ) , len_1 = s2 . length ( ) ; if ( len != len_1 ) { return false ; } int d [ ] = new int [ len ] ; d [ 0 ] = s2 . charAt ( 0 ) - s1 . charAt ( 0 ) ; for ( int i = 1 ; i < len ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) { return false ; } else { d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ; } } for ( int i = 0 ; i < len - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; }", "python": "def find ( s1 , s2 ) :\n    len__ = len ( s1 )\n    len_1 = len ( s2 )\n    if ( len__ != len_1 ) :\n        return False\n    d = [ 0 for i in range ( len__ ) ]\n    d [ 0 ] = ord ( s2 [ 0 ] ) - ord ( s1 [ 0 ] )\n    for i in range ( 1 , len__ , 1 ) :\n        if ( s1 [ i ] > s2 [ i ] ) :\n            return False\n        else :\n            d [ i ] = ord ( s2 [ i ] ) - ord ( s1 [ i ] )\n    for i in range ( len__ - 1 ) :\n        if ( d [ i ] < d [ i + 1 ] ) :\n            return False\n    return True\n"}
{"java": "static void swap ( int a , int b , int c , int d ) { a = a + b ; b = a - b ; a = a - b ; b = b + c ; c = b - c ; b = b - c ; c = c + d ; d = c - d ; c = c - d ; System . out . println ( \" values \u2581 after \u2581 \" + \" swapping \u2581 are \u2581 : \u2581 \" ) ; System . out . println ( \" a \u2581 = \u2581 \" + a ) ; System . out . println ( \" b \u2581 = \u2581 \" + b ) ; System . out . println ( \" c \u2581 = \u2581 \" + c ) ; System . out . println ( \" d \u2581 = \u2581 \" + d ) ; }", "python": "def swap ( a , b , c , d ) :\n    a = a + b\n    b = a - b\n    a = a - b\n    b = b + c\n    c = b - c\n    b = b - c\n    c = c + d\n    d = c - d\n    c = c - d\n    print ( \" values \u2581 after \u2581 swapping \u2581 are \u2581 : \u2581 \" )\n    print ( \" a \u2581 = \u2581 \" , a )\n    print ( \" b \u2581 = \u2581 \" , b )\n    print ( \" c \u2581 = \u2581 \" , c )\n    print ( \" d \u2581 = \u2581 \" , d )\n"}
{"java": "static int findS ( int s ) { int l = 1 , r = ( s / 2 ) + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) return mid ; else if ( sum > s ) r = mid - 1 ; else l = mid + 1 ; } return - 1 ; }", "python": "def findS ( s ) :\n    l = 1\n    r = int ( s / 2 ) + 1\n    while ( l <= r ) :\n        mid = int ( ( l + r ) / 2 )\n        sum = int ( mid * ( mid + 1 ) / 2 )\n        if ( sum == s ) :\n            return mid\n        elif ( sum > s ) :\n            r = mid - 1\n        else :\n            l = mid + 1\n    return - 1\n"}
{"java": "static float harmonicMean ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( float ) 1 / arr [ i ] ; return ( float ) n / sum ; }", "python": "def harmonicMean ( arr , n ) :\n    sm = 0\n    for i in range ( 0 , n ) :\n        sm = sm + ( 1 ) / arr [ i ] ;\n    return n / sm\n"}
{"java": "static long calculateSum ( int n , int k ) { long res = 1 ; long MOD = 1000000007 ; for ( int i = 0 ; i < k ; i ++ ) { res = ( res * n ) % MOD ; } return res ; }", "python": "def calculateSum ( n , k ) :\n    res = 1\n    MOD = 1000000007\n    for i in range ( 0 , k ) :\n        res = ( res * n ) % MOD\n    return res\n"}
{"java": "static void reverse ( String k ) { Stack < String > s = new Stack < > ( ) ; String [ ] token = k . split ( \" \u2581 \" ) ; for ( int i = 0 ; i < token . length ; i ++ ) { s . push ( token [ i ] ) ; } while ( ! s . empty ( ) ) { System . out . print ( s . peek ( ) + \" \u2581 \" ) ; s . pop ( ) ; } }", "python": "def reverse ( k ) :\n    s = [ ]\n    token = k . split ( )\n    for word in token :\n        s . append ( word ) ;\n    while ( len ( s ) ) :\n        print ( s . pop ( ) , end = \" \u2581 \" ) ;\n"}
{"java": "static void printCollatz ( int n ) { while ( n != 1 ) { System . out . print ( n + \" \u2581 \" ) ; if ( ( n & 1 ) == 1 ) n = 3 * n + 1 ; else n = n / 2 ; } System . out . print ( n ) ; }", "python": "def printCollatz ( n ) :\n    while n != 1 :\n        print ( n , end = ' \u2581 ' )\n        if n & 1 :\n            n = 3 * n + 1\n        else :\n            n = n // 2\n    print ( n )\n"}
{"java": "static double findHypotenuse ( double side1 , double side2 ) { double h = Math . sqrt ( ( side1 * side1 ) + ( side2 * side2 ) ) ; return h ; }", "python": "def findHypotenuse ( side1 , side2 ) :\n    h = ( ( ( side1 * side1 ) + ( side2 * side2 ) ) ** ( 1 / 2 ) ) ;\n    return h ;\n"}
{"java": "static int largestNumber ( int n ) { String s = \" \" ; int duplicate = n ; while ( n > 0 ) { s = ( char ) ( n % 10 + 48 ) + s ; n /= 10 ; } int index = - 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ( ( ( int ) ( s . charAt ( i ) - '0' ) % 2 ) & 1 ) > 0 ) { index = i ; break ; } } if ( index == - 1 ) return duplicate ; int num = 0 ; for ( int i = 0 ; i < index ; i ++ ) num = num * 10 + ( int ) ( s . charAt ( i ) - '0' ) ; num = num * 10 + ( ( int ) s . charAt ( index ) - ( int ) ( '0' ) - 1 ) ; for ( int i = index + 1 ; i < s . length ( ) ; i ++ ) num = num * 10 + 8 ; return num ; }", "python": "def largestNumber ( n ) :\n    s = \" \"\n    duplicate = n\n    while ( n > 0 ) :\n        s = chr ( n % 10 + 48 ) + s\n        n = n // 10\n    index = - 1\n    for i in range ( len ( s ) ) :\n        if ( ( ord ( s [ i ] ) - ord ( '0' ) ) % 2 & 1 ) :\n            index = i\n            break\n    if ( index == - 1 ) :\n        return duplicate\n    num = 0\n    for i in range ( index ) :\n        num = num * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )\n    num = num * 10 + ( ord ( s [ index ] ) - ord ( '0' ) - 1 )\n    for i in range ( index + 1 , len ( s ) ) :\n        num = num * 10 + 8\n    return num\n"}
{"java": "static int largestNumber ( int n ) { String s = \" \" ; int duplicate = n ; while ( n > 0 ) { s = ( char ) ( n % 10 + 48 ) + s ; n /= 10 ; } int index = - 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ( ( int ) ( s . charAt ( i ) - '0' ) % 2 & 1 ) == 0 ) { index = i ; break ; } } if ( index == - 1 ) return duplicate ; int num = 0 ; for ( int i = 0 ; i < index ; i ++ ) num = num * 10 + ( int ) ( s . charAt ( i ) - '0' ) ; num = num * 10 + ( ( int ) s . charAt ( index ) - ( int ) ( '0' ) - 1 ) ; for ( int i = index + 1 ; i < s . length ( ) ; i ++ ) num = num * 10 + 9 ; return num ; }", "python": "def largestNumber ( n ) :\n    s = \" \"\n    duplicate = n\n    while ( n ) :\n        s = chr ( n % 10 + 48 ) + s\n        n //= 10\n    index = - 1\n    for i in range ( len ( s ) ) :\n        if ( ( ( ord ( s [ i ] ) - ord ( '0' ) ) % 2 & 1 ) == 0 ) :\n            index = i\n            break\n    if ( index == - 1 ) :\n        return duplicate\n    num = 0\n    for i in range ( index ) :\n        num = num * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )\n    num = num * 10 + ( ord ( s [ index ] ) - ord ( '0' ) - 1 )\n    for i in range ( index + 1 , len ( s ) ) :\n        num = num * 10 + 9\n    return num\n"}
{"java": "public static int countZeroso ( int [ ] a , int n ) { int count2 = 0 , count5 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( a [ i ] % 2 == 0 ) { a [ i ] = a [ i ] / 2 ; count2 ++ ; } while ( a [ i ] % 5 == 0 ) { a [ i ] = a [ i ] / 5 ; count5 ++ ; } } return ( count2 < count5 ) ? count2 : count5 ; }", "python": "def countZeros ( a , n ) :\n    count2 = 0\n    count5 = 0\n    for i in range ( 0 , n ) :\n        while ( a [ i ] % 2 == 0 ) :\n            a [ i ] = a [ i ] // 2\n            count2 = count2 + 1\n        while ( a [ i ] % 5 == 0 ) :\n            a [ i ] = a [ i ] // 5\n            count5 = count5 + 1\n    if ( count2 < count5 ) :\n        return count2\n    else :\n        return count5\n"}
{"java": "static boolean hasCrest ( int arr [ ] , int n , int L , int R ) { int [ ] present = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { present [ i ] = 0 ; } for ( int i = 1 ; i <= n - 2 ; i ++ ) { if ( ( arr [ i ] <= arr [ i + 1 ] ) && ( arr [ i ] <= arr [ i - 1 ] ) ) { present [ i ] = 1 ; } } for ( int i = 1 ; i < n ; i ++ ) { present [ i ] += present [ i - 1 ] ; } if ( present [ L ] == present [ R - 1 ] ) return true ; return false ; }", "python": "def hasCrest ( arr , n , L , R ) :\n    present = [ 0 ] * n ;\n    for i in range ( 1 , n - 2 + 1 ) :\n        if ( ( arr [ i ] <= arr [ i + 1 ] ) and ( arr [ i ] <= arr [ i - 1 ] ) ) :\n            present [ i ] = 1 ;\n    for i in range ( 1 , n ) :\n        present [ i ] += present [ i - 1 ] ;\n    if ( present [ L ] == present [ R - 1 ] ) :\n        return True ;\n    return False ;\n"}
{"java": "static boolean check ( int arr [ ] , int x , int n ) { long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double y = Math . sqrt ( arr [ i ] ) ; if ( Math . floor ( y ) == Math . ceil ( y ) ) { sum += arr [ i ] ; } } if ( sum % x == 0 ) return true ; else return false ; }", "python": "def check ( a , y ) :\n    sum = 0\n    for i in range ( len ( a ) ) :\n        x = math . sqrt ( a [ i ] )\n        if ( math . floor ( x ) == math . ceil ( x ) ) :\n            sum = sum + a [ i ]\n    if ( sum % y == 0 ) :\n        return True\n    else :\n        return False\n"}
{"java": "static int minOperation ( String str , int len ) { int first [ ] = new int [ MAX ] ; int last [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { first [ i ] = - 1 ; last [ i ] = - 1 ; } for ( int i = 0 ; i < len ; i ++ ) { int index = ( str . charAt ( i ) - ' a ' ) ; if ( first [ index ] == - 1 ) first [ index ] = i ; last [ index ] = i ; } int minOp = - 1 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( first [ i ] == - 1 || first [ i ] == last [ i ] ) continue ; int cnt = len - ( last [ i ] - first [ i ] + 1 ) ; if ( minOp == - 1 || cnt < minOp ) minOp = cnt ; } return minOp ; }", "python": "def minOperation ( str , len ) :\n    first , last = [ 0 ] * MAX , [ 0 ] * MAX ;\n    for i in range ( MAX ) :\n        first [ i ] = - 1 ;\n        last [ i ] = - 1 ;\n    for i in range ( len ) :\n        index = ( ord ( str [ i ] ) - ord ( ' a ' ) ) ;\n        if ( first [ index ] == - 1 ) :\n            first [ index ] = i ;\n        last [ index ] = i ;\n    minOp = - 1 ;\n    for i in range ( MAX ) :\n        if ( first [ i ] == - 1 or first [ i ] == last [ i ] ) :\n            continue ;\n        cnt = len - ( last [ i ] - first [ i ] + 1 ) ;\n        if ( minOp == - 1 or cnt < minOp ) :\n            minOp = cnt ;\n    return minOp ;\n"}
{"java": "public static void solution ( int m , int n ) { if ( m <= 2 && n <= 2 ) { System . out . println ( \" YES \" ) ; } else if ( m == 1 || n == 1 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }", "python": "def solve ( n , m ) :\n    if n == 1 or m == 1 or n == m == 2 :\n        return \" YES \"\n    else :\n        return \" NO \"\n"}
{"java": "static int TotalWays ( int n , int s , int k ) { int [ ] dp = new int [ n ] ; dp [ s - 1 ] = 1 ; for ( int i = s ; i < n ; i ++ ) { int idx = Math . max ( s - 1 , i - k ) ; for ( int j = idx ; j < i ; j ++ ) { dp [ i ] += dp [ j ] ; } } return dp [ n - 1 ] ; }", "python": "def TotalWays ( n , s , k ) :\n    dp = [ 0 ] * n\n    dp [ s - 1 ] = 1\n    for i in range ( s , n ) :\n        idx = max ( s - 1 , i - k )\n        for j in range ( idx , i ) :\n            dp [ i ] += dp [ j ]\n    return dp [ n - 1 ]\n"}
{"java": "static void perfectSquares ( int l , int r ) { for ( int i = l ; i <= r ; i ++ ) { if ( Math . sqrt ( i ) == ( int ) Math . sqrt ( i ) ) System . out . print ( i + \" \u2581 \" ) ; } }", "python": "def perfectSquares ( l , r ) :\n    for i in range ( l , r + 1 ) :\n        if ( i ** ( .5 ) == int ( i ** ( .5 ) ) ) :\n            print ( i , end = \" \u2581 \" )\n"}
{"java": "static boolean isRectangle ( int a , int b , int c , int d ) { if ( ( a ^ b ^ c ^ d ) != 0 ) return false ; else return true ; }", "python": "def isRectangle ( a , b , c , d ) :\n    if a ^ b ^ c ^ d :\n        return False\n    return True\n"}
{"java": "static float rainDayProbability ( int a [ ] , int n ) { float count = 0 , m ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) count ++ ; } m = count / n ; return m ; }", "python": "def rainDayProbability ( a , n ) :\n    count = a . count ( 1 )\n    m = count / n\n    return m\n"}
{"java": "static int countX ( int a , int b ) { if ( b > a ) return 0 ; else if ( a == b ) return - 1 ; else { int x = a - b , ans = 0 ; for ( int i = 1 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int d1 = i , d2 = b - 1 ; if ( i * i != x ) d2 = x / i ; if ( d1 > b ) ans ++ ; if ( d2 > b ) ans ++ ; } } return ans ; } }", "python": "def countX ( a , b ) :\n    if ( b > a ) :\n        return 0\n    elif ( a == b ) :\n        return - 1\n    else :\n        x = a - b\n        ans = 0\n        i = 1\n        while i * i <= x :\n            if ( x % i == 0 ) :\n                d1 = i\n                d2 = b - 1\n                if ( i * i != x ) :\n                    d2 = x // i\n                if ( d1 > b ) :\n                    ans += 1\n                if ( d2 > b ) :\n                    ans += 1\n            i += 1\n        return ans\n"}
{"java": "static String toNegativeBase ( int n , int negBase ) { if ( n == 0 ) return \"0\" ; String converted = \" \" ; while ( n != 0 ) { int remainder = n % negBase ; n /= negBase ; if ( remainder < 0 ) { remainder += ( - negBase ) ; n += 1 ; } converted = String . valueOf ( remainder ) + converted ; } return converted ; }", "python": "def toNegativeBase ( n , negBase ) :\n    if ( n == 0 ) :\n        return \"0\"\n    converted = \"01\"\n    while ( n != 0 ) :\n        remainder = n % ( negBase )\n        n = int ( n / negBase )\n        if ( remainder < 0 ) :\n            remainder += ( ( - 1 ) * negBase )\n            n += 1\n        converted = str ( remainder ) + converted\n    return converted\n"}
{"java": "static int onesComplement ( int n ) { int number_of_bits = ( int ) ( Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ) + 1 ; return ( ( 1 << number_of_bits ) - 1 ) ^ n ; }", "python": "def onesComplement ( n ) :\n    number_of_bits = ( int ) ( math . floor ( math . log ( n ) / math . log ( 2 ) ) ) + 1 ;\n    return ( ( 1 << number_of_bits ) - 1 ) ^ n ;\n"}
{"java": "static int findMinDifference ( int arr [ ] , int n ) { int min , secondMin , max , secondMax ; min = secondMax = ( arr [ 0 ] < arr [ 1 ] ) ? arr [ 0 ] : arr [ 1 ] ; max = secondMin = ( arr [ 0 ] < arr [ 1 ] ) ? arr [ 1 ] : arr [ 0 ] ; for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { secondMax = max ; max = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } else if ( arr [ i ] < min ) { secondMin = min ; min = arr [ i ] ; } else if ( arr [ i ] < secondMin ) { secondMin = arr [ i ] ; } } int diff = Math . min ( max - secondMin , secondMax - min ) ; return diff ; }", "python": "def findMinDifference ( arr , n ) :\n    if ( arr [ 0 ] < arr [ 1 ] ) :\n        min__ = secondMax = arr [ 0 ]\n    else :\n        min__ = secondMax = arr [ 1 ]\n    if ( arr [ 0 ] < arr [ 1 ] ) :\n        max__ = secondMin = arr [ 1 ]\n    else :\n        max__ = secondMin = arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if ( arr [ i ] > max__ ) :\n            secondMax = max__\n            max__ = arr [ i ]\n        elif ( arr [ i ] > secondMax ) :\n            secondMax = arr [ i ]\n        elif ( arr [ i ] < min__ ) :\n            secondMin = min__\n            min__ = arr [ i ]\n        elif ( arr [ i ] < secondMin ) :\n            secondMin = arr [ i ]\n    diff = min ( max__ - secondMin , secondMax - min__ )\n    return diff\n"}
{"java": "static String revAlternateK ( String s , int k , int len ) { for ( int i = 0 ; i < s . length ( ) ; ) { if ( i + k > len ) break ; s = s . substring ( 0 , i ) + new String ( new StringBuilder ( s . substring ( i , i + k ) ) . reverse ( ) ) + s . substring ( i + k ) ; i += 2 * k ; } return s ; }", "python": "def revAlternateK ( s , k , Len ) :\n    i = 0\n    while ( i < len ( s ) ) :\n        if ( i + k > Len ) :\n            break\n        ss = s [ i : i + k ]\n        s = s [ : i ] + ss [ : : - 1 ] + s [ i + k : ]\n        i += 2 * k\n    return s ;\n"}
{"java": "static void interchangeDiagonals ( int array [ ] [ ] ) { for ( int i = 0 ; i < N ; ++ i ) if ( i != N / 2 ) { int temp = array [ i ] [ i ] ; array [ i ] [ i ] = array [ i ] [ N - i - 1 ] ; array [ i ] [ N - i - 1 ] = temp ; } for ( int i = 0 ; i < N ; ++ i ) { for ( int j = 0 ; j < N ; ++ j ) System . out . print ( array [ i ] [ j ] + \" \u2581 \" ) ; System . out . println ( ) ; } }", "python": "def interchangeDiagonals ( array ) :\n    for i in range ( N ) :\n        if ( i != N / 2 ) :\n            temp = array [ i ] [ i ] ;\n            array [ i ] [ i ] = array [ i ] [ N - i - 1 ] ;\n            array [ i ] [ N - i - 1 ] = temp ;\n    for i in range ( N ) :\n        for j in range ( N ) :\n            print ( array [ i ] [ j ] , end = \" \u2581 \" ) ;\n        print ( ) ;\n"}
{"java": "static void subsetBitwiseORk ( int arr [ ] , int n , int k ) { ArrayList < Integer > v = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] | k ) == k ) { v . add ( arr [ i ] ) ; } } int ans = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) ans = ans | v . get ( i ) ; if ( ans != k ) { System . out . println ( \" Subset \u2581 does \" + \" \u2581 not \u2581 exist \" ) ; return ; } for ( int i = 0 ; i < v . size ( ) ; i ++ ) System . out . print ( v . get ( i ) + \" \u2581 \" ) ; }", "python": "def subsetBitwiseORk ( arr , n , k ) :\n    v = [ ]\n    for i in range ( 0 , n ) :\n        if ( ( arr [ i ] | k ) == k ) :\n            v . append ( arr [ i ] )\n    ans = 0\n    for i in range ( 0 , len ( v ) ) :\n        ans |= v [ i ]\n    if ( ans != k ) :\n        print ( \" Subset \u2581 does \u2581 not \u2581 exist \\n \" )\n        return\n    for i in range ( 0 , len ( v ) ) :\n        print ( \" { } \u2581 \" . format ( v [ i ] ) , end = \" \" )\n"}
{"java": "static int countSticks ( String str , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cnt += ( sticks [ str . charAt ( i ) - '0' ] ) ; } return cnt ; }", "python": "def countSticks ( string , n ) :\n    cnt = 0 ;\n    for i in range ( n ) :\n        cnt += ( sticks [ ord ( string [ i ] ) - ord ( '0' ) ] ) ;\n    return cnt ;\n"}
{"java": "static void shortestLength ( int n , int x [ ] , int y [ ] ) { int answer = 0 ; int i = 0 ; while ( n != 0 && i < x . length ) { if ( x [ i ] + y [ i ] > answer ) answer = x [ i ] + y [ i ] ; i ++ ; } System . out . println ( \" Length \u2581 - > \u2581 \" + answer ) ; System . out . println ( \" Path \u2581 - > \u2581 \" + \" ( \u2581 1 , \u2581 \" + answer + \" \u2581 ) \" + \" and \u2581 ( \u2581 \" + answer + \" , \u2581 1 \u2581 ) \" ) ; }", "python": "def shortestLength ( n , x , y ) :\n    answer = 0\n    i = 0\n    while n > 0 :\n        if ( x [ i ] + y [ i ] > answer ) :\n            answer = x [ i ] + y [ i ]\n        i += 1\n        n -= 1\n    print ( \" Length \u2581 - > \u2581 \" + str ( answer ) )\n    print ( \" Path \u2581 - > \u2581 \" + \" ( \u2581 1 , \u2581 \" + str ( answer ) + \" \u2581 ) \" + \" and \u2581 ( \u2581 \" + str ( answer ) + \" , \u2581 1 \u2581 ) \" )\n"}
{"java": "static int isPowerOf2 ( String s ) { char [ ] str = s . toCharArray ( ) ; int len_str = s . length ( ) ; int num = 0 ; if ( len_str == 1 && str [ len_str - 1 ] == '1' ) return 0 ; while ( len_str != 1 || str [ len_str - 1 ] != '1' ) { if ( ( str [ len_str - 1 ] - '0' ) % 2 == 1 ) return 0 ; int j = 0 ; for ( int i = 0 ; i < len_str ; i ++ ) { num = num * 10 + ( int ) str [ i ] - ( int ) '0' ; if ( num < 2 ) { if ( i != 0 ) str [ j ++ ] = '0' ; continue ; } str [ j ++ ] = ( char ) ( ( int ) ( num / 2 ) + ( int ) '0' ) ; num = ( num ) - ( num / 2 ) * 2 ; } str [ j ] = ' \\ 0' ; len_str = j ; } return 1 ; }", "python": "def isPowerOf2 ( sttr ) :\n    len_str = len ( sttr ) ;\n    sttr = list ( sttr ) ;\n    num = 0 ;\n    if ( len_str == 1 and sttr [ len_str - 1 ] == '1' ) :\n        return 0 ;\n    while ( len_str != 1 or sttr [ len_str - 1 ] != '1' ) :\n        if ( ( ord ( sttr [ len_str - 1 ] ) - ord ( '0' ) ) % 2 == 1 ) :\n            return 0 ;\n        j = 0 ;\n        for i in range ( len_str ) :\n            num = num * 10 + ( ord ( sttr [ i ] ) - ord ( '0' ) ) ;\n            if ( num < 2 ) :\n                if ( i != 0 ) :\n                    sttr [ j ] = '0' ;\n                    j += 1 ;\n                continue ;\n            sttr [ j ] = chr ( ( num // 2 ) + ord ( '0' ) ) ;\n            j += 1 ;\n            num = ( num ) - ( num // 2 ) * 2 ;\n        len_str = j ;\n    return 1 ;\n"}
{"java": "public static void tinh ( ) { int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] A = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int [ ] B = new int [ n + 1 ] ; int k = 0 ; int dem = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( A [ i ] <= t ) { dem ++ ; } else { B [ k ] = dem ; dem = 0 ; k ++ ; } if ( i == n - 1 ) { B [ k ] = dem ; dem = 0 ; k ++ ; } } int dem1 = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( B [ i ] >= c ) { if ( B [ i ] == c ) { dem1 = dem1 + 1 ; } else { dem1 = dem1 + 1 + Math . abs ( B [ i ] - c ) ; } } } System . out . println ( dem1 ) ; }", "python": "def Solve ( ) :\n    n , t , c = list ( map ( int , input ( ) . split ( ) ) )\n    a = list ( map ( int , input ( ) . split ( ) ) )\n    s = \" \" . join ( list ( map ( lambda x : \"1\" if x <= t else \"0\" , a ) ) ) . split ( \"0\" )\n    ans = 0\n    for i in s :\n        if len ( i ) >= c :\n            ans += len ( i ) - ( c - 1 )\n    print ( ans )\n"}
{"java": "static int solve ( int [ ] arr , int n ) { int k = arr . length ; int mp [ ] = new int [ n + 2 ] ; for ( int i = 0 ; i <= n ; i ++ ) { mp [ i ] = 0 ; } for ( int i = 0 ; i < k ; i ++ ) { mp [ arr [ i ] ] = 1 ; } int leftSegment = arr [ 0 ] - 1 ; for ( int i = 1 ; i < k ; i ++ ) { leftSegment = Math . max ( leftSegment , arr [ i ] - arr [ i - 1 ] - 1 ) ; } int rightSegment = n - arr [ k - 1 ] ; int maxSegment = Math . max ( leftSegment , rightSegment ) ; int tim ; if ( ( maxSegment & 1 ) == 1 ) tim = ( maxSegment / 2 ) + 1 ; else tim = maxSegment / 2 ; return tim ; }", "python": "def solve ( arr , n ) :\n    k = len ( arr )\n    mp = [ False for i in range ( n + 2 ) ]\n    for i in range ( k ) :\n        mp [ arr [ i ] ] = True\n    leftSegment = arr [ 0 ] - 1\n    for i in range ( 1 , k ) :\n        leftSegment = max ( leftSegment , arr [ i ] - arr [ i - 1 ] - 1 )\n    rightSegment = n - arr [ k - 1 ]\n    maxSegment = max ( leftSegment , rightSegment ) ;\n    tim = 0\n    if ( maxSegment & 1 ) :\n        tim = ( maxSegment // 2 ) + 1\n    else :\n        tim = maxSegment // 2\n    return tim\n"}
{"java": "public static void sortSquares ( int arr [ ] ) { int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] * arr [ i ] ; Arrays . sort ( arr ) ; }", "python": "def sortSquare ( arr , n ) :\n    for i in range ( n ) :\n        arr [ i ] = arr [ i ] * arr [ i ]\n    arr . sort ( )\n"}
{"java": "public static int countOccurence ( int n , int [ ] arr , int k ) { int cnt , ans = 0 ; HashMap < Integer , Boolean > hash = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { cnt = 0 ; if ( hash . get ( arr [ i ] ) != null && hash . get ( arr [ i ] ) == true ) continue ; hash . put ( arr [ i ] , true ) ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] == arr [ i ] ) cnt ++ ; if ( cnt >= k ) break ; } if ( cnt >= k ) ans ++ ; } return ans ; }", "python": "def countOccurrence ( n , arr , k ) :\n    cnt , ans = 0 , 0\n    Hash = dict ( )\n    for i in range ( n ) :\n        cnt = 0\n        if ( arr [ i ] in Hash . keys ( ) ) :\n            continue\n        Hash [ arr [ i ] ] = 1\n        for j in range ( i + 1 , n ) :\n            if ( arr [ j ] == arr [ i ] ) :\n                cnt += 1\n            if ( cnt >= k ) :\n                break\n        if ( cnt >= k ) :\n            ans += 1\n    return ans\n"}
{"java": "public static void doIt ( ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] bydol = new int [ n ] [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { sc . nextLine ( ) ; sc . nextLine ( ) ; bydol [ i ] [ C ] = sc . nextInt ( ) ; bydol [ i ] [ V ] = sc . nextInt ( ) ; bydol [ i ] [ D ] = sc . nextInt ( ) ; bydol [ i ] [ L ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 1 ; i <= 3 ; i ++ ) { int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ; for ( int j = 1 ; j < n + 1 ; j ++ ) { for ( int k = 1 ; k < m + 1 ; k ++ ) { dp [ j ] [ k ] = dp [ j - 1 ] [ k ] ; for ( int l = 1 ; l * bydol [ j - 1 ] [ C ] <= k ; l ++ ) { dp [ j ] [ k ] = Math . max ( dp [ j ] [ k ] , dp [ j - 1 ] [ k - l * bydol [ j - 1 ] [ C ] ] + l * bydol [ j - 1 ] [ i ] ) ; } } } if ( max < dp [ n ] [ m ] ) { max = dp [ n ] [ m ] ; } } System . out . println ( max ) ; } }", "python": "def max_param ( params ) :\n    dp = [ 0 ] * ( m + 1 )\n    for i in range ( n ) :\n        c = costs [ i ]\n        p = params [ i ]\n        for j in range ( m - c + 1 ) :\n            dp [ j + c ] = max ( dp [ j + c ] , dp [ j ] + p )\n    return dp [ - 1 ]\n"}
{"java": "static int findNthTerm ( int x , int y , int n ) { int [ ] f = new int [ 6 ] ; f [ 0 ] = x ; f [ 1 ] = y ; for ( int i = 2 ; i <= 5 ; i ++ ) f [ i ] = f [ i - 1 ] - f [ i - 2 ] ; return f [ n % 6 ] ; }", "python": "def findNthTerm ( x , y , n ) :\n    f = [ 0 ] * 6\n    f [ 0 ] = x\n    f [ 1 ] = y\n    for i in range ( 2 , 6 ) :\n        f [ i ] = f [ i - 1 ] - f [ i - 2 ]\n    return f [ n % 6 ]\n"}
{"java": "public static int find_value ( int a [ ] , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum % k ; }", "python": "def find_value ( a , n , k ) :\n    sum = 0\n    for i in range ( n ) :\n        sum += a [ i ]\n    return sum % k\n"}
{"java": "static void compute ( long S , long X ) { long A = ( S - X ) / 2 ; int a = 0 , b = 0 ; final int LONG_FIELD_SIZE = 8 ; for ( int i = 0 ; i < 8 * LONG_FIELD_SIZE ; i ++ ) { long Xi = ( X & ( 1 << i ) ) ; long Ai = ( A & ( 1 << i ) ) ; if ( Xi == 0 && Ai == 0 ) { } else if ( Xi == 0 && Ai > 0 ) { a = ( ( 1 << i ) | a ) ; b = ( ( 1 << i ) | b ) ; } else if ( Xi > 0 && Ai == 0 ) { a = ( ( 1 << i ) | a ) ; } else { System . out . println ( \" Not \u2581 Possible \" ) ; return ; } } System . out . println ( \" a \u2581 = \u2581 \" + a + \" \\n b \u2581 = \u2581 \" + b ) ; }", "python": "def compute ( S , X ) :\n    A = ( S - X ) // 2\n    a = 0\n    b = 0\n    for i in range ( 64 ) :\n        Xi = ( X & ( 1 << i ) )\n        Ai = ( A & ( 1 << i ) )\n        if ( Xi == 0 and Ai == 0 ) :\n            pass\n        elif ( Xi == 0 and Ai > 0 ) :\n            a = ( ( 1 << i ) | a )\n            b = ( ( 1 << i ) | b )\n        elif ( Xi > 0 and Ai == 0 ) :\n            a = ( ( 1 << i ) | a )\n        else :\n            print ( \" Not \u2581 Possible \" )\n            return\n    print ( \" a \u2581 = \u2581 \" , a )\n    print ( \" b \u2581 = \" , b )\n"}
{"java": "static boolean isequal ( String str ) { int n = str . length ( ) ; int num = 0 , x = 1 , i = n - 1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { if ( '0' <= str . charAt ( i ) && str . charAt ( i ) <= '9' ) { num = ( str . charAt ( i ) - '0' ) * x + num ; x = x * 10 ; if ( num >= n ) return false ; } else break ; } return num == i + 1 ; }", "python": "def isequal ( str ) :\n    n = len ( str )\n    num = 0\n    x = 1\n    i = n - 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( '0' <= str [ i ] and str [ i ] <= '9' ) :\n            num = ( ord ( str [ i ] ) - ord ( '0' ) ) * x + num\n            x = x * 10\n            if ( num >= n ) :\n                return false\n        else :\n            break\n    return num == i + 1\n"}
{"java": "static Boolean isPentagonal ( int N ) { int i = 1 , M ; do { M = ( 3 * i * i - i ) / 2 ; i += 1 ; } while ( M < N ) ; return ( M == N ) ; }", "python": "def isPentagonal ( N ) :\n    i = 1\n    while True :\n        M = ( 3 * i * i - i ) / 2\n        i += 1\n        if ( M >= N ) :\n            break\n    return ( M == N )\n"}
{"java": "static void indexedSequentialSearch ( int arr [ ] , int n , int k ) { int elements [ ] = new int [ 20 ] ; int indices [ ] = new int [ 20 ] ; int temp , i ; int j = 0 , ind = 0 , start = 0 , end = 0 ; for ( i = 0 ; i < n ; i += 3 ) { elements [ ind ] = arr [ i ] ; indices [ ind ] = i ; ind ++ ; } if ( k < elements [ 0 ] ) { System . out . println ( \" Not \u2581 found \" ) ; return ; } else { for ( i = 1 ; i <= ind ; i ++ ) if ( k < elements [ i ] ) { start = indices [ i - 1 ] ; end = indices [ i ] ; break ; } } for ( i = start ; i <= end ; i ++ ) { if ( k == arr [ i ] ) { j = 1 ; break ; } } if ( j == 1 ) System . out . println ( \" Found \u2581 at \u2581 index \u2581 \" + i ) ; else System . out . println ( \" Not \u2581 found \" ) ; }", "python": "def indexedSequentialSearch ( arr , n , k ) :\n    elements = [ 0 ] * 20\n    indices = [ 0 ] * 20\n    j , ind = 0 , 0\n    for i in range ( 0 , n , 3 ) :\n        elements [ ind ] = arr [ i ]\n        indices [ ind ] = i\n        ind += 1\n    if k < elements [ 0 ] :\n        print ( \" Not \u2581 found \" )\n        exit ( 0 )\n    else :\n        for i in range ( 1 , ind + 1 ) :\n            if k < elements [ i ] :\n                start = indices [ i - 1 ]\n                end = indices [ i ]\n                break\n    for i in range ( start , end + 1 ) :\n        if k == arr [ i ] :\n            j = 1\n            break\n    if j == 1 :\n        print ( \" Found \u2581 at \u2581 index \" , i )\n    else :\n        print ( \" Not \u2581 found \" )\n"}
{"java": "static void checkArray ( int a [ ] , int b [ ] , int n ) { int operations = 0 ; int i = 0 ; while ( i < n ) { if ( a [ i ] - b [ i ] == 0 ) { i ++ ; continue ; } int diff = a [ i ] - b [ i ] ; i ++ ; while ( i < n && a [ i ] - b [ i ] == diff ) { i ++ ; } operations ++ ; } System . out . println ( operations ) ; }", "python": "def checkArray ( a , b , n ) :\n    operations = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        if ( a [ i ] - b [ i ] == 0 ) :\n            i += 1 ;\n            continue ;\n        diff = a [ i ] - b [ i ] ;\n        i += 1 ;\n        while ( i < n and a [ i ] - b [ i ] == diff ) :\n            i += 1 ;\n        operations += 1 ;\n    print ( operations ) ;\n"}
{"java": "static int findNumber ( int n ) { int x = ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + 8 * n - 8 ) ) / 2 ) ; int base = ( x * ( x + 1 ) ) / 2 + 1 ; return n - base + 1 ; }", "python": "def findNumber ( n ) :\n    x = int ( math . floor ( ( - 1 + math . sqrt ( 1 + 8 * n - 8 ) ) / 2 ) )\n    base = ( x * ( x + 1 ) ) / 2 + 1\n    return n - base + 1\n"}
{"java": "static void findSumPairs ( int a [ ] , int n ) { Map < Integer , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { mpp . put ( a [ i ] + a [ j ] , mpp . get ( a [ i ] + a [ j ] ) == null ? 1 : mpp . get ( a [ i ] + a [ j ] ) + 1 ) ; } } int occur = 0 ; for ( Map . Entry < Integer , Integer > entry : mpp . entrySet ( ) ) { if ( entry . getValue ( ) > occur ) { occur = entry . getValue ( ) ; } } for ( Map . Entry < Integer , Integer > entry : mpp . entrySet ( ) ) { if ( entry . getValue ( ) == occur ) System . out . println ( entry . getKey ( ) ) ; } }", "python": "def findSumPairs ( a , n ) :\n    mpp = { i : 0 for i in range ( 21 ) }\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n , 1 ) :\n            mpp [ a [ i ] + a [ j ] ] += 1\n    occur = 0\n    for key , value in mpp . items ( ) :\n        if ( value > occur ) :\n            occur = value\n    for key , value in mpp . items ( ) :\n        if ( value == occur ) :\n            print ( key )\n"}
{"java": "static int countOrderedPairs ( int N ) { int count_pairs = 0 ; for ( int i = 1 ; i <= ( int ) Math . sqrt ( N - 1 ) ; ++ i ) { for ( int j = i ; j * i < N ; ++ j ) ++ count_pairs ; } count_pairs *= 2 ; count_pairs -= ( int ) ( Math . sqrt ( N - 1 ) ) ; return count_pairs ; }", "python": "def countOrderedPairs ( N ) :\n    count_pairs = 0\n    p = int ( sqrt ( N - 1 ) ) + 1\n    q = int ( sqrt ( N ) ) + 2\n    for i in range ( 1 , p , 1 ) :\n        for j in range ( i , q , 1 ) :\n            count_pairs += 1\n    count_pairs *= 2\n    count_pairs -= int ( sqrt ( N - 1 ) )\n    return count_pairs\n"}
{"java": "static int avg_of_even_num ( int n ) { return n + 1 ; }", "python": "def avg_of_even_num ( n ) :\n    return n + 1\n"}
{"java": "static boolean strmatch ( char txt [ ] , char pat [ ] , int n , int m ) { if ( m == 0 ) return ( n == 0 ) ; int i = 0 , j = 0 , index_txt = - 1 , index_pat = - 1 ; while ( i < n ) { if ( j < m && txt [ i ] == pat [ j ] ) { i ++ ; j ++ ; } else if ( j < m && pat [ j ] == ' ? ' ) { i ++ ; j ++ ; } else if ( j < m && pat [ j ] == ' * ' ) { index_txt = i ; index_pat = j ; j ++ ; } else if ( index_pat != - 1 ) { j = index_pat + 1 ; i = index_txt + 1 ; index_txt ++ ; } else { return false ; } } while ( j < m && pat [ j ] == ' * ' ) { j ++ ; } if ( j == m ) { return true ; } return false ; }", "python": "def stringmatch ( txt , pat , n , m ) :\n    if ( m == 0 ) :\n        return ( n == 0 )\n    i = 0\n    j = 0\n    index_txt = - 1\n    index_pat = - 1\n    while ( i < n - 2 ) :\n        if ( j < m and txt [ i ] == pat [ j ] ) :\n            i += 1\n            j += 1\n        elif ( j < m and pat [ j ] == ' ? ' ) :\n            i += 1\n            j += 1\n        elif ( j < m and pat [ j ] == ' * ' ) :\n            index_txt = i\n            index_pat = j\n            j += 1\n        elif ( index_pat != - 1 ) :\n            j = index_pat + 1\n            i = index_txt + 1\n            index_txt += 1\n        else :\n            return False\n    while ( j < m and pat [ j ] == ' * ' ) :\n        j += 1\n    if ( j == m ) :\n        return True\n    return False\n"}
{"java": "public static int time ( int trg , int wepon ) { int time = info [ trg ] [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( ( wepon >> i & 1 ) == 1 ) { time = Math . min ( time , info [ trg ] [ i + 1 ] ) ; } } return time ; }", "python": "def solve ( n , t ) :\n    s = [ [ ( t [ i ] [ j + 1 ] , j ) for j in range ( n ) ] for i in range ( n ) ]\n    for i in range ( n ) :\n        s [ i ] . sort ( )\n    m = p [ n ]\n    dp = [ float ( \" inf \" ) ] * ( m )\n    for i in range ( n ) :\n        dp [ p [ i ] ] = t [ i ] [ 0 ]\n    for k in range ( m ) :\n        for i in li [ k ] :\n            if i >= n : continue\n            l = k | p [ i ]\n            mi = t [ i ] [ 0 ]\n            for x , j in s [ i ] :\n                if ( k & p [ j ] ) :\n                    if mi > x :\n                        mi = x\n                        break\n            if dp [ l ] > dp [ k ] + mi :\n                dp [ l ] = dp [ k ] + mi\n    print ( dp [ - 1 ] )\n"}
{"java": "static void printNumberWithDR ( int k , int d ) { if ( d == 0 && k != 1 ) System . out . print ( \" - 1\" ) ; else { System . out . print ( d ) ; k -- ; while ( k -- > 0 ) System . out . print ( \"0\" ) ; } }", "python": "def printNumberWithDR ( k , d ) :\n    if d == 0 and k != 1 :\n        print ( - 1 , end = \" \" )\n    else :\n        print ( d , end = \" \" )\n        k -= 1\n        while k :\n            print ( 0 , end = \" \" )\n            k -= 1\n"}
{"java": "static int modFact ( int n , int m ) { int result = 1 ; for ( int i = 1 ; i <= m ; i ++ ) result = ( result * i ) % MOD ; return result ; }", "python": "def modFact ( n , m ) :\n    result = 1\n    for i in range ( 1 , m + 1 ) :\n        result = ( result * i ) % MOD\n    return result\n"}
{"java": "static int rhombusAreaPeri ( int d1 , int d2 ) { int area , perimeter ; area = ( d1 * d2 ) / 2 ; perimeter = ( int ) ( 2 * Math . sqrt ( Math . pow ( d1 , 2 ) + Math . pow ( d2 , 2 ) ) ) ; System . out . println ( \" The \u2581 area \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \u2581 \" + d1 + \" \u2581 and \u2581 \" + d2 + \" \u2581 is \u2581 \" + area + \" . \" ) ; System . out . println ( \" The \u2581 perimeter \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \u2581 \" + d1 + \" \u2581 and \u2581 \" + d2 + \" \u2581 is \u2581 \" + perimeter + \" . \" ) ; return 0 ; }", "python": "def rhombusAreaPeri ( d1 , d2 ) :\n    area = ( d1 * d2 ) / 2\n    perimeter = 2 * sqrt ( pow ( d1 , 2 ) + pow ( d2 , 2 ) )\n    print ( \" The \u2581 area \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \" , d1 , \" and \" , d2 , \" is \" , area , \" . \" )\n    print ( \" The \u2581 perimeter \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \" , d1 , \" and \" , d2 , \" is \" , perimeter , \" . \" )\n"}
{"java": "static int findTrailingZeros ( int n ) { if ( ( n & 1 ) == 1 ) return 0 ; else { int ans = 0 ; n /= 2 ; while ( n != 0 ) { ans += n / 5 ; n /= 5 ; } return ans ; } }", "python": "def findTrailingZeros ( n ) :\n    if ( n & 1 ) :\n        return 0\n    else :\n        ans = 0\n        n //= 2\n        while ( n ) :\n            ans += n // 5\n            n //= 5\n        return ans\n"}
{"java": "public static int useMain ( int n , int m , int a , int b ) { if ( b / m > a ) { return n * a ; } else { int cent = n / m ; float ans = min ( min ( cent * b + n % m * a , n * a ) , ( cent + 1 ) * b ) ; return ( int ) ( ans ) ; } }", "python": "def solution ( n , m , a , b ) :\n    if m * a <= b :\n        return n * a\n    else :\n        return n // m * b + min ( ( n % m ) * a , b )\n"}
{"java": "public static void debug ( String str ) { System . out . println ( str ) ; }", "python": "def main ( ) :\n    a , b = map ( int , input ( ) . split ( ) )\n    if b == 1 :\n        print ( 0 )\n        return\n    count = 0\n    sum = a\n    count += 1\n    if sum >= b :\n        print ( 1 )\n        return\n    while sum < b :\n        sum = sum + ( a - 1 )\n        count += 1\n    print ( count )\n"}
{"java": "static double circlearea ( double a ) { if ( a < 0 ) return - 1 ; double A = ( 3.14 * 3 * Math . pow ( a , 2 ) ) / 4 ; return A ; }", "python": "def circlearea ( a ) :\n    if a < 0 :\n        return - 1\n    A = ( 3.14 * 3 * pow ( a , 2 ) ) / 4\n    return A\n"}
{"java": "static long smallestNumber ( int n ) { if ( n >= 0 && n <= 9 ) { return n ; } Stack < Integer > digits = new Stack < > ( ) ; for ( int i = 9 ; i >= 2 && n > 1 ; i -- ) { while ( n % i == 0 ) { digits . push ( i ) ; n = n / i ; } } if ( n != 1 ) { return - 1 ; } long k = 0 ; while ( ! digits . empty ( ) ) { k = k * 10 + digits . peek ( ) ; digits . pop ( ) ; } return k ; }", "python": "def smallestNumber ( n ) :\n    if ( n >= 0 and n <= 9 ) :\n        return n\n    digits = list ( )\n    for i in range ( 9 , 1 , - 1 ) :\n        while ( n % i == 0 ) :\n            digits . append ( i )\n            n = n // i\n    if ( n != 1 ) :\n        return - 1\n    k = 0\n    while ( len ( digits ) != 0 ) :\n        k = k * 10 + digits [ - 1 ]\n        digits . pop ( )\n    return k\n"}
{"java": "public static void exec ( final Scanner sc , final PrintStream out ) throws Exception { final String S = sc . next ( ) ; final String T = sc . next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( S . charAt ( i ) == T . charAt ( i ) ) { cnt ++ ; } } out . println ( cnt ) ; }", "python": "def main ( ) :\n    input = stdin . buffer . readline\n    s = list ( input ( ) [ : - 1 ] . decode ( ) )\n    t = list ( input ( ) [ : - 1 ] . decode ( ) )\n    ans = 0\n    for i in range ( 3 ) :\n        if s [ i ] == t [ i ] :\n            ans += 1\n    print ( ans )\n"}
{"java": "private static long solve ( long a , long b ) { if ( a == b ) return 2 * ( a - 1 ) ; if ( a > b ) { long t = a ; a = b ; b = t ; } long l = 0 ; long r = b - 1 ; while ( r > l ) { long m = ( l + r + 1 ) / 2 ; long l2 = 0 ; long r2 = m ; while ( r2 - l2 > 1 ) { long m2 = ( l2 + r2 ) / 2 ; if ( ( m - ( m2 - 1 ) ) * ( a + m2 ) <= ( m - ( m2 ) ) * ( a + 1 + m2 ) ) { l2 = m2 ; } else { r2 = m2 ; } } if ( ( m - l2 ) * ( a + 1 + l2 ) < a * b ) { l = m ; } else { r = m - 1 ; } } return ( a - 1 ) + l ; }", "python": "def main ( ) :\n    q = int ( input ( ) )\n    ans = [ None ] * q\n    for i in range ( q ) :\n        a , b = map ( int , input ( ) . split ( ) )\n        score = a * b\n        tmp = 0\n        if b < a :\n            a , b = b , a\n        if a == b :\n            tmp = ( a - 1 ) + ( b - 1 )\n        elif a + 1 == b :\n            tmp = ( a - 1 ) + ( a - 1 )\n        else :\n            p = int ( sqrt ( score ) )\n            if p ** 2 == score :\n                p -= 1\n            tmp = 2 * p - 1\n            if p * ( p + 1 ) >= score :\n                tmp -= 1\n        ans [ i ] = tmp\n    for v in ans :\n        print ( v )\n"}
{"java": "static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) { return 0 ; } else if ( ( ang * n ) % 180 != 0 ) { return 0 ; } int ans = 1 ; int freq = ( ang * n ) / 180 ; ans = ans * ( n - 1 - freq ) ; ans = ans * n ; return ans ; }", "python": "def solve ( ang , n ) :\n    if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) :\n        return 0\n    elif ( ( ang * n ) % 180 != 0 ) :\n        return 0\n    ans = 1\n    freq = ( ang * n ) // 180\n    ans = ans * ( n - 1 - freq )\n    ans = ans * n\n    return ans\n"}
{"java": "static int Count_subarray ( int arr [ ] , int n ) { int subarray_sum , remaining_sum , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { subarray_sum = 0 ; remaining_sum = 0 ; for ( int k = i ; k <= j ; k ++ ) { subarray_sum += arr [ k ] ; } for ( int l = 0 ; l < i ; l ++ ) { remaining_sum += arr [ l ] ; } for ( int l = j + 1 ; l < n ; l ++ ) { remaining_sum += arr [ l ] ; } if ( subarray_sum > remaining_sum ) { count += 1 ; } } } return count ; }", "python": "def Count_subarray ( arr , n ) :\n    subarray_sum , remaining_sum , count = 0 , 0 , 0 ;\n    for i in range ( n ) :\n        for j in range ( i , n ) :\n            subarray_sum = 0 ;\n            remaining_sum = 0 ;\n            for k in range ( i , j + 1 ) :\n                subarray_sum += arr [ k ] ;\n            for l in range ( i ) :\n                remaining_sum += arr [ l ] ;\n            for l in range ( j + 1 , n ) :\n                remaining_sum += arr [ l ] ;\n            if ( subarray_sum > remaining_sum ) :\n                count += 1 ;\n    return count ;\n"}
{"java": "static void solve ( int a , int b ) { int now = 0 ; for ( int i = a ; i <= b ; i ++ ) { if ( '0' <= str . charAt ( i ) && str . charAt ( i ) <= '9' ) { now *= 10 ; now += ( int ) ( str . charAt ( i ) - '0' ) ; } else if ( str . charAt ( i ) == ' ( ' ) { if ( now == 0 ) now = 1 ; int K = 1 ; int j ; for ( j = i + 1 ; j <= b ; j ++ ) { if ( str . charAt ( j ) == ' ( ' ) K ++ ; if ( str . charAt ( j ) == ' ) ' ) K -- ; if ( K == 0 ) break ; } for ( int k = 0 ; k < now ; k ++ ) { solve ( i + 1 , j - 1 ) ; if ( R ) return ; } i = j ; now = 0 ; } else { if ( now == 0 ) now = 1 ; for ( int j = 0 ; j < now ; j ++ ) { if ( count == n ) { System . out . println ( str . charAt ( i ) ) ; R = true ; return ; } count ++ ; } now = 0 ; } } }", "python": "def main ( ) :\n    def pearser ( s , n ) :\n        if s == \" \" :\n            return \" \"\n        i = 0\n        while 1 :\n            if not s [ i ] . isdigit ( ) : break\n            i += 1\n        if i == 0 :\n            r = pearser ( s [ i + 1 : ] , n - 1 )\n            return s [ 0 ] + r\n        if s [ i ] == \" ( \" :\n            r = Parentp ( s [ i : ] , n , int ( s [ : i ] ) )\n        else :\n            r = s [ i ] * int ( s [ : i ] )\n            if len ( r ) >= n :\n                return r [ : n ]\n            r += pearser ( s [ i + 1 : ] , n - len ( r ) )\n        return r\n    def Parentp ( s , n , p ) :\n        if s == \" \" : return \" \"\n        b = 0\n        c = 0\n        i = 0\n        while 1 :\n            if s [ i ] == \" ( \" :\n                c += 1\n            if s [ i ] == \" ) \" :\n                c -= 1\n            if c == 0 :\n                break\n            i += 1\n        r = pearser ( s [ b + 1 : i ] , n )\n        l = len ( r )\n        if l * p >= n :\n            r = r * ( n // l + 1 )\n            return r [ : n ]\n        r = r * p\n        r += pearser ( s [ i + 1 : ] , n - len ( r ) )\n        return r\n    def m ( s , n ) :\n        n = int ( n )\n        r = pearser ( s , n + 1 )\n        if len ( r ) <= n :\n            print ( 0 )\n            return\n        print ( r [ n ] )\n    while 1 :\n        s , n = map ( str , input ( ) . split ( ) )\n        if s == n == \"0\" :\n            break\n        m ( s , n )\n"}
{"java": "static int closestNumber ( int n , int m ) { int q = n / m ; int n1 = m * q ; int n2 = ( n * m ) > 0 ? ( m * ( q + 1 ) ) : ( m * ( q - 1 ) ) ; if ( Math . abs ( n - n1 ) < Math . abs ( n - n2 ) ) return n1 ; return n2 ; }", "python": "def closestNumber ( n , m ) :\n    q = int ( n / m )\n    n1 = m * q\n    if ( ( n * m ) > 0 ) :\n        n2 = ( m * ( q + 1 ) )\n    else :\n        n2 = ( m * ( q - 1 ) )\n    if ( abs ( n - n1 ) < abs ( n - n2 ) ) :\n        return n1\n    return n2\n"}
{"java": "static void findNthNum ( int N ) { int bit_L = 1 , last_num = 0 ; while ( bit_L * ( bit_L + 1 ) / 2 < N ) { last_num = last_num + bit_L ; bit_L ++ ; } int bit_R = N - last_num - 1 ; System . out . print ( ( 1 << bit_L ) + ( 1 << bit_R ) + \" \\n \" ) ; }", "python": "def findNthNum ( N ) :\n    bit_L = 1 ;\n    last_num = 0 ;\n    while ( bit_L * ( bit_L + 1 ) / 2 < N ) :\n        last_num = last_num + bit_L ;\n        bit_L += 1 ;\n    bit_R = N - last_num - 1 ;\n    print ( ( 1 << bit_L ) + ( 1 << bit_R ) ) ;\n"}
{"java": "static int countBits ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n >>= 1 ; } return count ; }", "python": "def countBits ( n ) :\n    count = 0 ;\n    while ( n ) :\n        count += 1 ;\n        n >>= 1 ;\n    return count ;\n"}
{"java": "static void line ( double x0 , double y0 ) { double c = ( int ) ( 2 * y0 * x0 ) ; System . out . println ( y0 + \" x \" + \" \u2581 + \u2581 \" + x0 + \" y \u2581 = \u2581 \" + c ) ; }", "python": "def line ( x0 , y0 ) :\n    c = 2 * y0 * x0\n    print ( y0 , \" x \" , \" + \" , x0 , \" y = \" , c )\n"}
{"java": "static void findRealAndImag ( String s ) { int l = s . length ( ) ; int i ; if ( s . indexOf ( ' + ' ) != - 1 ) { i = s . indexOf ( ' + ' ) ; } else { i = s . indexOf ( ' - ' ) ; } String real = s . substring ( 0 , i ) ; String imaginary = s . substring ( i + 1 , l - 1 ) ; System . out . println ( \" Real \u2581 part : \u2581 \" + real ) ; System . out . println ( \" Imaginary \u2581 part : \u2581 \" + imaginary ) ; }", "python": "def findRealAndImag ( s ) :\n    l = len ( s )\n    i = 0\n    if ( s . find ( ' + ' ) != - 1 ) :\n        i = s . find ( ' + ' )\n    else :\n        i = s . find ( ' - ' ) ;\n    real = s [ : i ]\n    imaginary = s [ i + 1 : l - 1 ]\n    print ( \" Real \u2581 part : \" , real )\n    print ( \" Imaginary \u2581 part : \" , imaginary )\n"}
{"java": "static int calcNodes ( int N , int I ) { int result = 0 ; result = I * ( N - 1 ) + 1 ; return result ; }", "python": "def calcNodes ( N , I ) :\n    result = 0\n    result = I * ( N - 1 ) + 1\n    return result\n"}
{"java": "static int log_a_to_base_b ( int a , int b ) { return ( int ) ( Math . log ( a ) / Math . log ( b ) ) ; }", "python": "def log_a_to_base_b ( a , b ) :\n    return log ( a ) // log ( b ) ;\n"}
{"java": "private static int minBroadcastRange ( int [ ] houses , int [ ] towers ) { int n = houses . length ; int m = towers . length ; int leftTower = Integer . MIN_VALUE ; int rightTower = towers [ 0 ] ; int j = 0 , k = 0 ; int min_range = 0 ; while ( j < n ) { if ( houses [ j ] < rightTower ) { int left = houses [ j ] - leftTower ; int right = rightTower - houses [ j ] ; int local_max = left < right ? left : right ; if ( local_max > min_range ) min_range = local_max ; j ++ ; } else { leftTower = towers [ k ] ; if ( k < m - 1 ) { k ++ ; rightTower = towers [ k ] ; } else rightTower = Integer . MAX_VALUE ; } } return min_range ; }", "python": "def minBroadcastRange ( houses , towers , n , m ) :\n    leftTower = - sys . maxsize - 1\n    rightTower = towers [ 0 ]\n    j , k = 0 , 0\n    min_range = 0\n    while ( j < n ) :\n        if ( houses [ j ] < rightTower ) :\n            left = houses [ j ] - leftTower\n            right = rightTower - houses [ j ]\n            if left < right :\n                local_max = left\n            else :\n                local_max = right\n            if ( local_max > min_range ) :\n                min_range = local_max\n            j += 1\n        else :\n            leftTower = towers [ k ]\n            if ( k < m - 1 ) :\n                k += 1\n                rightTower = towers [ k ]\n            else :\n                rightTower = sys . maxsize\n    return min_range\n"}
{"java": "static int countPairs ( char [ ] str , int k ) { int n = str . length ; int [ ] freq = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str [ i ] - ' a ' ] ++ ; } int cnt = 0 ; if ( k == 0 ) { for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] > 1 ) { cnt += ( ( freq [ i ] * ( freq [ i ] - 1 ) ) / 2 ) ; } } } else { for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] > 0 && i + k < MAX && freq [ i + k ] > 0 ) { cnt += ( freq [ i ] * freq [ i + k ] ) ; } } ; } return cnt ; }", "python": "def countPairs ( string , k ) :\n    n = len ( string ) ;\n    freq = [ 0 ] * MAX ;\n    for i in range ( n ) :\n        freq [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1 ;\n    cnt = 0 ;\n    if ( k == 0 ) :\n        for i in range ( MAX ) :\n            if ( freq [ i ] > 1 ) :\n                cnt += ( ( freq [ i ] * ( freq [ i ] - 1 ) ) // 2 ) ;\n    else :\n        for i in range ( MAX ) :\n            if ( freq [ i ] > 0 and i + k < MAX and freq [ i + k ] > 0 ) :\n                cnt += ( freq [ i ] * freq [ i + k ] ) ;\n    return cnt ;\n"}
{"java": "static int MinimumMoves ( int a [ ] , int n , int x ) { int ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i - 1 ] ) { int p = ( a [ i - 1 ] - a [ i ] ) / x + 1 ; ans += p ; a [ i ] += p * x ; } } return ans ; }", "python": "def MinimumMoves ( a , n , x ) :\n    ans = 0\n    for i in range ( 1 , n ) :\n        if a [ i ] <= a [ i - 1 ] :\n            p = ( a [ i - 1 ] - a [ i ] ) // x + 1\n            ans += p\n            a [ i ] += p * x\n    return ans\n"}
{"java": "static int sumPairs ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { sum += ( arr [ i ] + arr [ j ] ) ; } } return sum ; }", "python": "def summPairs ( arr , n ) :\n    summ = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            summ += ( arr [ i ] + arr [ j ] )\n    return summ\n"}
{"java": "static int countPairs ( int a [ ] , int b [ ] , int n , int m ) { int cnt = 0 ; HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { int sum = a [ i ] + b [ j ] ; if ( s . contains ( sum ) == false ) { cnt ++ ; s . add ( sum ) ; } } } return cnt ; }", "python": "def countPairs ( a , b , n , m ) :\n    cnt = 0\n    s = dict ( )\n    for i in range ( n ) :\n        for j in range ( m ) :\n            sum = a [ i ] + b [ j ]\n            if ( sum not in s . keys ( ) ) :\n                cnt += 1\n                s [ sum ] = 1\n    return cnt\n"}
{"java": "public static void aryClear ( long [ ] ary ) { for ( int i = 0 ; i <= 4000 ; i ++ ) { ary [ i ] = - 1 ; } }", "python": "def searchEmployeeSales ( employeeId ) :\n    for data in employeeSalesList :\n        if data [ 0 ] == employeeId :\n            return data\n    newData = [ employeeId , 0 ]\n    employeeSalesList . append ( newData )\n    return newData\n"}
{"java": "static void modify ( int arr [ ] , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] * arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev * arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev * arr [ n - 1 ] ; }", "python": "def modify ( arr , n ) :\n    if n <= 1 :\n        return\n    prev = arr [ 0 ]\n    arr [ 0 ] = arr [ 0 ] * arr [ 1 ]\n    for i in range ( 1 , n - 1 ) :\n        curr = arr [ i ] ;\n        arr [ i ] = prev * arr [ i + 1 ]\n        prev = curr\n    arr [ n - 1 ] = prev * arr [ n - 1 ]\n"}
{"java": "public static String fun ( int arr [ ] , int key ) { while ( key > 0 ) { int temp = arr [ key - 1 ] ; arr [ key - 1 ] = 0 ; key = temp ; } if ( arr [ 0 ] == 0 && arr [ 1 ] == 0 && arr [ 2 ] == 0 ) { return \" YES \" ; } return \" NO \" ; }", "python": "def check ( x , lista , count ) :\n    if count > 3 :\n        return 0\n    if lista [ x - 1 ] == 0 :\n        return 0\n    return 1 + check ( lista [ x - 1 ] , lista , count + 1 )\n"}
{"java": "static void findPairs ( int arr [ ] , int n ) { int cntEven = 0 , cntOdd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) cntEven ++ ; else cntOdd ++ ; } int evenPairs = 0 ; evenPairs += ( ( cntEven * ( cntEven - 1 ) ) / 2 ) ; evenPairs += ( ( cntOdd * ( cntOdd - 1 ) ) / 2 ) ; int oddPairs = 0 ; oddPairs += ( cntEven * cntOdd ) ; System . out . println ( \" Odd \u2581 pairs \u2581 = \u2581 \" + oddPairs ) ; System . out . println ( \" Even \u2581 pairs \u2581 = \u2581 \" + evenPairs ) ; }", "python": "def findPairs ( arr , n ) :\n    cntEven = 0 ; cntOdd = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 == 0 ) :\n            cntEven += 1 ;\n        else :\n            cntOdd += 1 ;\n    evenPairs = 0 ;\n    evenPairs += ( ( cntEven * ( cntEven - 1 ) ) // 2 ) ;\n    evenPairs += ( ( cntOdd * ( cntOdd - 1 ) ) // 2 ) ;\n    oddPairs = 0 ;\n    oddPairs += ( cntEven * cntOdd ) ;\n    print ( \" Odd \u2581 pairs \u2581 = \u2581 \" , oddPairs ) ;\n    print ( \" Even \u2581 pairs \u2581 = \u2581 \" , evenPairs ) ;\n"}
{"java": "static void printLines ( int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( k * ( 6 * i + 1 ) + \" \u2581 \" + k * ( 6 * i + 2 ) + \" \u2581 \" + k * ( 6 * i + 3 ) + \" \u2581 \" + k * ( 6 * i + 5 ) ) ; } }", "python": "def printLines ( n , k ) :\n    for i in range ( n ) :\n        print ( k * ( 6 * i + 1 ) , k * ( 6 * i + 2 ) , k * ( 6 * i + 3 ) , k * ( 6 * i + 5 ) )\n"}
{"java": "static int minAbsDiff ( int n ) { int mod = n % 4 ; if ( mod == 0 || mod == 3 ) { return 0 ; } return 1 ; }", "python": "def minAbsDiff ( n ) :\n    mod = n % 4 ;\n    if ( mod == 0 or mod == 3 ) :\n        return 0 ;\n    return 1 ;\n"}
{"java": "static float noOfYears ( int t1 , int n1 , int t2 ) { float years = ( ( t2 - 1 ) * n1 / ( float ) ( t1 - 1 ) ) ; return years ; }", "python": "def noOfYears ( t1 , n1 , t2 ) :\n    years = ( t2 - 1 ) * n1 / ( t1 - 1 )\n    return years\n"}
{"java": "static void record_sum ( int record [ ] , int l , int r , int n , int adder ) { for ( int i = l ; i <= r ; i ++ ) { record [ i ] += adder ; } }", "python": "def record_sum ( record , l , r , n , adder ) :\n    for i in range ( l , r + 1 ) :\n        record [ i ] += adder\n"}
{"java": "static void foot ( float a , float b , float c , float d , float x1 , float y1 , float z1 ) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float ) ( a * a + b * b + c * c ) ; float x2 = a * k + x1 ; float y2 = b * k + y1 ; float z2 = c * k + z1 ; DecimalFormat form = new DecimalFormat ( \"0.0\" ) ; System . out . print ( \" \u2581 x2 \u2581 = \u2581 \" + form . format ( x2 ) ) ; System . out . print ( \" \u2581 y2 \u2581 = \u2581 \" + form . format ( y2 ) ) ; System . out . print ( \" \u2581 z2 \u2581 = \u2581 \" + form . format ( z2 ) ) ; }", "python": "def foot ( a , b , c , d , x1 , y1 , z1 ) :\n    k = ( - a * x1 - b * y1 - c * z1 - d ) / ( a * a + b * b + c * c ) ;\n    x2 = a * k + x1 ;\n    y2 = b * k + y1 ;\n    z2 = c * k + z1 ;\n    print ( \" x2 \u2581 = \" , round ( x2 , 1 ) )\n    print ( \" y2 \u2581 = \" , round ( y2 , 1 ) )\n    print ( \" z2 \u2581 = \" , round ( z2 , 1 ) )\n"}
{"java": "static int maxSquareSubsetSum ( int [ ] A , int N ) { int sub1 = 0 , sub2 = 0 ; Arrays . sort ( A ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( i < ( N / 2 ) - 1 ) sub1 += A [ i ] ; else sub2 += A [ i ] ; } return sub1 * sub1 + sub2 * sub2 ; }", "python": "def maxSquareSubsetSum ( A , N ) :\n    sub1 = 0 ; sub2 = 0 ;\n    A . sort ( ) ;\n    for i in range ( N ) :\n        if ( i < ( N // 2 ) - 1 ) :\n            sub1 += A [ i ] ;\n        else :\n            sub2 += A [ i ] ;\n    return sub1 * sub1 + sub2 * sub2 ;\n"}
{"java": "static void findTheNumber ( int n ) { if ( n == 1 ) { System . out . print ( \" Impossible \" + \" \\n \" ) ; return ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . print ( \"5\" ) ; } System . out . print ( \"4\" ) ; }", "python": "def findTheNumber ( n ) :\n    if ( n == 1 ) :\n        print ( \" Impossible \" )\n        return\n    for i in range ( n - 1 ) :\n        print ( \"5\" , end = \" \" )\n    print ( \"4\" )\n"}
{"java": "static void divide ( int a , int b ) { for ( int i = 2 ; i <= Math . min ( a , b ) ; i ++ ) { while ( a % i == 0 && b % i == 0 ) { a = a / i ; b = b / i ; } } System . out . println ( \" A \u2581 = \u2581 \" + a + \" , \u2581 B \u2581 = \u2581 \" + b ) ; }", "python": "def divide ( a , b ) :\n    for i in range ( 2 , min ( a , b ) + 1 ) :\n        while ( a % i == 0 and b % i == 0 ) :\n            a = a // i\n            b = b // i\n    print ( \" A \u2581 = \" , a , \" , \u2581 B \u2581 = \" , b )\n"}
{"java": "static boolean isPossible ( char [ ] str ) { Map < Character , Integer > freq = new HashMap < > ( ) ; int max_freq = 0 ; for ( int j = 0 ; j < ( str . length ) ; j ++ ) { if ( freq . containsKey ( str [ j ] ) ) { freq . put ( str [ j ] , freq . get ( str [ j ] ) + 1 ) ; if ( freq . get ( str [ j ] ) > max_freq ) max_freq = freq . get ( str [ j ] ) ; } else { freq . put ( str [ j ] , 1 ) ; if ( freq . get ( str [ j ] ) > max_freq ) max_freq = freq . get ( str [ j ] ) ; } } if ( max_freq <= ( str . length - max_freq + 1 ) ) return true ; return false ; }", "python": "def isPossible ( Str ) :\n    freq = dict ( )\n    max_freq = 0\n    for j in range ( len ( Str ) ) :\n        freq [ Str [ j ] ] = freq . get ( Str [ j ] , 0 ) + 1\n        if ( freq [ Str [ j ] ] > max_freq ) :\n            max_freq = freq [ Str [ j ] ]\n    if ( max_freq <= ( len ( Str ) - max_freq + 1 ) ) :\n        return True\n    return False\n"}
{"java": "static void find ( int n ) { String [ ] arr = new String [ n + 1 ] ; arr [ 0 ] = \" \" ; int size = 1 , m = 1 ; while ( size <= n ) { for ( int i = 0 ; i < m && ( size + i ) <= n ; i ++ ) arr [ size + i ] = \"3\" + arr [ size - m + i ] ; for ( int i = 0 ; i < m && ( size + m + i ) <= n ; i ++ ) arr [ size + m + i ] = \"4\" + arr [ size - m + i ] ; m = m << 1 ; size = size + m ; } System . out . println ( arr [ n ] ) ; }", "python": "def find ( n ) :\n    arr = [ ' ' ] * ( n + 1 ) ;\n    size = 1 ;\n    m = 1 ;\n    while ( size <= n ) :\n        i = 0 ;\n        while ( i < m and ( size + i ) <= n ) :\n            arr [ size + i ] = \"3\" + arr [ size - m + i ] ;\n            i += 1 ;\n        i = 0 ;\n        while ( i < m and ( size + m + i ) <= n ) :\n            arr [ size + m + i ] = \"4\" + arr [ size - m + i ] ;\n            i += 1 ;\n        m = m << 1 ;\n        size = size + m ;\n    print ( arr [ n ] ) ;\n"}
{"java": "static void convert ( int n , String a , String b ) { int [ ] l = new int [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) l [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a . charAt ( i ) != b . charAt ( i ) ) l [ i ] = 1 ; } int cc = 0 ; int vl = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( l [ i ] == 0 ) { if ( vl != 0 ) cc += 1 ; vl = 0 ; } else vl += 1 ; } if ( vl != 0 ) cc += 1 ; System . out . println ( cc ) ; }", "python": "def convert ( n , a , b ) :\n    l = [ 0 ] * n\n    for i in range ( n ) :\n        if ( a [ i ] != b [ i ] ) :\n            l [ i ] = 1\n    cc = 0\n    vl = 0\n    for i in range ( n ) :\n        if ( l [ i ] == 0 ) :\n            if ( vl != 0 ) :\n                cc += 1\n            vl = 0\n        else :\n            vl += 1\n    if ( vl != 0 ) :\n        cc += 1\n    print ( cc )\n"}
{"java": "static int lengthOfSmallestSubsequence ( int K , int [ ] v ) { Queue < Integer > pq = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < v . length ; i ++ ) { pq . add ( v [ i ] ) ; } int sum = 0 , count = 0 ; while ( ! pq . isEmpty ( ) && sum < K ) { sum += pq . peek ( ) ; pq . remove ( ) ; count ++ ; } if ( sum < K ) { return - 1 ; } return count ; }", "python": "def lengthOfSmallestSubsequence ( K , v ) :\n    pq = [ ]\n    for i in v :\n        pq . append ( i )\n    pq . sort ( )\n    sum = 0\n    count = 0\n    while ( len ( pq ) > 0 and sum < K ) :\n        sum += pq [ - 1 ]\n        del pq [ - 1 ]\n        count += 1\n    if ( sum < K ) :\n        return - 1\n    return count\n"}
{"java": "static int findDelta ( int a , int b , int c , int d ) { return ( b * c - a * d ) / ( d - c ) ; }", "python": "def findDelta ( a , b , c , d ) :\n    return int ( ( b * c - a * d ) / ( d - c ) ) ;\n"}
{"java": "static void findWinner ( int n ) { if ( ( n - 1 ) % 6 == 0 ) { System . out . println ( \" Second \u2581 Player \u2581 wins \u2581 the \u2581 game \" ) ; } else { System . out . println ( \" First \u2581 Player \u2581 wins \u2581 the \u2581 game \" ) ; } }", "python": "def findWinner ( n ) :\n    if ( ( n - 1 ) % 6 == 0 ) :\n        print ( \" Second \u2581 Player \u2581 wins \u2581 the \u2581 game \" ) ;\n    else :\n        print ( \" First \u2581 Player \u2581 wins \u2581 the \u2581 game \" ) ;\n"}
{"java": "public static int cubesum ( int n ) { return 2 * n * n * ( n + 1 ) * ( n + 1 ) ; }", "python": "def cubeSum ( n ) :\n    return 2 * n * n * ( n + 1 ) * ( n + 1 )\n"}
{"java": "static int getMaximumSumWithLCMN ( int N ) { int sum = 0 ; int LIM = ( int ) Math . sqrt ( N ) ; for ( int i = 1 ; i <= LIM ; i ++ ) { if ( N % i == 0 ) { if ( i == ( N / i ) ) sum += i ; else sum += ( i + N / i ) ; } } return sum ; }", "python": "def getMaximumSumWithLCMN ( N ) :\n    sum = 0\n    LIM = int ( math . sqrt ( N ) )\n    for i in range ( 1 , LIM + 1 ) :\n        if ( N % i == 0 ) :\n            if ( i == ( N // i ) ) :\n                sum = sum + i\n            else :\n                sum = sum + ( i + N // i )\n    return sum\n"}
{"java": "static double calculateAlternateSum ( int n ) { if ( n <= 0 ) return 0 ; int fibo [ ] = new int [ n + 1 ] ; fibo [ 0 ] = 0 ; fibo [ 1 ] = 1 ; double sum = Math . pow ( fibo [ 0 ] , 2 ) + Math . pow ( fibo [ 1 ] , 2 ) ; for ( int i = 2 ; i <= n ; i ++ ) { fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ; if ( i % 2 == 0 ) sum -= fibo [ i ] ; else sum += fibo [ i ] ; } return sum ; }", "python": "def calculateAlternateSum ( n ) :\n    if ( n <= 0 ) :\n        return 0\n    fibo = [ 0 ] * ( n + 1 )\n    fibo [ 0 ] = 0\n    fibo [ 1 ] = 1\n    sum = pow ( fibo [ 0 ] , 2 ) + pow ( fibo [ 1 ] , 2 )\n    for i in range ( 2 , n + 1 ) :\n        fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]\n        if ( i % 2 == 0 ) :\n            sum -= fibo [ i ]\n        else :\n            sum += fibo [ i ]\n    return sum\n"}
{"java": "static int maxSum ( int arr [ ] , int i , int n , int k ) { if ( i >= n ) return 0 ; if ( visit [ i ] ) return dp [ i ] ; visit [ i ] = true ; int tot = 0 ; dp [ i ] = maxSum ( arr , i + 1 , n , k ) ; for ( int j = i ; j < ( i + k ) && ( j < n ) ; j ++ ) { tot += arr [ j ] ; dp [ i ] = Math . max ( dp [ i ] , tot + maxSum ( arr , j + 2 , n , k ) ) ; } return dp [ i ] ; }", "python": "def maxSum ( arr , i , n , k ) :\n    if ( i >= n ) :\n        return 0 ;\n    if ( visit [ i ] ) :\n        return dp [ i ] ;\n    visit [ i ] = 1 ;\n    tot = 0 ;\n    dp [ i ] = maxSum ( arr , i + 1 , n , k ) ;\n    j = i\n    while ( j < i + k and j < n ) :\n        tot += arr [ j ] ;\n        dp [ i ] = max ( dp [ i ] , tot + maxSum ( arr , j + 2 , n , k ) ) ;\n        j += 1\n    return dp [ i ] ;\n"}
{"java": "private static List < Integer > getMaxArray ( List < Integer > firstArray , List < Integer > secondArray ) { int first = Collections . max ( firstArray ) ; int second = Collections . max ( secondArray ) ; if ( first > second ) { return firstArray ; } return secondArray ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    a = [ int ( i ) for i in input ( ) . split ( ) ]\n    b = [ int ( i ) for i in input ( ) . split ( ) ]\n    for i in range ( n ) :\n        if a [ i ] < b [ i ] :\n            a [ i ] , b [ i ] = b [ i ] , a [ i ]\n    return max ( a ) * max ( b )\n"}
{"java": "static void printNumbers ( int N ) { int flag = 1 ; int x = N ; if ( N > 0 ) { while ( x > 0 && flag == 1 ) { int digit = x % 10 ; if ( digit != 1 && digit != 3 ) { flag = 0 ; } x = x / 10 ; } if ( flag == 1 ) { System . out . print ( N + \" \u2581 \" ) ; } printNumbers ( N - 1 ) ; } }", "python": "def printNumbers ( N ) :\n    flag = 1\n    x = N\n    if ( N > 0 ) :\n        while ( x > 0 and flag == 1 ) :\n            digit = x % 10\n            if ( digit != 1 and digit != 3 ) :\n                flag = 0\n            x = x // 10\n        if ( flag == 1 ) :\n            print ( N , end = \" \u2581 \" )\n        printNumbers ( N - 1 )\n"}
{"java": "static int countPairs ( int arr [ ] , int n ) { int forward [ ] = new int [ n ] ; Stack < Integer > sForward = new Stack < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { while ( ! sForward . empty ( ) && arr [ i ] > arr [ ( Integer ) sForward . peek ( ) ] ) { forward [ ( Integer ) sForward . peek ( ) ] = 1 ; sForward . pop ( ) ; } sForward . push ( i ) ; } int backward [ ] = new int [ n ] ; Stack < Integer > sBackward = new Stack < Integer > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( ! sBackward . empty ( ) && arr [ i ] > arr [ ( Integer ) sBackward . peek ( ) ] ) { backward [ ( Integer ) sBackward . peek ( ) ] = 1 ; sBackward . pop ( ) ; } sBackward . push ( i ) ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { res += forward [ i ] + backward [ i ] ; } return res ; }", "python": "def countPairs ( arr , n ) :\n    forward = [ 0 ] * n ;\n    sForward = [ ] ;\n    for i in range ( n ) :\n        while ( len ( sForward ) != 0 and arr [ i ] > arr [ sForward [ - 1 ] ] ) :\n            forward [ sForward [ - 1 ] ] = 1 ;\n            sForward . pop ( ) ;\n        sForward . append ( i ) ;\n    backward = [ 0 ] * n ;\n    sBackward = [ ] ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        while ( len ( sBackward ) != 0 and arr [ i ] > arr [ sBackward [ - 1 ] ] ) :\n            backward [ sBackward [ - 1 ] ] = 1 ;\n            sBackward . pop ( ) ;\n        sBackward . append ( i ) ;\n    res = 0 ;\n    for i in range ( n ) :\n        res += forward [ i ] + backward [ i ] ;\n    return res ;\n"}
{"java": "static long fourthPowerSum ( int n ) { return ( ( 6 * n * n * n * n * n ) + ( 15 * n * n * n * n ) + ( 10 * n * n * n ) - n ) / 30 ; }", "python": "def fourthPowerSum ( n ) :\n    return ( ( 6 * n * n * n * n * n ) + ( 15 * n * n * n * n ) + ( 10 * n * n * n ) - n ) / 30\n"}
{"java": "public static int [ ] readArr ( int N , BufferedReader infile , StringTokenizer st ) throws Exception { int [ ] arr = new int [ N ] ; st = new StringTokenizer ( infile . readLine ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; return arr ; }", "python": "def solve ( a , n ) :\n    maxv = max ( a )\n    sumv = sum ( a )\n    if maxv > sumv - maxv :\n        print ( ' T ' )\n    else :\n        if sumv % 2 == 1 :\n            print ( ' T ' )\n        else :\n            print ( ' HL ' )\n    return\n"}
{"java": "static void printMultiples ( int n ) { int unit_digit = n % 10 ; if ( unit_digit == 0 ) unit_digit = 10 ; for ( int i = unit_digit ; i <= n ; i += unit_digit ) System . out . print ( i + \" \u2581 \" ) ; }", "python": "def printMultiples ( n ) :\n    unit_digit = n % 10\n    if ( unit_digit == 0 ) :\n        unit_digit = 10\n    for i in range ( unit_digit , n + 1 , unit_digit ) :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "static Vector < Integer > deleteElement ( int A [ ] , int L , int R , int N ) { Vector < Integer > B = new Vector < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( i <= L || i >= R ) { B . add ( A [ i ] ) ; } } return B ; }", "python": "def deleteElement ( A , L , R , N ) :\n    B = [ ]\n    for i in range ( 0 , N , 1 ) :\n        if ( i <= L or i >= R ) :\n            B . append ( A [ i ] )\n    return B\n"}
{"java": "static void fourDistinctFactors ( ) { boolean [ ] primeAll = new boolean [ N + 1 ] ; for ( int p = 2 ; p * p <= N ; p ++ ) { if ( primeAll [ p ] == false ) { for ( int i = p * 2 ; i <= N ; i += p ) primeAll [ i ] = true ; } } ArrayList < Integer > prime = new ArrayList < Integer > ( ) ; for ( int p = 2 ; p <= N ; p ++ ) if ( ! primeAll [ p ] ) prime . add ( p ) ; for ( int i = 0 ; i < prime . size ( ) ; ++ i ) { int p = prime . get ( i ) ; if ( 1L * p * p * p <= N ) fourDiv [ p * p * p ] = true ; for ( int j = i + 1 ; j < prime . size ( ) ; ++ j ) { int q = prime . get ( j ) ; if ( 1L * p * q > N ) break ; fourDiv [ p * q ] = true ; } } }", "python": "def fourDistinctFactors ( ) :\n    primeAll = [ True ] * ( N + 1 ) ;\n    p = 2 ;\n    while ( p * p <= N ) :\n        if ( primeAll [ p ] == True ) :\n            i = p * 2 ;\n            while ( i <= N ) :\n                primeAll [ i ] = False ;\n                i += p ;\n        p += 1 ;\n    prime = [ ] ;\n    for p in range ( 2 , N + 1 ) :\n        if ( primeAll [ p ] ) :\n            prime . append ( p ) ;\n    for i in range ( len ( prime ) ) :\n        p = prime [ i ] ;\n        if ( 1 * p * p * p <= N ) :\n            fourDiv [ p * p * p ] = True ;\n        for j in range ( i + 1 , len ( prime ) ) :\n            q = prime [ j ] ;\n            if ( 1 * p * q > N ) :\n                break ;\n            fourDiv [ p * q ] = True ;\n"}
{"java": "static int multiply ( ) { int pro = 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) pro = pro * arr [ i ] ; return pro ; }", "python": "def multiply ( array , n ) :\n    pro = 1\n    for i in range ( n ) :\n        pro = pro * array [ i ]\n    return pro\n"}
{"java": "static int nthDigit ( int a , int n , int b ) { for ( int i = 1 ; i < n ; i ++ ) a = a / b ; return a % b ; }", "python": "def nthDigit ( a , n , b ) :\n    for i in range ( 1 , n ) :\n        a = a // b\n    return a % b\n"}
{"java": "static int findlargestAfterDel ( int arr [ ] , int m , int del [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( mp . containsKey ( del [ i ] ) ) { mp . put ( del [ i ] , mp . get ( del [ i ] ) + 1 ) ; } else { mp . put ( del [ i ] , 1 ) ; } } int largestElement = Integer . MIN_VALUE ; for ( int i = 0 ; i < m ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) - 1 ) ; if ( mp . get ( arr [ i ] ) == 0 ) mp . remove ( arr [ i ] ) ; } else largestElement = Math . max ( largestElement , arr [ i ] ) ; } return largestElement ; }", "python": "def findlargestAfterDel ( arr , m , dell , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if dell [ i ] in mp . keys ( ) :\n            mp [ dell [ i ] ] += 1\n        else :\n            mp [ dell [ i ] ] = 1\n    largestElement = - 10 ** 9\n    for i in range ( m ) :\n        if ( arr [ i ] in mp . keys ( ) ) :\n            mp [ arr [ i ] ] -= 1\n            if ( mp [ arr [ i ] ] == 0 ) :\n                mp . pop ( arr [ i ] )\n        else :\n            largestElement = max ( largestElement , arr [ i ] )\n    return largestElement\n"}
{"java": "static void reverseArray ( int arr [ ] [ ] ) { for ( int i = 0 ; i < M ; i ++ ) { int start = 0 ; int end = N - 1 ; while ( start < end ) { int temp = arr [ i ] [ start ] ; arr [ i ] [ start ] = arr [ i ] [ end ] ; arr [ i ] [ end ] = temp ; start ++ ; end -- ; } } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { System . out . print ( arr [ i ] [ j ] + \" \u2581 \" ) ; } System . out . println ( ) ; } }", "python": "def reverseArray ( arr ) :\n    for i in range ( M ) :\n        start = 0 ;\n        end = N - 1 ;\n        while ( start < end ) :\n            arr [ i ] [ start ] , arr [ i ] [ end ] = arr [ i ] [ end ] , arr [ i ] [ start ] ;\n            start += 1 ;\n            end -= 1 ;\n    for i in range ( M ) :\n        for j in range ( N ) :\n            print ( arr [ i ] [ j ] , end = ' \u2581 ' ) ;\n        print ( ) ;\n"}
{"java": "static void checkAllOnes ( int arr [ ] , int n , int k ) { int brr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { int h = k + 1 ; int j = i ; while ( ( j >= 0 ) && ( h -- != 0 ) ) { brr [ j ] = 1 ; j -- ; } h = k + 1 ; j = i ; while ( ( j < n ) && ( h -- != 0 ) ) { brr [ j ] = 1 ; j ++ ; } } } int flag = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( brr [ i ] == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) System . out . println ( \"0\" ) ; else System . out . println ( \"1\" ) ; }", "python": "def checkAllOnes ( arr , n , k ) :\n    brr = [ 0 for i in range ( n ) ]\n    for i in range ( n ) :\n        if ( arr [ i ] == 1 ) :\n            h = k + 1\n            j = i\n            while ( j >= 0 and ( h ) ) :\n                brr [ j ] = 1\n                h -= 1\n                j -= 1\n            h = k + 1\n            j = i\n            while ( j < n and ( h ) ) :\n                brr [ j ] = 1\n                j += 1\n                h -= 1\n    flag = 0\n    for i in range ( n ) :\n        if ( brr [ i ] == 0 ) :\n            flag = 1\n            break\n    if ( flag == 1 ) :\n        print ( \"0\" )\n    else :\n        print ( \"1\" )\n"}
{"java": "static int toggleBitsFromLToR ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; return ( n ^ num ) ; }", "python": "def toggleBitsFromLToR ( n , l , r ) :\n    num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 )\n    return ( n ^ num )\n"}
{"java": "static int countSubString ( char [ ] S , char L [ ] , int n ) { int [ ] freq = new int [ 26 ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq [ ( int ) ( L [ i ] - ' a ' ) ] = 1 ; } int count = 0 ; for ( int x : S ) { if ( freq [ ( int ) ( x - ' a ' ) ] > 0 ) { ans += ( count * count + count ) / 2 ; count = 0 ; } else count ++ ; } ans += ( count * count + count ) / 2 ; return ans ; }", "python": "def countSubstring ( S , L , n ) :\n    freq = [ 0 for i in range ( 26 ) ]\n    for i in range ( n ) :\n        freq [ ( ord ( L [ i ] ) - ord ( ' a ' ) ) ] = 1\n    count , ans = 0 , 0\n    for x in S :\n        if ( freq [ ord ( x ) - ord ( ' a ' ) ] ) :\n            ans += ( count * count + count ) // 2\n            count = 0\n        else :\n            count += 1\n    ans += ( count * count + count ) // 2\n    return ans\n"}
{"java": "static int countSubarrays ( int a [ ] , int n ) { int count = 0 ; int [ ] pre = new int [ n + 1 ] ; Arrays . fill ( pre , 0 ) ; for ( int i = 1 ; i < n + 1 ; i ++ ) { pre [ i ] = pre [ i - 1 ] + a [ i - 1 ] ; } for ( int i = 1 ; i < n + 1 ; i ++ ) { for ( int j = i ; j < n + 1 ; j ++ ) { int sum1 = pre [ j ] - pre [ i - 1 ] , count1 = j - i + 1 ; int sum2 = pre [ n ] - sum1 , count2 = ( ( n - count1 ) == 0 ) ? 1 : ( n - count1 ) ; int includ = sum1 / count1 ; int exclud = sum2 / count2 ; if ( includ > exclud ) count ++ ; } } return count ; }", "python": "def countSubarrays ( a , n ) :\n    count = 0\n    pre = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        pre [ i ] = pre [ i - 1 ] + a [ i - 1 ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i , n + 1 ) :\n            sum1 = pre [ j ] - pre [ i - 1 ]\n            count1 = j - i + 1\n            sum2 = pre [ n ] - sum1\n            if n - count1 == 0 :\n                count2 = 1\n            else :\n                count2 = n - count1\n            includ = sum1 // count1\n            exclud = sum2 // count2\n            if ( includ > exclud ) :\n                count += 1\n    return count\n"}
{"java": "static float Time ( float arr [ ] , int n , float Emptypipe ) { float fill = 0 ; for ( int i = 0 ; i < n ; i ++ ) fill += 1 / arr [ i ] ; fill = fill - ( 1 / ( float ) Emptypipe ) ; return 1 / fill ; }", "python": "def Time ( arr , n , Emptypipe ) :\n    fill = 0\n    for i in range ( 0 , n ) :\n        fill += ( 1 / arr [ i ] )\n    fill = fill - ( 1 / float ( Emptypipe ) )\n    return int ( 1 / fill )\n"}
{"java": "static int calculate ( int x , int k , int m ) { int result = x ; k -- ; while ( k -- > 0 ) { result = ( int ) Math . pow ( result , x ) ; if ( result > m ) result %= m ; } return result ; }", "python": "def calculate ( x , k , m ) :\n    result = x ;\n    k = k - 1 ;\n    while ( k ) :\n        result = math . pow ( result , x ) ;\n        if ( result > m ) :\n            result = result % m ;\n        k = k - 1 ;\n    return int ( result ) ;\n"}
{"java": "static void dist ( double x1 , double y1 , double x2 , double y2 , double r ) { System . out . println ( \" The \u2581 shortest \u2581 distance \u2581 \" + \" between \u2581 a \u2581 point \u2581 and \u2581 a \u2581 circle \u2581 is \u2581 \" + ( Math . sqrt ( ( Math . pow ( ( x2 - x1 ) , 2 ) ) + ( Math . pow ( ( y2 - y1 ) , 2 ) ) ) - r ) ) ; }", "python": "def dist ( x1 , y1 , x2 , y2 , r ) :\n    print ( \" The \u2581 shortest \u2581 distance \u2581 between \u2581 a \u2581 point \u2581 and \u2581 a \u2581 circle \u2581 is \u2581 \" , ( ( ( ( x2 - x1 ) ** 2 ) + ( ( y2 - y1 ) ** 2 ) ) ** ( 1 / 2 ) ) - r ) ;\n"}
{"java": "static double Probability ( double p [ ] , int n ) { double [ ] [ ] dp = new double [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1.0 ; for ( int i = 1 ; i <= n ; i += 1 ) { for ( int j = 0 ; j <= i ; j += 1 ) { if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] * ( 1.0 - p [ i ] ) ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] * ( 1.0 - p [ i ] ) + dp [ i - 1 ] [ j - 1 ] * p [ i ] ; } } double ans = 0.0 ; for ( int i = ( n + 1 ) / 2 ; i <= n ; i += 1 ) ans += dp [ n ] [ i ] ; return ans ; }", "python": "def Probability ( p , n ) :\n    dp = np . zeros ( ( n + 1 , n + 1 ) ) ;\n    for i in range ( n + 1 ) :\n        for j in range ( n + 1 ) :\n            dp [ i ] [ j ] = 0.0\n    dp [ 0 ] [ 0 ] = 1.0 ;\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i + 1 ) :\n            if ( j == 0 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j ] * ( 1.0 - p [ i ] ) ;\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] * ( 1.0 - p [ i ] ) + dp [ i - 1 ] [ j - 1 ] * p [ i ] ) ;\n    ans = 0.0 ;\n    for i in range ( ( n + 1 ) // 2 , n + 1 ) :\n        ans += dp [ n ] [ i ] ;\n    return ans ;\n"}
{"java": "static void findWeights ( int X ) { int sum = 0 ; int power = 0 ; int number = 3 ; while ( sum < X ) { sum = number - 1 ; sum /= 2 ; power ++ ; number *= 3 ; } int ans = 1 ; for ( int i = 1 ; i <= power ; i ++ ) { System . out . print ( ans + \" \u2581 \" ) ; ans = ans * 3 ; } }", "python": "def findWeights ( X ) :\n    sum = 0\n    power = 0\n    while ( sum < X ) :\n        sum = pow ( 3 , power + 1 ) - 1\n        sum //= 2\n        power += 1\n    ans = 1\n    for i in range ( 1 , power + 1 ) :\n        print ( ans , end = \" \u2581 \" )\n        ans = ans * 3\n"}
{"java": "static long max_gcd ( long n , long p ) { int count = 0 ; long gcd = 1 ; while ( p % 2 == 0 ) { p >>= 1 ; count ++ ; } if ( count > 0 ) gcd *= ( long ) Math . pow ( 2 , count / n ) ; for ( long i = 3 ; i <= Math . sqrt ( p ) ; i += 2 ) { count = 0 ; while ( p % i == 0 ) { count ++ ; p = p / i ; } if ( count > 0 ) { gcd *= ( long ) Math . pow ( i , count / n ) ; } } if ( p > 2 ) gcd *= ( long ) Math . pow ( p , 1 / n ) ; return gcd ; }", "python": "def max_gcd ( n , p ) :\n    count = 0 ;\n    gcd = 1 ;\n    while ( p % 2 == 0 ) :\n        p >>= 1 ;\n        count = count + 1 ;\n    if ( count > 0 ) :\n        gcd = gcd * pow ( 2 , count // n ) ;\n    for i in range ( 3 , ( int ) ( math . sqrt ( p ) ) , 2 ) :\n        count = 0 ;\n        while ( p % i == 0 ) :\n            count = count + 1 ;\n            p = p // i ;\n        if ( count > 0 ) :\n            gcd = gcd * pow ( i , count // n ) ;\n    if ( p > 2 ) :\n        gcd = gcd * pow ( p , 1 // n ) ;\n    return gcd ;\n"}
{"java": "static void findMax ( int [ ] arr , int n ) { int maxFirst = Integer . MIN_VALUE ; int mid = n / 2 ; for ( int i = 0 ; i < mid ; i ++ ) { maxFirst = Math . max ( maxFirst , arr [ i ] ) ; } if ( n % 2 == 1 ) { maxFirst = Math . max ( maxFirst , arr [ mid ] ) ; } int maxSecond = Integer . MIN_VALUE ; for ( int i = mid ; i < n ; i ++ ) { maxSecond = Math . max ( maxSecond , arr [ i ] ) ; } System . out . print ( maxFirst + \" , \u2581 \" + maxSecond ) ; }", "python": "def findMax ( arr , n ) :\n    maxFirst = - sys . maxsize - 1\n    mid = n // 2 ;\n    for i in range ( 0 , mid ) :\n        maxFirst = max ( maxFirst , arr [ i ] )\n    if ( n % 2 == 1 ) :\n        maxFirst = max ( maxFirst , arr [ mid ] )\n    maxSecond = - sys . maxsize - 1\n    for i in range ( mid , n ) :\n        maxSecond = max ( maxSecond , arr [ i ] )\n    print ( maxFirst , \" , \" , maxSecond )\n"}
{"java": "static int max_sum ( int a [ ] , int n ) { int [ ] [ ] dp = new int [ n + 1 ] [ 2 ] ; dp [ 0 ] [ 0 ] = 0 ; dp [ 0 ] [ 1 ] = - 999999 ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] + a [ i ] , dp [ i ] [ 1 ] - a [ i ] ) ; dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] - a [ i ] , dp [ i ] [ 1 ] + a [ i ] ) ; } return dp [ n ] [ 0 ] ; }", "python": "def max_sum ( a , n ) :\n    dp = [ [ 0 for i in range ( 2 ) ] for j in range ( n + 1 ) ]\n    dp [ 0 ] [ 0 ] = 0 ; dp [ 0 ] [ 1 ] = - 999999 ;\n    for i in range ( 0 , n ) :\n        dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] + a [ i ] , dp [ i ] [ 1 ] - a [ i ] ) ;\n        dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] - a [ i ] , dp [ i ] [ 1 ] + a [ i ] ) ;\n    return dp [ n ] [ 0 ] ;\n"}
{"java": "static int bitAtGivenPosSetOrUnset ( int n , int k ) { int new_num = n >> ( k - 1 ) ; return ( new_num & 1 ) ; }", "python": "def bitAtGivenPosSetOrUnset ( n , k ) :\n    new_num = n >> ( k - 1 )\n    return ( new_num & 1 )\n"}
{"java": "static int longestPermutation ( int arr [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( arr [ i ] ) ) { freq . put ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) ; } else { freq . put ( arr [ i ] , 1 ) ; } } int len = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! freq . containsKey ( i ) ) { break ; } len ++ ; } return len ; }", "python": "def longestPermutation ( a , n ) :\n    freq = defaultdict ( int )\n    for i in range ( n ) :\n        freq [ a [ i ] ] += 1\n    length = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( freq [ i ] == 0 ) :\n            break\n        length += 1\n    return length\n"}
{"java": "static void alphabetPattern ( int N ) { int left = 0 , middle = N - 1 , right = N + 1 ; for ( int row = 0 ; row < 2 * N - 1 ; row ++ ) { if ( row < N ) System . out . print ( ++ left ) ; else System . out . print ( -- left ) ; for ( int col = 1 ; col < N - 1 ; col ++ ) { if ( row != N - 1 ) System . out . print ( \" \u2581 \u2581 \" ) ; else System . out . print ( \" \u2581 \" + middle -- ) ; } if ( row < N ) System . out . print ( \" \u2581 \" + -- right ) ; else System . out . print ( \" \u2581 \" + ++ right ) ; System . out . println ( ) ; } }", "python": "def alphabetPattern ( N ) :\n    left , middle , right = 0 , N - 1 , N + 1\n    for row in range ( 0 , 2 * N - 1 ) :\n        if row < N :\n            left += 1\n            print ( left , end = \" \" )\n        else :\n            left -= 1\n            print ( left , end = \" \" )\n        for col in range ( 1 , N - 1 ) :\n            if row != N - 1 :\n                print ( \" \u2581 \" , end = \" \u2581 \" )\n            else :\n                print ( \" \u2581 \" + str ( middle ) , end = \" \" )\n                middle -= 1\n        if row < N :\n            right -= 1\n            print ( \" \u2581 \" + str ( right ) , end = \" \" )\n        else :\n            right += 1\n            print ( \" \u2581 \" + str ( right ) , end = \" \" )\n        print ( )\n"}
{"java": "static boolean check ( int a [ ] [ ] , int b [ ] [ ] ) { for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j < M ; j ++ ) { if ( a [ i ] [ j ] != b [ i ] [ j ] ) { a [ i ] [ j ] ^= 1 ; a [ 0 ] [ 0 ] ^= 1 ; a [ 0 ] [ j ] ^= 1 ; a [ i ] [ 0 ] ^= 1 ; } } } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( a [ i ] [ j ] != b [ i ] [ j ] ) return false ; } } return true ; }", "python": "def check ( a , b ) :\n    for i in range ( 1 , N , 1 ) :\n        for j in range ( 1 , M , 1 ) :\n            if ( a [ i ] [ j ] != b [ i ] [ j ] ) :\n                a [ i ] [ j ] ^= 1\n                a [ 0 ] [ 0 ] ^= 1\n                a [ 0 ] [ j ] ^= 1\n                a [ i ] [ 0 ] ^= 1\n    for i in range ( N ) :\n        for j in range ( M ) :\n            if ( a [ i ] [ j ] != b [ i ] [ j ] ) :\n                return False\n    return True\n"}
{"java": "static int check ( int n , List < Integer > marks ) { Integer x = Collections . max ( marks ) ; int bonus = 100 - x ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( marks . get ( i ) + bonus >= 50 ) c += 1 ; } return c ; }", "python": "def check ( n , marks ) :\n    x = max ( marks )\n    bonus = 100 - x\n    c = 0\n    for i in range ( n ) :\n        if ( marks [ i ] + bonus >= 50 ) :\n            c += 1\n    return c\n"}
{"java": "static int countSubstr ( String str , int n , char x , char y ) { int tot_count = 0 ; int count_x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == x ) count_x ++ ; if ( str . charAt ( i ) == y ) tot_count += count_x ; } return tot_count ; }", "python": "def countSubstr ( str , n , x , y ) :\n    tot_count = 0\n    count_x = 0\n    for i in range ( n ) :\n        if str [ i ] == x :\n            count_x += 1\n        if str [ i ] == y :\n            tot_count += count_x\n    return tot_count\n"}
{"java": "static int countOcc ( String s ) { int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) - 3 ; i ++ ) { int c = 0 , l = 0 , a = 0 , p = 0 ; for ( int j = i ; j < i + 4 ; j ++ ) { switch ( s . charAt ( j ) ) { case ' c ' : c ++ ; break ; case ' l ' : l ++ ; break ; case ' a ' : a ++ ; break ; case ' p ' : p ++ ; break ; } } if ( c == 1 && l == 1 && a == 1 && p == 1 ) cnt ++ ; } return cnt ; }", "python": "def countOcc ( s ) :\n    cnt = 0\n    for i in range ( 0 , len ( s ) - 3 ) :\n        c , l , a , p = 0 , 0 , 0 , 0\n        for j in range ( i , i + 4 ) :\n            if s [ j ] == ' c ' :\n                c += 1\n            elif s [ j ] == ' l ' :\n                l += 1\n            elif s [ j ] == ' a ' :\n                a += 1\n            elif s [ j ] == ' p ' :\n                p += 1\n        if c == 1 and l == 1 and a == 1 and p == 1 :\n            cnt += 1\n    return cnt\n"}
{"java": "static int longestPrefixSuffix ( String s ) { int n = s . length ( ) ; if ( n < 2 ) { return 0 ; } int len = 0 ; int i = n / 2 ; while ( i < n ) { if ( s . charAt ( i ) == s . charAt ( len ) ) { ++ len ; ++ i ; } else { if ( len == 0 ) { ++ i ; } else { -- len ; } } } return len ; }", "python": "def longestPrefixSuffix ( s ) :\n    n = len ( s )\n    for res in range ( n // 2 , 0 , - 1 ) :\n        prefix = s [ 0 : res ]\n        suffix = s [ n - res : n ]\n        if ( prefix == suffix ) :\n            return res\n    return 0\n"}
{"java": "static void NicomachuTheorum_sum ( int n ) { int sum = 0 ; for ( int k = 1 ; k <= n ; k ++ ) sum += k * k * k ; int triNo = n * ( n + 1 ) / 2 ; if ( sum == triNo * triNo ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; }", "python": "def NicomachuTheorum_sum ( n ) :\n    sum = 0 ;\n    for k in range ( 1 , n + 1 ) :\n        sum += k * k * k ;\n    triNo = n * ( n + 1 ) / 2 ;\n    if ( sum == triNo * triNo ) :\n        print ( \" Yes \" ) ;\n    else :\n        print ( \" No \" ) ;\n"}
{"java": "static double nthHarmonic ( int N ) { float harmonic = 1 ; for ( int i = 2 ; i <= N ; i ++ ) { harmonic += ( float ) 1 / i ; } return harmonic ; }", "python": "def nthHarmonic ( N ) :\n    harmonic = 1.00\n    for i in range ( 2 , N + 1 ) :\n        harmonic += 1 / i\n    return harmonic\n"}
{"java": "static int sum ( int N ) { int S1 , S2 , S3 ; S1 = ( ( N / 3 ) ) * ( 2 * 3 + ( N / 3 - 1 ) * 3 ) / 2 ; S2 = ( ( N / 4 ) ) * ( 2 * 4 + ( N / 4 - 1 ) * 4 ) / 2 ; S3 = ( ( N / 12 ) ) * ( 2 * 12 + ( N / 12 - 1 ) * 12 ) / 2 ; return S1 + S2 - S3 ; }", "python": "def sum ( N ) :\n    global S1 , S2 , S3\n    S1 = ( ( ( N // 3 ) ) * ( 2 * 3 + ( N // 3 - 1 ) * 3 ) // 2 )\n    S2 = ( ( ( N // 4 ) ) * ( 2 * 4 + ( N // 4 - 1 ) * 4 ) // 2 )\n    S3 = ( ( ( N // 12 ) ) * ( 2 * 12 + ( N // 12 - 1 ) * 12 ) // 2 )\n    return int ( S1 + S2 - S3 )\n"}
{"java": "public static int sum ( int N ) { int S1 , S2 , S3 ; S1 = ( ( N / 2 ) ) * ( 2 * 2 + ( N / 2 - 1 ) * 2 ) / 2 ; S2 = ( ( N / 7 ) ) * ( 2 * 7 + ( N / 7 - 1 ) * 7 ) / 2 ; S3 = ( ( N / 14 ) ) * ( 2 * 14 + ( N / 14 - 1 ) * 14 ) / 2 ; return S1 + S2 - S3 ; }", "python": "def sum ( N ) :\n    S1 = ( ( N // 2 ) ) * ( 2 * 2 + ( N // 2 - 1 ) * 2 ) // 2\n    S2 = ( ( N // 7 ) ) * ( 2 * 7 + ( N // 7 - 1 ) * 7 ) // 2\n    S3 = ( ( N // 14 ) ) * ( 2 * 14 + ( N // 14 - 1 ) * 14 ) // 2\n    return S1 + S2 - S3\n"}
{"java": "static void anglechordtang ( int z ) { System . out . print ( \" The \u2581 angle \u2581 between \u2581 tangent \" + \" \u2581 and \u2581 the \u2581 chord \u2581 is \u2581 \" + z + \" \u2581 degrees \" ) ; }", "python": "def anglechordtang ( z ) :\n    print ( \" The \u2581 angle \u2581 between \u2581 tangent \" , \" and \u2581 the \u2581 chord \u2581 is \" , z , \" degrees \" ) ;\n"}
{"java": "private static void print ( int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ) ; for ( int j = 0 ; j < ( 3 * k + 2 ) ; j ++ ) { if ( ( i == 0 && j != k && j != 2 * k + 1 ) || ( ( i == n / 2 ) && ( j > 1 ) && ( j != k ) && ( j != 2 * k + 1 ) && ( j != 2 * k + 3 ) ) || ( ( i == n - 1 ) && ( j != k ) && ( ( j <= k ) || ( j > 2 * k + 1 ) ) ) || ( j == 0 ) || ( j == k + 1 ) || ( j == ( 2 * k + 2 ) ) || ( ( j == k - 1 || j == 3 * k + 1 ) && ( i > n / 2 ) ) ) System . out . print ( \" * \" ) ; else System . out . print ( \" \u2581 \" ) ; } } }", "python": "def print1 ( n , k ) :\n    for i in range ( 0 , n ) :\n        print ( \" \\n \" )\n        for j in range ( 0 , ( 3 * k + 2 ) ) :\n            if ( ( i == 0 and j != k and j != 2 * k + 1 ) or ( ( i == math . floor ( n / 2 ) ) and ( j > 1 ) and ( j != k ) and ( j != 2 * k + 1 ) and ( j != 2 * k + 3 ) ) or ( ( i == n - 1 ) and ( j != k ) and ( ( j <= k ) or ( j > 2 * k + 1 ) ) ) or ( j == 0 ) or ( j == k + 1 ) or ( j == ( 2 * k + 2 ) ) or ( ( j == k - 1 or j == 3 * k + 1 ) and ( i > math . floor ( n / 2 ) ) ) ) :\n                print ( \" * \" , end = \" \" )\n            else :\n                print ( \" \u2581 \" , end = \" \" )\n"}
{"java": "static void checkSquare ( String s1 , String s2 ) { int c = Integer . valueOf ( s1 + s2 ) ; int d = ( int ) Math . sqrt ( c ) ; if ( d * d == c ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } }", "python": "def checkSquare ( s1 , s2 ) :\n    c = int ( s1 + s2 )\n    d = math . sqrt ( c )\n    if ( d * d == c ) :\n        print ( \" Yes \" )\n    else :\n        print ( \" No \" )\n"}
{"java": "static int countSticks ( String str ) { int cnt = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch >= ' A ' && ch <= ' Z ' ) { cnt += sticks [ ch - ' A ' ] ; } else { cnt += number [ ch - '0' ] ; } } return cnt ; }", "python": "def countSticks ( string ) :\n    cnt = 0 ;\n    for i in range ( len ( string ) ) :\n        ch = string [ i ] ;\n        if ( ch >= ' A ' and ch <= ' Z ' ) :\n            cnt += sticks [ ord ( ch ) - ord ( ' A ' ) ] ;\n        else :\n            cnt += number [ ord ( ch ) - ord ( '0' ) ] ;\n    return cnt ;\n"}
{"java": "static boolean DivisibleBy41 ( int first , int second , int c , int n ) { int digit [ ] = new int [ n ] ; digit [ 0 ] = first ; digit [ 1 ] = second ; for ( int i = 2 ; i < n ; i ++ ) digit [ i ] = ( digit [ i - 1 ] * c + digit [ i - 2 ] ) % 10 ; int ans = digit [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) ans = ( ans * 10 + digit [ i ] ) % 41 ; if ( ans % 41 == 0 ) return true ; else return false ; }", "python": "def DivisibleBy41 ( first , second , c , n ) :\n    digit = [ 0 ] * n\n    digit [ 0 ] = first\n    digit [ 1 ] = second\n    for i in range ( 2 , n ) :\n        digit [ i ] = ( digit [ i - 1 ] * c + digit [ i - 2 ] ) % 10\n    ans = digit [ 0 ]\n    for i in range ( 1 , n ) :\n        ans = ( ans * 10 + digit [ i ] ) % 41\n    if ( ans % 41 == 0 ) :\n        return True\n    else :\n        return False\n"}
{"java": "public static int countTriplets ( int [ ] arr , int n , int a , int b ) { int ans = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( arr [ i ] + arr [ j ] + arr [ k ] >= a && arr [ i ] + arr [ j ] + arr [ k ] <= b ) { ans ++ ; } } } } return ans ; }", "python": "def countTriplets ( arr , n , a , b ) :\n    ans = 0\n    for i in range ( 0 , n - 2 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( ( arr [ i ] + arr [ j ] + arr [ k ] >= a ) and ( arr [ i ] + arr [ j ] + arr [ k ] <= b ) ) :\n                    ans += 1\n    return ans\n"}
{"java": "static long nthTerm ( long n ) { long nth ; if ( n % 2 == 0 ) nth = 2 * ( ( n * n ) - n ) ; else nth = ( 2 * n * n ) - n ; return nth ; }", "python": "def nthTerm ( n ) :\n    nth = 0\n    if ( n % 2 == 0 ) :\n        nth = 2 * ( ( n * n ) - n )\n    else :\n        nth = ( 2 * n * n ) - n\n    return nth\n"}
{"java": "static int checkSparse ( int n ) { if ( ( n & ( n >> 1 ) ) >= 1 ) return 0 ; return 1 ; }", "python": "def checkSparse ( n ) :\n    if ( n & ( n >> 1 ) ) :\n        return 0\n    return 1\n"}
{"java": "static void findCart ( int arr1 [ ] , int arr2 [ ] , int n , int n1 ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n1 ; j ++ ) System . out . print ( \" { \" + arr1 [ i ] + \" , \u2581 \" + arr2 [ j ] + \" } , \u2581 \" ) ; }", "python": "def findCart ( arr1 , arr2 , n , n1 ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n1 ) :\n            print ( \" { \" , arr1 [ i ] , \" , \u2581 \" , arr2 [ j ] , \" } , \u2581 \" , sep = \" \" , end = \" \" )\n"}
{"java": "static int count_pairs ( int n , int a [ ] ) { HashMap < Integer , Integer > frequency = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! frequency . containsKey ( a [ i ] ) ) frequency . put ( a [ i ] , 0 ) ; frequency . put ( a [ i ] , frequency . get ( a [ i ] ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > x : frequency . entrySet ( ) ) { int f = x . getValue ( ) ; count += f * ( f - 1 ) / 2 ; } return ( ( n * ( n - 1 ) ) / 2 ) - count ; }", "python": "def count_pairs ( n , a ) :\n    frequency = dict . fromkeys ( a , 0 )\n    for i in range ( n ) :\n        frequency [ a [ i ] ] += 1\n    count = 0\n    for f in frequency . values ( ) :\n        count += f * ( f - 1 ) // 2\n    return ( ( n * ( n - 1 ) ) // 2 ) - count\n"}
{"java": "static boolean checkConcurrent ( int a1 , int b1 , int c1 , int a2 , int b2 , int c2 , int a3 , int b3 , int c3 ) { return ( a3 * ( b1 * c2 - b2 * c1 ) + b3 * ( c1 * a2 - c2 * a1 ) + c3 * ( a1 * b2 - a2 * b1 ) == 0 ) ; }", "python": "def checkConcurrent ( a1 , b1 , c1 , a2 , b2 , c2 , a3 , b3 , c3 ) :\n    return ( a3 * ( b1 * c2 - b2 * c1 ) + b3 * ( c1 * a2 - c2 * a1 ) + c3 * ( a1 * b2 - a2 * b1 ) == 0 )\n"}
{"java": "static boolean pd ( String s ) { if ( s . charAt ( 0 ) == ' @ ' || s . charAt ( s . length ( ) - 1 ) == ' @ ' ) return false ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == ' @ ' && s . charAt ( i + 1 ) == ' @ ' ) return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == ' @ ' && s . charAt ( i + 2 ) == ' @ ' ) return false ; } return true ; }", "python": "def solve ( s ) :\n    n = len ( s )\n    if s [ 0 ] == ' @ ' or s [ - 1 ] == ' @ ' or n <= 2 or ' @ @ ' in s :\n        print ( ' No \u2581 solution ' )\n        return\n    lis = [ ]\n    i = 0\n    t = ' '\n    while ( i < n ) :\n        if s [ i ] != ' @ ' :\n            t += s [ i ]\n            i += 1\n        else :\n            t += ' @ ' + s [ i + 1 ]\n            if t [ 0 ] == ' @ ' :\n                print ( ' No \u2581 solution ' )\n                return\n            lis . append ( t )\n            t = ' '\n            i += 2\n    if lis :\n        lis [ - 1 ] += t\n    else :\n        print ( ' No \u2581 solution ' )\n        return\n    print ( ' , ' . join ( lis ) )\n"}
{"java": "static boolean allBitsSetInTheGivenRange ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; int new_num = n & num ; if ( new_num == 0 ) return true ; return false ; }", "python": "def allBitsSetInTheGivenRange ( n , l , r ) :\n    num = ( ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) )\n    new_num = n & num\n    if ( new_num == 0 ) :\n        return True\n    return false\n"}
{"java": "static int evenDecimalValue ( String str , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == '0' ) { result += ( n - i ) ; } } return result ; }", "python": "def evenDecimalValue ( str , n ) :\n    result = 0\n    for i in range ( 0 , n ) :\n        if ( str [ i ] == '0' ) :\n            result += ( n - i )\n    return result\n"}
{"java": "static int minsteps ( int n , int m ) { if ( m > n ) { return - 1 ; } else { return ( ( n + 1 ) / 2 + m - 1 ) / m * m ; } }", "python": "def minsteps ( n , m ) :\n    if ( m > n ) :\n        return - 1\n    else :\n        return ( ( n + 1 ) // 2 + m - 1 ) // m * m ;\n"}
{"java": "public static void solve ( int n , int c0 , int c1 , int h , String bS ) { int vwoc = 0 , numOf1 = 0 , numOf0 = 0 , vwc = 0 ; for ( int i = 0 ; i < bS . length ( ) ; i ++ ) { if ( bS . charAt ( i ) == '0' ) { numOf0 += 1 ; } else { numOf1 += 1 ; } } vwoc = ( numOf0 * c0 ) + ( numOf1 * c1 ) ; if ( c0 < c1 ) { c1 = c0 + h ; } else { c0 = c1 + h ; } vwc = ( numOf0 * c0 ) + ( numOf1 * c1 ) ; int minCost = vwoc ; if ( vwc < vwoc ) { minCost = vwc ; } System . out . println ( minCost ) ; }", "python": "def calcF ( s , c0 , c1 ) :\n    res = 0\n    for c in s :\n        if c == \"0\" :\n            res += c0\n        else :\n            res += c1\n    return res\n"}
{"java": "public static final int ret_coin ( int P , int [ ] coin_nums ) { int ret = 0 ; for ( int i = 0 ; i < coins . length ; i ++ ) { final int p_use = P / coins [ i ] ; final int can_use = Math . min ( p_use , coin_nums [ i ] ) ; ret += can_use ; P -= coins [ i ] * can_use ; } return ret ; }", "python": "def pay ( p ) :\n    cnt = 0\n    for i in range ( 6 ) :\n        if c [ i ] <= p :\n            k = p // c [ i ]\n            if k > n [ i ] : k = n [ i ]\n            cnt += k\n            p -= c [ i ] * k\n    return - 1 if p > 0 else cnt\n"}
{"java": "static int isSubstring ( String s1 , String s2 ) { int M = s1 . length ( ) ; int N = s2 . length ( ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( s2 . charAt ( i + j ) != s1 . charAt ( j ) ) break ; if ( j == M ) return i ; } return - 1 ; }", "python": "def isSubstring ( s1 , s2 ) :\n    M = len ( s1 )\n    N = len ( s2 )\n    for i in range ( N - M + 1 ) :\n        for j in range ( M ) :\n            if ( s2 [ i + j ] != s1 [ j ] ) :\n                break\n        if j + 1 == M :\n            return i\n    return - 1\n"}
{"java": "static int xorLessK ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tempXor = 0 ; for ( int j = i ; j < n ; j ++ ) { tempXor ^= arr [ j ] ; if ( tempXor < k ) count ++ ; } } return count ; }", "python": "def xorLessK ( arr , n , k ) :\n    count = 0\n    for i in range ( n ) :\n        tempXor = 0\n        for j in range ( i , n ) :\n            tempXor ^= arr [ j ]\n            if ( tempXor < k ) :\n                count += 1\n    return count\n"}
{"java": "public static void findFirstAndLast ( int arr [ ] , int x ) { int n = arr . length ; int first = - 1 , last = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x != arr [ i ] ) continue ; if ( first == - 1 ) first = i ; last = i ; } if ( first != - 1 ) { System . out . println ( \" First \u2581 Occurrence \u2581 = \u2581 \" + first ) ; System . out . println ( \" Last \u2581 Occurrence \u2581 = \u2581 \" + last ) ; } else System . out . println ( \" Not \u2581 Found \" ) ; }", "python": "def findFirstAndLast ( arr , n , x ) :\n    first = - 1\n    last = - 1\n    for i in range ( 0 , n ) :\n        if ( x != arr [ i ] ) :\n            continue\n        if ( first == - 1 ) :\n            first = i\n        last = i\n    if ( first != - 1 ) :\n        print ( \" First \u2581 Occurrence \u2581 = \u2581 \" , first , \" \u2581 \\n Last \u2581 Occurrence \u2581 = \u2581 \" , last )\n    else :\n        print ( \" Not \u2581 Found \" )\n"}
{"java": "public static int dfs ( int rest , int remain , int [ ] [ ] memo ) { if ( memo [ rest ] [ remain ] != - 1 ) { return memo [ rest ] [ remain ] ; } else if ( rest == 0 ) { return remain == 0 ? 1 : 0 ; } int ret = 0 ; final int limit = Math . min ( 1000 , remain ) ; for ( int cur = 0 ; cur <= limit ; cur ++ ) { ret += dfs ( rest - 1 , remain - cur , memo ) ; } return memo [ rest ] [ remain ] = ret ; }", "python": "def main ( args ) :\n    lut = defaultdict ( int )\n    for a in range ( 1001 ) :\n        for b in range ( 1001 ) :\n            lut [ a + b ] += 1\n    for line in sys . stdin :\n        n = int ( line )\n        ans = 0\n        for i in range ( n + 1 ) :\n            ans += lut [ i ] * lut [ n - i ]\n        print ( ans )\n"}
{"java": "static void findNthTerm ( int N ) { int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i % 2 == 0 ) { ans = ans + 6 ; } else { ans = ans + 2 ; } } System . out . print ( ans + \" \\n \" ) ; }", "python": "def findNthTerm ( N ) :\n    ans = 0\n    for i in range ( N ) :\n        if ( i % 2 == 0 ) :\n            ans = ans + 6\n        else :\n            ans = ans + 2\n    print ( ans )\n"}
{"java": "static int getMinLength ( double arr [ ] , int n ) { int count = 0 ; int result = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } else { if ( count != 0 ) result = Math . min ( result , count ) ; count = 0 ; } } return result ; }", "python": "def getMinLength ( arr , n ) :\n    count = 0 ;\n    result = sys . maxsize ;\n    for i in range ( n ) :\n        if ( arr [ i ] == 1 ) :\n            count += 1 ;\n        else :\n            if ( count != 0 ) :\n                result = min ( result , count ) ;\n            count = 0 ;\n    return result ;\n"}
{"java": "static int minOperations ( int [ ] A , int n ) { if ( ( n & 1 ) > 0 ) return - 1 ; int zeros = 0 , consZeros = 0 , ones = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( A [ i ] == 0 ) zeros ++ ; else ones ++ ; if ( i + 1 < n ) { if ( A [ i ] == 0 && A [ i + 1 ] == 0 ) consZeros ++ ; } } if ( A [ 0 ] == A [ n - 1 ] && A [ 0 ] == 0 ) consZeros ++ ; if ( zeros == ones ) return consZeros ; else return - 1 ; }", "python": "def minOperations ( A , n ) :\n    if n & 1 :\n        return - 1\n    zeros , consZeros , ones = 0 , 0 , 0\n    for i in range ( n ) :\n        if A [ i ] :\n            zeros += 1\n        else :\n            ones += 1\n        if ( i + 1 < n ) :\n            if A [ i ] == 0 and A [ i + 1 ] == 0 :\n                consZeros += 1\n    if A [ 0 ] == A [ n - 1 ] and A [ 0 ] == 0 :\n        consZeros += 1\n    if zeros == ones :\n        return consZeros\n    else :\n        return - 1\n"}
{"java": "static int countNumbers ( int X , int Y , int N ) { int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( ( i % X == 0 ) && ( i % Y != 0 ) ) count ++ ; } return count ; }", "python": "def countNumbers ( X , Y , N ) :\n    count = 0 ;\n    for i in range ( 1 , N + 1 ) :\n        if ( ( i % X == 0 ) and ( i % Y != 0 ) ) :\n            count += 1 ;\n    return count ;\n"}
{"java": "static int centered_square_num ( int n ) { return n * n + ( ( n - 1 ) * ( n - 1 ) ) ; }", "python": "def centered_square_num ( n ) :\n    return n * n + ( ( n - 1 ) * ( n - 1 ) )\n"}
{"java": "static int check ( int num ) { int digitSum = 0 ; while ( num > 0 ) { digitSum = digitSum + num % 10 ; num = num / 10 ; } int temp = digitSum ; int reverseDigitSum = 0 ; while ( temp > 0 ) { int rem = temp % 10 ; reverseDigitSum = reverseDigitSum * 10 + rem ; temp = temp / 10 ; } int number = digitSum * reverseDigitSum ; return number ; }", "python": "def check ( num ) :\n    digitSum = 0\n    while ( num != 0 ) :\n        digitSum = digitSum + num % 10\n        num = num // 10\n    temp = ( int ) ( digitSum )\n    reverseDigitSum = 0\n    while ( temp != 0 ) :\n        rem = temp % 10\n        reverseDigitSum = reverseDigitSum * 10 + rem\n        temp = temp / 10\n    number = digitSum * reverseDigitSum\n    return number\n"}
{"java": "static long sumXOR ( int arr [ ] , int n ) { long sum = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { int zc = 0 , oc = 0 ; long idsum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] % 2 == 0 ) zc ++ ; else oc ++ ; arr [ j ] /= 2 ; } idsum = oc * zc * ( 1 << i ) ; sum += idsum ; } return sum ; }", "python": "def sumXOR ( arr , n ) :\n    sum = 0\n    for i in range ( 0 , 32 ) :\n        zc = 0\n        oc = 0\n        idsum = 0\n        for j in range ( 0 , n ) :\n            if ( arr [ j ] % 2 == 0 ) :\n                zc = zc + 1\n            else :\n                oc = oc + 1\n            arr [ j ] = int ( arr [ j ] / 2 )\n        idsum = oc * zc * ( 1 << i )\n        sum = sum + idsum ;\n    return sum\n"}
{"java": "static double areaCircle ( double b ) { double area = ( double ) 3.1415926 * b * b ; return area ; }", "python": "def areaCircle ( b ) :\n    area = math . pi * b * b\n    return area\n"}
{"java": "static boolean bit_anagram_check ( long a ) { return ( Integer . bitCount ( ( int ) a ) == ( ULL_SIZE >> 1 ) ) ; }", "python": "def bit_anagram_check ( a ) :\n    return ( bin ( a ) . count ( \"1\" ) == ( ULL_SIZE >> 1 ) )\n"}
{"java": "static int numberofterm ( int n , int number ) { int firstnum = ( int ) Math . pow ( 10 , n - 1 ) ; int lastnum = ( int ) Math . pow ( 10 , n ) ; int count = 0 ; for ( int i = firstnum ; i < lastnum ; i ++ ) if ( i % number == 0 ) count ++ ; return count ; }", "python": "def numberofterm ( n , number ) :\n    firstnum = math . pow ( 10 , n - 1 )\n    lastnum = math . pow ( 10 , n )\n    count = 0\n    for i in range ( int ( firstnum ) , int ( lastnum ) ) :\n        if ( i % number == 0 ) :\n            count += 1\n    return count\n"}
{"java": "static int countSquares ( int row , int column ) { int topLeft = Math . min ( row , column ) - 1 ; int bottomRight = 8 - Math . max ( row , column ) ; int topRight = Math . min ( row , 9 - column ) - 1 ; int bottomLeft = 8 - Math . max ( row , 9 - column ) ; return ( topLeft + topRight + bottomRight + bottomLeft ) ; }", "python": "def countSquares ( row , column ) :\n    topLeft = min ( row , column ) - 1\n    bottomRight = 8 - max ( row , column )\n    topRight = min ( row , 9 - column ) - 1\n    bottomLeft = 8 - max ( row , 9 - column )\n    return ( topLeft + topRight + bottomRight + bottomLeft )\n"}
{"java": "static int product ( int a [ ] , int n ) { int ans = 1 ; int val = ( int ) Math . pow ( 2 , n - 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { ans *= ( int ) Math . pow ( a [ i ] , val ) ; } return ans ; }", "python": "def product ( a , n ) :\n    ans = 1\n    val = pow ( 2 , n - 1 )\n    for i in range ( n ) :\n        ans *= pow ( a [ i ] , val )\n    return ans\n"}
{"java": "static void find_set ( int n ) { if ( n <= 2 ) { System . out . println ( \" - 1\" ) ; return ; } int sum1 = ( n * ( n - 1 ) ) / 2 ; int sum2 = n ; System . out . println ( sum1 + \" \u2581 \" + sum2 ) ; }", "python": "def find_set ( n ) :\n    if ( n <= 2 ) :\n        print ( \" - 1\" ) ;\n        return ;\n    sum1 = ( n * ( n - 1 ) ) / 2 ;\n    sum2 = n ;\n    print ( sum1 , \" \u2581 \" , sum2 ) ;\n"}
{"java": "static int totalOperations ( String str , int len ) { HashMap < Character , Integer > h = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( h . containsKey ( str . charAt ( i ) ) ) h . put ( str . charAt ( i ) , h . get ( str . charAt ( i ) ) + 1 ) ; else h . put ( str . charAt ( i ) , 1 ) ; } Set < Map . Entry < Character , Integer > > set = h . entrySet ( ) ; HashSet < Integer > hs = new HashSet < Integer > ( ) ; for ( Map . Entry < Character , Integer > me : set ) hs . add ( me . getValue ( ) ) ; return hs . size ( ) ; }", "python": "def totalOperations ( st , length ) :\n    d = { }\n    for i in range ( length ) :\n        if st [ i ] in d :\n            d [ st [ i ] ] += 1\n        else :\n            d [ st [ i ] ] = 1\n    valueSet = set ( )\n    for key in d . keys ( ) :\n        valueSet . add ( d [ key ] )\n    return len ( valueSet )\n"}
{"java": "static int Cmtoinch ( int cm ) { int inch = ( int ) ( cm / 3 ) ; double modl = cm % 3 ; if ( modl >= 2 ) { inch ++ ; } return inch ; }", "python": "def fi ( n ) :\n    ft = n // 36\n    rem = n % 36\n    ic = round ( rem / 3 )\n    if ic == 12 :\n        ft += 1\n        ic = 0\n    return ft , ic\n    return\n"}
{"java": "static String findNumber ( int s , int d ) { String num = \" \" ; int val = s / d ; int rem = s % d ; int i ; for ( i = 1 ; i <= d - rem ; i ++ ) { num = num + String . valueOf ( val ) ; } if ( rem > 0 ) { val ++ ; for ( i = d - rem + 1 ; i <= d ; i ++ ) { num = num + String . valueOf ( val ) ; } } return num ; }", "python": "def findNumber ( s , d ) :\n    num = \" \" ;\n    val = s // d ;\n    rem = s % d ;\n    for i in range ( 1 , d - rem + 1 ) :\n        num = num + str ( val ) ;\n    if ( rem ) :\n        val += 1 ;\n        for i in range ( d - rem + 1 , d + 1 ) :\n            num = num + str ( val ) ;\n    return num ;\n"}
{"java": "static void fillWithFreq ( int arr [ ] , int n ) { int temp [ ] = new int [ n ] ; Arrays . fill ( temp , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) temp [ arr [ i ] ] += 1 ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = temp [ i ] ; }", "python": "def fillWithFreq ( arr , n ) :\n    temp = [ 0 for i in range ( n ) ]\n    for i in range ( n ) :\n        temp [ arr [ i ] ] += 1\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]\n"}
{"java": "static int maxAND ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) res = res > ( arr [ i ] & arr [ j ] ) ? res : ( arr [ i ] & arr [ j ] ) ; return res ; }", "python": "def maxAND ( arr , n ) :\n    res = 0\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            res = max ( res , arr [ i ] & arr [ j ] )\n    return res\n"}
{"java": "static void removeZeros ( int [ ] a , int n ) { int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { ind = i ; break ; } } if ( ind == - 1 ) { System . out . print ( \" Array \u2581 has \u2581 leading \u2581 zeros \u2581 only \" ) ; return ; } int [ ] b = new int [ n - ind ] ; for ( int i = 0 ; i < n - ind ; i ++ ) b [ i ] = a [ ind + i ] ; for ( int i = 0 ; i < n - ind ; i ++ ) System . out . print ( b [ i ] + \" \u2581 \" ) ; }", "python": "def removeZeros ( a , n ) :\n    ind = - 1 ;\n    for i in range ( n ) :\n        if ( a [ i ] != 0 ) :\n            ind = i ;\n            break ;\n    if ( ind == - 1 ) :\n        print ( \" Array \u2581 has \u2581 leading \u2581 zeros \u2581 only \" ) ;\n        return ;\n    b = [ 0 ] * ( n - ind ) ;\n    for i in range ( n - ind ) :\n        b [ i ] = a [ ind + i ] ;\n    for i in range ( n - ind ) :\n        print ( b [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "static int odd_digits ( int n ) { if ( n < 10 ) return n ; else if ( n / 10 < 10 ) return 9 ; else if ( n / 100 < 10 ) return 9 + n - 99 ; else if ( n / 1000 < 10 ) return 9 + 900 ; else if ( n / 10000 < 10 ) return 909 + n - 9999 ; else return 90909 ; }", "python": "def odd_digits ( n ) :\n    if ( n < 10 ) :\n        return n ;\n    elif ( n / 10 < 10 ) :\n        return 9 ;\n    elif ( n / 100 < 10 ) :\n        return 9 + n - 99 ;\n    elif ( n / 1000 < 10 ) :\n        return 9 + 900 ;\n    elif ( n / 10000 < 10 ) :\n        return 909 + n - 9999 ;\n    else :\n        return 90909 ;\n"}
{"java": "static int subarrayCount ( int arr [ ] , int n ) { int result = 0 ; int fast = 0 , slow = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] == 1 ) { fast ++ ; } else { int len = fast - slow + 1 ; result += len * ( len - 1 ) / 2 ; fast = i ; slow = i ; } } if ( fast != slow ) { int len = fast - slow + 1 ; result += len * ( len - 1 ) / 2 ; } return result ; }", "python": "def subarrayCount ( arr , n ) :\n    result = 0\n    fast , slow = 0 , 0\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] - arr [ i - 1 ] == 1 ) :\n            fast += 1\n        else :\n            length = fast - slow + 1\n            result += length * ( length - 1 ) // 2 ;\n            fast = i\n            slow = i\n    if ( fast != slow ) :\n        length = fast - slow + 1\n        result += length * ( length - 1 ) // 2 ;\n    return result\n"}
{"java": "static void getnumbers ( int n ) { Vector < Integer > divisor = new Vector < Integer > ( ) ; for ( int i = 2 ; i * i <= n ; i ++ ) { while ( n % i == 0 ) { divisor . add ( i ) ; n /= i ; } } if ( n != 1 ) { divisor . add ( n ) ; } int a , b , c , size ; a = b = c = 1 ; size = divisor . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( a == 1 ) { a = a * divisor . get ( i ) ; } else if ( b == 1 || b == a ) { b = b * divisor . get ( i ) ; } else { c = c * divisor . get ( i ) ; } } if ( a == 1 || b == 1 || c == 1 || a == b || b == c || a == c ) { System . out . print ( \" - 1\" + \" \\n \" ) ; } else { System . out . print ( a + \" \u2581 \" + b + \" \u2581 \" + c + \" \\n \" ) ; } }", "python": "def getnumbers ( n ) :\n    divisor = [ ]\n    for i in range ( 2 , n + 1 ) :\n        while ( n % i == 0 ) :\n            divisor . append ( i )\n            n //= i\n    if ( n != 1 ) :\n        divisor . append ( n )\n    a , b , c , size = 0 , 0 , 0 , 0\n    a = b = c = 1\n    size = len ( divisor )\n    for i in range ( size ) :\n        if ( a == 1 ) :\n            a = a * divisor [ i ]\n        elif ( b == 1 or b == a ) :\n            b = b * divisor [ i ]\n        else :\n            c = c * divisor [ i ]\n    if ( a == 1 or b == 1 or c == 1 or a == b or b == c or a == c ) :\n        print ( \" - 1\" )\n    else :\n        print ( a , b , c )\n"}
{"java": "static boolean CheckArray ( int arr [ ] , int n ) { int prod = 1 ; for ( int i = 0 ; i < n ; ++ i ) prod *= arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) if ( arr [ i ] == prod / arr [ i ] ) return true ; return false ; }", "python": "def CheckArray ( arr , n ) :\n    prod = 1\n    for i in range ( 0 , n , 1 ) :\n        prod *= arr [ i ]\n    for i in range ( 0 , n , 1 ) :\n        if ( arr [ i ] == prod / arr [ i ] ) :\n            return True\n    return False\n"}
{"java": "static void maxLengthSubSeq ( int a [ ] , int n ) { int temp [ ] = new int [ n ] ; int print [ ] = new int [ n ] ; int y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int j = 0 ; int x = 0 ; temp [ j ++ ] = a [ x ] ; x = a [ x ] + x ; while ( x < n ) { temp [ j ++ ] = a [ x ] ; x = a [ x ] + x ; } if ( y < j ) { for ( int k = 0 ; k < j ; k ++ ) { print [ k ] = temp [ k ] ; y = j ; } } } for ( int i = 0 ; i < y ; i ++ ) System . out . print ( print [ i ] + \" \u2581 \" ) ; }", "python": "def maxLengthSubSeq ( a , n ) :\n    temp = [ 0 for i in range ( n ) ]\n    print1 = [ 0 for i in range ( n ) ]\n    y = 0\n    for i in range ( 0 , n , 1 ) :\n        j = 0\n        x = 0\n        temp [ j ] = a [ x ]\n        j += 1\n        x = a [ x ] + x\n        while ( x < n ) :\n            temp [ j ] = a [ x ]\n            j += 1\n            x = a [ x ] + x\n        if ( y < j ) :\n            for k in range ( 0 , j , 1 ) :\n                print1 [ k ] = temp [ k ]\n                y = j\n    for i in range ( 0 , y , 1 ) :\n        print ( print1 [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int rotateRec ( int n , int L [ ] , int B [ ] ) { int m = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . max ( L [ i ] , B [ i ] ) <= m ) m = Math . max ( L [ i ] , B [ i ] ) ; else if ( Math . min ( L [ i ] , B [ i ] ) <= m ) m = Math . min ( L [ i ] , B [ i ] ) ; else { return 0 ; } } return 1 ; }", "python": "def rotateRec ( n , L , B ) :\n    m = sys . maxsize ;\n    for i in range ( n ) :\n        if ( max ( L [ i ] , B [ i ] ) <= m ) :\n            m = max ( L [ i ] , B [ i ] ) ;\n        elif ( min ( L [ i ] , B [ i ] ) <= m ) :\n            m = min ( L [ i ] , B [ i ] ) ;\n        else :\n            return 0 ;\n    return 1 ;\n"}
{"java": "public static int minClicks ( int n , int m ) { int clicks = 0 ; while ( m > n ) { if ( m % 2 == 0 ) { m /= 2 ; clicks ++ ; } else { m ++ ; m /= 2 ; clicks += 2 ; } } while ( m != n ) { m ++ ; clicks ++ ; } return clicks ; }", "python": "def bfs ( n , m ) :\n    visited = set ( )\n    q = deque ( )\n    q . append ( n )\n    visited . add ( n )\n    if n > m :\n        return n - m\n    cnt = 0\n    while q :\n        for _ in range ( len ( q ) ) :\n            n = q . popleft ( )\n            visited . add ( n )\n            if n == m :\n                return cnt\n            else :\n                if n - 1 not in visited and n > 0 :\n                    q . append ( n - 1 )\n                if n * 2 not in visited and n * 2 < 3 * m :\n                    q . append ( n * 2 )\n        cnt += 1\n"}
{"java": "static int maxZeros ( int N ) { int maxm = - 1 ; int cnt = 0 ; while ( N != 0 ) { if ( ( N & 1 ) == 0 ) { cnt ++ ; N >>= 1 ; maxm = Math . max ( maxm , cnt ) ; } else { maxm = Math . max ( maxm , cnt ) ; cnt = 0 ; N >>= 1 ; } } return maxm ; }", "python": "def maxZeros ( N ) :\n    maxm = - 1\n    cnt = 0\n    while ( N ) :\n        if ( not ( N & 1 ) ) :\n            cnt += 1\n            N >>= 1\n            maxm = max ( maxm , cnt )\n        else :\n            maxm = max ( maxm , cnt )\n            cnt = 0\n            N >>= 1\n    return maxm\n"}
{"java": "public static void findWord ( String c , int n ) { int co = 0 , i ; char s [ ] = new char [ n ] ; for ( i = 0 ; i < n ; i ++ ) { if ( i < n / 2 ) co ++ ; else co = n - i ; if ( ( c . charAt ( i ) + co ) <= 122 ) s [ i ] = ( char ) ( ( int ) c . charAt ( i ) + co ) ; else s [ i ] = ( char ) ( ( int ) c . charAt ( i ) + co - 26 ) ; } String str = Arrays . toString ( s ) ; System . out . println ( str ) ; }", "python": "def findWord ( c , n ) :\n    co = 0\n    s = [ 0 ] * n\n    for i in range ( n ) :\n        if ( i < n / 2 ) :\n            co += 1\n        else :\n            co = n - i\n        if ( ord ( c [ i ] ) + co <= 122 ) :\n            s [ i ] = chr ( ord ( c [ i ] ) + co )\n        else :\n            s [ i ] = chr ( ord ( c [ i ] ) + co - 26 )\n    print ( * s , sep = \" \" )\n"}
{"java": "static int maxLength ( String str , int len ) { int res = 0 ; int lastPos [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { lastPos [ i ] = - 1 ; } for ( int i = 0 ; i < len ; i ++ ) { int C = str . charAt ( i ) - ' a ' ; if ( lastPos [ C ] != - 1 ) { res = Math . max ( len - ( i - lastPos [ C ] - 1 ) - 1 , res ) ; } lastPos [ C ] = i ; } return res ; }", "python": "def maxLength ( str , len ) :\n    res = 0 ;\n    lastPos = [ 0 ] * MAX ;\n    for i in range ( MAX ) :\n        lastPos [ i ] = - 1 ;\n    for i in range ( len ) :\n        C = ord ( str [ i ] ) - ord ( ' a ' ) ;\n        if ( lastPos [ C ] != - 1 ) :\n            res = max ( len - ( i - lastPos [ C ] - 1 ) - 1 , res ) ;\n        lastPos [ C ] = i ;\n    return res ;\n"}
{"java": "static int setBitNumber ( int n ) { int k = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) ( Math . pow ( 2 , k ) ) ; }", "python": "def setBitNumber ( n ) :\n    k = int ( math . log ( n , 2 ) )\n    return 2 ** k\n"}
{"java": "static int findCnt ( int [ ] arr , int n , int k ) { int ret = 0 ; int i = 0 ; while ( i < n ) { int j = i + 1 ; while ( j < n && arr [ j ] >= arr [ j - 1 ] ) j ++ ; int x = Math . max ( 0 , j - i - k + 1 ) ; ret += ( x * ( x + 1 ) ) / 2 ; i = j ; } return ret ; }", "python": "def findCnt ( arr , n , k ) :\n    ret = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        j = i + 1 ;\n        while ( j < n and arr [ j ] >= arr [ j - 1 ] ) :\n            j += 1 ;\n        x = max ( 0 , j - i - k ) ;\n        ret += ( x * ( x + 1 ) ) / 2 ;\n        i = j ;\n    return ret ;\n"}
{"java": "static void findNumbers ( int arr [ ] , int n ) { int sumN = ( n * ( n + 1 ) ) / 2 ; int sumSqN = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; int sum = 0 , sumSq = 0 , i ; for ( i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; sumSq += Math . pow ( arr [ i ] , 2 ) ; } int B = ( ( ( sumSq - sumSqN ) / ( sum - sumN ) ) + sumN - sum ) / 2 ; int A = sum - sumN + B ; System . out . println ( \" A \u2581 = \u2581 \" + A + \" \\n B \u2581 = \u2581 \" + B ) ; }", "python": "def findNumbers ( arr , n ) :\n    sumN = ( n * ( n + 1 ) ) / 2 ;\n    sumSqN = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;\n    sum = 0 ;\n    sumSq = 0 ;\n    for i in range ( 0 , n ) :\n        sum = sum + arr [ i ] ;\n        sumSq = sumSq + ( math . pow ( arr [ i ] , 2 ) ) ;\n    B = ( ( ( sumSq - sumSqN ) / ( sum - sumN ) ) + sumN - sum ) / 2 ;\n    A = sum - sumN + B ;\n    print ( \" A \u2581 = \u2581 \" , int ( A ) ) ;\n    print ( \" B \u2581 = \u2581 \" , int ( B ) ) ;\n"}
{"java": "public static int summation ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; }", "python": "def summation ( n ) :\n    return ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6\n"}
{"java": "public static int minNumber ( int a [ ] , int n , int x ) { int l = 0 , h = 0 , e = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == x ) e ++ ; else if ( a [ i ] > x ) h ++ ; else if ( a [ i ] < x ) l ++ ; } int ans = 0 ; if ( l > h ) ans = l - h ; else if ( l < h ) ans = h - l - 1 ; return ans + 1 - e ; }", "python": "def minNumber ( a , n , x ) :\n    l = 0\n    h = 0\n    e = 0\n    for i in range ( n ) :\n        if a [ i ] == x :\n            e += 1\n        elif a [ i ] > x :\n            h += 1\n        elif a [ i ] < x :\n            l += 1\n    ans = 0 ;\n    if l > h :\n        ans = l - h\n    elif l < h :\n        ans = h - l - 1 ;\n    return ans + 1 - e\n"}
{"java": "static int maxCost ( int a [ ] , int n , int l , int r ) { int mx = 0 , k ; for ( int i = 0 ; i < n ; ++ i ) mx = Math . max ( mx , a [ i ] ) ; int [ ] count = new int [ mx + 1 ] ; for ( int i = 0 ; i < count . length ; i ++ ) count [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) count [ a [ i ] ] ++ ; int [ ] res = new int [ mx + 1 ] ; res [ 0 ] = 0 ; l = Math . min ( l , r ) ; for ( int num = 1 ; num <= mx ; num ++ ) { k = Math . max ( num - l - 1 , 0 ) ; res [ num ] = Math . max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) ; } return res [ mx ] ; }", "python": "def maxCost ( a , n , l , r ) :\n    mx = 0\n    for i in range ( n ) :\n        mx = max ( mx , a [ i ] )\n    count = [ 0 ] * ( mx + 1 )\n    for i in range ( n ) :\n        count [ a [ i ] ] += 1\n    res = [ 0 ] * ( mx + 1 )\n    res [ 0 ] = 0\n    l = min ( l , r )\n    for num in range ( 1 , mx + 1 ) :\n        k = max ( num - l - 1 , 0 )\n        res [ num ] = max ( res [ num - 1 ] , num * count [ num ] + res [ k ] )\n    return res [ mx ]\n"}
{"java": "static String even_or_odd ( String N ) { int len = N . length ( ) ; if ( N . charAt ( len - 1 ) == '0' || N . charAt ( len - 1 ) == '2' || N . charAt ( len - 1 ) == '4' || N . charAt ( len - 1 ) == '6' ) return ( \" Even \" ) ; else return ( \" Odd \" ) ; }", "python": "def even_or_odd ( N ) :\n    l = len ( N ) ;\n    if ( N [ l - 1 ] == '0' or N [ l - 1 ] == '2' or N [ l - 1 ] == '4' or N [ l - 1 ] == '6' ) :\n        return ( \" Even \" )\n    else :\n        return ( \" Odd \" )\n"}
{"java": "private static void solve ( int N , int H , int [ ] attack , int [ ] throwk ) { int count = 0 ; int sum = 0 ; Arrays . sort ( attack ) ; int maxa = attack [ N - 1 ] ; Arrays . sort ( throwk ) ; for ( int i = N - 1 ; throwk [ i ] > maxa && i > 0 ; i -- ) { sum += throwk [ i ] ; count ++ ; if ( sum >= H ) { System . out . print ( count ) ; return ; } } if ( throwk [ 0 ] > maxa ) { sum += throwk [ 0 ] ; count ++ ; } if ( sum >= H ) { System . out . print ( count ) ; return ; } count = ( int ) ( count + Math . ceil ( ( double ) ( H - sum ) / maxa ) ) ; System . out . print ( count ) ; return ; }", "python": "def main ( ) :\n    N , H = ( int ( _ ) for _ in input ( ) . split ( ) )\n    S = sorted ( [ [ int ( _ ) for _ in input ( ) . split ( ) ] for __ in range ( N ) ] ) [ : : - 1 ]\n    output = 0\n    for a , b in sorted ( S , key = lambda x : - x [ 1 ] ) :\n        if b > S [ 0 ] [ 0 ] :\n            H -= b\n            output += 1\n            if H <= 0 : break\n    if H > 0 :\n        output += ( H + S [ 0 ] [ 0 ] - 1 ) // S [ 0 ] [ 0 ]\n    print ( output )\n    return\n"}
{"java": "static int solve ( String X , String Y , int N , int K ) { int [ ] count = new int [ N + 1 ] ; int sol = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { count [ i ] = count [ i - 1 ] + Math . abs ( X . charAt ( i - 1 ) - Y . charAt ( i - 1 ) ) ; } int j = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { while ( ( count [ i ] - count [ j ] ) > K ) { j ++ ; } sol = Math . max ( sol , i - j ) ; } return sol ; }", "python": "def solve ( X , Y , N , K ) :\n    count = [ 0 ] * ( N + 1 ) ;\n    sol = 0 ;\n    count [ 0 ] = 0 ;\n    for i in range ( 1 , N + 1 ) :\n        count [ i ] = ( count [ i - 1 ] + abs ( ord ( X [ i - 1 ] ) - ord ( Y [ i - 1 ] ) ) ) ;\n    j = 0 ;\n    for i in range ( 1 , N + 1 ) :\n        while ( ( count [ i ] - count [ j ] ) > K ) :\n            j += 1 ;\n        sol = max ( sol , i - j ) ;\n    return sol ;\n"}
{"java": "static void reverse ( int [ ] a , int n , int k ) { if ( k > n ) { System . out . println ( \" Invalid \u2581 k \" ) ; return ; } for ( int i = 0 ; i < k / 2 ; i ++ ) { int tempswap = a [ i ] ; a [ i ] = a [ k - i - 1 ] ; a [ k - i - 1 ] = tempswap ; } }", "python": "def reverse ( a , n , k ) :\n    if ( k > n ) :\n        print ( \" Invalid \u2581 k \" )\n        return\n    for i in range ( 0 , ( int ) ( k / 2 ) ) :\n        temp = a [ i ]\n        a [ i ] = a [ k - i - 1 ]\n        a [ k - i - 1 ] = temp\n"}
{"java": "static int max_length_substring ( String st , int n , int k ) { int max_len = 0 ; int len = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( st . charAt ( i ) == '0' ) len ++ ; else len = 0 ; max_len = Math . max ( max_len , len ) ; } if ( max_len == n ) return n * k ; int pref = 0 , suff = 0 ; for ( int i = 0 ; st . charAt ( i ) == '0' ; ++ i , ++ pref ) ; for ( int i = n - 1 ; st . charAt ( i ) == '0' ; -- i , ++ suff ) ; if ( k > 1 ) max_len = Math . max ( max_len , pref + suff ) ; return max_len ; }", "python": "def max_length_substring ( st , n , k ) :\n    max_len = 0\n    len = 0\n    for i in range ( 0 , n ) :\n        if ( st [ i ] == '0' ) :\n            len = len + 1 ;\n        else :\n            len = 0\n        max_len = max ( max_len , len )\n    if ( max_len == n ) :\n        return n * k\n    pref = 0\n    suff = 0\n    i = 0\n    while ( st [ i ] == '0' ) :\n        i = i + 1\n        pref = pref + 1\n    i = n - 1\n    while ( st [ i ] == '0' ) :\n        i = i - 1\n        suff = suff + 1\n    if ( k > 1 ) :\n        max_len = max ( max_len , pref + suff )\n    return max_len\n"}
{"java": "static int subsetCount ( int arr [ ] , int n ) { return 1 << n ; }", "python": "def subsetCount ( arr , n ) :\n    return 1 << n\n"}
{"java": "static void count_even_odd ( int min , int max , int steps [ ] [ ] ) { int a , b , even , odd ; boolean beven = true , aeven = false ; int n = 2 ; for ( int i = 0 ; i < n ; i ++ ) { a = steps [ i ] [ 0 ] ; b = steps [ i ] [ 1 ] ; if ( ! ( aeven || ( a & 1 ) > 0 ) ) aeven = true ; if ( beven ) { if ( ( b & 1 ) > 0 ) beven = false ; } else if ( ! ( ( a & 1 ) > 0 ) ) { if ( ! ( ( b & 1 ) > 0 ) ) beven = true ; } else { if ( ( b & 1 ) > 0 ) beven = true ; } } if ( beven ) { even = ( int ) max / 2 - ( int ) ( min - 1 ) / 2 ; odd = 0 ; } else { even = ( int ) max / 2 - ( int ) ( min - 1 ) / 2 ; odd = 0 ; } if ( ! ( beven ^ aeven ) ) even += max - min + 1 - ( int ) max / 2 + ( int ) ( min - 1 ) / 2 ; else odd += max - min + 1 - ( int ) max / 2 + ( int ) ( min - 1 ) / 2 ; System . out . print ( \" even \u2581 = \u2581 \" + even + \" , \u2581 odd \u2581 = \u2581 \" + odd ) ; }", "python": "def count_even_odd ( min , max , steps ) :\n    beven = True\n    aeven = False\n    n = 2\n    for i in range ( 0 , n ) :\n        a = steps [ i ] [ 0 ]\n        b = steps [ i ] [ 1 ]\n        if ( not ( aeven or a & 1 ) ) :\n            aeven = True\n        if ( beven ) :\n            if ( b & 1 ) :\n                beven = False\n        elif ( not ( a & 1 ) ) :\n            if ( not ( b & 1 ) ) :\n                beven = True\n        else :\n            if ( b & 1 ) :\n                beven = True\n    if ( beven ) :\n        even = ( int ( max / 2 ) - int ( ( min - 1 ) / 2 ) )\n        odd = 0\n    else :\n        even = ( int ( max / 2 ) - int ( ( min - 1 ) / 2 ) )\n        odd = 0\n    if ( not ( beven ^ aeven ) ) :\n        even += ( max - min + 1 - int ( max / 2 ) + int ( ( min - 1 ) / 2 ) )\n    else :\n        odd += ( max - min + 1 - int ( max / 2 ) + int ( ( min - 1 ) / 2 ) )\n    print ( \" even \u2581 = \u2581 \" , even , \" , \u2581 odd \u2581 = \u2581 \" , odd , sep = \" \" )\n"}
{"java": "static void printRepeatingEven ( int arr [ ] , int n ) { long _xor = 0L ; long pos ; for ( int i = 0 ; i < n ; ++ i ) { pos = 1 << arr [ i ] ; _xor ^= pos ; } for ( int i = 0 ; i < n ; ++ i ) { pos = 1 << arr [ i ] ; if ( ! ( ( pos & _xor ) != 0 ) ) { System . out . print ( arr [ i ] + \" \u2581 \" ) ; _xor ^= pos ; } } }", "python": "def printRepeatingEven ( arr , n ) :\n    axor = 0 ;\n    for i in range ( 0 , n ) :\n        pos = 1 << arr [ i ] ;\n        axor ^= pos ;\n    for i in range ( 0 , n - 1 ) :\n        pos = 1 << arr [ i ] ;\n        if ( not ( pos & axor ) ) :\n            print ( arr [ i ] , end = \" \u2581 \" ) ;\n            axor ^= pos ;\n"}
{"java": "static void findkth ( int n , int k ) { Vector < Integer > v = new Vector < Integer > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . add ( i ) ; if ( i != Math . sqrt ( n ) ) v . add ( n / i ) ; } } Collections . sort ( v ) ; if ( k > v . size ( ) ) System . out . print ( \" Doesn ' t \u2581 Exist \" ) ; else System . out . print ( v . get ( k - 1 ) ) ; }", "python": "def findkth ( n , k ) :\n    v = [ ]\n    p = int ( sqrt ( n ) ) + 1\n    for i in range ( 1 , p , 1 ) :\n        if ( n % i == 0 ) :\n            v . append ( i )\n            if ( i != sqrt ( n ) ) :\n                v . append ( n / i ) ;\n    v . sort ( reverse = False )\n    if ( k > len ( v ) ) :\n        print ( \" Doesn ' t \u2581 Exist \" )\n    else :\n        print ( v [ k - 1 ] )\n"}
{"java": "static int XorSum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = 0 ; for ( int j = 1 ; j <= arr [ i ] ; j ++ ) k ^= arr [ i ] ; result += k ; } return result ; }", "python": "def XorSum ( arr , n ) :\n    result = 0\n    for i in range ( 0 , n ) :\n        k = 0\n        for j in range ( 1 , arr [ i ] + 1 ) :\n            k = k ^ arr [ i ]\n        result = result + k\n    return result\n"}
{"java": "static int binarySearchCount ( int arr [ ] , int n , int key ) { int left = 0 ; int right = n - 1 ; int count = 0 ; while ( left <= right ) { int mid = ( right + left ) / 2 ; if ( arr [ mid ] <= key ) { count = mid + 1 ; left = mid + 1 ; } else right = mid - 1 ; } return count ; }", "python": "def binarySearchCount ( arr , n , key ) :\n    left = 0\n    right = n - 1\n    count = 0\n    while ( left <= right ) :\n        mid = int ( ( right + left ) / 2 )\n        if ( arr [ mid ] <= key ) :\n            count = mid + 1\n            left = mid + 1\n        else :\n            right = mid - 1\n    return count\n"}
{"java": "static float polydiagonal ( float n , float a ) { if ( a < 0 && n < 0 ) { return - 1 ; } return ( float ) ( 2 * a * Math . sin ( ( ( ( n - 2 ) * 180 ) / ( 2 * n ) ) * 3.14159 / 180 ) ) ; }", "python": "def polydiagonal ( n , a ) :\n    if ( a < 0 and n < 0 ) :\n        return - 1\n    return ( 2 * a * mt . sin ( ( ( ( n - 2 ) * 180 ) / ( 2 * n ) ) * 3.14159 / 180 ) )\n"}
{"java": "public static void partA101 ( ) { Scanner scA = new Scanner ( System . in ) ; String S = scA . next ( ) ; int count = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( S . charAt ( i ) == ' + ' ) { count ++ ; } else if ( S . charAt ( i ) == ' - ' ) { count -- ; } } System . out . println ( count ) ; }", "python": "def main ( ) :\n    c = Counter ( s )\n    res = c . get ( ' + ' , 0 ) - c . get ( ' - ' , 0 )\n    print ( res )\n"}
{"java": "static int Remainder ( String str , int R ) { int len = str . length ( ) ; int Num , Rem = 0 ; for ( int i = 0 ; i < len ; i ++ ) { Num = Rem * 10 + ( str . charAt ( i ) - '0' ) ; Rem = Num % R ; } return Rem ; }", "python": "def Remainder ( str , R ) :\n    l = len ( str )\n    Rem = 0\n    for i in range ( l ) :\n        Num = Rem * 10 + ( ord ( str [ i ] ) - ord ( '0' ) )\n        Rem = Num % R\n    return Rem\n"}
{"java": "static void compareVal ( int x , int y ) { double a = y * Math . log ( x ) ; double b = x * Math . log ( y ) ; if ( a > b ) System . out . print ( x + \" ^ \" + y + \" \u2581 > \u2581 \" + y + \" ^ \" + x ) ; else if ( a < b ) System . out . print ( x + \" ^ \" + y + \" \u2581 < \u2581 \" + y + \" ^ \" + x ) ; else if ( a == b ) System . out . print ( x + \" ^ \" + y + \" \u2581 = \u2581 \" + y + \" ^ \" + x ) ; }", "python": "def compareVal ( x , y ) :\n    a = y * log ( x ) ;\n    b = x * log ( y ) ;\n    if ( a > b ) :\n        print ( x , \" ^ \" , y , \" > \" , y , \" ^ \" , x ) ;\n    elif ( a < b ) :\n        print ( x , \" ^ \" , y , \" < \" , y , \" ^ \" , x ) ;\n    elif ( a == b ) :\n        print ( x , \" ^ \" , y , \" = \" , y , \" ^ \" , x ) ;\n"}
{"java": "static float discountPercentage ( float S , float M ) { float discount = M - S ; float disPercent = ( discount / M ) * 100 ; return disPercent ; }", "python": "def discountPercentage ( S , M ) :\n    discount = M - S\n    disPercent = ( discount / M ) * 100\n    return disPercent\n"}
{"java": "static void findpair ( int l , int r ) { int c = 0 ; for ( int i = l ; i <= r ; i ++ ) { for ( int j = i + 1 ; j <= r ; j ++ ) { if ( j % i == 0 && j != i ) { System . out . println ( i + \" , \u2581 \" + j ) ; c = 1 ; break ; } } if ( c == 1 ) break ; } }", "python": "def findpair ( l , r ) :\n    c = 0\n    for i in range ( l , r + 1 ) :\n        for j in range ( i + 1 , r + 1 ) :\n            if ( j % i == 0 and j != i ) :\n                print ( i , \" , \u2581 \" , j )\n                c = 1\n                break\n        if ( c == 1 ) :\n            break\n"}
{"java": "static float squareRoot ( int number , int precision ) { int start = 0 , end = number ; int mid ; double ans = 0.0 ; while ( start <= end ) { mid = ( start + end ) / 2 ; if ( mid * mid == number ) { ans = mid ; break ; } if ( mid * mid < number ) { start = mid + 1 ; ans = mid ; } else { end = mid - 1 ; } } double increment = 0.1 ; for ( int i = 0 ; i < precision ; i ++ ) { while ( ans * ans <= number ) { ans += increment ; } ans = ans - increment ; increment = increment / 10 ; } return ( float ) ans ; }", "python": "def squareRoot ( number , precision ) :\n    start = 0\n    end , ans = number , 1\n    while ( start <= end ) :\n        mid = int ( ( start + end ) / 2 )\n        if ( mid * mid == number ) :\n            ans = mid\n            break\n        if ( mid * mid < number ) :\n            start = mid + 1\n        else :\n            end = mid - 1\n    increment = 0.1\n    for i in range ( 0 , precision ) :\n        while ( ans * ans <= number ) :\n            ans += increment\n        ans = ans - increment\n        increment = increment / 10\n    return ans\n"}
{"java": "static int reversDigits ( int num ) { if ( num > 0 ) { reversDigits ( num / 10 ) ; rev_num += ( num % 10 ) * base_pos ; base_pos *= 10 ; } return rev_num ; }", "python": "def reversDigits ( num ) :\n    global rev_num\n    global base_pos\n    if ( num > 0 ) :\n        reversDigits ( ( int ) ( num / 10 ) )\n        rev_num += ( num % 10 ) * base_pos\n        base_pos *= 10\n    return rev_num\n"}
{"java": "static int reversDigits ( int num ) { if ( num > 0 ) { reversDigits ( num / 10 ) ; rev_num += ( num % 10 ) * base_pos ; base_pos *= 10 ; } return rev_num ; }", "python": "def reversDigits ( num ) :\n    global rev_num\n    global base_pos\n    if ( num > 0 ) :\n        reversDigits ( ( int ) ( num / 10 ) )\n        rev_num += ( num % 10 ) * base_pos\n        base_pos *= 10\n    return rev_num\n"}
{"java": "public static void leastPrimeFactor ( int n ) { int [ ] least_prime = new int [ n + 1 ] ; least_prime [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( least_prime [ i ] == 0 ) { least_prime [ i ] = i ; for ( int j = 2 * i ; j <= n ; j += i ) if ( least_prime [ j ] == 0 ) least_prime [ j ] = i ; } } for ( int i = 1 ; i <= n ; i ++ ) System . out . println ( \" Least \u2581 Prime \u2581 factor \u2581 of \u2581 \" + + i + \" : \u2581 \" + least_prime [ i ] ) ; }", "python": "def leastPrimeFactor ( n ) :\n    least_prime = [ 0 ] * ( n + 1 )\n    least_prime [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( least_prime [ i ] == 0 ) :\n            least_prime [ i ] = i\n            for j in range ( 2 * i , n + 1 , i ) :\n                if ( least_prime [ j ] == 0 ) :\n                    least_prime [ j ] = i\n    for i in range ( 1 , n + 1 ) :\n        print ( \" Least \u2581 Prime \u2581 factor \u2581 of \u2581 \" , i , \" : \u2581 \" , least_prime [ i ] )\n"}
{"java": "static void findNthTerm ( int n ) { if ( n % 2 == 0 ) { n = n / 2 ; System . out . print ( Math . pow ( 3 , n - 1 ) + \" \\n \" ) ; } else { n = ( n / 2 ) + 1 ; System . out . print ( Math . pow ( 2 , n - 1 ) + \" \\n \" ) ; } }", "python": "def findNthTerm ( n ) :\n    if n % 2 == 0 :\n        n //= 2\n        print ( 3 ** ( n - 1 ) )\n    else :\n        n = ( n // 2 ) + 1\n        print ( 2 ** ( n - 1 ) )\n"}
{"java": "private static int aaa ( ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int cur = scanner . nextInt ( ) ; int bike = 1 ; int step = 0 ; int f = cur ; for ( int i = 1 ; i < n ; i ++ ) { int c = scanner . nextInt ( ) ; if ( c > cur + k ) { if ( step == 0 ) { return - 1 ; } cur = f ; if ( c <= cur + k ) { f = c ; step = 1 ; } else step = 0 ; ++ bike ; } else { f = c ; ++ step ; } } return bike ; }", "python": "def fast ( k , a ) :\n    c = 1\n    s = k\n    for pr , cur in zip ( a [ : - 1 ] , a [ 1 : ] ) :\n        dist = cur - pr\n        if dist > k :\n            c = - 1\n            break\n        elif dist > s :\n            c += 1\n            s = k\n        s -= dist\n    return c\n"}
{"java": "static int nthXorFib ( int n , int a , int b ) { if ( n == 0 ) return a ; if ( n == 1 ) return b ; if ( n == 2 ) return ( a ^ b ) ; return nthXorFib ( n % 3 , a , b ) ; }", "python": "def nthXorFib ( n , a , b ) :\n    if n == 0 :\n        return a\n    if n == 1 :\n        return b\n    if n == 2 :\n        return a ^ b\n    return nthXorFib ( n % 3 , a , b )\n"}
{"java": "static boolean isDivisible ( long n ) { while ( n / 100 != 0 ) { long d = n % 10 ; n /= 10 ; n += d * 7 ; } return ( n % 23 == 0 ) ; }", "python": "def isDivisible ( n ) :\n    while n // 100 :\n        d = n % 10\n        n //= 10\n        n += d * 7\n    return ( n % 23 == 0 )\n"}
{"java": "static boolean isDivisible ( long n ) { while ( n / 100 != 0 ) { int d = ( int ) ( n % 10 ) ; n /= 10 ; n -= d * 4 ; } return ( n % 41 == 0 ) ; }", "python": "def isDivisible ( n ) :\n    while n // 100 :\n        d = n % 10\n        n //= 10\n        n -= d * 4\n    return n % 41 == 0\n"}
{"java": "static boolean isDivisible ( long n ) { while ( n / 100 > 0 ) { long d = n % 10 ; n /= 10 ; n -= d * 5 ; } return ( n % 17 == 0 ) ; }", "python": "def isDivisible ( n ) :\n    while ( n // 100 ) :\n        d = n % 10\n        n //= 10\n        n -= d * 5\n    return ( n % 17 == 0 )\n"}
{"java": "static boolean isDivisible ( long n ) { while ( n / 100 > 0 ) { long d = n % 10 ; n /= 10 ; n += d * 2 ; } return ( n % 19 == 0 ) ; }", "python": "def isDivisible ( n ) :\n    while ( n // 100 ) :\n        d = n % 10\n        n //= 10\n        n += d * 2\n    return ( n % 19 == 0 )\n"}
{"java": "static boolean isOdd ( int [ ] arr , int n ) { int l , r , flag = 0 , flag1 = 0 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( arr [ i ] % 2 == 0 && flag == 0 ) { flag = 1 ; l = arr [ i ] ; } if ( arr [ i ] % 2 != 0 && flag1 == 0 ) { r = arr [ i ] ; flag1 = 1 ; } } if ( sum % 2 != 0 ) { return true ; } else { if ( flag1 == 1 && flag == 1 ) return true ; else return false ; } }", "python": "def isOdd ( arr , n ) :\n    flag = 0 ; flag1 = 0 ; sum = 0 ;\n    for i in range ( n ) :\n        sum += arr [ i ] ;\n        if ( arr [ i ] % 2 == 0 and flag == 0 ) :\n            flag = 1 ;\n            l = arr [ i ] ;\n        if ( arr [ i ] % 2 != 0 and flag1 == 0 ) :\n            r = arr [ i ] ;\n            flag1 = 1 ;\n    if ( sum % 2 != 0 ) :\n        return True ;\n    else :\n        if ( flag1 == 1 and flag == 1 ) :\n            return True ;\n        else :\n            return False ;\n"}
{"java": "static int count_carry ( String a , String b ) { int carry = 0 ; int count = 0 ; int len_a = a . length ( ) , len_b = b . length ( ) ; while ( len_a != 0 || len_b != 0 ) { int x = 0 , y = 0 ; if ( len_a > 0 ) { x = a . charAt ( len_a - 1 ) - '0' ; len_a -- ; } if ( len_b > 0 ) { y = b . charAt ( len_b - 1 ) - '0' ; len_b -- ; } int sum = x + y + carry ; if ( sum >= 10 ) { carry = 1 ; count ++ ; } else carry = 0 ; } return count ; }", "python": "def count_carry ( a , b ) :\n    carry = 0 ;\n    count = 0 ;\n    len_a = len ( a ) ;\n    len_b = len ( b ) ;\n    while ( len_a != 0 or len_b != 0 ) :\n        x = 0 ;\n        y = 0 ;\n        if ( len_a > 0 ) :\n            x = int ( a [ len_a - 1 ] ) + int ( '0' ) ;\n            len_a -= 1 ;\n        if ( len_b > 0 ) :\n            y = int ( b [ len_b - 1 ] ) + int ( '0' ) ;\n            len_b -= 1 ;\n        sum = x + y + carry ;\n        if ( sum >= 10 ) :\n            carry = 1 ;\n            count += 1 ;\n        else :\n            carry = 0 ;\n    return count ;\n"}
{"java": "static long countStrings ( int N ) { int i , j ; int dp [ ] [ ] = new int [ N + 1 ] [ 3 ] ; for ( i = 0 ; i < N + 1 ; i ++ ) { for ( j = 9 ; j < 3 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = 1 ; dp [ 1 ] [ 2 ] = 0 ; for ( i = 2 ; i <= N ; i ++ ) { dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] + dp [ i - 1 ] [ 2 ] ) % MOD ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] % MOD ; dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] % MOD ; } int ans = ( dp [ N ] [ 0 ] + dp [ N ] [ 1 ] + dp [ N ] [ 2 ] ) % MOD ; return ans ; }", "python": "def countStrings ( N ) :\n    dp = [ [ 0 ] * 3 for i in range ( N + 1 ) ]\n    dp [ 1 ] [ 0 ] = 1 ;\n    dp [ 1 ] [ 1 ] = 1 ;\n    dp [ 1 ] [ 2 ] = 0 ;\n    for i in range ( 2 , N + 1 ) :\n        dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] + dp [ i - 1 ] [ 2 ] ) % MOD\n        dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] % MOD\n        dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] % MOD\n    ans = ( dp [ N ] [ 0 ] + dp [ N ] [ 1 ] + dp [ N ] [ 2 ] ) % MOD\n    return ans\n"}
{"java": "static int nthEven ( int n ) { return ( 2 * n ) ; }", "python": "def nthEven ( n ) :\n    return ( 2 * n )\n"}
{"java": "static boolean check ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { return true ; } } return false ; }", "python": "def check ( arr , n ) :\n    for i in range ( n ) :\n        if arr [ i ] & 1 :\n            return True\n    return False\n"}
{"java": "static void printSumSeries ( int N ) { float sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += 1.0 / ( 2 * i - 1 ) ; } System . out . println ( sum ) ; }", "python": "def printSumSeries ( N ) :\n    sum = 0 ;\n    for i in range ( 1 , N + 1 ) :\n        sum += 1.0 / ( 2 * i - 1 ) ;\n    print ( sum ) ;\n"}
{"java": "static int maxSum ( int [ ] a , int n ) { int ans = 0 ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = a [ i - 1 ] ; int [ ] [ ] dp = new int [ n + 1 ] [ 3 ] ; for ( int i = 1 ; i <= n ; ++ i ) { dp [ i ] [ 0 ] = Math . max ( arr [ i ] , dp [ i - 1 ] [ 0 ] + arr [ i ] ) ; dp [ i ] [ 1 ] = Math . max ( 0 , dp [ i - 1 ] [ 0 ] ) - arr [ i ] ; if ( i >= 2 ) dp [ i ] [ 1 ] = Math . max ( dp [ i ] [ 1 ] , dp [ i - 1 ] [ 1 ] + arr [ i ] ) ; if ( i >= 2 ) dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] - arr [ i ] ; if ( i >= 3 ) dp [ i ] [ 2 ] = Math . max ( dp [ i ] [ 2 ] , dp [ i - 1 ] [ 2 ] + arr [ i ] ) ; ans = Math . max ( ans , dp [ i ] [ 0 ] ) ; ans = Math . max ( ans , dp [ i ] [ 1 ] ) ; ans = Math . max ( ans , dp [ i ] [ 2 ] ) ; } return ans ; }", "python": "def maxSum ( a , n ) :\n    ans = 0\n    arr = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        arr [ i ] = a [ i - 1 ]\n    dp = [ [ 0 for i in range ( 3 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 0 , n + 1 ) :\n        dp [ i ] [ 0 ] = max ( arr [ i ] , dp [ i - 1 ] [ 0 ] + arr [ i ] )\n        dp [ i ] [ 1 ] = max ( 0 , dp [ i - 1 ] [ 0 ] ) - arr [ i ]\n        if i >= 2 :\n            dp [ i ] [ 1 ] = max ( dp [ i ] [ 1 ] , dp [ i - 1 ] [ 1 ] + arr [ i ] )\n        if i >= 2 :\n            dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] - arr [ i ]\n        if i >= 3 :\n            dp [ i ] [ 2 ] = max ( dp [ i ] [ 2 ] , dp [ i - 1 ] [ 2 ] + arr [ i ] )\n        ans = max ( ans , dp [ i ] [ 0 ] )\n        ans = max ( ans , dp [ i ] [ 1 ] )\n        ans = max ( ans , dp [ i ] [ 2 ] )\n    return ans\n"}
{"java": "public static int calculateDifference ( int [ ] arr , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; boolean [ ] prime = new boolean [ max_val + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int P1 = 1 , P2 = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { P1 *= arr [ i ] ; } else if ( arr [ i ] != 1 ) { P2 *= arr [ i ] ; } } return Math . abs ( P2 - P1 ) ; }", "python": "def calculateDifference ( arr , n ) :\n    max_val = max ( arr )\n    prime = ( max_val + 1 ) * [ True ]\n    prime [ 0 ] = False\n    prime [ 1 ] = False\n    p = 2\n    while p * p <= max_val :\n        if prime [ p ] == True :\n            for i in range ( p * 2 , max_val + 1 , p ) :\n                prime [ i ] = False\n        p += 1\n    P1 = 1 ; P2 = 1\n    for i in range ( n ) :\n        if prime [ arr [ i ] ] :\n            P1 *= arr [ i ]\n        elif arr [ i ] != 1 :\n            P2 *= arr [ i ]\n    return abs ( P2 - P1 )\n"}
{"java": "static int twoEggDrop ( int k ) { return ( int ) Math . ceil ( ( - 1.0 + Math . sqrt ( 1 + 8 * k ) ) / 2.0 ) ; }", "python": "def twoEggDrop ( k ) :\n    return mt . ceil ( ( - 1.0 + mt . sqrt ( 1 + 8 * k ) ) / 2 )\n"}
{"java": "static void countEleLessThanOrEqual ( int arr1 [ ] , int m , int arr2 [ ] , int n ) { int hash [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) hash [ arr2 [ i ] ] ++ ; for ( int i = 1 ; i < MAX ; i ++ ) { hash [ i ] = hash [ i ] + hash [ i - 1 ] ; } for ( int i = 0 ; i < m ; i ++ ) { System . out . print ( hash [ arr1 [ i ] ] + \" \u2581 \" ) ; } }", "python": "def countEleLessThanOrEqual ( arr1 , m , arr2 , n ) :\n    hash = [ 0 for i in range ( MAX ) ]\n    for i in range ( n ) :\n        hash [ arr2 [ i ] ] += 1\n    for i in range ( 1 , MAX , 1 ) :\n        hash [ i ] = hash [ i ] + hash [ i - 1 ]\n    for i in range ( m ) :\n        print ( hash [ arr1 [ i ] ] , end = \" \u2581 \" )\n"}
{"java": "private static String parseStdin ( ) { String stdin = null ; try { String line = br . readLine ( ) ; if ( line != null ) { if ( ! line . isEmpty ( ) ) { stdin = line ; } } } catch ( IOException e ) { } return stdin ; }", "python": "def ch ( l ) :\n    for i in range ( len ( l ) // 2 ) :\n        if l [ i ] != l [ - i - 1 ] :\n            return False\n    return True\n"}
{"java": "public static boolean check_elements ( int arr [ ] , int n , int A , int B ) { int range = B - A ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . abs ( arr [ i ] ) >= A && Math . abs ( arr [ i ] ) <= B ) { int z = Math . abs ( arr [ i ] ) - A ; if ( arr [ z ] > 0 ) { arr [ z ] = arr [ z ] * - 1 ; } } } int count = 0 ; for ( int i = 0 ; i <= range && i < n ; i ++ ) { if ( arr [ i ] > 0 ) return false ; else count ++ ; } if ( count != ( range + 1 ) ) return false ; return true ; }", "python": "def check_elements ( arr , n , A , B ) :\n    rangeV = B - A\n    for i in range ( 0 , n ) :\n        if ( abs ( arr [ i ] ) >= A and abs ( arr [ i ] ) <= B ) :\n            z = abs ( arr [ i ] ) - A\n            if ( arr [ z ] > 0 ) :\n                arr [ z ] = arr [ z ] * - 1\n    count = 0\n    for i in range ( 0 , rangeV + 1 ) :\n        if i >= n :\n            break\n        if ( arr [ i ] > 0 ) :\n            return False\n        else :\n            count = count + 1\n    if ( count != ( rangeV + 1 ) ) :\n        return False\n    return True\n"}
{"java": "static int Segment ( int x [ ] , int l [ ] , int n ) { if ( n == 1 ) return 1 ; int ans = 2 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( x [ i ] - l [ i ] > x [ i - 1 ] ) ans ++ ; else if ( x [ i ] + l [ i ] < x [ i + 1 ] ) { x [ i ] = x [ i ] + l [ i ] ; ans ++ ; } } return ans ; }", "python": "def Segment ( x , l , n ) :\n    if ( n == 1 ) :\n        return 1\n    ans = 2\n    for i in range ( 1 , n - 1 ) :\n        if ( x [ i ] - l [ i ] > x [ i - 1 ] ) :\n            ans += 1\n        elif ( x [ i ] + l [ i ] < x [ i + 1 ] ) :\n            x [ i ] = x [ i ] + l [ i ]\n            ans += 1\n    return ans\n"}
{"java": "public static int solve ( int [ ] [ ] dp , int wt , int K , int M , int used ) { if ( wt < 0 ) { return 0 ; } if ( wt == 0 ) { if ( used == 1 ) { return 1 ; } return 0 ; } if ( dp [ wt ] [ used ] != - 1 ) { return dp [ wt ] [ used ] ; } int ans = 0 ; for ( int i = 1 ; i <= K ; i ++ ) { if ( i >= M ) { ans += solve ( dp , wt - i , K , M , used | 1 ) ; } else { ans += solve ( dp , wt - i , K , M , used ) ; } } return dp [ wt ] [ used ] = ans ; }", "python": "def solve ( dp , wt , K , M , used ) :\n    if ( wt < 0 ) :\n        return 0\n    if ( wt == 0 ) :\n        if ( used ) :\n            return 1\n        return 0\n    if ( dp [ wt ] [ used ] != - 1 ) :\n        return dp [ wt ] [ used ]\n    ans = 0\n    for i in range ( 1 , K + 1 ) :\n        if ( i >= M ) :\n            ans += solve ( dp , wt - i , K , M , used | 1 )\n        else :\n            ans += solve ( dp , wt - i , K , M , used )\n    dp [ wt ] [ used ] = ans\n    return ans\n"}
{"java": "static int firstDigit ( int n ) { int fact = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { fact = fact * i ; while ( fact % 10 == 0 ) fact = fact / 10 ; } while ( fact >= 10 ) fact = fact / 10 ; return fact ; }", "python": "def firstDigit ( n ) :\n    fact = 1\n    for i in range ( 2 , n + 1 ) :\n        fact = fact * i\n        while ( fact % 10 == 0 ) :\n            fact = int ( fact / 10 )\n    while ( fact >= 10 ) :\n        fact = int ( fact / 10 )\n    return math . floor ( fact )\n"}
{"java": "private static void foo ( ) { int n = sc . nextInt ( ) ; HashSet < Integer > set = new HashSet < > ( Arrays . asList ( 1 , 7 , 9 , 10 , 11 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 31 , 37 , 39 , 41 , 447 , 49 , 51 , 57 , 59 , 61 , 67 , 69 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 81 , 87 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 98 , 99 ) ) ; if ( set . contains ( n ) ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; }", "python": "def yn ( condition ) :\n    if condition : print ( \" YES \" )\n    else : print ( \" NO \" )\n"}
{"java": "static void findMin ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; Arrays . sort ( arr ) ; int min = arr [ 0 ] ; int max = 0 ; for ( int i = n - 1 ; i >= 1 ; i -- ) { int num = arr [ i ] ; int total = num + min ; int j ; for ( j = 2 ; j <= num ; j ++ ) { if ( num % j == 0 ) { int d = j ; int now = ( num / d ) + ( min * d ) ; int reduce = total - now ; if ( reduce > max ) max = reduce ; } } } System . out . println ( sum - max ) ; }", "python": "def findMin ( arr , n ) :\n    sum = 0\n    for i in range ( 0 , n ) :\n        sum = sum + arr [ i ]\n    arr . sort ( )\n    min = arr [ 0 ]\n    max = 0\n    for i in range ( n - 1 , 0 , - 1 ) :\n        num = arr [ i ]\n        total = num + min\n        for j in range ( 2 , num + 1 ) :\n            if ( num % j == 0 ) :\n                d = j\n                now = ( num // d ) + ( min * d )\n                reduce = total - now\n                if ( reduce > max ) :\n                    max = reduce\n    print ( sum - max )\n"}
{"java": "static void findSubsequence ( int arr [ ] , int n ) { int sign [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) sign [ i ] = 1 ; else sign [ i ] = - 1 ; } int k = 0 ; int result [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int cur = arr [ i ] ; int j = i ; while ( j < n && sign [ i ] == sign [ j ] ) { cur = Math . max ( cur , arr [ j ] ) ; ++ j ; } result [ k ++ ] = cur ; i = j - 1 ; } for ( int i = 0 ; i < k ; i ++ ) System . out . print ( result [ i ] + \" \u2581 \" ) ; System . out . print ( \" \\n \" ) ; }", "python": "def findSubsequence ( arr , n ) :\n    sign = [ 0 ] * n\n    for i in range ( n ) :\n        if ( arr [ i ] > 0 ) :\n            sign [ i ] = 1\n        else :\n            sign [ i ] = - 1\n    k = 0\n    result = [ 0 ] * n\n    i = 0\n    while i < n :\n        cur = arr [ i ]\n        j = i\n        while ( j < n and sign [ i ] == sign [ j ] ) :\n            cur = max ( cur , arr [ j ] )\n            j += 1\n        result [ k ] = cur\n        k += 1\n        i = j - 1\n        i += 1\n    for i in range ( k ) :\n        print ( result [ i ] , end = \" \u2581 \" )\n"}
{"java": "static boolean isEven ( int n ) { if ( ( n ^ 1 ) == n + 1 ) return true ; else return false ; }", "python": "def isEven ( n ) :\n    if ( n ^ 1 == n + 1 ) :\n        return True ;\n    else :\n        return False ;\n"}
{"java": "public static void getSmallestAndLargest ( String s , int k ) { String currStr = s . substring ( 0 , k ) ; String lexMin = currStr ; String lexMax = currStr ; for ( int i = k ; i < s . length ( ) ; i ++ ) { currStr = currStr . substring ( 1 , k ) + s . charAt ( i ) ; if ( lexMax . compareTo ( currStr ) < 0 ) lexMax = currStr ; if ( lexMin . compareTo ( currStr ) > 0 ) lexMin = currStr ; } System . out . println ( lexMin ) ; System . out . println ( lexMax ) ; }", "python": "def getSmallestAndLargest ( s , k ) :\n    currStr = s [ : k ]\n    lexMin = currStr\n    lexMax = currStr\n    for i in range ( k , len ( s ) ) :\n        currStr = currStr [ 1 : k ] + s [ i ]\n        if ( lexMax < currStr ) :\n            lexMax = currStr\n        if ( lexMin > currStr ) :\n            lexMin = currStr\n    print ( lexMin )\n    print ( lexMax )\n"}
{"java": "static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y * x ) % ( y + x ) == 0 ) count ++ ; } } return count ; }", "python": "def countPairs ( n ) :\n    count = 0\n    for x in range ( 1 , n ) :\n        for y in range ( x + 1 , n + 1 ) :\n            if ( ( y * x ) % ( y + x ) == 0 ) :\n                count += 1\n    return count\n"}
{"java": "static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y + x ) % ( y ^ x ) == 0 ) count ++ ; } } return count ; }", "python": "def countPairs ( n ) :\n    count = 0 ;\n    for x in range ( 1 , n ) :\n        for y in range ( x + 1 , n + 1 ) :\n            if ( ( y + x ) % ( y ^ x ) == 0 ) :\n                count += 1 ;\n    return count ;\n"}
{"java": "static boolean isDivisiblePalindrome ( int n ) { int hash [ ] = new int [ 10 ] ; int digitSum = 0 ; while ( n != 0 ) { digitSum += n % 10 ; hash [ n % 10 ] ++ ; n /= 10 ; } if ( digitSum % 3 != 0 ) return false ; int oddCount = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( hash [ i ] % 2 != 0 ) oddCount ++ ; } if ( oddCount > 1 ) return false ; else return true ; }", "python": "def isDivisiblePalindrome ( n ) :\n    hash = [ 0 ] * 10\n    digitSum = 0\n    while ( n ) :\n        digitSum += n % 10\n        hash [ n % 10 ] += 1\n        n //= 10\n    if ( digitSum % 3 != 0 ) :\n        return False\n    oddCount = 0\n    for i in range ( 10 ) :\n        if ( hash [ i ] % 2 != 0 ) :\n            oddCount += 1\n    if ( oddCount > 1 ) :\n        return False\n    else :\n        return True\n"}
{"java": "static String check ( int [ ] Arr , int n , int M , int K ) { int flag = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Arr [ i ] == 0 ) flag = 1 ; } if ( K % 2 != 0 && flag == 0 ) return \" No \" ; else return \" Yes \" ; }", "python": "def check ( Arr , n , M , K ) :\n    flag = 0\n    for i in range ( n ) :\n        if ( Arr [ i ] == 0 ) :\n            flag = 1\n    if ( K % 2 != 0 and flag == 0 ) :\n        return \" No \"\n    else :\n        return \" Yes \" ;\n"}
{"java": "static void division_of_string ( char [ ] str , int k ) { int n = str . length ; Map < Character , Boolean > has = new HashMap < > ( ) ; int ans = 0 , cnt = 0 , i = 0 ; while ( i < n ) { if ( ! has . containsKey ( str [ i ] ) ) { cnt ++ ; has . put ( str [ i ] , true ) ; } if ( cnt == k ) { ans = i ; break ; } i ++ ; } has . clear ( ) ; cnt = 0 ; while ( i < n ) { if ( ! has . containsKey ( str [ i ] ) ) { cnt ++ ; has . put ( str [ i ] , true ) ; } if ( cnt == k ) { break ; } i ++ ; } if ( cnt < k ) { System . out . println ( \" Not \u2581 possible \" ) ; } else { i = 0 ; while ( i <= ans ) { System . out . print ( str [ i ] ) ; i ++ ; } System . out . println ( \" \" ) ; while ( i < n ) { System . out . print ( str [ i ] ) ; i ++ ; } System . out . println ( \" \" ) ; } System . out . println ( \" \" ) ; }", "python": "def division_of_string ( string , k ) :\n    n = len ( string ) ;\n    has = { } ;\n    cnt = 0 ; i = 0 ;\n    while ( i < n ) :\n        if string [ i ] not in has :\n            cnt += 1 ;\n            has [ string [ i ] ] = True ;\n        if ( cnt == k ) :\n            ans = i ;\n            break ;\n        i += 1 ;\n    has . clear ( ) ;\n    cnt = 0 ;\n    while ( i < n ) :\n        if ( string [ i ] not in has ) :\n            cnt += 1 ;\n            has [ string [ i ] ] = True ;\n        if ( cnt == k ) :\n            break ;\n        i += 1 ;\n    if ( cnt < k ) :\n        print ( \" Not \u2581 possible \" , end = \" \" ) ;\n    else :\n        i = 0 ;\n        while ( i <= ans ) :\n            print ( string [ i ] , end = \" \" ) ;\n            i += 1 ;\n        print ( ) ;\n        while ( i < n ) :\n            print ( string [ i ] , end = \" \" ) ;\n            i += 1 ;\n        print ( )\n"}
{"java": "static int replaceDigit ( int x , int d1 , int d2 ) { int result = 0 , multiply = 1 ; while ( x % 10 > 0 ) { int remainder = x % 10 ; if ( remainder == d1 ) result = result + d2 * multiply ; else result = result + remainder * multiply ; multiply *= 10 ; x = x / 10 ; } return result ; }", "python": "def replaceDigit ( x , d1 , d2 ) :\n    result = 0 ;\n    multiply = 1 ;\n    while ( x % 10 > 0 ) :\n        remainder = x % 10 ;\n        if ( remainder == d1 ) :\n            result = ( result + d2 * multiply ) ;\n        else :\n            result = ( result + remainder * multiply ) ;\n        multiply *= 10 ;\n        x = int ( x / 10 ) ;\n    return result ;\n"}
{"java": "public static int minJumps ( int arr [ ] , int N ) { int MAX = 1000000 ; int [ ] fib = new int [ 30 ] ; fib [ 0 ] = 0 ; fib [ 1 ] = 1 ; for ( int i = 2 ; i < 30 ; i ++ ) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; int [ ] DP = new int [ N + 2 ] ; DP [ 0 ] = 0 ; for ( int i = 1 ; i <= N + 1 ; i ++ ) DP [ i ] = MAX ; for ( int i = 1 ; i <= N + 1 ; i ++ ) { for ( int j = 1 ; j < 30 ; j ++ ) { if ( ( i == N + 1 || arr [ i - 1 ] == 1 ) && i - fib [ j ] >= 0 ) DP [ i ] = Math . min ( DP [ i ] , 1 + DP [ i - fib [ j ] ] ) ; } } if ( DP [ N + 1 ] != MAX ) return DP [ N + 1 ] ; else return - 1 ; }", "python": "def minJumps ( arr , N ) :\n    fib = [ 0 for i in range ( 30 ) ]\n    fib [ 0 ] = 0\n    fib [ 1 ] = 1\n    for i in range ( 2 , 30 ) :\n        fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ]\n    DP = [ 0 for i in range ( N + 2 ) ]\n    DP [ 0 ] = 0\n    for i in range ( 1 , N + 2 ) :\n        DP [ i ] = MAX\n    for i in range ( 1 , N + 2 ) :\n        for j in range ( 1 , 30 ) :\n            if ( ( arr [ i - 1 ] == 1 or i == N + 1 ) and i - fib [ j ] >= 0 ) :\n                DP [ i ] = min ( DP [ i ] , 1 + DP [ i - fib [ j ] ] )\n    if ( DP [ N + 1 ] != MAX ) :\n        return DP [ N + 1 ]\n    else :\n        return - 1\n"}
{"java": "static boolean FindPoint ( int x1 , int y1 , int x2 , int y2 , int x , int y ) { if ( x > x1 && x < x2 && y > y1 && y < y2 ) return true ; return false ; }", "python": "def FindPoint ( x1 , y1 , x2 , y2 , x , y ) :\n    if ( x > x1 and x < x2 and y > y1 and y < y2 ) :\n        return True\n    else :\n        return False\n"}
{"java": "public static Comparator < Point > cmp = new Comparator < Point > ( ) { public int compare ( Point a , Point b ) { if ( a . y > b . y ) return - 1 ; if ( a . y < b . y ) return 1 ; return a . x - b . x ; } }", "python": "def solve ( fin ) :\n    N = int ( fin . next ( ) . strip ( ) )\n    Lx = map ( int , fin . next ( ) . split ( ) )\n    Px = map ( int , fin . next ( ) . split ( ) )\n    LL = list ( enumerate ( Px ) )\n    LL . sort ( key = lambda a : - a [ 1 ] )\n    return ' \u2581 ' . join ( str ( a [ 0 ] ) for a in LL )\n"}
{"java": "static int findSum ( int N ) { return ( N * ( N + 1 ) * ( 2 * N - 5 ) + 4 * N ) / 2 ; }", "python": "def findSum ( N ) :\n    return ( ( N * ( N + 1 ) * ( 2 * N - 5 ) + 4 * N ) / 2 )\n"}
{"java": "static int findSum ( int N ) { return ( 2 * N * ( N + 1 ) * ( 4 * N + 17 ) + 54 * N ) / 6 ; }", "python": "def findSum ( N ) :\n    return ( 2 * N * ( N + 1 ) * ( 4 * N + 17 ) + 54 * N ) / 6\n"}
{"java": "static int pairs ( int n ) { int [ ] [ ] c = new int [ 10 ] [ 10 ] ; int tmp = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i >= tmp * 10 ) tmp *= 10 ; c [ i / tmp ] [ i % 10 ] ++ ; } int ans = 0 ; for ( int i = 1 ; i < 10 ; i ++ ) for ( int j = 1 ; j < 10 ; j ++ ) ans += c [ i ] [ j ] * c [ j ] [ i ] ; return ans ; }", "python": "def pairs ( n ) :\n    c = [ [ 0 for i in range ( 10 ) ] for i in range ( 10 ) ]\n    tmp = 1\n    for i in range ( 1 , n + 1 ) :\n        if ( i >= tmp * 10 ) :\n            tmp *= 10\n        c [ i // tmp ] [ i % 10 ] += 1\n    ans = 0\n    for i in range ( 1 , 10 ) :\n        for j in range ( 1 , 10 ) :\n            ans += c [ i ] [ j ] * c [ j ] [ i ]\n    return ans\n"}
{"java": "public static int countKdivPairs ( int A [ ] , int n , int K ) { int freq [ ] = new int [ K ] ; for ( int i = 0 ; i < n ; i ++ ) ++ freq [ A [ i ] % K ] ; int sum = freq [ 0 ] * ( freq [ 0 ] - 1 ) / 2 ; for ( int i = 1 ; i <= K / 2 && i != ( K - i ) ; i ++ ) sum += freq [ i ] * freq [ K - i ] ; if ( K % 2 == 0 ) sum += ( freq [ K / 2 ] * ( freq [ K / 2 ] - 1 ) / 2 ) ; return sum ; }", "python": "def countKdivPairs ( A , n , K ) :\n    freq = [ 0 ] * K\n    for i in range ( n ) :\n        freq [ A [ i ] % K ] += 1\n    sum = freq [ 0 ] * ( freq [ 0 ] - 1 ) / 2 ;\n    i = 1\n    while ( i <= K // 2 and i != ( K - i ) ) :\n        sum += freq [ i ] * freq [ K - i ]\n        i += 1\n    if ( K % 2 == 0 ) :\n        sum += ( freq [ K // 2 ] * ( freq [ K // 2 ] - 1 ) / 2 ) ;\n    return int ( sum )\n"}
{"java": "static boolean SumDivisible ( int n , int k ) { int sum = 0 , position = 1 ; while ( n > 0 ) { if ( position % 2 == 1 ) sum += n % 10 ; n = n / 10 ; position ++ ; } if ( sum % k == 0 ) return true ; return false ; }", "python": "def SumDivisible ( n , k ) :\n    sum = 0\n    position = 1\n    while ( n > 0 ) :\n        if ( position % 2 == 1 ) :\n            sum += n % 10\n        n = n // 10\n        position += 1\n    if ( sum % k == 0 ) :\n        return True\n    return False\n"}
{"java": "public static int count4Divisibiles ( int arr [ ] , int n ) { int freq [ ] = { 0 , 0 , 0 , 0 } ; int i = 0 ; int ans ; for ( i = 0 ; i < n ; i ++ ) ++ freq [ arr [ i ] % 4 ] ; ans = freq [ 0 ] * ( freq [ 0 ] - 1 ) / 2 ; ans += freq [ 2 ] * ( freq [ 2 ] - 1 ) / 2 ; ans += freq [ 1 ] * freq [ 3 ] ; return ( ans ) ; }", "python": "def count4Divisibiles ( arr , n ) :\n    freq = [ 0 , 0 , 0 , 0 ]\n    for i in range ( n ) :\n        freq [ arr [ i ] % 4 ] += 1\n    ans = freq [ 0 ] * ( freq [ 0 ] - 1 ) / 2\n    ans += freq [ 2 ] * ( freq [ 2 ] - 1 ) / 2\n    ans += freq [ 1 ] * freq [ 3 ]\n    return int ( ans )\n"}
{"java": "static void circle_equation ( double x1 , double y1 , double r ) { double a = - 2 * x1 ; double b = - 2 * y1 ; double c = ( r * r ) - ( x1 * x1 ) - ( y1 * y1 ) ; System . out . print ( \" x ^ 2 \u2581 + \u2581 ( \" + a + \" \u2581 x ) \u2581 + \u2581 \" ) ; System . out . print ( \" y ^ 2 \u2581 + \u2581 ( \" + b + \" \u2581 y ) \u2581 = \u2581 \" ) ; System . out . println ( c + \" . \" ) ; }", "python": "def circle_equation ( x1 , y1 , r ) :\n    a = - 2 * x1 ;\n    b = - 2 * y1 ;\n    c = ( r * r ) - ( x1 * x1 ) - ( y1 * y1 ) ;\n    print ( \" x ^ 2 \u2581 + \u2581 ( \" , a , \" x ) \u2581 + \u2581 \" , end = \" \" ) ;\n    print ( \" y ^ 2 \u2581 + \u2581 ( \" , b , \" y ) \u2581 = \u2581 \" , end = \" \" ) ;\n    print ( c , \" . \" ) ;\n"}
{"java": "static String [ ] splitString ( ) throws IOException { return br . readLine ( ) . trim ( ) . split ( \" \u2581 \" ) ; }", "python": "def solve ( ) :\n    n , k = map ( int , input ( ) . split ( ) )\n    a = list ( map ( int , input ( ) . split ( ) ) )\n    f = { }\n    for i in range ( n ) :\n        if a [ i ] not in f :\n            f [ a [ i ] ] = [ i ]\n        else :\n            f [ a [ i ] ] . append ( i )\n    for key in f :\n        if len ( f [ key ] ) > k :\n            print ( \" NO \" )\n            return\n    it = 0\n    res = [ 0 for i in range ( n ) ]\n    for key in f :\n        for j in f [ key ] :\n            res [ j ] = it + 1\n            it = ( 1 + it ) % k\n    print ( \" YES \" )\n    print ( * res )\n"}
{"java": "static void getXandYintercept ( int P [ ] , int Q [ ] ) { int a = P [ 1 ] - Q [ 1 ] ; int b = P [ 0 ] - Q [ 0 ] ; if ( b == 0 ) { System . out . println ( P [ 0 ] ) ; System . out . println ( \" infinity \" ) ; return ; } if ( a == 0 ) { System . out . println ( \" infinity \" ) ; System . out . println ( P [ 1 ] ) ; return ; } double m = a / ( b * 1.0 ) ; int x = P [ 0 ] ; int y = P [ 1 ] ; double c = y - m * x ; y = 0 ; double r = ( y - c ) / ( m * 1.0 ) ; System . out . println ( r ) ; x = 0 ; y = ( int ) ( m * x + c ) ; System . out . print ( c ) ; }", "python": "def getXandYintercept ( P , Q ) :\n    a = P [ 1 ] - Q [ 1 ]\n    b = P [ 0 ] - Q [ 0 ]\n    if b == 0 :\n        print ( P [ 0 ] )\n        print ( \" infinity \" )\n        return\n    if a == 0 :\n        print ( \" infinity \" )\n        print ( P [ 1 ] )\n        return\n    m = a / b\n    x = P [ 0 ]\n    y = P [ 1 ]\n    c = y - m * x\n    y = 0\n    x = ( y - c ) / m\n    print ( x )\n    x = 0\n    y = m * x + c\n    print ( y )\n"}
{"java": "static int Divisible ( int arr [ ] , int n ) { int count_even = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 0 ) count_even ++ ; return count_even + ( n - count_even ) / 2 ; }", "python": "def Divisible ( arr , n ) :\n    count_even = 0\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 == 0 ) :\n            count_even += 1\n    return count_even + ( n - count_even ) // 2\n"}
{"java": "static int MinOfCubedDP ( int k ) { int [ ] DP = new int [ k + 1 ] ; int j = 1 , t = 1 ; DP [ 0 ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { DP [ i ] = Integer . MAX_VALUE ; while ( j <= i ) { if ( j == i ) DP [ i ] = 1 ; else if ( DP [ i ] > DP [ i - j ] ) DP [ i ] = DP [ i - j ] + 1 ; t ++ ; j = t * t * t ; } t = j = 1 ; } return DP [ k ] ; }", "python": "def MinOfCubedDP ( k ) :\n    DP = [ 0 ] * ( k + 1 ) ;\n    j = 1 ;\n    t = 1 ;\n    DP [ 0 ] = 0 ;\n    for i in range ( 1 , k + 1 ) :\n        DP [ i ] = sys . maxsize ;\n        while ( j <= i ) :\n            if ( j == i ) :\n                DP [ i ] = 1 ;\n            elif ( DP [ i ] > DP [ i - j ] ) :\n                DP [ i ] = DP [ i - j ] + 1 ;\n            t += 1 ;\n            j = t * t * t ;\n        t = j = 1 ;\n    return DP [ k ] ;\n"}
{"java": "public static int countSubarrays ( int a [ ] , int n , int m ) { int count = 0 ; int prefix [ ] = new int [ n ] ; int odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { prefix [ odd ] ++ ; if ( ( a [ i ] & 1 ) == 1 ) odd ++ ; if ( odd >= m ) count += prefix [ odd - m ] ; } return count ; }", "python": "def countSubarrays ( a , n , m ) :\n    count = 0\n    prefix = [ 0 ] * n\n    odd = 0\n    for i in range ( n ) :\n        prefix [ odd ] += 1\n        if ( a [ i ] & 1 ) :\n            odd += 1\n        if ( odd >= m ) :\n            count += prefix [ odd - m ]\n    return count\n"}
{"java": "static long countPairs ( int [ ] arr , int n ) { int count_2 = 0 , count_others = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 2 ) { count_2 ++ ; } else if ( arr [ i ] > 2 ) { count_others ++ ; } } long ans = 1L * count_2 * count_others + ( 1L * count_others * ( count_others - 1 ) ) / 2 ; return ans ; }", "python": "def countPairs ( arr , n ) :\n    count_2 , count_others = 0 , 0\n    for i in range ( n ) :\n        if arr [ i ] == 2 :\n            count_2 += 1\n        elif arr [ i ] > 2 :\n            count_others += 1\n    ans = ( count_2 * count_others + ( count_others * ( count_others - 1 ) ) // 2 )\n    return ans\n"}
{"java": "static int setKthBit ( int n , int k ) { return ( ( 1 << k ) | n ) ; }", "python": "def setKthBit ( n , k ) :\n    return ( ( 1 << k ) | n )\n"}
{"java": "static void printTwins ( int low , int high ) { boolean prime [ ] = new boolean [ high + 1 ] , twin = false ; for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p <= Math . floor ( Math . sqrt ( high ) ) + 1 ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= high ; i += p ) { prime [ i ] = false ; } } } for ( int i = low ; i <= high ; i ++ ) { if ( prime [ i ] && prime [ i + 2 ] ) { int a = i + 2 ; System . out . print ( \" Smallest \u2581 twins \u2581 in \u2581 given \u2581 range : \u2581 ( \" + i + \" , \u2581 \" + a + \" ) \" ) ; twin = true ; break ; } } if ( twin == false ) { System . out . println ( \" No \u2581 such \u2581 pair \u2581 exists \" ) ; } }", "python": "def printTwins ( low , high ) :\n    prime = [ True ] * ( high + 1 ) ;\n    twin = False ;\n    prime [ 0 ] = prime [ 1 ] = False ;\n    for p in range ( 2 , int ( math . floor ( math . sqrt ( high ) ) + 2 ) ) :\n        if ( prime [ p ] ) :\n            for i in range ( p * 2 , high + 1 , p ) :\n                prime [ i ] = False ;\n    for i in range ( low , high + 1 ) :\n        if ( prime [ i ] and prime [ i + 2 ] ) :\n            print ( \" Smallest \u2581 twins \u2581 in \u2581 given \u2581 range : \u2581 ( \" , i , \" , \" , ( i + 2 ) , \" ) \" ) ;\n            twin = True ;\n            break ;\n    if ( twin == False ) :\n        print ( \" No \u2581 such \u2581 pair \u2581 exists \" ) ;\n"}
{"java": "static int heptagonalNumber ( int n ) { return ( ( 5 * n * n ) - ( 3 * n ) ) / 2 ; }", "python": "def heptagonalNumber ( n ) :\n    return ( ( 5 * n * n ) - ( 3 * n ) ) // 2\n"}
{"java": "static int findCount ( int arr [ ] , int n ) { int countOdd = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 1 ) countOdd ++ ; if ( countOdd % 2 == 0 ) return 1 ; else return 0 ; }", "python": "def findCount ( arr , n ) :\n    countOdd = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 == 1 ) :\n            countOdd += 1 ;\n    if ( countOdd % 2 == 0 ) :\n        return 1 ;\n    else :\n        return 0 ;\n"}
{"java": "private static long change ( int n ) { if ( n % 2 == 0 ) { return ( long ) ( n / 2 + 1 ) * ( n / 2 + 1 ) ; } return 2L * ( n / 2 + 1 ) * ( n / 2 + 2 ) ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    if n % 2 == 0 :\n        print ( ( n // 2 + 1 ) ** 2 )\n    else :\n        a = n // 2 + 1\n        print ( a * ( a + 1 ) * 2 )\n"}
{"java": "static boolean isPossible ( int n , int k , int arr [ ] ) { int sum = arr [ 0 ] ; int maxVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { sum += arr [ i ] ; maxVal = Math . max ( maxVal , arr [ i ] ) ; } if ( ( float ) maxVal > ( float ) ( sum + k ) / n ) return false ; return true ; }", "python": "def isPossible ( n , k , arr ) :\n    sum = arr [ 0 ]\n    maxVal = arr [ 0 ] ;\n    for i in range ( 1 , n ) :\n        sum += arr [ i ]\n        maxVal = max ( maxVal , arr [ i ] )\n    if ( int ( maxVal ) > int ( ( sum + k ) / n ) ) :\n        return False\n    return True\n"}
{"java": "static int maximumOccurrence ( String s ) { int n = s . length ( ) ; HashMap < String , Integer > freq = new HashMap < String , Integer > ( ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { String temp = \" \" ; temp += s . charAt ( i ) ; if ( freq . containsKey ( temp ) ) { freq . put ( temp , freq . get ( temp ) + 1 ) ; } else { freq . put ( temp , 1 ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { String temp = \" \" ; temp += s . charAt ( i ) ; temp += s . charAt ( j ) ; if ( freq . containsKey ( temp ) ) freq . put ( temp , freq . get ( temp ) + 1 ) ; else freq . put ( temp , 1 ) ; } } int answer = Integer . MIN_VALUE ; for ( int it : freq . values ( ) ) answer = Math . max ( answer , it ) ; return answer ; }", "python": "def maximumOccurrence ( s ) :\n    n = len ( s )\n    freq = { }\n    for i in s :\n        temp = \" \"\n        temp += i\n        freq [ temp ] = freq . get ( temp , 0 ) + 1\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            temp = \" \"\n            temp += s [ i ]\n            temp += s [ j ]\n            freq [ temp ] = freq . get ( temp , 0 ) + 1\n    answer = - 10 ** 9\n    for it in freq :\n        answer = max ( answer , freq [ it ] )\n    return answer\n"}
{"java": "static boolean solve ( int [ ] a ) { int xor = Arrays . stream ( a ) . reduce ( ( x , y ) -> x ^ y ) . getAsInt ( ) ; if ( xor == 0 ) { return true ; } int part = 0 ; int count = 0 ; for ( int ai : a ) { part ^= ai ; if ( part == xor ) { part = 0 ; ++ count ; } } return count >= 2 ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    arr = list ( map ( int , input ( ) . split ( ) ) )\n    V = 0\n    for i in range ( n ) :\n        V ^= arr [ i ]\n    if V > 0 :\n        curr = cnt = 0\n        for i in range ( n ) :\n            curr ^= arr [ i ]\n            if curr == V :\n                cnt += 1\n                curr = 0\n        return \" YES \" if cnt % 2 and cnt > 2 else \" NO \"\n    else :\n        return \" YES \"\n"}
{"java": "static double find_area ( int r , int d ) { double R = d / PI ; R += Math . pow ( r , 2 ) ; R = Math . sqrt ( R ) ; double area = PI * Math . pow ( R , 2 ) ; return area ; }", "python": "def find_area ( r , d ) :\n    R = d / PI\n    R += pow ( r , 2 )\n    R = sqrt ( R )\n    area = PI * pow ( R , 2 )\n    return area\n"}
{"java": "static int minIncrementForUnique ( int [ ] A ) { HashMap < Integer , Integer > mpp = new HashMap < Integer , Integer > ( ) ; for ( int i : A ) { if ( mpp . containsKey ( i ) ) mpp . put ( i , mpp . get ( i ) + 1 ) ; else mpp . put ( i , 1 ) ; } Vector < Integer > taken = new Vector < Integer > ( ) ; int ans = 0 ; for ( int x = 0 ; x < 100000 ; x ++ ) { if ( mpp . containsKey ( x ) && mpp . get ( x ) >= 2 ) taken . add ( x * ( mpp . get ( x ) - 1 ) ) ; else if ( taken . size ( ) > 0 && ( ( mpp . containsKey ( x ) && mpp . get ( x ) == 0 ) || ! mpp . containsKey ( x ) ) ) { ans += x - taken . get ( taken . size ( ) - 1 ) ; taken . remove ( taken . size ( ) - 1 ) ; } } return ans ; }", "python": "def minIncrementForUnique ( A ) :\n    count = collections . Counter ( A )\n    taken = [ ]\n    ans = 0\n    for x in range ( 100000 ) :\n        if count [ x ] >= 2 :\n            taken . extend ( [ x ] * ( count [ x ] - 1 ) )\n        elif taken and count [ x ] == 0 :\n            ans += x - taken . pop ( )\n    return ans\n"}
{"java": "static void findNthTerm ( int n ) { if ( n % 2 == 0 ) { n = n / 2 ; n = 2 * ( n - 1 ) ; System . out . println ( n / 2 ) ; } else { n = ( n / 2 ) + 1 ; n = 2 * ( n - 1 ) ; System . out . println ( n ) ; } }", "python": "def findNthTerm ( n ) :\n    if ( n % 2 == 0 ) :\n        n = n // 2\n        n = 2 * ( n - 1 )\n        print ( n // 2 )\n    else :\n        n = ( n // 2 ) + 1\n        n = 2 * ( n - 1 )\n        print ( n )\n"}
{"java": "static Comparator < String > comp = new Comparator < String > ( ) { public int compare ( String a , String b ) { for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) < b . charAt ( i ) ) return - 1 + ( i % 2 ) * 2 ; else if ( a . charAt ( i ) > b . charAt ( i ) ) return 1 - ( i % 2 ) * 2 ; } return 0 ; } }", "python": "def process ( A ) :\n    n = len ( A )\n    A2 = [ ]\n    for i in range ( n ) :\n        S = A [ i ]\n        row = [ ]\n        for j in range ( len ( S ) ) :\n            c = A [ i ] [ j ]\n            c = ord ( c ) - ord ( ' a ' )\n            if j % 2 == 0 :\n                row . append ( c )\n            else :\n                row . append ( - 1 * c )\n        row . append ( i + 1 )\n        A2 . append ( row )\n    A2 . sort ( )\n    answer = [ x [ - 1 ] for x in A2 ]\n    answer = ' \u2581 ' . join ( map ( str , answer ) )\n    sys . stdout . write ( f ' { answer } \\n ' )\n"}
{"java": "static void form_sieve ( ) { sieve_Prime [ 1 ] = 1 ; for ( int i = 2 ; i <= MAX ; i ++ ) { if ( sieve_Prime [ i ] == 0 ) { for ( int j = i * 2 ; j <= MAX ; j += i ) { if ( sieve_Prime [ j ] == 0 ) { sieve_Prime [ j ] = 1 ; sieve_count [ i ] ++ ; } } } } }", "python": "def form_sieve ( ) :\n    sieve_Prime [ 1 ] = 1\n    for i in range ( 2 , MAX + 1 ) :\n        if sieve_Prime [ i ] == 0 :\n            for j in range ( i * 2 , MAX + 1 , i ) :\n                if sieve_Prime [ j ] == 0 :\n                    sieve_Prime [ j ] = 1\n                    sieve_count [ i ] += 1\n"}
{"java": "public static boolean isFascinating ( int num ) { int [ ] freq = new int [ 10 ] ; String val = \" \" + num + num * 2 + num * 3 ; for ( int i = 0 ; i < val . length ( ) ; i ++ ) { int digit = val . charAt ( i ) - '0' ; if ( freq [ digit ] > 0 ) return false ; else freq [ digit ] ++ ; } for ( int i = 1 ; i < freq . length ; i ++ ) { if ( freq [ i ] == 0 ) return false ; } return true ; }", "python": "def isFascinating ( num ) :\n    freq = [ 0 ] * 10\n    val = ( str ( num ) + str ( num * 2 ) + str ( num * 3 ) )\n    for i in range ( len ( val ) ) :\n        digit = int ( val [ i ] )\n        if freq [ digit ] > 0 :\n            return False\n        else :\n            freq [ digit ] += 1\n    for i in range ( 1 , 10 ) :\n        if freq [ i ] == 0 :\n            return False\n    return True\n"}
{"java": "static double getValue ( double n ) { double result = ( Math . floor ( Math . log ( n + 1 ) / Math . log ( 2 ) ) ) ; return Math . pow ( 2 , result ) ; }", "python": "def getValue ( n ) :\n    result = int ( math . floor ( math . log ( n + 1 ) / math . log ( 2 ) ) )\n    return int ( math . pow ( 2 , result ) )\n"}
{"java": "static String findNumber ( int n , int d ) { String ans = \" \" ; if ( d != 10 ) { ans += Integer . toString ( d ) ; for ( int i = 1 ; i < n ; i ++ ) ans += '0' ; } else { if ( n == 1 ) ans += \" Impossible \" ; else { ans += '1' ; for ( int i = 1 ; i < n ; i ++ ) ans += '0' ; } } return ans ; }", "python": "def findNumber ( n , d ) :\n    ans = \" \"\n    if ( d != 10 ) :\n        ans += str ( d )\n        for i in range ( 1 , n ) :\n            ans += '0'\n    else :\n        if ( n == 1 ) :\n            ans += \" Impossible \"\n        else :\n            ans += '1'\n            for i in range ( 1 , n ) :\n                ans += '0'\n    return ans\n"}
{"java": "static void printNumber ( int holes ) { if ( holes == 0 ) System . out . print ( \"1\" ) ; else if ( holes == 1 ) System . out . print ( \"0\" ) ; else { int rem = 0 , quo = 0 ; rem = holes % 2 ; quo = holes / 2 ; if ( rem == 1 ) System . out . print ( \"4\" ) ; for ( int i = 0 ; i < quo ; i ++ ) System . out . print ( \"8\" ) ; } }", "python": "def printNumber ( holes ) :\n    if ( holes == 0 ) :\n        print ( \"1\" )\n    elif ( holes == 1 ) :\n        print ( \"0\" , end = \" \" )\n    else :\n        rem = 0\n        quo = 0\n        rem = holes % 2\n        quo = holes // 2\n        if ( rem == 1 ) :\n            print ( \"4\" , end = \" \" )\n        for i in range ( quo ) :\n            print ( \"8\" , end = \" \" )\n"}
{"java": "static void printArray ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int l = 0 , r = n - 1 , flag = 0 , i ; int k = 2 ; while ( l <= r ) { if ( flag == 0 ) { for ( i = l ; i < l + k && i <= r ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; flag = 1 ; l = i ; } else { for ( i = r ; i > r - k && i >= l ; i -- ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; flag = 0 ; r = i ; } k ++ ; } }", "python": "def printArray ( arr , n ) :\n    arr . sort ( )\n    l = 0\n    r = n - 1\n    flag = 0\n    k = 2\n    while ( l <= r ) :\n        if ( flag == 0 ) :\n            i = l\n            while i < l + k and i <= r :\n                print ( arr [ i ] , end = \" \u2581 \" )\n                i += 1\n            flag = 1\n            l = i\n        else :\n            i = r\n            while i > r - k and i >= l :\n                print ( arr [ i ] , end = \" \u2581 \" )\n                i -= 1\n            flag = 0\n            r = i\n        k += 1\n"}
{"java": "static int EqualNumbers ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; if ( sum % n != 0 ) return n - 1 ; return n ; }", "python": "def EqualNumbers ( a , n ) :\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += a [ i ] ;\n    if ( sum % n ) :\n        return n - 1 ;\n    return n ;\n"}
{"java": "static int maxSelectionCount ( int a [ ] , int n ) { int res = 0 ; Arrays . sort ( a ) ; int select = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= select ) { res ++ ; select ++ ; } } return res ; }", "python": "def maxSelectionCount ( a , n ) :\n    res = 0 ;\n    a . sort ( ) ;\n    select = 1 ;\n    for i in range ( n ) :\n        if ( a [ i ] >= select ) :\n            res += 1 ;\n            select += 1 ;\n    return res ;\n"}
{"java": "static void findNumberOfDigits ( long n , int base ) { int dig = ( int ) ( Math . floor ( Math . log ( n ) / Math . log ( base ) ) + 1 ) ; System . out . println ( \" The \u2581 Number \u2581 of \u2581 digits \u2581 of \u2581 Number \u2581 \" + n + \" \u2581 in \u2581 base \u2581 \" + base + \" \u2581 is \u2581 \" + dig ) ; }", "python": "def findNumberOfDigits ( n , base ) :\n    dig = ( math . floor ( math . log ( n ) / math . log ( base ) ) + 1 )\nprint ( \" The \u2581 Number \u2581 of \u2581 digits \u2581 of \" . format ( n , base , dig ) )"}
{"java": "static void CntSubstr ( char [ ] s , int l ) { int hash = 0 ; for ( int i = 0 ; i < l ; i ++ ) { hash = ( hash * x + ( s [ i ] - 97 ) ) % mod ; } int pow_l = 1 ; for ( int i = 0 ; i < l - 1 ; i ++ ) { pow_l = ( pow_l * x ) % mod ; } HashSet < Integer > result = new HashSet < Integer > ( ) ; result . add ( hash ) ; for ( int i = l ; i < s . length ; i ++ ) { hash = ( ( hash - pow_l * ( s [ i - l ] - 97 ) + 2 * mod ) * x + ( s [ i ] - 97 ) ) % mod ; result . add ( hash ) ; } System . out . println ( result . size ( ) ) ; }", "python": "def CntSubstr ( s , l ) :\n    hash = 0 ;\n    for i in range ( l ) :\n        hash = ( hash * x + ( ord ( s [ i ] ) - 97 ) ) % mod ;\n    pow_l = 1 ;\n    for i in range ( l - 1 ) :\n        pow_l = ( pow_l * x ) % mod ;\n    result = set ( ) ;\n    result . add ( hash ) ;\n    for i in range ( l , len ( s ) ) :\n        hash = ( ( hash - pow_l * ( ord ( s [ i - l ] ) - 97 ) + 2 * mod ) * x + ( ord ( s [ i ] ) - 97 ) ) % mod ;\n        result . add ( hash ) ;\n    print ( len ( result ) ) ;\n"}
{"java": "static void solve ( String s ) { String z = s ; int l = s . length ( ) ; int i ; String str ; if ( s . indexOf ( ' + ' ) != - 1 ) { i = s . indexOf ( ' + ' ) ; str = s . replace ( ' + ' , ' - ' ) ; } else { i = s . indexOf ( ' - ' ) ; str = s . replace ( ' - ' , ' + ' ) ; } System . out . println ( \" Conjugate \u2581 of \u2581 \" + z + \" \u2581 = \u2581 \" + str ) ; }", "python": "def solve ( s ) :\n    z = s\n    l = len ( s )\n    i = 0\n    if ( s . find ( ' + ' ) != - 1 ) :\n        i = s . find ( ' + ' )\n        s = s . replace ( ' + ' , ' - ' )\n    else :\n        i = s . find ( ' - ' )\n        s = s . replace ( ' - ' , ' + ' , 1 )\n    print ( \" Conjugate \u2581 of \u2581 \" , z , \" \u2581 = \u2581 \" , s )\n"}
{"java": "static int totalWays ( int N , int M , int X ) { int dp [ ] [ ] = new int [ N + 1 ] [ 2 ] ; if ( X == 1 ) { dp [ 0 ] [ 0 ] = 1 ; } else { dp [ 0 ] [ 1 ] = 0 ; } if ( X == 1 ) { dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = M - 1 ; } else { dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = ( M - 2 ) ; } for ( int i = 2 ; i < N ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 ) ; } return dp [ N - 1 ] [ 0 ] ; }", "python": "def totalWays ( N , M , X ) :\n    dp = [ [ 0 for i in range ( 2 ) ] for j in range ( N + 1 ) ]\n    if ( X == 1 ) :\n        dp [ 0 ] [ 0 ] = 1\n    else :\n        dp [ 0 ] [ 1 ] = 0\n    if ( X == 1 ) :\n        dp [ 1 ] [ 0 ] = 0\n        dp [ 1 ] [ 1 ] = M - 1\n    else :\n        dp [ 1 ] [ 0 ] = 1\n        dp [ 1 ] [ 1 ] = ( M - 2 )\n    for i in range ( 2 , N ) :\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ]\n        dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 )\n    return dp [ N - 1 ] [ 0 ]\n"}
{"java": "static void alphabetPattern ( int N ) { int index , side_index ; int Top = 1 , Bottom = 1 , Diagonal = N - 1 ; for ( index = 0 ; index < N ; index ++ ) System . out . print ( Top ++ + \" \u2581 \" ) ; System . out . println ( ) ; for ( index = 1 ; index < N - 1 ; index ++ ) { for ( side_index = 0 ; side_index < 2 * ( N - index - 1 ) ; side_index ++ ) System . out . print ( \" \u2581 \" ) ; System . out . print ( Diagonal -- ) ; System . out . println ( ) ; } for ( index = 0 ; index < N ; index ++ ) System . out . print ( Bottom ++ + \" \u2581 \" ) ; }", "python": "def alphabetPattern ( N ) :\n    Top , Bottom , Diagonal = 1 , 1 , N - 1\n    for index in range ( N ) :\n        print ( Top , end = ' \u2581 ' )\n        Top += 1\n    print ( )\n    for index in range ( 1 , N - 1 ) :\n        for side_index in range ( 2 * ( N - index - 1 ) ) :\n            print ( ' \u2581 ' , end = ' ' )\n        print ( Diagonal , end = ' ' )\n        Diagonal -= 1\n        print ( )\n    for index in range ( N ) :\n        print ( Bottom , end = ' \u2581 ' )\n        Bottom += 1\n"}
{"java": "static int maximumOccurredElement ( int [ ] L , int [ ] R , int n ) { int [ ] arr = new int [ MAX ] ; int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ L [ i ] ] += 1 ; arr [ R [ i ] + 1 ] -= 1 ; if ( R [ i ] > maxi ) { maxi = R [ i ] ; } } int msum = arr [ 0 ] ; int ind = 0 ; for ( int i = 1 ; i < maxi + 1 ; i ++ ) { arr [ i ] += arr [ i - 1 ] ; if ( msum < arr [ i ] ) { msum = arr [ i ] ; ind = i ; } } return ind ; }", "python": "def maximumOccurredElement ( L , R , n ) :\n    arr = [ 0 for i in range ( MAX ) ]\n    for i in range ( 0 , n , 1 ) :\n        arr [ L [ i ] ] += 1\n        arr [ R [ i ] + 1 ] -= 1\n    msum = arr [ 0 ]\n    for i in range ( 1 , MAX , 1 ) :\n        arr [ i ] += arr [ i - 1 ]\n        if ( msum < arr [ i ] ) :\n            msum = arr [ i ]\n            ind = i\n    return ind\n"}
{"java": "static int xor_triplet ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j ; k < n ; k ++ ) { int xor1 = 0 , xor2 = 0 ; for ( int x = i ; x < j ; x ++ ) { xor1 ^= arr [ x ] ; } for ( int x = j ; x <= k ; x ++ ) { xor2 ^= arr [ x ] ; } if ( xor1 == xor2 ) { ans ++ ; } } } } return ans ; }", "python": "def xor_triplet ( arr , n ) :\n    ans = 0 ;\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            for k in range ( j , n ) :\n                xor1 = 0 ; xor2 = 0 ;\n                for x in range ( i , j ) :\n                    xor1 ^= arr [ x ] ;\n                for x in range ( j , k + 1 ) :\n                    xor2 ^= arr [ x ] ;\n                if ( xor1 == xor2 ) :\n                    ans += 1 ;\n    return ans ;\n"}
{"java": "public static long pos ( long g , long k ) { return g / k ; }", "python": "def numbers ( a , b , k ) :\n    x = b // k - a // k\n    if a % k == 0 :\n        x += 1\n    return x\n"}
{"java": "static double countdigits ( int n , int k ) { if ( n == 0 ) return 0 ; int digit = n % 10 ; if ( digit == k ) return 1 + countdigits ( n / 10 , k ) ; return countdigits ( n / 10 , k ) ; }", "python": "def countdigits ( n , k ) :\n    if n == 0 :\n        return 0\n    digit = n % 10\n    if digit == k :\n        return 1 + countdigits ( n / 10 , k )\n    return countdigits ( n / 10 , k )\n"}
{"java": "static void advancePiece ( int [ ] x , int a ) { int work = x [ a - 1 ] + 1 ; if ( work == MAX + 1 ) { return ; } for ( int i = 0 ; i < x . length ; i ++ ) { if ( work == x [ i ] ) { return ; } } x [ a - 1 ] = work ; }", "python": "def keisan ( a , b ) :\n    if a > 2019 :\n        return True\n    i = 0\n    while i < len ( b ) :\n        if b [ i ] == a :\n            return True\n        i += 1\n    return False\n"}
{"java": "static int FindMinimumCost ( int ind , int a [ ] , int n , int k , int dp [ ] ) { if ( ind == ( n - 1 ) ) return 0 ; else if ( dp [ ind ] != - 1 ) return dp [ ind ] ; else { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ind + i < n ) ans = Math . min ( ans , Math . abs ( a [ ind + i ] - a [ ind ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) ) ; else break ; } return dp [ ind ] = ans ; } }", "python": "def FindMinimumCost ( ind , a , n , k , dp ) :\n    if ( ind == ( n - 1 ) ) :\n        return 0\n    elif ( dp [ ind ] != - 1 ) :\n        return dp [ ind ]\n    else :\n        ans = sys . maxsize\n        for i in range ( 1 , k + 1 ) :\n            if ( ind + i < n ) :\n                ans = min ( ans , abs ( a [ ind + i ] - a [ ind ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) )\n            else :\n                break\n        dp [ ind ] = ans\n        return ans\n"}
{"java": "static int getSteps ( int arr [ ] , int n ) { int count = 0 ; int modulus [ ] = new int [ 4 ] ; int sum = 0 ; int i ; for ( i = 0 ; i < n ; i ++ ) { int mod = arr [ i ] % 4 ; sum += mod ; modulus [ mod ] ++ ; } if ( sum % 4 != 0 ) { return - 1 ; } else { if ( modulus [ 1 ] > modulus [ 3 ] ) { count += modulus [ 3 ] ; } else { count += modulus [ 1 ] ; } modulus [ 1 ] -= count ; modulus [ 3 ] -= count ; modulus [ 2 ] += modulus [ 1 ] / 2 ; modulus [ 2 ] += modulus [ 3 ] / 2 ; count += modulus [ 1 ] / 2 ; count += modulus [ 3 ] / 2 ; count += modulus [ 2 ] / 2 ; return count ; } }", "python": "def getSteps ( arr , n ) :\n    count = 0\n    modulus = [ 0 for i in range ( 4 ) ]\n    Sum = 0\n    i = 0\n    for i in range ( n ) :\n        mod = arr [ i ] % 4\n        Sum += mod\n        modulus [ mod ] += 1\n    if ( Sum % 4 != 0 ) :\n        return - 1\n    else :\n        if ( modulus [ 1 ] > modulus [ 3 ] ) :\n            count += modulus [ 3 ]\n        else :\n            count += modulus [ 1 ]\n        modulus [ 1 ] -= count\n        modulus [ 3 ] -= count\n        modulus [ 2 ] += modulus [ 1 ] // 2\n        modulus [ 2 ] += modulus [ 3 ] // 2\n        count += modulus [ 1 ] // 2\n        count += modulus [ 3 ] // 2\n        count += modulus [ 2 ] // 2\n        return count\n"}
{"java": "static void printSum ( int m [ ] , int s [ ] , int n ) { int total = 0 ; for ( int i = 0 ; i < n ; i ++ ) { total += s [ i ] ; total += ( m [ i ] * 60 ) ; } System . out . print ( total / 3600 + \" \u2581 : \u2581 \" ) ; total %= 3600 ; System . out . print ( total / 60 + \" : \u2581 \" ) ; total %= 60 ; System . out . println ( total ) ; }", "python": "def printSum ( m , s , n ) :\n    total = 0\n    for i in range ( n ) :\n        total += s [ i ]\n        total += ( m [ i ] * 60 )\n    print ( int ( total / 3600 ) , end = \" \u2581 : \u2581 \" )\n    total %= 3600\n    print ( int ( total / 60 ) , end = \" : \u2581 \" )\n    total %= 60\n    print ( int ( total ) )\n"}
{"java": "static int countSubarray ( int arr [ ] , int n , int k ) { int s = 0 ; int i = 0 ; while ( i < n ) { if ( arr [ i ] > k ) { i ++ ; continue ; } int count = 0 ; while ( i < n && arr [ i ] <= k ) { i ++ ; count ++ ; } s += ( ( count * ( count + 1 ) ) / 2 ) ; } return ( n * ( n + 1 ) / 2 - s ) ; }", "python": "def countSubarray ( arr , n , k ) :\n    s = 0\n    i = 0\n    while ( i < n ) :\n        if ( arr [ i ] > k ) :\n            i = i + 1\n            continue\n        count = 0\n        while ( i < n and arr [ i ] <= k ) :\n            i = i + 1\n            count = count + 1\n        s = s + ( ( count * ( count + 1 ) ) // 2 )\n    return ( n * ( n + 1 ) // 2 - s )\n"}
{"java": "static void subString ( String s ) { HashMap < String , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = i ; j < s . length ( ) ; j ++ ) { char [ ] valC = s . substring ( i , j + 1 ) . toCharArray ( ) ; Arrays . sort ( valC ) ; String val = new String ( valC ) ; if ( map . containsKey ( val ) ) map . put ( val , map . get ( val ) + 1 ) ; else map . put ( val , 1 ) ; } } int anagramPairCount = 0 ; for ( String key : map . keySet ( ) ) { int n = map . get ( key ) ; anagramPairCount += ( n * ( n - 1 ) ) / 2 ; } System . out . println ( anagramPairCount ) ; }", "python": "def countOfAnagramSubstring ( s ) :\n    n = len ( s )\n    mp = dict ( )\n    for i in range ( n ) :\n        sb = ' '\n        for j in range ( i , n ) :\n            sb = ' ' . join ( sorted ( sb + s [ j ] ) )\n            mp [ sb ] = mp . get ( sb , 0 )\n            mp [ sb ] += 1\n    anas = 0\n    for k , v in mp . items ( ) :\n        anas += ( v * ( v - 1 ) ) // 2\n    return anas\n"}
{"java": "static int OR ( int a [ ] , int n ) { int ans = a [ 0 ] ; int i ; for ( i = 1 ; i < n ; i ++ ) { ans |= a [ i ] ; } return ans ; }", "python": "def OR ( a , n ) :\n    ans = a [ 0 ]\n    for i in range ( 1 , n ) :\n        ans |= a [ i ]\n    return ans\n"}
{"java": "static void findZeroes ( int m ) { int wL = 0 , wR = 0 ; int bestL = 0 , bestWindow = 0 ; int zeroCount = 0 ; while ( wR < arr . length ) { if ( zeroCount <= m ) { if ( arr [ wR ] == 0 ) zeroCount ++ ; wR ++ ; } if ( zeroCount > m ) { if ( arr [ wL ] == 0 ) zeroCount -- ; wL ++ ; } if ( ( wR - wL > bestWindow ) && ( zeroCount <= m ) ) { bestWindow = wR - wL ; bestL = wL ; } } for ( int i = 0 ; i < bestWindow ; i ++ ) { if ( arr [ bestL + i ] == 0 ) System . out . print ( bestL + i + \" \u2581 \" ) ; } }", "python": "def findZeroes ( arr , n , m ) :\n    wL = wR = 0\n    bestL = bestWindow = 0\n    zeroCount = 0\n    while wR < n :\n        if zeroCount <= m :\n            if arr [ wR ] == 0 :\n                zeroCount += 1\n            wR += 1\n        if zeroCount > m :\n            if arr [ wL ] == 0 :\n                zeroCount -= 1\n            wL += 1\n        if ( wR - wL > bestWindow ) and ( zeroCount <= m ) :\n            bestWindow = wR - wL\n            bestL = wL\n    for i in range ( 0 , bestWindow ) :\n        if arr [ bestL + i ] == 0 :\n            print ( bestL + i , end = \" \u2581 \" )\n"}
{"java": "static long whomever ( long x , long y ) { long count = 0 ; while ( x > 0 ) { if ( x % y == 0 ) { x /= y ; count ++ ; } else { count += ( x % y ) ; x -= ( x % y ) ; } } return count ; }", "python": "def f ( n , k ) :\n    res = 0\n    while n :\n        if n % k == 0 :\n            n //= k\n            res += 1\n        else :\n            res += n - n // k * k\n            n = n // k * k\n    return res\n"}
{"java": "public static void swap ( int i , int j , int builder [ ] ) { int t = builder [ i ] ; builder [ i ] = builder [ j ] ; builder [ j ] = t ; }", "python": "def ordered ( L , n ) :\n    CW = CCW = True\n    for i in range ( n ) :\n        if L [ i ] != i + 1 :\n            CW = False\n    for i in range ( n ) :\n        if L [ i ] != n - i :\n            CCW = False\n    return CW or CCW\n"}
{"java": "static int findMaxDiff ( int arr [ ] , int n ) { if ( n < 2 ) { System . out . println ( \" Invalid \u2581 \" ) ; return 0 ; } int min_val = Integer . MAX_VALUE , max_val = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] - i ) > max_val ) max_val = arr [ i ] - i ; if ( ( arr [ i ] - i ) < min_val ) min_val = arr [ i ] - i ; } return ( max_val - min_val ) ; }", "python": "def findMaxDiff ( a , n ) :\n    if ( n < 2 ) :\n        print ( \" Invalid \u2581 \" )\n        return 0\n    min_val = sys . maxsize\n    max_val = - sys . maxsize - 1\n    for i in range ( n ) :\n        if ( ( a [ i ] - i ) > max_val ) :\n            max_val = a [ i ] - i\n        if ( ( a [ i ] - i ) < min_val ) :\n            min_val = a [ i ] - i\n    return ( max_val - min_val )\n"}
{"java": "static void Sum_upto_nth_Term ( int n ) { int r = n * ( n + 1 ) * ( 2 * n + 7 ) / 3 ; System . out . println ( r ) ; }", "python": "def Sum_upto_nth_Term ( n ) :\n    return n * ( n + 1 ) * ( 2 * n + 7 ) // 3\n"}
{"java": "static int findSum ( int arr [ ] , int N ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; int sum = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) sum += ( entry . getKey ( ) ) * ( entry . getValue ( ) ) ; } return sum ; }", "python": "def findsum ( arr , N ) :\n    mp = collections . defaultdict ( int )\n    for i in range ( N ) :\n        mp [ arr [ i ] ] += 1\n    sum = 0\n    for i in mp :\n        if ( mp [ i ] % 2 != 0 ) :\n            sum += ( i * mp [ i ] )\n    return sum\n"}
{"java": "static void printPair ( int g , int l ) { System . out . print ( g + \" \u2581 \" + l ) ; }", "python": "def printPair ( g , l ) :\n    print ( g , l )\n"}
{"java": "static void maximumArea ( int l , int b , int x , int y ) { int left , right , above , below ; left = x * b ; right = ( l - x - 1 ) * b ; above = l * y ; below = ( b - y - 1 ) * l ; System . out . print ( Math . max ( Math . max ( left , right ) , Math . max ( above , below ) ) ) ; }", "python": "def maximumArea ( l , b , x , y ) :\n    left , right , above , below = 0 , 0 , 0 , 0\n    left = x * b\n    right = ( l - x - 1 ) * b\n    above = l * y\n    below = ( b - y - 1 ) * l\n    print ( max ( max ( left , right ) , max ( above , below ) ) )\n"}
{"java": "static int CountCharacters ( String str , int k ) { int cnt = 0 ; int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( ( ( int ) str . charAt ( i ) ) < k ) cnt ++ ; } return cnt ; }", "python": "def CountCharacters ( str , k ) :\n    cnt = 0\n    l = len ( str )\n    for i in range ( l ) :\n        if ( ord ( str [ i ] ) < k ) :\n            cnt += 1\n    return cnt\n"}
{"java": "static double maxAvgSubArray ( int a [ ] , int n , int x , int y ) { int prefix [ ] = new int [ n ] ; prefix [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) prefix [ i ] = prefix [ i - 1 ] + a [ i ] ; double maximum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + x - 1 ; j < i + y && j < n ; j ++ ) { double sum = prefix [ j ] ; if ( i > 0 ) sum -= prefix [ i - 1 ] ; double current = sum / ( double ) ( j - i + 1 ) ; maximum = Math . max ( maximum , current ) ; } } return maximum ; }", "python": "def maxAvgSubArray ( a , n , x , y ) :\n    prefix = [ 0 ] * n ;\n    prefix [ 0 ] = a [ 0 ] ;\n    for i in range ( 1 , n ) :\n        prefix [ i ] = prefix [ i - 1 ] + a [ i ] ;\n    maximum = 0 ;\n    for i in range ( n ) :\n        j = i + x - 1\n        while ( j < i + y and j < n ) :\n            sum = prefix [ j ] ;\n            if ( i > 0 ) :\n                sum -= prefix [ i - 1 ] ;\n            current = sum / ( j - i + 1 ) ;\n            maximum = max ( maximum , current ) ;\n            j += 1\n    return maximum ;\n"}
{"java": "static void printGreater ( int x , int y ) { double X = y * Math . log ( x ) ; double Y = x * Math . log ( y ) ; if ( Math . abs ( X - Y ) < 1e-9 ) { System . out . println ( \" Equal \" ) ; } else if ( X > Y ) { System . out . println ( x + \" ^ \" + y ) ; } else { System . out . println ( y + \" ^ \" + x ) ; } }", "python": "def printGreater ( x , y ) :\n    X = y * math . log ( x ) ;\n    Y = x * math . log ( y ) ;\n    if ( abs ( X - Y ) < 1e-9 ) :\n        print ( \" Equal \" ) ;\n    elif ( X > Y ) :\n        print ( x , \" ^ \" , y ) ;\n    else :\n        print ( y , \" ^ \" , x ) ;\n"}
{"java": "static float [ ] XandYandZintercept ( float A , float B , float C , float D ) { float rslt [ ] = new float [ 3 ] ; float x = - D / A ; float y = - D / B ; float z = - D / C ; rslt [ 0 ] = x ; rslt [ 1 ] = y ; rslt [ 2 ] = z ; return rslt ; }", "python": "def XandYandZintercept ( A , B , C , D ) :\n    x = - D / A\n    y = - D / B\n    z = - D / C\n    return [ x , y , z ]\n"}
{"java": "private static int solve ( String val ) { char [ ] tempChar = val . toCharArray ( ) ; Arrays . sort ( tempChar ) ; int count = 0 ; for ( int i = 0 ; i < val . length ( ) ; i ++ ) { if ( val . charAt ( i ) != tempChar [ i ] ) { count ++ ; } } return count ; }", "python": "def solve ( ) :\n    n = int ( input ( ) )\n    a = input ( )\n    b = \" \" . join ( sorted ( a ) )\n    return sum ( [ 1 for i in range ( n ) if a [ i ] != b [ i ] ] )\n"}
{"java": "public static void leyland ( int n ) { List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int x = 2 ; x <= n ; x ++ ) { for ( int y = 2 ; y <= x ; y ++ ) { int temp = ( int ) Math . pow ( x , y ) + ( int ) Math . pow ( y , x ) ; ans . add ( temp ) ; } } Collections . sort ( ans ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( ans . get ( i ) + \" \u2581 \" ) ; }", "python": "def leyland ( n ) :\n    ans = [ ]\n    x = 2\n    y = 2\n    while x <= n :\n        y = 2\n        while y <= x :\n            temp = pow ( x , y ) + pow ( y , x )\n            ans . append ( temp ) ;\n            y = y + 1\n        x = x + 1\n    ans . sort ( ) ;\n    i = 0\n    while i < n :\n        print ( ans [ i ] , end = \" \u2581 \" )\n        i = i + 1\n"}
{"java": "static int max_intersection ( int center [ ] , int length , int k ) { Arrays . sort ( center ) ; if ( center [ 2 ] - center [ 0 ] >= 2 * k + length ) { return 0 ; } else if ( center [ 2 ] - center [ 0 ] >= 2 * k ) { return ( 2 * k - ( center [ 2 ] - center [ 0 ] - length ) ) ; } else return length ; }", "python": "def max_intersection ( center , length , k ) :\n    center . sort ( ) ;\n    if ( center [ 2 ] - center [ 0 ] >= 2 * k + length ) :\n        return 0 ;\n    elif ( center [ 2 ] - center [ 0 ] >= 2 * k ) :\n        return ( 2 * k - ( center [ 2 ] - center [ 0 ] - length ) ) ;\n    else :\n        return length ;\n"}
{"java": "static void printGroups ( int n , int a [ ] ) { int ct [ ] = new int [ 7 ] , grps = n / 3 , i ; for ( i = 0 ; i < n ; i ++ ) { ct [ a [ i ] ] ++ ; } if ( ct [ 1 ] != grps || ( ct [ 4 ] + ct [ 6 ] ) != grps || ( ct [ 2 ] + ct [ 3 ] ) != grps || ct [ 4 ] > ct [ 2 ] ) { System . out . print ( - 1 ) ; return ; } for ( i = 0 ; i < ct [ 4 ] ; i ++ ) { System . out . print ( \"1 \u2581 2 \u2581 4 \\n \" ) ; } for ( i = 0 ; i < ct [ 2 ] - ct [ 4 ] ; i ++ ) { System . out . print ( \"1 \u2581 2 \u2581 6 \\n \" ) ; } for ( i = 0 ; i < ct [ 3 ] ; i ++ ) { System . out . print ( \"1 \u2581 3 \u2581 6 \\n \" ) ; } }", "python": "def printGroups ( n , a ) :\n    ct = [ 0 for i in range ( 7 ) ]\n    grps = n // 3\n    i = 0\n    for i in range ( n ) :\n        ct [ a [ i ] ] += 1\n    if ( ct [ 1 ] != grps or ( ct [ 4 ] + ct [ 6 ] ) != grps or ( ct [ 2 ] + ct [ 3 ] ) != grps or ct [ 4 ] > ct [ 2 ] ) :\n        print ( - 1 )\n        return\n    for i in range ( ct [ 4 ] ) :\n        print ( \"1 \u2581 2 \u2581 4\" )\n    for i in range ( ct [ 2 ] - ct [ 4 ] ) :\n        print ( \"1 \u2581 2 \u2581 6\" )\n    for i in range ( ct [ 3 ] ) :\n        print ( \"1 \u2581 3 \u2581 6\" )\n"}
{"java": "static Queue < Integer > reverse ( Queue < Integer > q ) { int s = q . size ( ) ; Queue < Integer > ans = new LinkedList < > ( ) ; for ( int i = 0 ; i < s ; i ++ ) { for ( int j = 0 ; j < q . size ( ) - 1 ; j ++ ) { int x = q . peek ( ) ; q . remove ( ) ; q . add ( x ) ; } ans . add ( q . peek ( ) ) ; q . remove ( ) ; } return ans ; }", "python": "def reverse ( q ) :\n    s = len ( q )\n    ans = deque ( )\n    for i in range ( s ) :\n        for j in range ( s - 1 ) :\n            x = q . popleft ( )\n            q . appendleft ( x )\n        ans . appendleft ( q . popleft ( ) )\n    return ans\n"}
{"java": "static void findTriangles ( int n ) { int num ; num = n * ( n - 4 ) ; System . out . println ( num ) ; }", "python": "def findTriangles ( n ) :\n    num = n * ( n - 4 )\n    print ( num )\n"}
{"java": "static void printFloydTriangle ( int n ) { int i , j , val = 1 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( val + \" \u2581 \" ) ; val ++ ; } System . out . println ( ) ; } }", "python": "def loydTriangle ( n ) :\n    val = 1\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , i + 1 ) :\n            print ( val , end = \" \u2581 \" )\n            val += 1\n        print ( \" \" )\n"}
{"java": "static void minCost ( int [ ] arr , int n ) { int cost = Integer . MAX_VALUE ; int element = 0 ; int XOR = 0 ; for ( int i = 0 ; i < n ; i ++ ) XOR ^= arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( cost > Math . abs ( ( XOR ^ arr [ i ] ) - arr [ i ] ) ) { cost = Math . abs ( ( XOR ^ arr [ i ] ) - arr [ i ] ) ; element = arr [ i ] ; } } System . out . println ( \" Element \u2581 = \u2581 \" + element ) ; System . out . println ( \" Operation \u2581 required \u2581 = \u2581 \" + Math . abs ( cost ) ) ; }", "python": "def minCost ( arr , n ) :\n    cost = 999999 ;\n    XOR = 0 ;\n    for i in range ( 0 , n ) :\n        XOR ^= arr [ i ] ;\n    for i in range ( 0 , n ) :\n        if ( cost > abs ( ( XOR ^ arr [ i ] ) - arr [ i ] ) ) :\n            cost = abs ( ( XOR ^ arr [ i ] ) - arr [ i ] )\n            element = arr [ i ]\n    print ( \" Element \u2581 = \u2581 \" , element )\n    print ( \" Operation \u2581 required \u2581 = \u2581 \" , abs ( cost ) )\n"}
{"java": "static int missingNumber ( int arr1 [ ] , int arr2 [ ] , int n ) { int mnum = 0 ; for ( int i = 0 ; i < n ; i ++ ) mnum = mnum ^ arr1 [ i ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) mnum = mnum ^ arr2 [ i ] ; return mnum ; }", "python": "def missingNumber ( arr1 , arr2 , n ) :\n    mnum = 0\n    for i in range ( n ) :\n        mnum = mnum ^ arr1 [ i ]\n    for i in range ( n - 1 ) :\n        mnum = mnum ^ arr2 [ i ]\n    return mnum\n"}
{"java": "static int NthArmstrong ( int n ) { int count = 0 ; for ( int i = 1 ; i <= Integer . MAX_VALUE ; i ++ ) { int num = i , rem , digit = 0 , sum = 0 ; num = i ; digit = ( int ) Math . log10 ( num ) + 1 ; while ( num > 0 ) { rem = num % 10 ; sum = sum + ( int ) Math . pow ( rem , digit ) ; num = num / 10 ; } if ( i == sum ) count ++ ; if ( count == n ) return i ; } return n ; }", "python": "def NthArmstrong ( n ) :\n    count = 0 ;\n    for i in range ( 1 , sys . maxsize ) :\n        num = i ;\n        rem = 0 ;\n        digit = 0 ;\n        sum = 0 ;\n        num = i ;\n        digit = int ( math . log10 ( num ) + 1 ) ;\n        while ( num > 0 ) :\n            rem = num % 10 ;\n            sum = sum + pow ( rem , digit ) ;\n            num = num // 10 ;\n        if ( i == sum ) :\n            count += 1 ;\n        if ( count == n ) :\n            return i ;\n"}
{"java": "static int powerNumbers ( int n ) { HashSet < Integer > v = new HashSet < Integer > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i * i <= n ; i ++ ) { int j = i * i ; v . add ( j ) ; while ( j * i <= n ) { v . add ( j * i ) ; j = j * i ; } } return v . size ( ) ; }", "python": "def powerNumbers ( n ) :\n    v = set ( ) ;\n    v . add ( 1 ) ;\n    for i in range ( 2 , n + 1 ) :\n        if ( i * i <= n ) :\n            j = i * i ;\n            v . add ( j ) ;\n            while ( j * i <= n ) :\n                v . add ( j * i ) ;\n                j = j * i ;\n    return len ( v ) ;\n"}
{"java": "static int [ ] solve ( int [ ] arr , int n ) { int [ ] b = new int [ n ] ; int p = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { b [ p ] = arr [ i -- ] ; if ( i >= 0 ) b [ n - 1 - p ] = arr [ i ] ; p ++ ; } return b ; }", "python": "def solve ( arr , n ) :\n    b = [ 0 for i in range ( n ) ]\n    p = 0\n    i = n - 1\n    while i >= 0 :\n        b [ p ] = arr [ i ]\n        i -= 1\n        if ( i >= 0 ) :\n            b [ n - 1 - p ] = arr [ i ]\n        p += 1\n        i -= 1\n    return b\n"}
{"java": "static float circleradius ( float l , float b ) { if ( l < 0 || b < 0 ) return - 1 ; float r = ( float ) ( ( l * b ) / ( 2 * Math . sqrt ( ( Math . pow ( l , 2 ) + Math . pow ( b , 2 ) ) ) ) ) ; return r ; }", "python": "def circleradius ( l , b ) :\n    if ( l < 0 or b < 0 ) :\n        return - 1\n    r = ( l * b ) / ( 2 * sqrt ( ( pow ( l , 2 ) + pow ( b , 2 ) ) ) ) ;\n    return r\n"}
{"java": "static void countPairs ( int arr [ ] , int N ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = 0 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { maxFreq = Math . max ( maxFreq , it . getValue ( ) ) ; } System . out . print ( N - maxFreq + \" \\n \" ) ; }", "python": "def countPairs ( arr , N ) :\n    M = dict . fromkeys ( arr , 0 ) ;\n    for i in range ( N ) :\n        M [ arr [ i ] ] += 1 ;\n    maxFreq = 0 ;\n    for it in M . values ( ) :\n        maxFreq = max ( maxFreq , it ) ;\n    print ( N - maxFreq ) ;\n"}
{"java": "static int squares ( int l , int b , int a ) { return ( int ) ( Math . ceil ( l / ( double ) a ) * Math . ceil ( b / ( double ) a ) ) ; }", "python": "def squares ( l , b , a ) :\n    return math . ceil ( l / a ) * math . ceil ( b / a )\n"}
{"java": "static int countCubes ( int a , int b ) { return ( int ) ( Math . floor ( Math . cbrt ( b ) ) - Math . ceil ( Math . cbrt ( a ) ) + 1 ) ; }", "python": "def countCubes ( a , b ) :\n    return ( floor ( b ** ( 1. / 3. ) ) - ceil ( a ** ( 1. / 3. ) ) + 1 )\n"}
{"java": "static boolean isPossibleToZero ( int a [ ] , int n ) { int even = 0 , odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i & 1 ) == 0 ) odd += a [ i ] ; else even += a [ i ] ; } return ( odd == even ) ; }", "python": "def isPossibleToZero ( a , n ) :\n    even = 0 ;\n    odd = 0 ;\n    for i in range ( n ) :\n        if ( i & 1 ) :\n            odd += a [ i ] ;\n        else :\n            even += a [ i ] ;\n    return ( odd == even ) ;\n"}
{"java": "static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; BigInteger b = BigInteger . ZERO ; BigInteger NINE = new BigInteger ( \"9\" ) ; for ( char ch : sc . next ( ) . toCharArray ( ) ) b = b . add ( new BigInteger ( \" \" + ch ) ) ; System . out . println ( b . mod ( NINE ) . equals ( BigInteger . ZERO ) ? \" Yes \" : \" No \" ) ; sc . close ( ) ; }", "python": "def main ( ) :\n    N = map ( lambda x : int ( x ) , list ( ( input ( ) ) ) )\n    result = 0\n    for item in N :\n        result += item\n    if result % 9 == 0 :\n        print ( \" Yes \" )\n    else :\n        print ( \" No \" )\n"}
{"java": "static int aliquotSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) if ( n % i == 0 ) sum += i ; return sum ; }", "python": "def aliquotSum ( n ) :\n    sm = 0\n    for i in range ( 1 , n ) :\n        if ( n % i == 0 ) :\n            sm = sm + i\n    return sm\n"}
{"java": "static int min_elimination ( int n , int arr [ ] ) { int countOdd = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 1 ) countOdd ++ ; return Math . min ( countOdd , n - countOdd ) ; }", "python": "def min_elimination ( n , arr ) :\n    countOdd = 0\n    for i in range ( n ) :\n        if ( arr [ i ] % 2 ) :\n            countOdd += 1\n    return min ( countOdd , n - countOdd )\n"}
{"java": "static void getNumbers ( int a [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( freq . containsKey ( a [ i ] ) ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else { freq . put ( a [ i ] , 1 ) ; } int maxi1 = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; for ( int i = 1 ; i * i <= maxi1 ; i ++ ) { if ( maxi1 % i == 0 && freq . containsKey ( i ) && freq . get ( i ) != 0 ) { freq . put ( i , freq . get ( i ) - 1 ) ; if ( i != ( maxi1 / i ) && freq . containsKey ( maxi1 / i ) && freq . get ( maxi1 / i ) != 0 ) freq . put ( maxi1 / i , freq . get ( maxi1 / i ) - 1 ) ; } } int maxi2 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . get ( a [ i ] ) != 0 ) maxi2 = Math . max ( maxi2 , a [ i ] ) ; } System . out . print ( maxi1 + \" \u2581 \" + maxi2 ) ; }", "python": "def getNumbers ( a , n ) :\n    freq = { } ;\n    for i in range ( n ) :\n        if a [ i ] not in freq . keys ( ) :\n            freq [ a [ i ] ] = 0\n        freq [ a [ i ] ] += 1\n    maxi1 = max ( a )\n    for i in range ( 1 , int ( sqrt ( maxi1 ) ) + 1 ) :\n        if ( maxi1 % i == 0 and freq [ i ] in freq . keys ( ) and freq [ i ] != 0 ) :\n            freq [ i ] -= 1\n            if ( i != ( maxi1 // i ) and freq [ maxi1 // i ] in freq . keys ( ) and freq [ maxi1 // i ] != 0 ) :\n                freq [ maxi1 // i ] -= 1\n    maxi2 = - 1\n    for i in range ( n ) :\n        if ( freq [ a [ i ] ] != 0 ) :\n            maxi2 = max ( maxi2 , a [ i ] )\n    print ( maxi1 , maxi2 )\n"}
{"java": "public static String prefixSuffix ( String a , String b , int l ) { String prefix = a . substring ( 0 , l ) ; int lb = b . length ( ) ; String suffix = b . substring ( lb - l ) ; return ( prefix + suffix ) ; }", "python": "def GetPrefixSuffix ( a , b , l ) :\n    prefix = a [ : l ] ;\n    lb = len ( b ) ;\n    suffix = b [ lb - l : ] ;\n    return ( prefix + suffix ) ;\n"}
{"java": "static int maxOR ( int L , int R ) { if ( L == R ) { return L ; } int ans = 0 ; for ( int i = MAX - 1 ; i >= 0 ; i -- ) { int p , lbit , rbit ; p = 1 << i ; lbit = ( L >> i ) & 1 ; rbit = ( R >> i ) & 1 ; if ( ( rbit == 1 ) && ( lbit == 0 ) ) { ans += ( p << 1 ) - 1 ; break ; } if ( rbit == 1 ) { ans += p ; } } return ans ; }", "python": "def maxOR ( L , R ) :\n    if ( L == R ) :\n        return L ;\n    ans = 0 ;\n    for i in range ( MAX - 1 , - 1 , - 1 ) :\n        p = 1 << i ;\n        lbit = ( L >> i ) & 1 ;\n        rbit = ( R >> i ) & 1 ;\n        if ( ( rbit == 1 ) and ( lbit == 0 ) ) :\n            ans += ( p << 1 ) - 1 ;\n            break ;\n        if ( rbit == 1 ) :\n            ans += p ;\n    return ans ;\n"}
{"java": "static void printStrings ( String s , int l , int m ) { Set < String > c = new LinkedHashSet < > ( ) ; s = s + s ; for ( int i = 0 ; i < l ; i ++ ) { c . add ( s . substring ( i , i + m ) ) ; } Iterator itr = c . iterator ( ) ; while ( itr . hasNext ( ) ) { String a = ( String ) itr . next ( ) ; System . out . print ( a + \" \u2581 \" ) ; } c . clear ( ) ; }", "python": "def printStrings ( s , l , m ) :\n    c = set ( )\n    s = s + s\n    for i in range ( l ) :\n        c . add ( s [ i : i + m ] )\n    for i in c :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "static int countEleLessThanOrEqual ( int arr1 [ ] , int arr2 [ ] , int m , int n ) { for ( int i = 0 ; i < m ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr2 [ j ] <= arr1 [ i ] ) count ++ ; System . out . print ( count + \" \u2581 \" ) ; } return m ; }", "python": "def countEleLessThanOrEqual ( arr1 , arr2 , m , n ) :\n    for i in range ( m ) :\n        count = 0\n        for j in range ( n ) :\n            if ( arr2 [ j ] <= arr1 [ i ] ) :\n                count += 1\n        print ( count , end = \" \u2581 \" )\n"}
{"java": "public static int composite_factors ( int n ) { int count = 0 ; int i , j ; int [ ] a = new int [ n + 1 ] ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = 0 ; } for ( i = 1 ; i <= n ; ++ i ) { if ( n % i == 0 ) { a [ i ] = i ; } } for ( i = 2 ; i <= n ; i ++ ) { j = 2 ; int p = 1 ; while ( j < a [ i ] ) { if ( a [ i ] % j == 0 ) { p = 0 ; break ; } j ++ ; } if ( p == 0 && a [ i ] != 0 ) { count ++ ; } } return count ; }", "python": "def composite_factors ( n ) :\n    count = 0 ;\n    a = [ 0 ] * ( n + 1 ) ;\n    for i in range ( 1 , n + 1 ) :\n        if ( n % i == 0 ) :\n            a [ i ] = i ;\n    for i in range ( 2 , n + 1 ) :\n        j = 2 ;\n        p = 1 ;\n        while ( j < a [ i ] ) :\n            if ( a [ i ] % j == 0 ) :\n                p = 0 ;\n                break ;\n            j += 1 ;\n        if ( p == 0 and a [ i ] != 0 ) :\n            count += 1 ;\n    return count ;\n"}
{"java": "static void binaryRightAngleTriangle ( int n ) { int row , col ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col <= row ; col ++ ) { if ( ( ( row + col ) % 2 ) == 0 ) System . out . print ( \"0\" ) ; else System . out . print ( \"1\" ) ; System . out . print ( \" \\ t \" ) ; } System . out . print ( \" \\n \" ) ; } }", "python": "def binaryRightAngleTriangle ( n ) :\n    for row in range ( 0 , n ) :\n        for col in range ( 0 , row + 1 ) :\n            if ( ( ( row + col ) % 2 ) == 0 ) :\n                print ( \"0\" , end = \" \" )\n            else :\n                print ( \"1\" , end = \" \" )\n            print ( \" \\ t \" , end = \" \" )\n        print ( \" \" )\n"}
{"java": "static int maxPrimes ( int n ) { return n / 2 ; }", "python": "def maxPrmimes ( n ) :\n    return n // 2\n"}
{"java": "static int sum ( int x , int y , int n ) { int sum1 = ( int ) ( ( Math . pow ( x , 2 ) * ( Math . pow ( x , 2 * n ) - 1 ) ) / ( Math . pow ( x , 2 ) - 1 ) ) ; int sum2 = ( int ) ( ( x * y * ( Math . pow ( x , n ) * Math . pow ( y , n ) - 1 ) ) / ( x * y - 1 ) ) ; return sum1 + sum2 ; }", "python": "def sum ( x , y , n ) :\n    sum1 = ( ( x ** 2 ) * ( x ** ( 2 * n ) - 1 ) ) // ( x ** 2 - 1 )\n    sum2 = ( x * y * ( x ** n * y ** n - 1 ) ) // ( x * y - 1 )\n    return ( sum1 + sum2 )\n"}
{"java": "static int findEvenPair ( int A [ ] , int N ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( ( ! ( ( A [ i ] & 1 ) > 0 ) ) ) count ++ ; return count * ( count - 1 ) / 2 ; }", "python": "def findEvenPair ( A , N ) :\n    count = 0\n    for i in range ( N ) :\n        if ( not ( A [ i ] & 1 ) ) :\n            count += 1\n    return count * ( count - 1 ) // 2\n"}
{"java": "static int cntSubsets ( int [ ] arr , int n ) { int max = ( int ) Math . pow ( 2 , n ) ; int result = 0 ; for ( int i = 0 ; i < max ; i ++ ) { int counter = i ; if ( ( counter & ( counter >> 1 ) ) > 0 ) continue ; result ++ ; } return result ; }", "python": "def cntSubsets ( arr , n ) :\n    max = pow ( 2 , n )\n    result = 0\n    for i in range ( max ) :\n        counter = i\n        if ( counter & ( counter >> 1 ) ) :\n            continue\n        result += 1\n    return result\n"}
{"java": "public static int countIdenticalRows ( int mat [ ] [ ] ) { int count = 0 ; for ( int i = 0 ; i < mat . length ; i ++ ) { HashSet < Integer > hs = new HashSet < > ( ) ; for ( int j = 0 ; j < mat [ i ] . length ; j ++ ) { hs . add ( mat [ i ] [ j ] ) ; } if ( hs . size ( ) == 1 ) count ++ ; } return count ; }", "python": "def countIdenticalRows ( mat ) :\n    count = 0\n    for i in range ( len ( mat ) ) :\n        hs = dict ( )\n        for j in range ( len ( mat [ i ] ) ) :\n            hs [ mat [ i ] [ j ] ] = 1\n        if ( len ( hs ) == 1 ) :\n            count += 1\n    return count\n"}
{"java": "public static int first ( int a , int b , int c ) { a %= b ; for ( int i = 1 ; i <= b ; i ++ ) { a = a * 10 ; if ( a / b == c ) return i ; a %= b ; } return - 1 ; }", "python": "def first ( a , b , c ) :\n    a %= b\n    for i in range ( 1 , b + 1 ) :\n        a = a * 10\n        if int ( a / b ) == c :\n            return i\n        a %= b\n    return - 1\n"}
{"java": "static void IfExists ( int arr [ ] , int n ) { int sum [ ] = new int [ n ] ; Arrays . sort ( arr ) ; sum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i ] ; int max = arr [ n - 1 ] ; boolean flag = false ; for ( int i = 1 ; i <= max ; i ++ ) { int findex = 0 ; int lindex = 0 ; int l = 0 ; int r = n - 1 ; while ( l <= r ) { int m = ( l + r ) / 2 ; if ( arr [ m ] < i ) { findex = m ; l = m + 1 ; } else r = m - 1 ; } l = 1 ; r = n ; flag = false ; while ( l <= r ) { int m = ( r + l ) / 2 ; if ( arr [ m ] > i ) { lindex = m ; r = m - 1 ; } else l = m + 1 ; } if ( sum [ findex ] == sum [ n - 1 ] - sum [ lindex - 1 ] ) { flag = true ; break ; } } if ( flag ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; }", "python": "def IfExists ( arr , n ) :\n    sum = [ 0 ] * n ;\n    arr . sort ( ) ;\n    sum [ 0 ] = arr [ 0 ] ;\n    for i in range ( 1 , n ) :\n        sum [ i ] = sum [ i - 1 ] + arr [ i ] ;\n    max = arr [ n - 1 ] ;\n    flag = False ;\n    for i in range ( 1 , max + 1 ) :\n        findex = 0 ;\n        lindex = 0 ;\n        l = 0 ;\n        r = n - 1 ;\n        while ( l <= r ) :\n            m = ( l + r ) // 2 ;\n            if ( arr [ m ] < i ) :\n                findex = m ;\n                l = m + 1 ;\n            else :\n                r = m - 1 ;\n        l = 1 ;\n        r = n ;\n        flag = False ;\n        while ( l <= r ) :\n            m = ( r + l ) // 2 ;\n            if ( arr [ m ] > i ) :\n                lindex = m ;\n                r = m - 1 ;\n            else :\n                l = m + 1 ;\n        if ( sum [ findex ] == sum [ n - 1 ] - sum [ lindex - 1 ] ) :\n            flag = True ;\n            break ;\n    if ( flag ) :\n        print ( \" Yes \" ) ;\n    else :\n        print ( \" No \" ) ;\n"}
{"java": "static int multiply ( int a [ ] , int n ) { if ( n == 0 ) return ( a [ n ] ) ; else return ( a [ n ] * multiply ( a , n - 1 ) ) ; }", "python": "def multiply ( a , n ) :\n    if n == 0 :\n        return ( a [ n ] )\n    else :\n        return ( a [ n ] * multiply ( a , n - 1 ) )\n"}
{"java": "static void Print3Smallest ( int array [ ] , int n ) { int firstmin = Integer . MAX_VALUE ; int secmin = Integer . MAX_VALUE ; int thirdmin = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] < firstmin ) { thirdmin = secmin ; secmin = firstmin ; firstmin = array [ i ] ; } else if ( array [ i ] < secmin ) { thirdmin = secmin ; secmin = array [ i ] ; } else if ( array [ i ] < thirdmin ) thirdmin = array [ i ] ; } System . out . println ( \" First \u2581 min \u2581 = \u2581 \" + firstmin ) ; System . out . println ( \" Second \u2581 min \u2581 = \u2581 \" + secmin ) ; System . out . println ( \" Third \u2581 min \u2581 = \u2581 \" + thirdmin ) ; }", "python": "def Print3Smallest ( arr , n ) :\n    firstmin = MAX\n    secmin = MAX\n    thirdmin = MAX\n    for i in range ( 0 , n ) :\n        if arr [ i ] < firstmin :\n            thirdmin = secmin\n            secmin = firstmin\n            firstmin = arr [ i ]\n        elif arr [ i ] < secmin :\n            thirdmin = secmin\n            secmin = arr [ i ]\n        elif arr [ i ] < thirdmin :\n            thirdmin = arr [ i ]\n    print ( \" First \u2581 min \u2581 = \u2581 \" , firstmin )\n    print ( \" Second \u2581 min \u2581 = \u2581 \" , secmin )\n    print ( \" Third \u2581 min \u2581 = \u2581 \" , thirdmin )\n"}
{"java": "static int maxValue ( int n , int m , int x [ ] , int y [ ] , int a [ ] ) { int c [ ] [ ] = new int [ MAXN ] [ MAXN ] ; for ( int i = 0 ; i < m ; ++ i ) { for ( int p = 0 ; p < n ; ++ p ) { for ( int q = 0 ; q < n ; ++ q ) { int dx = Math . abs ( p - x [ i ] ) ; int dy = Math . abs ( q - y [ i ] ) ; int d = Math . max ( dx , dy ) ; c [ p ] [ q ] += Math . max ( 0 , a [ i ] - d ) ; } } } int res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < n ; ++ j ) { res = Math . max ( res , c [ i ] [ j ] ) ; } } return res ; }", "python": "def maxValue ( n , m , x , y , a ) :\n    c = [ [ 0 for x in range ( MAXN ) ] for y in range ( MAXN ) ]\n    for i in range ( m ) :\n        for p in range ( n ) :\n            for q in range ( n ) :\n                dx = abs ( p - x [ i ] )\n                dy = abs ( q - y [ i ] )\n                d = max ( dx , dy )\n                c [ p ] [ q ] += max ( 0 , a [ i ] - d )\n    res = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            res = max ( res , c [ i ] [ j ] )\n    return res\n"}
{"java": "static int TrialDivision ( int N ) { int i = 2 ; int k = ( int ) Math . ceil ( Math . sqrt ( N ) ) ; while ( i <= k ) { if ( N % i == 0 ) return 0 ; i += 1 ; } return 1 ; }", "python": "def TrialDivision ( N ) :\n    i = 2\n    k = int ( N ** 0.5 )\n    while ( i <= k ) :\n        if ( N % i == 0 ) :\n            return 0\n        i += 1\n    return 1\n"}
{"java": "public static void solv ( int vec , int now , int coun , int cos , boolean alC , boolean [ ] isDist ) { int nowp = now ; int cost = cos ; int count = coun ; while ( true ) { if ( min <= cost ) return ; if ( nowp == N ) nowp = 0 ; else if ( nowp == - 1 ) nowp = N - 1 ; if ( count == M ) { if ( min > cost ) min = cost ; return ; } if ( isDist [ nowp ] ) { isDist [ nowp ] = false ; count ++ ; if ( ! alC && cost < Limit ) { boolean [ ] isDist2 = Arrays . copyOf ( isDist , N ) ; solv ( vec * - 1 , nowp + vec * - 1 , count , cost + 100 , true , isDist2 ) ; } } if ( count == M ) { if ( min > cost ) min = cost ; return ; } while ( true ) { if ( nowp == N ) nowp = 0 ; else if ( nowp == - 1 ) nowp = N - 1 ; if ( ! isDist [ nowp ] ) { nowp += vec ; cost += 100 ; } else { break ; } } } }", "python": "def CWDist ( s , e , n ) : return ( e - s + n ) % n\ndef CCWDist ( s , e , n ) : return ( s - e + n ) % n\ndef CWNext ( i , m ) : return dst [ 0 ] if i == m - 1 else dst [ i + 1 ]\ndef CCWNext ( i , m ) : return dst [ m - 1 ] if i == 0 else dst [ i - 1 ]\ndef CWTurn ( p , t , e , n ) : return CWDist ( p , t , n ) + CCWDist ( t , e , n )\ndef CCWTurn ( p , t , e , n ) : return CCWDist ( p , t , n ) + CWDist ( t , e , n )\nn , m , p = map ( int , input ( ) . split ( ) )\nfor i in range ( m ) :\n    dst . append ( int ( input ( ) ) )\n"}
{"java": "static long getChicks ( int n ) { int size = Math . max ( n , 7 ) ; long [ ] dp = new long [ size ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i < 6 ; i ++ ) { dp [ i ] = dp [ i - 1 ] * 3 ; } dp [ 6 ] = 726 ; for ( int i = 8 ; i <= n ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] - ( 2 * dp [ i - 6 ] / 3 ) ) * 3 ; } return dp [ n ] ; }", "python": "def getChicks ( n ) :\n    size = max ( n , 7 ) ;\n    dp = [ 0 ] * size ;\n    dp [ 0 ] = 0 ;\n    dp [ 1 ] = 1 ;\n    for i in range ( 2 , 7 ) :\n        dp [ i ] = dp [ i - 1 ] * 3 ;\n    dp [ 6 ] = 726 ;\n    for i in range ( 8 , n + 1 ) :\n        dp [ i ] = ( dp [ i - 1 ] - ( 2 * dp [ i - 6 ] // 3 ) ) * 3 ;\n    return dp [ n ] ;\n"}
{"java": "public static String asd ( int [ ] arr ) { int winner = 1 ; int max = arr [ 0 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; winner = i + 1 ; } } Arrays . sort ( arr ) ; int res = arr [ arr . length - 2 ] ; return winner + \" \u2581 \" + res ; }", "python": "def maxi ( lst : list ) -> int :\n    elem = - 1\n    elemi = - 1\n    for i , v in enumerate ( lst ) :\n        if v > elem :\n            elem = v\n            elemi = i\n    return elemi\n"}
{"java": "static void start ( ) { int [ ] have = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) have [ i ] = 0 ; int whoturn = 0 ; int owan = p ; while ( true ) { if ( owan != 0 ) { have [ whoturn ] ++ ; owan -- ; if ( have [ whoturn ] == p ) break ; } else { owan = have [ whoturn ] ; have [ whoturn ] = 0 ; } whoturn ++ ; if ( whoturn == n ) whoturn = 0 ; } System . out . println ( whoturn ) ; }", "python": "def LI ( ) : return [ int ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LI_ ( ) : return [ int ( x ) - 1 for x in sys . stdin . readline ( ) . split ( ) ]\ndef LF ( ) : return [ float ( x ) for x in sys . stdin . readline ( ) . split ( ) ]\ndef LS ( ) : return sys . stdin . readline ( ) . split ( )\ndef I ( ) : return int ( sys . stdin . readline ( ) )\ndef F ( ) : return float ( sys . stdin . readline ( ) )\ndef S ( ) : return input ( )\ndef pf ( s ) : return print ( s , flush = True )\ndef main ( ) :\n    rr = [ ]\n    while True :\n        n , p = LI ( )\n        mp = p\n        if n == 0 :\n            break\n        a = [ 0 ] * n\n        i = 0\n        while True :\n            if p == 0 :\n                p = a [ i ]\n                a [ i ] = 0\n            else :\n                a [ i ] += 1\n                p -= 1\n                if a [ i ] == mp :\n                    break\n            i = ( i + 1 ) % n\n        rr . append ( i )\n    return ' \\n ' . join ( map ( str , rr ) )\n"}
{"java": "static boolean EQ ( double x , double y ) { return Math . abs ( x - y ) < 1.0e-9 ; }", "python": "def solve ( lis , N ) :\n    x = ( lis [ 0 ] [ 0 ] + lis [ N // 2 ] [ 0 ] )\n    y = ( lis [ 0 ] [ 1 ] + lis [ N // 2 ] [ 1 ] )\n    for i in range ( 1 , N // 2 ) :\n        if ( lis [ i ] [ 0 ] + lis [ i + N // 2 ] [ 0 ] ) != x or ( lis [ i ] [ 1 ] + lis [ i + N // 2 ] [ 1 ] ) != y :\n            return \" NA \"\n    return str ( x / 2 ) + \" \u2581 \" + str ( y / 2 )\n"}
{"java": "static int countSubstring ( String S , int n ) { int ans = 0 ; int i = 0 ; while ( i < n ) { int cnt0 = 0 , cnt1 = 0 ; if ( S . charAt ( i ) == '0' ) { while ( i < n && S . charAt ( i ) == '0' ) { cnt0 ++ ; i ++ ; } int j = i ; while ( j < n && S . charAt ( j ) == '1' ) { cnt1 ++ ; j ++ ; } } else { while ( i < n && S . charAt ( i ) == '1' ) { cnt1 ++ ; i ++ ; } int j = i ; while ( j < n && S . charAt ( j ) == '0' ) { cnt0 ++ ; j ++ ; } } ans += Math . min ( cnt0 , cnt1 ) ; } return ans ; }", "python": "def countSubstring ( S , n ) :\n    ans = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        cnt0 = 0 ; cnt1 = 0 ;\n        if ( S [ i ] == '0' ) :\n            while ( i < n and S [ i ] == '0' ) :\n                cnt0 += 1 ;\n                i += 1 ;\n            j = i ;\n            while ( j < n and S [ j ] == '1' ) :\n                cnt1 += 1 ;\n                j += 1 ;\n        else :\n            while ( i < n and S [ i ] == '1' ) :\n                cnt1 += 1 ;\n                i += 1 ;\n            j = i ;\n            while ( j < n and S [ j ] == '0' ) :\n                cnt0 += 1 ;\n                j += 1 ;\n        ans += min ( cnt0 , cnt1 ) ;\n    return ans ;\n"}
{"java": "public static void solve ( BufferedReader br , PrintWriter pr ) throws IOException { int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] temp = br . readLine ( ) . split ( \" \u2581 \" ) ; int [ ] nums = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { nums [ i ] = Integer . parseInt ( temp [ i ] ) ; } List < Integer > primes = new ArrayList < > ( ) ; Collections . addAll ( primes , 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 ) ; int [ ] res = new int [ n ] ; Map < Integer , Integer > used = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = nums [ i ] ; for ( int j = 0 ; j < 11 ; j ++ ) { if ( num % primes . get ( j ) == 0 ) { int prime = primes . get ( j ) ; if ( used . containsKey ( prime ) ) { res [ i ] = used . get ( prime ) ; } else { used . put ( prime , used . size ( ) + 1 ) ; res [ i ] = used . get ( prime ) ; } break ; } } } pr . println ( used . size ( ) ) ; for ( int i : res ) { pr . print ( i + \" \u2581 \" ) ; } pr . print ( ' \\n ' ) ; }", "python": "def coloring ( lst ) :\n    nlst = [ ]\n    primes = [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 ]\n    for i in lst :\n        for j in range ( 11 ) :\n            if i % primes [ j ] == 0 :\n                nlst . append ( j + 1 )\n                break\n    n = 1\n    dic = { }\n    for i in set ( nlst ) :\n        dic [ i ] = n\n        n += 1\n    for j in range ( len ( nlst ) ) :\n        nlst [ j ] = dic [ nlst [ j ] ]\n    return [ len ( dic ) , nlst ]\n"}
{"java": "public static int minReplace ( int a [ ] , int n ) { int i ; HashMap < Integer , Integer > te = new HashMap < > ( ) ; HashMap < Integer , Integer > to = new HashMap < > ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { if ( te . containsKey ( a [ i ] ) ) te . put ( a [ i ] , te . get ( a [ i ] ) + 1 ) ; else te . put ( a [ i ] , 1 ) ; } else { if ( to . containsKey ( a [ i ] ) ) to . put ( a [ i ] , to . get ( a [ i ] ) + 1 ) ; else to . put ( a [ i ] , 1 ) ; } } int me = - 1 ; int mo = - 1 ; int ce = - 1 ; int co = - 1 ; for ( Integer It : te . keySet ( ) ) { if ( te . get ( It ) > ce ) { ce = te . get ( It ) ; me = It ; } } for ( Integer It : to . keySet ( ) ) { if ( to . get ( It ) > co ) { co = to . get ( It ) ; mo = It ; } } int res = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { if ( a [ i ] != me ) res ++ ; } else { if ( a [ i ] != mo ) res ++ ; } } return res ; }", "python": "def minReplace ( a : list , n ) -> int :\n    te = dict ( )\n    to = dict ( )\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            if a [ i ] not in te :\n                te [ a [ i ] ] = 1\n            else :\n                te [ a [ i ] ] += 1\n        else :\n            if a [ i ] not in to :\n                to [ a [ i ] ] = 1\n            else :\n                to [ a [ i ] ] += 1\n    me = - 1\n    mo = - 1\n    ce = - 1\n    co = - 1\n    for it in te :\n        if te [ it ] > ce :\n            ce = te [ it ]\n            me = it\n    for it in to :\n        if to [ it ] > co :\n            co = to [ it ]\n            mo = it\n    res = 0\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            if a [ i ] != me :\n                res += 1\n        else :\n            if a [ i ] != mo :\n                res += 1\n    return res\n"}
{"java": "static boolean bit_check ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) return true ; return false ; }", "python": "def bit_check ( n ) :\n    if ( ( n & ( n - 1 ) ) == 0 ) :\n        return True\n    return False\n"}
{"java": "static char getChar ( String str ) { int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { sum += ( str . charAt ( i ) - ' a ' + 1 ) ; } if ( sum % 26 == 0 ) return ' z ' ; else { sum = sum % 26 ; return ( char ) ( ' a ' + sum - 1 ) ; } }", "python": "def getChar ( strr ) :\n    summ = 0\n    for i in range ( len ( strr ) ) :\n        summ += ( ord ( strr [ i ] ) - ord ( ' a ' ) + 1 )\n    if ( summ % 26 == 0 ) :\n        return ord ( ' z ' )\n    else :\n        summ = summ % 26\n        return chr ( ord ( ' a ' ) + summ - 1 )\n"}
{"java": "static void Calc_Max_Div ( int arr [ ] , int n ) { int vis [ ] = new int [ maxin + 1 ] ; for ( int i = 0 ; i < maxin + 1 ; i ++ ) vis [ i ] = 1 ; vis [ 0 ] = vis [ 1 ] = 0 ; for ( int i = 1 ; i <= maxin ; i ++ ) divisors [ i ] = i ; for ( int i = 4 ; i <= maxin ; i += 2 ) { vis [ i ] = 0 ; divisors [ i ] = i / 2 ; } for ( int i = 3 ; i <= maxin ; i += 2 ) { if ( divisors [ i ] != i ) { divisors [ i ] = i / divisors [ i ] ; } if ( vis [ i ] == 1 ) { for ( int j = i * i ; j < maxin ; j += i ) { vis [ j ] = 0 ; if ( divisors [ j ] == j ) divisors [ j ] = i ; } } } for ( int i = 0 ; i < n ; i ++ ) { if ( divisors [ arr [ i ] ] == arr [ i ] ) System . out . print ( \" - 1 \u2581 \" ) ; else System . out . print ( divisors [ arr [ i ] ] + \" \u2581 \" ) ; } }", "python": "def Calc_Max_Div ( arr , n ) :\n    vis = [ 1 ] * ( maxin + 1 ) ;\n    vis [ 0 ] = vis [ 1 ] = 0 ;\n    for i in range ( 1 , maxin + 1 ) :\n        divisors [ i ] = i ;\n    for i in range ( 4 , maxin + 1 , 2 ) :\n        vis [ i ] = 0 ;\n        divisors [ i ] = i // 2 ;\n    for i in range ( 3 , maxin + 1 , 2 ) :\n        if ( divisors [ i ] != i ) :\n            divisors [ i ] = i // divisors [ i ] ;\n        if ( vis [ i ] == 1 ) :\n            for j in range ( i * i , maxin , i ) :\n                vis [ j ] = 0 ;\n                if ( divisors [ j ] == j ) :\n                    divisors [ j ] = i ;\n    for i in range ( n ) :\n        if ( divisors [ arr [ i ] ] == arr [ i ] ) :\n            print ( \" - 1 \u2581 \" , end = \" \" ) ;\n        else :\n            print ( divisors [ arr [ i ] ] , end = \" \u2581 \" ) ;\n"}
{"java": "static Map < Integer , Integer > str2List ( String str ) { String [ ] vArrStr = str . split ( \" \u2581 \" ) ; Map < Integer , Integer > ret = new HashMap < > ( ) ; Integer key = 0 ; for ( String val : vArrStr ) { ret . put ( key , Integer . valueOf ( val ) ) ; key ++ ; } return ret ; }", "python": "def resolve ( ) :\n    n = int ( input ( ) )\n    lv = list ( map ( int , input ( ) . split ( ) ) )\n    lc = list ( map ( int , input ( ) . split ( ) ) )\n    ans = 0\n    for i in range ( n ) :\n        if lv [ i ] > lc [ i ] :\n            ans += lv [ i ] - lc [ i ]\n    print ( ans )\n"}
{"java": "static int CalculateMax ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int min_sum = arr [ 0 ] + arr [ 1 ] ; int max_sum = arr [ n - 1 ] + arr [ n - 2 ] ; return ( Math . abs ( max_sum - min_sum ) ) ; }", "python": "def CalculateMax ( arr , n ) :\n    arr . sort ( )\n    min_sum = arr [ 0 ] + arr [ 1 ]\n    max_sum = arr [ n - 1 ] + arr [ n - 2 ]\n    return abs ( max_sum - min_sum )\n"}
{"java": "static int maxDiff ( int arr [ ] , int n ) { int diff = arr [ 1 ] - arr [ 0 ] ; int curr_sum = diff ; int max_sum = curr_sum ; for ( int i = 1 ; i < n - 1 ; i ++ ) { diff = arr [ i + 1 ] - arr [ i ] ; if ( curr_sum > 0 ) curr_sum += diff ; else curr_sum = diff ; if ( curr_sum > max_sum ) max_sum = curr_sum ; } return max_sum ; }", "python": "def maxDiff ( arr , n ) :\n    diff = arr [ 1 ] - arr [ 0 ]\n    curr_sum = diff\n    max_sum = curr_sum\n    for i in range ( 1 , n - 1 ) :\n        diff = arr [ i + 1 ] - arr [ i ]\n        if ( curr_sum > 0 ) :\n            curr_sum += diff\n        else :\n            curr_sum = diff\n        if ( curr_sum > max_sum ) :\n            max_sum = curr_sum\n    return max_sum\n"}
{"java": "public static int oddSum ( int n ) { int sum = 0 , curr = 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum += curr ; curr += 2 ; } return sum ; }", "python": "def oddSum ( n ) :\n    sum = 0\n    curr = 1\n    i = 0\n    while i < n :\n        sum = sum + curr\n        curr = curr + 2\n        i = i + 1\n    return sum\n"}
{"java": "public static boolean isAscendingOrder ( int [ ] ary ) { int x = 0 ; int y = 0 ; int k = 0 ; for ( int i = 0 ; i < ary . length - 1 ; i ++ ) { if ( ary [ i ] > ary [ i + 1 ] ) { if ( x == 0 ) { x = ary [ i ] ; } else if ( y == 0 ) { y = ary [ i + 1 ] ; } } } for ( int i = 0 ; i < ary . length - 1 ; i ++ ) { if ( ary [ i ] > ary [ i + 1 ] ) { if ( k == 0 ) { ary [ i ] = y ; k += 1 ; } else if ( k == 1 ) { ary [ i + 1 ] = x ; k += 1 ; } } } for ( int i = 0 ; i < ary . length - 1 ; i ++ ) { if ( ary [ i ] > ary [ i + 1 ] ) { return false ; } } return true ; }", "python": "def check ( ls ) :\n    for i in range ( len ( ls ) - 1 ) :\n        if ls [ i ] > ls [ i + 1 ] :\n            return False\n    return True\n"}
{"java": "static int minimumX ( int n , int k ) { int ans = Integer . MAX_VALUE ; for ( int rem = k - 1 ; rem > 0 ; rem -- ) { if ( n % rem == 0 ) ans = Math . min ( ans , rem + ( n / rem ) * k ) ; } return ans ; }", "python": "def minimumX ( n , k ) :\n    ans = 10 ** 18\n    for i in range ( k - 1 , 0 , - 1 ) :\n        if n % i == 0 :\n            ans = min ( ans , i + ( n / i ) * k )\n    return ans\n"}
{"java": "static long product ( int [ ] [ ] mat , int n ) { long d1 = 0 , d2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d1 += mat [ i ] [ i ] ; d2 += mat [ i ] [ n - i - 1 ] ; } return 1L * d1 * d2 ; }", "python": "def product ( mat , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( n ) :\n        d1 += mat [ i ] [ i ]\n        d2 += mat [ i ] [ n - i - 1 ]\n    return d1 * d2\n"}
{"java": "static int countSubArrays ( int arr [ ] , int n , int K ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int bitwise_or = 0 ; for ( int k = i ; k <= j ; k ++ ) { bitwise_or = bitwise_or | arr [ k ] ; } if ( bitwise_or >= K ) count ++ ; } } return count ; }", "python": "def countSubArrays ( arr , n , K ) :\n    count = 0 ;\n    for i in range ( n ) :\n        for j in range ( i , n ) :\n            bitwise_or = 0\n            for k in range ( i , j + 1 ) :\n                bitwise_or = bitwise_or | arr [ k ]\n            if ( bitwise_or >= K ) :\n                count += 1\n    return count\n"}
{"java": "static void isPrime ( int N ) { boolean isPrime = true ; int [ ] arr = { 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 } ; if ( N < 2 ) { isPrime = false ; } if ( N % 2 == 0 || N % 3 == 0 || N % 5 == 0 ) { isPrime = false ; } for ( int i = 0 ; i < Math . sqrt ( N ) ; i += 30 ) { for ( int c : arr ) { if ( c > Math . sqrt ( N ) ) { break ; } else { if ( N % ( c + i ) == 0 ) { isPrime = false ; break ; } } if ( ! isPrime ) break ; } } if ( isPrime ) System . out . println ( \" Prime \u2581 Number \" ) ; else System . out . println ( \" Not \u2581 a \u2581 Prime \u2581 Number \" ) ; }", "python": "def isPrime ( N ) :\n    isPrime = True ;\n    arr = [ 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 ]\n    if ( N < 2 ) :\n        isPrime = False\n    if ( N % 2 == 0 or N % 3 == 0 or N % 5 == 0 ) :\n        isPrime = False\n    for i in range ( 0 , int ( math . sqrt ( N ) ) , 30 ) :\n        for c in arr :\n            if ( c > int ( math . sqrt ( N ) ) ) :\n                break\n            else :\n                if ( N % ( c + i ) == 0 ) :\n                    isPrime = False\n                    break\n            if ( not isPrime ) :\n                break\n    if ( isPrime ) :\n        print ( \" Prime \u2581 Number \" )\n    else :\n        print ( \" Not \u2581 a \u2581 Prime \u2581 Number \" )\n"}
{"java": "static int product ( int N ) { int ans = 1 ; int val = ( int ) Math . pow ( 2 , N - 1 ) ; for ( int i = 1 ; i <= N ; i ++ ) { ans *= ( int ) Math . pow ( i , val ) ; } return ans ; }", "python": "def product ( N ) :\n    ans = 1 ;\n    val = 2 ** ( N - 1 ) ;\n    for i in range ( 1 , N + 1 ) :\n        ans *= ( i ** val ) ;\n    return ans ;\n"}
{"java": "static void CalculatePairs ( int a [ ] , int n ) { int cnt_zero = 0 ; int cnt_one = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) cnt_zero += 1 ; else cnt_one += 1 ; } int total_XOR_pairs = cnt_zero * cnt_one ; int total_AND_pairs = ( cnt_one ) * ( cnt_one - 1 ) / 2 ; int total_OR_pairs = cnt_zero * cnt_one + ( cnt_one ) * ( cnt_one - 1 ) / 2 ; System . out . println ( \" cntXOR \u2581 = \u2581 \" + total_XOR_pairs ) ; System . out . println ( \" cntAND \u2581 = \u2581 \" + total_AND_pairs ) ; System . out . println ( \" cntOR \u2581 = \u2581 \" + total_OR_pairs ) ; }", "python": "def CalculatePairs ( a , n ) :\n    cnt_zero = 0\n    cnt_one = 0\n    for i in range ( 0 , n ) :\n        if ( a [ i ] % 2 == 0 ) :\n            cnt_zero += 1\n        else :\n            cnt_one += 1\n    total_XOR_pairs = cnt_zero * cnt_one\n    total_AND_pairs = ( cnt_one ) * ( cnt_one - 1 ) / 2\n    total_OR_pairs = cnt_zero * cnt_one + ( cnt_one ) * ( cnt_one - 1 ) / 2\n    print ( \" cntXOR \u2581 = \u2581 \" , int ( total_XOR_pairs ) )\n    print ( \" cntAND \u2581 = \u2581 \" , int ( total_AND_pairs ) )\n    print ( \" cntOR \u2581 = \u2581 \" , int ( total_OR_pairs ) )\n"}
{"java": "static double calculate_angle ( int n , int i , int j , int k ) { int x , y ; if ( i < j ) x = j - i ; else x = j + n - i ; if ( j < k ) y = k - j ; else y = k + n - j ; double ang1 = ( 180 * x ) / n ; double ang2 = ( 180 * y ) / n ; double ans = 180 - ang1 - ang2 ; return ans ; }", "python": "def calculate_angle ( n , i , j , k ) :\n    x , y = 0 , 0\n    if ( i < j ) :\n        x = j - i\n    else :\n        x = j + n - i\n    if ( j < k ) :\n        y = k - j\n    else :\n        y = k + n - j\n    ang1 = ( 180 * x ) // n\n    ang2 = ( 180 * y ) // n\n    ans = 180 - ang1 - ang2\n    return ans\n"}
{"java": "public static int dfs ( int node , String [ ] arr ) { int cur = 0 , l = 0 , r = 0 ; if ( node - 2 >= 0 ) cur = Integer . parseInt ( arr [ node - 2 ] ) ; if ( ( 2 * node ) - 2 < arr . length ) l = dfs ( 2 * node , arr ) ; if ( ( 2 * node ) - 1 < arr . length ) r = dfs ( ( 2 * node ) + 1 , arr ) ; if ( Math . abs ( l - r ) > 0 ) res += Math . abs ( l - r ) ; return Math . max ( l , r ) + cur ; }", "python": "def DFS ( x , h ) :\n    global a , n , ans\n    if h < n :\n        DFS ( 2 * x + 1 , h + 1 )\n        DFS ( 2 * x + 2 , h + 1 )\n        a [ 2 * x ] += max ( a [ 2 * ( 2 * x + 1 ) ] , a [ 2 * ( 2 * x + 1 ) + 1 ] )\n        a [ 2 * x + 1 ] += max ( a [ 2 * ( 2 * x + 2 ) ] , a [ 2 * ( 2 * x + 2 ) + 1 ] )\n    ans += abs ( a [ 2 * x ] - a [ x * 2 + 1 ] )\n"}
{"java": "static boolean Move ( int a , int x , int b ) { if ( ( ( ( b - a ) % x == 0 ) || ( ( b - a - 1 ) % x == 0 ) && a + 1 != b ) && b >= a ) return true ; return false ; }", "python": "def Move ( a , x , b ) :\n    if ( ( ( ( b - a ) % x == 0 ) or ( ( b - a - 1 ) % x == 0 ) and a + 1 != b ) and b >= a ) :\n        return True\n    return False\n"}
{"java": "public static int atMostSum ( int arr [ ] , int n , int k ) { int sum = 0 ; int cnt = 0 , maxcnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( sum + arr [ i ] ) <= k ) { sum += arr [ i ] ; cnt ++ ; } else if ( sum != 0 ) { sum = sum - arr [ i - cnt ] + arr [ i ] ; } maxcnt = Math . max ( cnt , maxcnt ) ; } return maxcnt ; }", "python": "def atMostSum ( arr , n , k ) :\n    _sum = 0\n    cnt = 0\n    maxcnt = 0\n    for i in range ( n ) :\n        if ( ( _sum + arr [ i ] ) <= k ) :\n            _sum += arr [ i ]\n            cnt += 1\n        elif ( sum != 0 ) :\n            _sum = _sum - arr [ i - cnt ] + arr [ i ]\n        maxcnt = max ( cnt , maxcnt )\n    return maxcnt\n"}
{"java": "static int maxSum ( int arr [ ] , int n , int k ) { if ( n < k ) { System . out . println ( \" Invalid \" ) ; return - 1 ; } int max_sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) max_sum += arr [ i ] ; int window_sum = max_sum ; for ( int i = k ; i < n ; i ++ ) { window_sum += arr [ i ] - arr [ i - k ] ; max_sum = Math . max ( max_sum , window_sum ) ; } return max_sum ; }", "python": "def maxSum ( arr , n , k ) :\n    if not n > k :\n        print ( \" Invalid \" )\n        return - 1\n    max_sum = INT_MIN\n    window_sum = sum ( arr [ : k ] )\n    for i in range ( n - k ) :\n        window_sum = window_sum - arr [ i ] + arr [ i + k ]\n        max_sum = max ( window_sum , max_sum )\n    return max_sum\n"}
{"java": "static int minOperations ( int ar [ ] , int k ) { Arrays . sort ( ar ) ; int opsNeeded = 0 ; for ( int i = 0 ; i < k ; i ++ ) { opsNeeded += ar [ k - 1 ] - ar [ i ] ; } int ans = opsNeeded ; for ( int i = k ; i < ar . length ; i ++ ) { opsNeeded = opsNeeded - ( ar [ i - 1 ] - ar [ i - k ] ) ; opsNeeded += ( k - 1 ) * ( ar [ i ] - ar [ i - 1 ] ) ; ans = Math . min ( ans , opsNeeded ) ; } return ans ; }", "python": "def minOperations ( ar , k ) :\n    ar = sorted ( ar )\n    opsNeeded = 0\n    for i in range ( k ) :\n        opsNeeded += ar [ k - 1 ] - ar [ i ]\n    ans = opsNeeded\n    for i in range ( k , len ( ar ) ) :\n        opsNeeded = opsNeeded - ( ar [ i - 1 ] - ar [ i - k ] )\n        opsNeeded += ( k - 1 ) * ( ar [ i ] - ar [ i - 1 ] )\n        ans = min ( ans , opsNeeded )\n    return ans\n"}
{"java": "static String getMaxEven ( char [ ] str , int len ) { int [ ] freq = new int [ MAX ] ; int i , minEvenDigit = MAX , minDigit = MAX ; for ( i = 0 ; i < len ; i ++ ) { int digit = str [ i ] - '0' ; freq [ digit ] ++ ; if ( digit % 2 == 0 ) minEvenDigit = Math . min ( digit , minEvenDigit ) ; minDigit = Math . min ( digit , minDigit ) ; } if ( minEvenDigit == MAX ) return \" - 1\" ; freq [ minEvenDigit ] -- ; freq [ minDigit ] -- ; i = 0 ; for ( int j = MAX - 1 ; j >= 0 ; j -- ) { for ( int k = 0 ; k < freq [ j ] ; k ++ ) str [ i ++ ] = ( char ) ( j + '0' ) ; if ( j == minEvenDigit ) str [ i ++ ] = ( char ) ( minDigit + '0' ) ; } str [ i - 1 ] = ( char ) ( minEvenDigit + '0' ) ; return String . valueOf ( str ) ; }", "python": "def getMaxEven ( string , length ) :\n    string = list ( string )\n    freq = [ 0 ] * MAX\n    minEvenDigit = MAX ;\n    minDigit = MAX ;\n    for i in range ( length ) :\n        digit = ord ( string [ i ] ) - ord ( '0' ) ;\n        freq [ digit ] += 1 ;\n        if ( digit % 2 == 0 ) :\n            minEvenDigit = min ( digit , minEvenDigit ) ;\n        minDigit = min ( digit , minDigit ) ;\n    if ( minEvenDigit == MAX ) :\n        return \" - 1\" ;\n    freq [ minEvenDigit ] -= 1 ;\n    freq [ minDigit ] -= 1 ;\n    i = 0 ;\n    for j in range ( MAX - 1 , - 1 , - 1 ) :\n        for k in range ( freq [ j ] ) :\n            string [ i ] = chr ( j + ord ( '0' ) ) ;\n            i += 1\n        if ( j == minEvenDigit ) :\n            string [ i ] = chr ( minDigit + ord ( '0' ) ) ;\n            i += 1\n    return \" \" . join ( string ) ;\n"}
{"java": "static void WindowtoViewport ( int x_w , int y_w , int x_wmax , int y_wmax , int x_wmin , int y_wmin , int x_vmax , int y_vmax , int x_vmin , int y_vmin ) { int x_v , y_v ; float sx , sy ; sx = ( float ) ( x_vmax - x_vmin ) / ( x_wmax - x_wmin ) ; sy = ( float ) ( y_vmax - y_vmin ) / ( y_wmax - y_wmin ) ; x_v = ( int ) ( x_vmin + ( float ) ( ( x_w - x_wmin ) * sx ) ) ; y_v = ( int ) ( y_vmin + ( float ) ( ( y_w - y_wmin ) * sy ) ) ; System . out . printf ( \" The \u2581 point \u2581 on \u2581 viewport : \u2581 ( % d , \u2581 % d \u2581 ) \\n \u2581 \" , x_v , y_v ) ; }", "python": "def WindowtoViewport ( x_w , y_w , x_wmax , y_wmax , x_wmin , y_wmin , x_vmax , y_vmax , x_vmin , y_vmin ) :\n    sx = ( x_vmax - x_vmin ) / ( x_wmax - x_wmin )\n    sy = ( y_vmax - y_vmin ) / ( y_wmax - y_wmin )\n    x_v = x_vmin + ( ( x_w - x_wmin ) * sx )\n    y_v = y_vmin + ( ( y_w - y_wmin ) * sy )\n    print ( \" The \u2581 point \u2581 on \u2581 viewport : ( \" , int ( x_v ) , \" , \" , int ( y_v ) , \" ) \" )\n"}
{"java": "static void countFreq ( int arr [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( arr [ i ] ) != - 1 ) { System . out . println ( arr [ i ] + \" \u2581 \" + mp . get ( arr [ i ] ) ) ; mp . put ( arr [ i ] , - 1 ) ; } } }", "python": "def countFreq ( arr , n ) :\n    mp = { }\n    for i in range ( n ) :\n        if arr [ i ] not in mp :\n            mp [ arr [ i ] ] = 0\n        mp [ arr [ i ] ] += 1\n    for i in range ( n ) :\n        if ( mp [ arr [ i ] ] != - 1 ) :\n            print ( arr [ i ] , mp [ arr [ i ] ] )\n        mp [ arr [ i ] ] = - 1\n"}
{"java": "public static double answer ( double X , double K ) { double i = 10 ; double MIN = Math . pow ( i , K - 1 ) ; if ( MIN % X == 0 ) return ( MIN ) ; else return ( ( MIN + X ) - ( ( MIN + X ) % X ) ) ; }", "python": "def answer ( X , K ) :\n    MIN = pow ( 10 , K - 1 )\n    if ( MIN % X == 0 ) :\n        return ( MIN )\n    else :\n        return ( ( MIN + X ) - ( ( MIN + X ) % X ) )\n"}
{"java": "static int numberOfMinutes ( int S , int S1 ) { int Min = 0 ; Min = ( int ) ( ( ( S - S1 ) / Math . floor ( S ) ) * 60 ) ; return Min ; }", "python": "def numberOfMinutes ( S , S1 ) :\n    Min = 0 ;\n    Min = ( ( S - S1 ) / math . floor ( S ) ) * 60 ;\n    return int ( Min ) ;\n"}
{"java": "static int oddEquivalent ( String s , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) count ++ ; } return count ; }", "python": "def oddEquivalent ( s , n ) :\n    count = 0\n    for i in range ( 0 , n ) :\n        if ( s [ i ] == '1' ) :\n            count = count + 1\n    return count\n"}
{"java": "static boolean possibleToReach ( int a , int b ) { int c = ( int ) Math . cbrt ( a * b ) ; int re1 = a / c ; int re2 = b / c ; if ( ( re1 * re1 * re2 == a ) && ( re2 * re2 * re1 == b ) ) return true ; else return false ; }", "python": "def possibleToReach ( a , b ) :\n    c = np . cbrt ( a * b )\n    re1 = a // c\n    re2 = b // c\n    if ( ( re1 * re1 * re2 == a ) and ( re2 * re2 * re1 == b ) ) :\n        return True\n    else :\n        return False\n"}
{"java": "static String nthprimedigitsnumber ( int number ) { int rem ; String num = \" \" ; while ( number > 0 ) { rem = number % 4 ; switch ( rem ) { case 1 : num += '2' ; break ; case 2 : num += '3' ; break ; case 3 : num += '5' ; break ; case 0 : num += '7' ; break ; } if ( number % 4 == 0 ) number -- ; number = number / 4 ; } return new StringBuilder ( num ) . reverse ( ) . toString ( ) ; }", "python": "def nthprimedigitsnumber ( number ) :\n    num = \" \" ;\n    while ( number > 0 ) :\n        rem = number % 4 ;\n        if ( rem == 1 ) :\n            num += '2' ;\n        if ( rem == 2 ) :\n            num += '3' ;\n        if ( rem == 3 ) :\n            num += '5' ;\n        if ( rem == 0 ) :\n            num += '7' ;\n        if ( number % 4 == 0 ) :\n            number = number - 1\n        number = number // 4 ;\n    return num [ : : - 1 ] ;\n"}
{"java": "static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) res = res ^ arr [ i ] ; } return res ; }", "python": "def getTotalXorOfSubarrayXors ( arr , N ) :\n    res = 0\n    for i in range ( 0 , N ) :\n        freq = ( i + 1 ) * ( N - i )\n        if ( freq % 2 == 1 ) :\n            res = res ^ arr [ i ]\n    return res\n"}
{"java": "static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { if ( N % 2 == 0 ) return 0 ; int res = 0 ; for ( int i = 0 ; i < N ; i += 2 ) res ^= arr [ i ] ; return res ; }", "python": "def getTotalXorOfSubarrayXors ( arr , N ) :\n    if ( N % 2 == 0 ) :\n        return 0\n    res = 0\n    for i in range ( 0 , N , 2 ) :\n        res ^= arr [ i ]\n    return res\n"}
{"java": "static void countFreq ( int arr [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { System . out . println ( entry . getKey ( ) + \" \u2581 \" + entry . getValue ( ) ) ; } }", "python": "def countFreq ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in mp . keys ( ) :\n            mp [ arr [ i ] ] += 1\n        else :\n            mp [ arr [ i ] ] = 1\n    for x in mp :\n        print ( x , \" \u2581 \" , mp [ x ] )\n"}
{"java": "static String isDivisible ( long n ) { long temp = n ; int sum = 0 ; while ( n != 0 ) { int k = ( int ) n % 10 ; sum += k ; n /= 10 ; } if ( temp % sum == 0 ) return \" YES \" ; return \" NO \" ; }", "python": "def isDivisible ( n ) :\n    temp = n\n    sum = 0 ;\n    while ( n ) :\n        k = n % 10 ;\n        sum += k ;\n        n /= 10 ;\n    if ( temp % sum == 0 ) :\n        return \" YES \" ;\n    return \" NO \" ;\n"}
{"java": "static String isDivisible ( int n ) { int temp = n ; while ( n > 0 ) { int k = n % 10 ; if ( temp % k == 0 ) { return \" YES \" ; } n /= 10 ; } return \" NO \" ; }", "python": "def isDivisible ( n ) :\n    temp = n\n    while ( n ) :\n        k = n % 10\n        if ( temp % k == 0 ) :\n            return \" YES \"\n        n /= 10 ;\n    return \" NO \"\n"}
{"java": "static int solve ( int [ ] a , int d ) { int result = a [ 0 ] ; for ( int i = 1 ; i < a . length ; ++ i ) { int additive = Math . min ( a [ i ] , d / i ) ; result += additive ; d -= additive * i ; } return result ; }", "python": "def solve ( n , d , arr ) :\n    i = 1\n    while d > 0 and i < n :\n        if arr [ i ] <= 0 or d < i :\n            i += 1\n        elif d >= i :\n            d -= i\n            arr [ 0 ] += 1\n            arr [ i ] -= 1\n    return arr [ 0 ]\n"}
{"java": "static void reduceArray ( int arr [ ] , int n , int K ) { Vector < Integer > vec = new Vector < Integer > ( ) ; int size = 0 ; int curr_ele = arr [ 0 ] , curr_freq = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( curr_ele == arr [ i ] && curr_freq <= K ) { vec . add ( arr [ i ] ) ; size ++ ; } else if ( curr_ele != arr [ i ] ) { curr_ele = arr [ i ] ; vec . add ( arr [ i ] ) ; size ++ ; curr_freq = 1 ; } curr_freq ++ ; } System . out . print ( \" { \" ) ; for ( int i = 0 ; i < size ; i ++ ) { System . out . print ( vec . get ( i ) + \" , \u2581 \" ) ; } System . out . print ( \" } \" ) ; }", "python": "def reduceArray ( arr , n , K ) :\n    vec = [ ] ;\n    size = 0 ;\n    curr_ele = arr [ 0 ] ; curr_freq = 1 ;\n    for i in range ( n ) :\n        if ( curr_ele == arr [ i ] and curr_freq <= K ) :\n            vec . append ( arr [ i ] ) ;\n            size += 1 ;\n        elif ( curr_ele != arr [ i ] ) :\n            curr_ele = arr [ i ] ;\n            vec . append ( arr [ i ] ) ;\n            size += 1 ;\n            curr_freq = 1 ;\n        curr_freq += 1 ;\n    print ( \" { \" , end = \" \" ) ;\n    for i in range ( size ) :\n        print ( vec [ i ] , end = \" , \u2581 \" ) ;\n    print ( \" } \" , end = \" \" ) ;\n"}
{"java": "static String canMake ( String s ) { int o = 0 , z = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) - '0' == 1 ) o ++ ; else z ++ ; } if ( o % 2 == 1 && z % 2 == 1 ) return \" NO \" ; else return \" YES \" ; }", "python": "def canMake ( s ) :\n    o = 0 ; z = 0 ;\n    for i in range ( len ( s ) ) :\n        if ( ord ( s [ i ] ) - ord ( '0' ) == 1 ) :\n            o += 1 ;\n        else :\n            z += 1 ;\n    if ( o % 2 == 1 and z % 2 == 1 ) :\n        return \" NO \" ;\n    else :\n        return \" YES \" ;\n"}
{"java": "private static void Sequence ( int [ ] a ) { Map < Integer , Integer > sequence = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( ! sequence . containsKey ( a [ i ] ) ) { sequence . put ( a [ i ] , 1 ) ; } else { sequence . put ( a [ i ] , sequence . get ( a [ i ] ) + 1 ) ; } } int remove = 0 ; for ( Integer key : sequence . keySet ( ) ) { if ( key > sequence . get ( key ) ) remove += sequence . get ( key ) ; else if ( sequence . get ( key ) > key ) remove += sequence . get ( key ) - key ; } System . out . println ( remove ) ; }", "python": "def int1 ( x ) : return int ( x ) - 1\ndef II ( ) : return int ( input ( ) )\ndef MI ( ) : return map ( int , input ( ) . split ( ) )\ndef MI1 ( ) : return map ( int1 , input ( ) . split ( ) )\ndef LI ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef LI1 ( ) : return list ( map ( int1 , input ( ) . split ( ) ) )\ndef LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ]\ndef MS ( ) : return input ( ) . split ( )\ndef LS ( ) : return list ( input ( ) )\ndef LLS ( rows_number ) : return [ LS ( ) for _ in range ( rows_number ) ]\ndef printlist ( lst , k = ' \u2581 ' ) : print ( k . join ( list ( map ( str , lst ) ) ) )\nINF = float ( ' inf ' )\nfrom collections import deque , defaultdict\ndef solve ( ) :\n    N = II ( )\n    A = LI ( )\n    dct = defaultdict ( lambda : 0 )\n    for a in A :\n        dct [ a ] += 1\n    ans = 0\n    for key , val in dct . items ( ) :\n        if key == val :\n            continue\n        elif key < val :\n            ans += val - key\n        else :\n            ans += val\n    print ( ans )\n"}
{"java": "static int LISusingLCS ( Vector < Integer > seq ) { int n = seq . size ( ) ; int L [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; Vector < Integer > sortedseq = new Vector < Integer > ( seq ) ; Collections . sort ( sortedseq ) ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) L [ i ] [ j ] = 0 ; else if ( seq . get ( i - 1 ) == sortedseq . get ( j - 1 ) ) L [ i ] [ j ] = L [ i - 1 ] [ j - 1 ] + 1 ; else L [ i ] [ j ] = Math . max ( L [ i - 1 ] [ j ] , L [ i ] [ j - 1 ] ) ; } } return L [ n ] [ n ] ; }", "python": "def LISusingLCS ( seq ) :\n    n = len ( seq )\n    L = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    sortedseq = sorted ( seq )\n    for i in range ( n + 1 ) :\n        for j in range ( n + 1 ) :\n            if ( i == 0 or j == 0 ) :\n                L [ i ] [ j ] = 0\n            elif ( seq [ i - 1 ] == sortedseq [ j - 1 ] ) :\n                L [ i ] [ j ] = L [ i - 1 ] [ j - 1 ] + 1\n            else :\n                L [ i ] [ j ] = max ( L [ i - 1 ] [ j ] , L [ i ] [ j - 1 ] )\n    return L [ n ] [ n ]\n"}
{"java": "static boolean isDivisible ( String s , int m ) { Map < Character , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < DIGITS ; i ++ ) { mp . put ( CHARS [ i ] , i ) ; } int r = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { r = ( r * 16 + mp . get ( s . charAt ( i ) ) ) % m ; } if ( r == 0 ) return true ; return false ; }", "python": "def isDivisible ( s , m ) :\n    mp = dict . fromkeys ( CHARS , 0 ) ;\n    for i in range ( DIGITS ) :\n        mp [ CHARS [ i ] ] = i ;\n    r = 0 ;\n    for i in range ( len ( s ) ) :\n        r = ( r * 16 + mp [ s [ i ] ] ) % m ;\n    if ( not r ) :\n        return True ;\n    return False ;\n"}
{"java": "public static void solve ( BufferedReader br , PrintWriter pr ) throws IOException { String [ ] temp = br . readLine ( ) . split ( \" \u2581 \" ) ; int m = Integer . parseInt ( temp [ 0 ] ) ; int n = Integer . parseInt ( temp [ 1 ] ) ; char [ ] [ ] grid = new char [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { grid [ i ] = br . readLine ( ) . toCharArray ( ) ; } int xMin = m ; int xMax = 0 ; int yMin = n ; int yMax = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == ' X ' ) { xMin = Math . min ( xMin , i ) ; xMax = Math . max ( xMax , i ) ; yMin = Math . min ( yMin , j ) ; yMax = Math . max ( yMax , j ) ; } } } for ( int i = xMin ; i <= xMax ; i ++ ) { for ( int j = yMin ; j <= yMax ; j ++ ) { if ( grid [ i ] [ j ] != ' X ' ) { pr . println ( \" NO \" ) ; return ; } } } pr . println ( \" YES \" ) ; }", "python": "def f ( ) :\n    for i in ans2 :\n        if ' . ' in i :\n            return \" NO \"\n    return \" YES \"\n"}
{"java": "static int find_max ( int i , int sum , int [ ] v , int k ) { if ( i == v . length ) return 0 ; if ( dp [ i ] [ sum ] != - 1 ) return dp [ i ] [ sum ] ; int ans = 0 ; if ( ( sum + find_max ( i + 1 , sum , v , k ) ) % k == 0 ) ans = find_max ( i + 1 , sum , v , k ) ; if ( ( sum + v [ i ] + find_max ( i + 1 , ( sum + v [ i ] ) % k , v , k ) ) % k == 0 ) ans = Math . max ( ans , v [ i ] + find_max ( i + 1 , ( sum + v [ i ] ) % k , v , k ) ) ; return dp [ i ] [ sum ] = ans ; }", "python": "def find_max ( i , sum , v , k ) :\n    if ( i == len ( v ) ) :\n        return 0\n    if ( dp [ i ] [ sum ] != - 1 ) :\n        return dp [ i ] [ sum ]\n    ans = 0\n    if ( ( sum + find_max ( i + 1 , sum , v , k ) ) % k == 0 ) :\n        ans = find_max ( i + 1 , sum , v , k )\n    if ( ( sum + v [ i ] + find_max ( i + 1 , ( sum + v [ i ] ) % k , v , k ) ) % k == 0 ) :\n        ans = max ( ans , v [ i ] + find_max ( i + 1 , ( sum + v [ i ] ) % k , v , k ) )\n    dp [ i ] [ sum ] = ans\n    return dp [ i ] [ sum ]\n"}
{"java": "static int smallestSumSubarr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = - arr [ i ] ; int sum_here = arr [ 0 ] , max_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { sum_here = Math . max ( sum_here + arr [ i ] , arr [ i ] ) ; max_sum = Math . max ( max_sum , sum_here ) ; } return ( - 1 ) * max_sum ; }", "python": "def smallestSumSubarr ( arr , n ) :\n    for i in range ( n ) :\n        arr [ i ] = - arr [ i ]\n    sum_here = arr [ 0 ]\n    max_sum = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        sum_here = max ( sum_here + arr [ i ] , arr [ i ] )\n        max_sum = max ( max_sum , sum_here )\n    return ( - 1 ) * max_sum\n"}
{"java": "static int countPieces ( int N ) { return 2 * N ; }", "python": "def countPieces ( N ) :\n    return 2 * N\n"}
{"java": "static float sumOfSeries ( int x , int k ) { float y = ( float ) ( ( ( float ) ( x ) / 81 ) * ( 9 * k - 1 + Math . pow ( 10 , ( - 1 ) * k ) ) ) ; return y ; }", "python": "def sumOfSeries ( x , k ) :\n    return ( float ( x ) / 81 ) * ( 9 * k - 1 + 10 ** ( ( - 1 ) * k ) )\n"}
{"java": "static int findThirdDigit ( int n ) { if ( n < 3 ) return 0 ; return ( n & 1 ) > 0 ? 1 : 6 ; }", "python": "def findThirdDigit ( n ) :\n    if n < 3 :\n        return 0\n    return 1 if n and 1 else 6\n"}
{"java": "static void profitLoss ( int N , int M ) { if ( N == M ) System . out . print ( \" No \u2581 Profit \u2581 nor \u2581 Loss \" ) ; else { float result = 0 ; result = ( float ) ( Math . abs ( N - M ) ) / M ; if ( N - M < 0 ) System . out . print ( \" Loss \u2581 = \u2581 - \" + result * 100 + \" % \" ) ; else System . out . print ( \" Profit \u2581 = \u2581 \" + result * 100 + \" % \" ) ; } }", "python": "def profitLoss ( N , M ) :\n    if ( N == M ) :\n        print ( \" No \u2581 Profit \u2581 nor \u2581 Loss \" )\n    else :\n        result = 0.0\n        result = float ( abs ( N - M ) ) / M\n        if ( N - M < 0 ) :\n            print ( \" Loss \u2581 = \u2581 - \" , ' { 0 : . 6 } ' . format ( result * 100 ) , \" % \" )\n        else :\n            print ( \" Profit \u2581 = \u2581 \" , ' { 0 : . 6 } ' . format ( result * 100 ) , \" % \" )\n"}
{"java": "public static void Length ( String n ) { int r = n . length ( ) ; if ( r > 10 ) { char first = n . charAt ( 0 ) ; char last = n . charAt ( r - 1 ) ; System . out . println ( first + String . valueOf ( r - 2 ) + last ) ; } else { System . out . println ( n ) ; } }", "python": "def solve ( ) :\n    S = input ( )\n    n = len ( S )\n    if ( n > 10 ) :\n        print ( S [ 0 ] + str ( n - 2 ) + S [ n - 1 ] )\n        return\n    print ( S )\n"}
{"java": "static int term ( int n ) { int x = ( ( ( 1 ) + ( int ) Math . sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ; return x ; }", "python": "def term ( n ) :\n    x = ( ( ( 1 ) + math . sqrt ( 1 + ( 8 * n ) ) ) / 2 )\n    return x\n"}
{"java": "static int max_sum ( int arr [ ] , int n , int k ) { int dp [ ] = new int [ n ] ; dp [ 0 ] = Math . max ( 0 , arr [ 0 ] ) ; int i = 1 ; while ( i < k ) { dp [ i ] = Math . max ( dp [ i - 1 ] , arr [ i ] ) ; i ++ ; } i = k ; while ( i < n ) { dp [ i ] = Math . max ( dp [ i - 1 ] , arr [ i ] + dp [ i - k ] ) ; i ++ ; } return dp [ n - 1 ] ; }", "python": "def max_sum ( arr , n , k ) :\n    dp = [ 0 ] * n ;\n    dp [ 0 ] = max ( 0 , arr [ 0 ] ) ;\n    i = 1 ;\n    while ( i < k ) :\n        dp [ i ] = max ( dp [ i - 1 ] , arr [ i ] ) ;\n        i += 1 ;\n    i = k ;\n    while ( i < n ) :\n        dp [ i ] = max ( dp [ i - 1 ] , arr [ i ] + dp [ i - k ] ) ;\n        i += 1 ;\n    return dp [ n - 1 ] ;\n"}
{"java": "private static long sum ( long left , long right ) { return ( left + right ) * ( right - left + 1 ) / 2 ; }", "python": "def main ( ) :\n    N , K = map ( int , readline ( ) . split ( ) )\n    left = ( K * ( K - 1 ) ) // 2\n    right = K * ( 2 * N - K + 1 ) // 2\n    ans = 0\n    for i in range ( K , N + 1 ) :\n        ans += ( right - left + 1 ) % MOD\n        right += N - i\n        left += i\n    print ( ( ans + 1 ) % MOD )\n"}
{"java": "static boolean check ( int arr [ ] , int n ) { int k = Integer . MIN_VALUE ; int r = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { k = Math . max ( k , arr [ i ] ) ; r = Math . min ( r , arr [ i ] ) ; } k += 1 ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = k - arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . abs ( arr [ i ] ) - 1 < n && arr [ Math . abs ( arr [ i ] ) - 1 ] > 0 ) { arr [ Math . abs ( arr [ i ] ) - 1 ] = - arr [ Math . abs ( arr [ i ] ) - 1 ] ; } } int flag = 0 ; for ( int i = 0 ; i <= k - r - 1 ; i ++ ) { if ( arr [ i ] > 0 ) { flag = 1 ; break ; } } return flag == 0 ; }", "python": "def check ( arr , n ) :\n    k = - 10 ** 9\n    r = 10 ** 9\n    for i in range ( n ) :\n        k = max ( k , arr [ i ] )\n        r = min ( r , arr [ i ] )\n    k += 1\n    for i in range ( n ) :\n        arr [ i ] = k - arr [ i ]\n    for i in range ( n ) :\n        if ( abs ( arr [ i ] ) - 1 < n and arr [ abs ( arr [ i ] ) - 1 ] > 0 ) :\n            arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr [ i ] ) - 1 ]\n    flag = 0\n    for i in range ( k - r ) :\n        if ( arr [ i ] > 0 ) :\n            flag = 1\n            break\n    return flag == 0\n"}
{"java": "public static void prime ( long n ) { int flag = 0 ; if ( ( n + 1 ) % 6 != 0 && ( n - 1 ) % 6 != 0 ) { System . out . println ( \" Not \u2581 Prime \" ) ; } else { double s = sqrt ( n ) ; if ( ( s * s ) == n ) { System . out . println ( \" Semi - Prime \" ) ; } else { long f = ( long ) s ; long l = ( long ) ( ( f * f ) ) ; for ( long i = f + 1 ; i < l ; i ++ ) { long p = i - ( long ) ( sqrt ( ( i * i ) - ( n ) ) ) ; long q = n / p ; if ( p < 2 || q < 2 ) { break ; } if ( ( p * q ) == n ) { flag = 1 ; break ; } else { flag = 2 ; } } if ( flag == 1 ) { System . out . println ( \" Semi - Prime \" ) ; } else if ( flag == 2 ) { System . out . println ( \" Prime \" ) ; } } } }", "python": "def prime ( n ) :\n    flag = 0 ;\n    if ( ( n + 1 ) % 6 != 0 and ( n - 1 ) % 6 != 0 ) :\n        print ( \" Not \u2581 Prime \" ) ;\n    else :\n        s = pow ( n , 1 / 2 ) ;\n        if ( ( s * s ) == n ) :\n            print ( \" Semi - Prime \" ) ;\n        else :\n            f = int ( s ) ;\n            l = int ( f * f ) ;\n            for i in range ( f + 1 , l ) :\n                p = i - ( pow ( ( ( i * i ) - ( n ) ) , 1 / 2 ) ) ;\n                q = n // p ;\n                if ( p < 2 or q < 2 ) :\n                    break ;\n                if ( ( p * q ) == n ) :\n                    flag = 1 ;\n                    break ;\n                else :\n                    flag = 2 ;\n            if ( flag == 1 ) :\n                print ( \" Semi - Prime \" ) ;\n            elif ( flag == 2 ) :\n                print ( \" Prime \" ) ;\n"}
{"java": "static int minimumSubarrays ( int ar [ ] , int n ) { Vector se = new Vector ( ) ; int cnt = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( se . contains ( ar [ i ] ) == false ) { se . add ( ar [ i ] ) ; } else { cnt ++ ; se . clear ( ) ; se . add ( ar [ i ] ) ; } } return cnt ; }", "python": "def minimumSubarrays ( ar , n ) :\n    se = [ ]\n    cnt = 1 ;\n    for i in range ( n ) :\n        if se . count ( ar [ i ] ) == 0 :\n            se . append ( ar [ i ] )\n        else :\n            cnt += 1\n            se . clear ( )\n            se . append ( ar [ i ] )\n    return cnt\n"}
{"java": "static int findSum ( int n , int a , int b ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( i % a == 0 || i % b == 0 ) sum += i ; return sum ; }", "python": "def findSum ( n , a , b ) :\n    sum = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( i % a == 0 or i % b == 0 ) :\n            sum += i\n    return sum\n"}
{"java": "static double GetSum ( Long n ) { return ( 2 + 2 * sqrt2 ) * n + n * ( n - 1 ) ; }", "python": "def fef ( vev ) :\n    if vev == 0 :\n        return 0\n    if vev <= 1 :\n        return 2 * r + sqrt ( 2 ) * r\n    curr = 2 * r + sqrt ( 2 ) * r\n    curr += ( vev - 1 ) * ( 2 * r + sqrt ( 2 ) * 2 * r )\n    curr += r * ( vev - 1 ) * ( vev - 2 )\n    return curr\n"}
{"java": "static String solve ( int [ ] a ) { int [ ] neighbors = IntStream . range ( 0 , a . length ) . filter ( i -> a [ i ] != - 1 && ( ( i != 0 && a [ i - 1 ] == - 1 ) || ( i != a . length - 1 && a [ i + 1 ] == - 1 ) ) ) . map ( i -> a [ i ] ) . toArray ( ) ; if ( neighbors . length == 0 ) { return \"0 \u2581 0\" ; } int min = Arrays . stream ( neighbors ) . min ( ) . getAsInt ( ) ; int max = Arrays . stream ( neighbors ) . max ( ) . getAsInt ( ) ; int k = ( min + max ) / 2 ; int [ ] filled = IntStream . range ( 0 , a . length ) . map ( i -> ( a [ i ] == - 1 ) ? k : a [ i ] ) . toArray ( ) ; int m = IntStream . range ( 0 , filled . length - 1 ) . map ( i -> Math . abs ( filled [ i ] - filled [ i + 1 ] ) ) . max ( ) . getAsInt ( ) ; return String . format ( \" % d \u2581 % d \" , m , k ) ; }", "python": "def motaracksBirthday ( n , array ) :\n    c = 0\n    l = [ ]\n    for x in range ( n ) :\n        if array [ x ] != - 1 :\n            if x == 0 and array [ x + 1 ] == - 1 :\n                l . append ( array [ x ] )\n            elif x == n - 1 and array [ n - 2 ] == - 1 :\n                l . append ( array [ x ] )\n            else :\n                if x > 0 and x < n - 1 and ( array [ x - 1 ] == - 1 or array [ x + 1 ] == - 1 ) :\n                    l . append ( array [ x ] )\n    c = len ( l )\n    if c == 0 :\n        mean = 0\n    else :\n        mean = ( min ( l ) + max ( l ) ) // 2\n    md = 0\n    for x in range ( n ) :\n        if array [ x ] == - 1 :\n            array [ x ] = mean\n    for x in range ( 1 , n ) :\n        d = abs ( array [ x ] - array [ x - 1 ] )\n        md = max ( d , md )\n    return md , mean\n"}
{"java": "static long getSum ( long [ ] arr , int N ) { long mod = ( long ) ( 1e9 + 7 ) ; long Sum = 0 ; long [ ] preixSum = new long [ N ] ; preixSum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { preixSum [ i ] += ( preixSum [ i - 1 ] + arr [ i ] ) ; } for ( int i = 0 ; i < ( N - 1 ) ; i ++ ) { Sum += ( ( arr [ i ] % mod ) * ( ( preixSum [ N - 1 ] - preixSum [ i ] ) % mod ) ) % mod ; Sum %= mod ; } return Sum % mod ; }", "python": "def findProductSum ( A , n ) :\n    array_sum = 0\n    for i in range ( 0 , n , 1 ) :\n        array_sum += A [ i ]\n    array_sum_square = ( array_sum * array_sum )\n    individual_square_sum = 0\n    for i in range ( 0 , n , 1 ) :\n        individual_square_sum += ( A [ i ] * A [ i ] )\n    return ( array_sum_square - individual_square_sum ) // 2\n"}
{"java": "static double printProbability ( int L , int n ) { int p = ( 1 << ( n - 1 ) ) ; return 1.0 - ( ( double ) n ) / ( ( double ) p ) ; }", "python": "def printProbability ( L , n ) :\n    p = ( 1 << ( n - 1 ) )\n    return 1.0 - ( float ( n ) / float ( p ) )\n"}
{"java": "static String Hex ( int num ) { HashMap < Integer , Character > m = new HashMap < Integer , Character > ( ) ; char digit = '0' ; char c = ' a ' ; for ( int i = 0 ; i <= 15 ; i ++ ) { if ( i < 10 ) { m . put ( i , digit ) ; digit ++ ; } else { m . put ( i , c ) ; c ++ ; } } String res = \" \" ; if ( num == 0 ) { return \"0\" ; } if ( num > 0 ) { while ( num != 0 ) { res = m . get ( num % 16 ) + res ; num /= 16 ; } } else { int n = num ; while ( n != 0 ) { res = m . get ( n % 16 ) + res ; n /= 16 ; } } return res ; }", "python": "def Hex ( num ) :\n    m = dict . fromkeys ( range ( 16 ) , 0 ) ;\n    digit = ord ( '0' ) ;\n    c = ord ( ' a ' ) ;\n    for i in range ( 16 ) :\n        if ( i < 10 ) :\n            m [ i ] = chr ( digit ) ;\n            digit += 1 ;\n        else :\n            m [ i ] = chr ( c ) ;\n            c += 1\n    res = \" \" ;\n    if ( not num ) :\n        return \"0\" ;\n    if ( num > 0 ) :\n        while ( num ) :\n            res = m [ num % 16 ] + res ;\n            num //= 16 ;\n    else :\n        n = num + 2 ** 32 ;\n        while ( n ) :\n            res = m [ n % 16 ] + res ;\n            n //= 16 ;\n    return res ;\n"}
{"java": "static int countUnmarked ( int N ) { if ( N % 2 == 0 ) return N / 2 ; else return N / 2 + 1 ; }", "python": "def countUnmarked ( N ) :\n    if ( N % 2 == 0 ) :\n        return N / 2 ;\n    else :\n        return N / 2 + 1 ;\n"}
{"java": "static int minimumProduct ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; int product = 1 ; for ( int i = 0 ; i < n ; i += 2 ) { product *= ( arr [ i ] + arr [ i + 1 ] ) ; } return product ; }", "python": "def minimumProduct ( arr , n ) :\n    arr = sorted ( arr )\n    product = 1\n    for i in range ( 0 , n , 2 ) :\n        product *= ( arr [ i ] + arr [ i + 1 ] )\n    return product\n"}
{"java": "static void fibonacci ( double n ) { double fib ; for ( double i = 0 ; i < n ; i ++ ) { fib = ( Math . pow ( ( 1 + Math . sqrt ( 5 ) ) , i ) - Math . pow ( ( 1 - Math . sqrt ( 5 ) ) , i ) ) / ( Math . pow ( 2 , i ) * Math . sqrt ( 5 ) ) ; System . out . print ( ( int ) fib + \" \u2581 \" ) ; } }", "python": "def fibonacci ( n ) :\n    for i in range ( n ) :\n        fib = ( ( pow ( ( 1 + math . sqrt ( 5 ) ) , i ) - pow ( ( 1 - math . sqrt ( 5 ) ) , i ) ) / ( pow ( 2 , i ) * math . sqrt ( 5 ) ) ) ;\n        print ( int ( fib ) , end = \" \u2581 \" ) ;\n"}
{"java": "static void printLargestDivisible ( int n , int a [ ] ) { int i , c0 = 0 , c5 = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) c0 ++ ; else c5 ++ ; } c5 = ( int ) Math . floor ( c5 / 9 ) * 9 ; if ( c0 == 0 ) System . out . print ( - 1 ) ; else if ( c5 == 0 ) System . out . println ( 0 ) ; else { for ( i = 0 ; i < c5 ; i ++ ) System . out . print ( 5 ) ; for ( i = 0 ; i < c0 ; i ++ ) System . out . print ( 0 ) ; } }", "python": "def printLargestDivisible ( n , a ) :\n    c0 , c5 = 0 , 0\n    for i in range ( n ) :\n        if a [ i ] == 0 :\n            c0 += 1\n        else :\n            c5 += 1\n    c5 = floor ( c5 / 9 ) * 9\n    if c0 == 0 :\n        print ( - 1 , end = \" \" )\n    elif c5 == 0 :\n        print ( 0 , end = \" \" )\n    else :\n        for i in range ( c5 ) :\n            print ( 5 , end = \" \" )\n        for i in range ( c0 ) :\n            print ( 0 , end = \" \" )\n"}
{"java": "public static boolean isNumBalanced ( int num ) { num = Math . abs ( num ) ; String str = num + \" \" ; char [ ] ch_arr = str . toCharArray ( ) ; HashSet < Character > hs = new HashSet < Character > ( ) ; for ( char ch : ch_arr ) { hs . add ( ch ) ; } int str_len = str . length ( ) ; int hs_len = hs . size ( ) ; if ( hs_len <= str_len / 2 || hs_len == str_len ) { return true ; } return false ; }", "python": "def isNumBalanced ( N ) :\n    st = str ( N )\n    isBalanced = True\n    freq = [ 0 ] * 10\n    n = len ( st )\n    for i in range ( 0 , n ) :\n        freq [ int ( st [ i ] ) ] += 1\n    for i in range ( 0 , 9 ) :\n        if freq [ i ] != freq [ i + 1 ] :\n            isBalanced = False\n    if isBalanced :\n        return True\n    else :\n        return False\n"}
{"java": "static int minCost ( int arr [ ] , int cost [ ] , int n ) { int costThree = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { int costI = Integer . MAX_VALUE ; int costK = Integer . MAX_VALUE ; for ( int i = 0 ; i < j ; i ++ ) { if ( arr [ i ] < arr [ j ] ) costI = Math . min ( costI , cost [ i ] ) ; } for ( int k = j + 1 ; k < n ; k ++ ) { if ( arr [ k ] > arr [ j ] ) costK = Math . min ( costK , cost [ k ] ) ; } if ( costI != Integer . MAX_VALUE && costK != Integer . MAX_VALUE ) { costThree = Math . min ( costThree , cost [ j ] + costI + costK ) ; } } if ( costThree == Integer . MAX_VALUE ) return - 1 ; return costThree ; }", "python": "def minCost ( arr , cost , n ) :\n    costThree = 10 ** 9\n    for j in range ( n ) :\n        costI = 10 ** 9\n        costK = 10 ** 9\n        for i in range ( j ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                costI = min ( costI , cost [ i ] )\n        for k in range ( j + 1 , n ) :\n            if ( arr [ k ] > arr [ j ] ) :\n                costK = min ( costK , cost [ k ] )\n        if ( costI != 10 ** 9 and costK != 10 ** 9 ) :\n            costThree = min ( costThree , cost [ j ] + costI + costK )\n    if ( costThree == 10 ** 9 ) :\n        return - 1\n    return costThree\n"}
{"java": "static int countGreater ( int arr [ ] , int n , int k ) { int l = 0 ; int r = n - 1 ; int leftGreater = n ; while ( l <= r ) { int m = l + ( r - l ) / 2 ; if ( arr [ m ] > k ) { leftGreater = m ; r = m - 1 ; } else l = m + 1 ; } return ( n - leftGreater ) ; }", "python": "def countGreater ( arr , n , k ) :\n    l = 0\n    r = n - 1\n    leftGreater = n\n    while ( l <= r ) :\n        m = int ( l + ( r - l ) / 2 )\n        if ( arr [ m ] > k ) :\n            leftGreater = m\n            r = m - 1\n        else :\n            l = m + 1\n    return ( n - leftGreater )\n"}
{"java": "static int maxItems ( int x , int y , int z ) { int type1 = x / COST ; x %= COST ; int type2 = y / COST ; y %= COST ; int type3 = z / COST ; z %= COST ; int type4 = Math . min ( x , Math . min ( y , z ) ) ; int maxItems = type1 + type2 + type3 + type4 ; return maxItems ; }", "python": "def maxItems ( x , y , z ) :\n    type1 = x // COST ;\n    x %= COST ;\n    type2 = y // COST ;\n    y %= COST ;\n    type3 = z // COST ;\n    z %= COST ;\n    type4 = min ( x , min ( y , z ) ) ;\n    maxItems = type1 + type2 + type3 + type4 ;\n    return maxItems ;\n"}
{"java": "static String toggleCase ( char [ ] a ) { for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] ^= 32 ; } return new String ( a ) ; }", "python": "def toggleCase ( a ) :\n    for i in range ( len ( a ) ) :\n        a = a [ : i ] + chr ( ord ( a [ i ] ) ^ 32 ) + a [ i + 1 : ] ;\n    return a ;\n"}
{"java": "static void printPattern ( int N ) { for ( int i = 1 ; i <= N ; i ++ ) { System . out . print ( \" \u2581 \" + ( ( i % 2 == 0 ) ? ( i - 1 ) : ( i + 1 ) ) ) ; } }", "python": "def printPattern ( N ) :\n    for i in range ( 1 , N + 1 ) :\n        print ( i - 1 if i % 2 == 0 else i + 1 , end = \" \u2581 \" )\n"}
{"java": "public static String Range ( int x , int y , int z ) { if ( x < y && y < z ) { return \" Yes \" ; } else { return \" No \" ; } }", "python": "def main ( args ) :\n    a , b , c = map ( int , input ( ) . split ( ) )\n    if a < b < c :\n        print ( ' Yes ' )\n    else :\n        print ( ' No ' )\n"}
{"java": "static void calc ( int a [ ] , int b [ ] , int lr [ ] , int q , int n ) { int M , m , i , j , k , l , r , suma , sumb , cc ; cc = 0 ; for ( i = 0 ; i < n - 1 ; ++ i ) { a [ i + 1 ] += a [ i ] ; b [ i + 1 ] += b [ i ] ; } while ( q != 0 ) { l = lr [ cc ++ ] ; r = lr [ cc ++ ] ; l -= 2 ; r -= 1 ; suma = a [ r ] ; sumb = b [ r ] ; if ( l >= 0 ) { suma -= a [ l ] ; sumb -= b [ l ] ; } M = Math . max ( CONS * suma + CONS * sumb , - CONS * suma - CONS * sumb ) ; M = Math . max ( M , Math . max ( CONS * suma - CONS * sumb , - CONS * suma + CONS * sumb ) ) ; m = Math . min ( CONS * suma + CONS * sumb , - CONS * suma - CONS * sumb ) ; m = Math . min ( m , Math . min ( CONS * suma - CONS * sumb , - CONS * suma + CONS * sumb ) ) ; System . out . println ( ( M - m ) ) ; q -- ; } }", "python": "def calc ( a , b , lr , q , n ) :\n    cc = 0\n    for i in range ( n - 1 ) :\n        a [ i + 1 ] += a [ i ]\n        b [ i + 1 ] += b [ i ]\n    while ( q > 0 ) :\n        l = lr [ cc ]\n        cc += 1\n        r = lr [ cc ]\n        cc += 1\n        l -= 2\n        r -= 1\n        suma = a [ r ]\n        sumb = b [ r ]\n        if ( l >= 0 ) :\n            suma -= a [ l ]\n            sumb -= b [ l ]\n        M = max ( CONS * suma + CONS * sumb , - CONS * suma - CONS * sumb )\n        M = max ( M , max ( CONS * suma - CONS * sumb , - CONS * suma + CONS * sumb ) )\n        m = min ( CONS * suma + CONS * sumb , - CONS * suma - CONS * sumb )\n        m = min ( m , min ( CONS * suma - CONS * sumb , - CONS * suma + CONS * sumb ) )\n        print ( M - m )\n        q -= 1\n"}
{"java": "static void find_Indices ( int arr [ ] , int n ) { int sum [ ] = new int [ max ] ; int index_1 , index_2 , index_3 , index ; int k , i ; for ( i = 1 , k = 0 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ k ++ ] ; double ans = - ( 1e15 ) ; index_1 = index_2 = index_3 = - 1 ; for ( int l = 0 ; l <= n ; l ++ ) { index = 0 ; double vmin = ( 1e15 ) ; for ( int r = l ; r <= n ; r ++ ) { if ( sum [ r ] < vmin ) { vmin = sum [ r ] ; index = r ; } if ( sum [ l ] + sum [ r ] - vmin > ans ) { ans = sum [ l ] + sum [ r ] - vmin ; index_1 = l ; index_2 = index ; index_3 = r ; } } } System . out . print ( index_1 + \" \u2581 \" + index_2 + \" \u2581 \" + index_3 ) ; }", "python": "def find_Indices ( arr , n ) :\n    sum = [ 0 for i in range ( max ) ]\n    k = 0\n    for i in range ( 1 , n + 1 ) :\n        sum [ i ] = sum [ i - 1 ] + arr [ k ] ;\n        k += 1\n    ans = - ( 1e15 )\n    index_1 = index_2 = index_3 = - 1\n    for l in range ( n + 1 ) :\n        index = 0\n        vmin = ( 1e15 )\n        for r in range ( l , n + 1 ) :\n            if ( sum [ r ] < vmin ) :\n                vmin = sum [ r ]\n                index = r\n            if ( sum [ l ] + sum [ r ] - vmin > ans ) :\n                ans = sum [ l ] + sum [ r ] - vmin\n                index_1 = l\n                index_2 = index\n                index_3 = r\n    print ( index_1 , \" \u2581 \" , index_2 , \" \u2581 \" , index_3 )\n"}
{"java": "static int minOperations ( String s , String t , int n ) { int ct0 = 0 , ct1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) continue ; if ( s . charAt ( i ) == '0' ) ct0 ++ ; else ct1 ++ ; } return Math . max ( ct0 , ct1 ) ; }", "python": "def minOperations ( s , t , n ) :\n    ct0 = 0\n    ct1 = 0\n    for i in range ( n ) :\n        if ( s [ i ] == t [ i ] ) :\n            continue\n        if ( s [ i ] == '0' ) :\n            ct0 += 1\n        else :\n            ct1 += 1\n    return max ( ct0 , ct1 )\n"}
{"java": "static int countOddPair ( int A [ ] , int N ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ( A [ i ] % 2 != 1 ) ) { count ++ ; } } int evenPairCount = count * ( count - 1 ) / 2 ; int totPairs = N * ( N - 1 ) / 2 ; return totPairs - evenPairCount ; }", "python": "def countOddPair ( A , N ) :\n    count = 0\n    for i in range ( 0 , N ) :\n        if ( A [ i ] % 2 != 1 ) :\n            count += 1\n    evenPairCount = count * ( count - 1 ) / 2\n    totPairs = N * ( N - 1 ) / 2\n    return ( int ) ( totPairs - evenPairCount )\n"}
{"java": "static int sqrtSearch ( int low , int high , int N ) { if ( low <= high ) { int mid = ( int ) ( low + high ) / 2 ; if ( ( mid * mid <= N ) && ( ( mid + 1 ) * ( mid + 1 ) > N ) ) { return mid ; } else if ( mid * mid < N ) { return sqrtSearch ( mid + 1 , high , N ) ; } else { return sqrtSearch ( low , mid - 1 , N ) ; } } return low ; }", "python": "def sqrtSearch ( low , high , N ) :\n    if ( low <= high ) :\n        mid = ( low + high ) // 2 ;\n        if ( ( mid * mid <= N ) and ( ( mid + 1 ) * ( mid + 1 ) > N ) ) :\n            return mid ;\n        elif ( mid * mid < N ) :\n            return sqrtSearch ( mid + 1 , high , N ) ;\n        else :\n            return sqrtSearch ( low , mid - 1 , N ) ;\n    return low ;\n"}
{"java": "static int NumberOfSolutions ( int a , int b , int c , int d ) { int ans = 0 ; for ( int i = a ; i <= b ; i ++ ) if ( d >= Math . max ( c , i + 1 ) ) ans += d - Math . max ( c , i + 1 ) + 1 ; return ans ; }", "python": "def NumberOfSolutions ( a , b , c , d ) :\n    ans = 0\n    for i in range ( a , b + 1 ) :\n        if d >= max ( c , i + 1 ) :\n            ans += d - max ( c , i + 1 ) + 1\n    return ans\n"}
{"java": "static String recursiveFun ( int n ) { if ( n == 1 ) return \" int \" ; return \" gcd ( int , \u2581 \" + recursiveFun ( n - 1 ) + \" ) \" ; }", "python": "def recursiveFun ( n ) :\n    if ( n == 1 ) :\n        return \" int \"\n    return \" gcd ( int , \u2581 \" + recursiveFun ( n - 1 ) + \" ) \"\n"}
{"java": "static float Area ( float a , float b ) { if ( a < 0 && b < 0 ) return - 1 ; float h = ( float ) Math . sqrt ( ( ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) / ( Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) ) ) ; float A = ( float ) ( 0.70477 * Math . pow ( h , 2 ) ) ; return A ; }", "python": "def Area ( a , b ) :\n    if ( a < 0 and b < 0 ) :\n        return - 1 ;\n    h = math . sqrt ( ( ( pow ( a , 2 ) + pow ( b , 2 ) ) / ( pow ( a , 2 ) * pow ( b , 2 ) ) ) ) ;\n    A = 0.70477 * pow ( h , 2 ) ;\n    return A ;\n"}
{"java": "static int Subtract ( int a , int b ) { int c ; c = a + ( ~ b + 1 ) ; return c ; }", "python": "def Subtract ( a , b ) :\n    c = a + ( ~ b + 1 )\n    return c\n"}
{"java": "static void angleequichord ( int z ) { System . out . println ( \" The \u2581 angle \u2581 subtended \u2581 at \u2581 the \u2581 center \u2581 is \u2581 \" + z + \" \u2581 degrees \" ) ; }", "python": "def angleequichord ( z ) :\n    print ( \" The \u2581 angle \u2581 subtended \u2581 at \" , \" the \u2581 center \u2581 is \" , z , \" degrees \" ) ;\n"}
{"java": "static String checkNumber ( int N ) { int temp = N ; while ( temp > 0 ) { if ( temp % 1000 == 144 ) temp /= 1000 ; else if ( temp % 100 == 14 ) temp /= 100 ; else if ( temp % 10 == 1 ) temp /= 10 ; else { return \" NO \" ; } } return \" YES \" ; }", "python": "def checkNumber ( N ) :\n    temp = N\n    while ( temp > 0 ) :\n        if ( temp % 1000 == 144 ) :\n            temp /= 1000\n        elif ( temp % 100 == 14 ) :\n            temp /= 100\n        elif ( temp % 10 == 1 ) :\n            temp /= 10\n        else :\n            return \" YES \"\n    return \" NO \"\n"}
{"java": "public static int maxAmount ( int M , int N ) { PriorityQueue < Integer > q = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < M ; i ++ ) { q . add ( seats [ i ] ) ; } int ticketSold = 0 ; int ans = 0 ; while ( ticketSold < N && q . peek ( ) > 0 ) { ans = ans + q . peek ( ) ; int temp = q . peek ( ) ; q . poll ( ) ; q . add ( temp - 1 ) ; ticketSold ++ ; } return ans ; }", "python": "def maxAmount ( M , N , seats ) :\n    q = [ ]\n    for i in range ( M ) :\n        q . append ( seats [ i ] )\n    ticketSold = 0\n    ans = 0\n    q . sort ( reverse = True )\n    while ( ticketSold < N and q [ 0 ] > 0 ) :\n        ans = ans + q [ 0 ]\n        temp = q [ 0 ]\n        q = q [ 1 : ]\n        q . append ( temp - 1 )\n        q . sort ( reverse = True )\n        ticketSold += 1\n    return ans\n"}
{"java": "static int findNum ( int div [ ] , int rem [ ] , int N ) { int num = rem [ N - 1 ] ; for ( int i = N - 2 ; i >= 0 ; i -- ) { num = num * div [ i ] + rem [ i ] ; } return num ; }", "python": "def findNum ( div , rem , N ) :\n    num = rem [ N - 1 ]\n    i = N - 2\n    while ( i >= 0 ) :\n        num = num * div [ i ] + rem [ i ]\n        i -= 1\n    return num\n"}
{"java": "static int countDigit ( int n ) { int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp /= 10 ; if ( d > 0 && n % d == 0 ) count ++ ; } return count ; }", "python": "def countDigit ( n ) :\n    temp = n\n    count = 0\n    while temp != 0 :\n        d = temp % 10\n        temp /= 10\n        if d > 0 and n % d == 0 :\n            count += 1\n    return count\n"}
{"java": "static int countDigit ( int n ) { int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp /= 10 ; if ( d == 2 || d == 3 || d == 5 || d == 7 ) count ++ ; } return count ; }", "python": "def countDigit ( n ) :\n    temp = n\n    count = 0\n    while ( temp != 0 ) :\n        d = temp % 10\n        temp //= 10\n        if ( d == 2 or d == 3 or d == 5 or d == 7 ) :\n            count += 1\n    return count\n"}
{"java": "static int commonWords ( String [ ] s ) { int m , i , j ; String str ; HashMap < String , Boolean > has = new HashMap < > ( ) ; String [ ] ans1 = new String [ 100 ] ; boolean [ ] ans2 = new boolean [ 100 ] ; int track = 0 ; m = s . length ; i = 0 ; while ( i < s [ 0 ] . length ( ) ) { str = \" \" ; while ( i < s [ 0 ] . length ( ) && s [ 0 ] . charAt ( i ) != ' \u2581 ' ) { str += s [ 0 ] . charAt ( i ) ; i ++ ; } i ++ ; if ( str . compareTo ( \" \" ) != 0 ) { ans1 [ track ] = str ; ans2 [ track ] = true ; track ++ ; } } for ( j = 1 ; j < m ; j ++ ) { has . clear ( ) ; i = 0 ; while ( i < s [ j ] . length ( ) ) { str = \" \" ; while ( i < s [ j ] . length ( ) && s [ j ] . charAt ( i ) != ' \u2581 ' ) { str += s [ j ] . charAt ( i ) ; i ++ ; } i ++ ; if ( str . compareTo ( \" \" ) != 0 ) has . put ( str , true ) ; } for ( int k = 0 ; k < track ; k ++ ) { if ( ans2 [ k ] != false && ! has . containsKey ( ans1 [ k ] ) ) ans2 [ k ] = false ; else if ( ans2 [ k ] != false && has . containsKey ( ans1 [ k ] ) && has . get ( ans1 [ k ] ) == true ) has . put ( ans1 [ k ] , false ) ; } } int cnt = 0 ; for ( int k = 0 ; k < track ; k ++ ) if ( ans2 [ k ] == true ) cnt ++ ; return cnt ; }", "python": "def commonWords ( S ) :\n    has = defaultdict ( lambda : False )\n    ans = [ ]\n    m = len ( S )\n    i = 0\n    while i < len ( S [ 0 ] ) :\n        string = \" \"\n        while i < len ( S [ 0 ] ) and S [ 0 ] [ i ] != ' \u2581 ' :\n            string += S [ 0 ] [ i ]\n            i += 1\n        i += 1\n        if string != \" \" :\n            ans . append ( [ string , True ] )\n    for j in range ( 1 , m ) :\n        has . clear ( )\n        i = 0\n        while i < len ( S [ j ] ) :\n            string = \" \"\n            while i < len ( S [ j ] ) and S [ j ] [ i ] != ' \u2581 ' :\n                string += S [ j ] [ i ]\n                i += 1\n            i += 1\n            if string != \" \" :\n                has [ string ] = True\n        for k in range ( 0 , len ( ans ) ) :\n            if ( ans [ k ] [ 1 ] != False and has [ ans [ k ] [ 0 ] ] == False ) :\n                ans [ k ] [ 1 ] = False\n            elif ( ans [ k ] [ 1 ] != False and has [ ans [ k ] [ 0 ] ] == True ) :\n                has [ ans [ k ] [ 0 ] ] = False\n    cnt = 0\n    for k in range ( 0 , len ( ans ) ) :\n        if ans [ k ] [ 1 ] == True :\n            cnt += 1\n    return cnt\n"}
{"java": "static int distinctSubString ( String P , String Q , int K , int N ) { HashSet < String > S = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; ++ i ) { int sum = 0 ; String s = \" \" ; for ( int j = i ; j < N ; ++ j ) { int pos = P . charAt ( j ) - ' a ' ; sum += Q . charAt ( pos ) - '0' ; s += P . charAt ( j ) ; if ( sum <= K ) { S . add ( s ) ; } else { break ; } } } return S . size ( ) ; }", "python": "def distinctSubstring ( P , Q , K , N ) :\n    S = set ( )\n    for i in range ( 0 , N ) :\n        sum = 0 ;\n        s = ' '\n        for j in range ( i , N ) :\n            pos = ord ( P [ j ] ) - 97\n            sum = sum + ord ( Q [ pos ] ) - 48\n            s += P [ j ]\n            if ( sum <= K ) :\n                S . add ( s )\n            else :\n                break\n    return len ( S )\n"}
{"java": "static int findLargest ( int n , Vector < Integer > v ) { int flag = 0 ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( v . get ( i ) == 0 ) flag = 1 ; sum += v . get ( i ) ; } if ( flag != 1 ) System . out . println ( \" Not \u2581 possible \" ) ; else { Collections . sort ( v , Collections . reverseOrder ( ) ) ; if ( v . get ( 0 ) == 0 ) { System . out . println ( \"0\" ) ; return 0 ; } else { int flags = 0 ; int y = ( int ) ( sum % 3 ) ; if ( y != 0 ) { for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( v . get ( i ) % 3 == y ) { v . remove ( i ) ; flags = 1 ; break ; } } if ( flags == 0 ) { y = 3 - y ; int cnt = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( v . get ( i ) % 3 == y ) { v . remove ( i ) ; cnt ++ ; if ( cnt >= 2 ) break ; } } } } if ( v . get ( 0 ) == 0 ) System . out . println ( \"0\" ) ; else for ( Integer i : v ) { System . out . print ( i ) ; } } } return Integer . MIN_VALUE ; }", "python": "def findLargest ( n , v ) :\n    flag = 0\n    sum = 0\n    for i in range ( n ) :\n        if ( v [ i ] == 0 ) :\n            flag = 1\n        sum += v [ i ]\n    if ( flag == 0 ) :\n        print ( \" Not \u2581 possible \" )\n    else :\n        v . sort ( reverse = True )\n        if ( v [ 0 ] == 0 ) :\n            print ( \"0\" )\n            return 0\n        else :\n            flag = 0\n            y = sum % 3\n            if ( y != 0 ) :\n                i = n - 1\n                while ( i >= 0 ) :\n                    if ( v [ i ] % 3 == y ) :\n                        v . remove ( v [ i ] )\n                        flag = 1\n                        break\n                    i -= 1\n                if ( flag == 0 ) :\n                    y = 3 - y\n                    cnt = 0\n                    i = n - 1\n                    while ( i >= 0 ) :\n                        if ( v [ i ] % 3 == y ) :\n                            v . remove ( v [ i ] )\n                            cnt += 1\n                            if ( cnt >= 2 ) :\n                                break\n                        i -= 1\n            if ( v [ 0 ] == 0 ) :\n                print ( \"0\" )\n            else :\n                for i in ( v ) :\n                    print ( i , end = \" \" )\n"}
{"java": "static long sum ( long n ) { long root = ( long ) Math . sqrt ( n ) ; long ans = 0 ; for ( int i = 1 ; i <= root ; i ++ ) ans += n / i ; ans = 2 * ans - ( root * root ) ; return ans ; }", "python": "def sum ( n ) :\n    root = ( int ) ( math . sqrt ( n ) )\n    ans = 0\n    for i in range ( 1 , root + 1 ) :\n        ans = ans + n // i\n    ans = 2 * ans - ( root * root )\n    return ans\n"}
{"java": "static int smallestEven ( int n ) { if ( n == 1 ) return 0 ; return Math . pow ( 10 , n - 1 ) ; }", "python": "def smallestEven ( n ) :\n    if ( n == 1 ) :\n        return 0\n    return pow ( 10 , n - 1 )\n"}
{"java": "static int count ( int n ) { return ( int ) ( 15 * Math . pow ( 16 , n - 1 ) ) ; }", "python": "def count ( n ) :\n    return 15 * pow ( 16 , n - 1 ) ;\n"}
{"java": "static int count ( int n ) { return ( int ) Math . pow ( 2 , n - 1 ) ; }", "python": "def count ( n ) :\n    return pow ( 2 , n - 1 )\n"}
{"java": "static int minChanges ( char [ ] str , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( str [ 0 ] != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( str [ i ] == '0' ) zeros ++ ; else ones ++ ; if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }", "python": "def minChanges ( str , n ) :\n    count , zeros , ones = 0 , 0 , 0\n    if ( ord ( str [ 0 ] ) != ord ( '1' ) ) :\n        count += 1\n        ones += 1\n    for i in range ( 1 , n ) :\n        if ( ord ( str [ i ] ) == ord ( '0' ) ) :\n            zeros += 1\n        else :\n            ones += 1\n        if ( zeros > ones ) :\n            zeros -= 1\n            ones += 1\n            count += 1\n    return count\n"}
{"java": "static boolean isDivisible ( int arr [ ] , int n ) { int lastDigit = arr [ n - 1 ] % 10 ; if ( lastDigit == 0 ) return true ; return false ; }", "python": "def isDivisible ( arr , n ) :\n    lastDigit = arr [ n - 1 ] % 10 ;\n    if ( lastDigit == 0 ) :\n        return True ;\n    return False ;\n"}
{"java": "static void twistedTOH ( int n , char first , char middle , char last ) { if ( n == 1 ) { System . out . println ( \" Move \u2581 disk \u2581 \" + n + \" \u2581 from \u2581 rod \u2581 \" + first + \" \u2581 to \u2581 \" + middle + \" \u2581 and \u2581 then \u2581 to \u2581 \" + last ) ; return ; } twistedTOH ( n - 1 , first , middle , last ) ; System . out . println ( \" Move \u2581 disk \u2581 \" + n + \" \u2581 from \u2581 rod \u2581 \" + first + \" \u2581 to \u2581 \" + middle ) ; twistedTOH ( n - 1 , last , middle , first ) ; System . out . println ( \" Move \u2581 disk \u2581 \" + n + \" \u2581 from \u2581 rod \u2581 \" + middle + \" \u2581 to \u2581 \" + last ) ; twistedTOH ( n - 1 , first , middle , last ) ; }", "python": "def twistedTOH ( n , first , middle , last ) :\n    if ( n == 1 ) :\n        print ( \" Move \u2581 disk \" , n , \" from \u2581 rod \" , first , \" to \" , middle , \" and \u2581 then \u2581 to \" , last )\n        return\n    twistedTOH ( n - 1 , first , middle , last )\n    print ( \" Move \u2581 disk \" , n , \" from \u2581 rod \" , first , \" to \" , middle )\n    twistedTOH ( n - 1 , last , middle , first )\n    print ( \" Move \u2581 disk \" , n , \" from \u2581 rod \" , middle , \" to \" , last )\n    twistedTOH ( n - 1 , first , middle , last )\n"}
{"java": "static void numberOfSubarrays ( int arr [ ] , int n ) { int [ ] v = new int [ n + 1 ] ; v [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { v [ i + 1 ] = v [ i ] + arr [ i ] ; } HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int begin = 0 , end = 0 , answer = 0 ; mp . put ( 0 , 1 ) ; while ( begin < n ) { while ( end < n && ! mp . containsKey ( v [ end + 1 ] ) ) { end ++ ; mp . put ( v [ end ] , 1 ) ; } answer = answer + end - begin ; mp . remove ( v [ begin ] ) ; begin ++ ; } System . out . print ( answer + \" \\n \" ) ; }", "python": "def numberOfSubarrays ( arr , n ) :\n    v = [ 0 ] * ( n + 1 )\n    for i in range ( n ) :\n        v [ i + 1 ] = v [ i ] + arr [ i ]\n    mp = { }\n    begin , end , answer = 0 , 0 , 0\n    mp [ 0 ] = 1\n    while ( begin < n ) :\n        while ( end < n and ( v [ end + 1 ] ) not in mp ) :\n            end += 1\n            mp [ v [ end ] ] = 1\n        answer = answer + end - begin\n        del mp [ v [ begin ] ]\n        begin += 1\n    print ( answer )\n"}
{"java": "static int multiplyWith4 ( int n ) { return ( n << 2 ) ; }", "python": "def multiplyWith4 ( n ) :\n    return ( n << 2 )\n"}
{"java": "static long getSum ( int n , int d ) { long sum = 0 ; while ( d <= n ) { sum += d ; d += 10 ; } return sum ; }", "python": "def getSum ( n , d ) :\n    sum = 0\n    while ( d <= n ) :\n        sum += d\n        d += 10\n    return sum\n"}
{"java": "static long getSum ( long n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; long k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }", "python": "def getSum ( n , d ) :\n    if ( n < d ) :\n        return 0\n    while ( n % 10 != d ) :\n        n -= 1\n    k = n // 10\n    return ( ( k + 1 ) * d + ( k * 10 + 10 * k * k ) // 2 )\n"}
{"java": "static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 4 * n - 2 ; }", "python": "def nthTerm ( n ) :\n    return 2 * pow ( n , 2 ) + 4 * n - 2\n"}
{"java": "static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 2 * n + 2 ; }", "python": "def nthTerm ( n ) :\n    return pow ( n , 2 ) + 2 * n + 2\n"}
{"java": "static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 4 * n ; }", "python": "def nthTerm ( n ) :\n    return n ** 2 + 4 * n ;\n"}
{"java": "static int nthTerm ( int n ) { return 5 * ( int ) Math . pow ( n , 2 ) - 5 * n ; }", "python": "def nthTerm ( n ) :\n    return 5 * pow ( n , 2 ) - 5 * n\n"}
{"java": "static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) + 2 * n - 5 ; }", "python": "def nthTerm ( n ) :\n    return 3 * pow ( n , 2 ) + 2 * n - 5\n"}
{"java": "static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + n - 3 ; }", "python": "def nthTerm ( n ) :\n    return 2 * pow ( n , 2 ) + n - 3\n"}
{"java": "static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 3 * n - 5 ; }", "python": "def nthTerm ( n ) :\n    return 2 * pow ( n , 2 ) + 3 * n - 5\n"}
{"java": "static int nthTerm ( int n ) { return 7 * ( int ) Math . pow ( n , 2 ) - 7 * n + 7 ; }", "python": "def nthTerm ( n ) :\n    return 7 * pow ( n , 2 ) - 7 * n + 7\n"}
{"java": "static int nthTerm ( int n ) { return 4 * ( int ) Math . pow ( n , 2 ) - 7 * n + 3 ; }", "python": "def nthTerm ( n ) :\n    return 4 * pow ( n , 2 ) - 7 * n + 3\n"}
{"java": "static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) - n - 1 ; }", "python": "def nthTerm ( n ) :\n    return 2 * pow ( n , 2 ) - n - 1\n"}
{"java": "static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 3 ) + ( int ) Math . pow ( n , 2 ) ; }", "python": "def nthTerm ( n ) :\n    return 2 * pow ( n , 3 ) + pow ( n , 2 )\n"}
{"java": "static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) - 2 * n + 2 ; }", "python": "def nthTerm ( n ) :\n    return pow ( n , 2 ) - 2 * n + 2\n"}
{"java": "static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) - 4 * n + 2 ; }", "python": "def nthTerm ( n ) :\n    return 3 * pow ( n , 2 ) - 4 * n + 2\n"}
{"java": "static int nthTerm ( int n ) { return 4 * ( int ) Math . pow ( n , 2 ) - 3 * n + 2 ; }", "python": "def nthTerm ( n ) :\n    return 4 * pow ( n , 2 ) - 3 * n + 2\n"}
{"java": "static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) + n - 2 ; }", "python": "def nthTerm ( n ) :\n    return 3 * pow ( n , 2 ) + n - 2\n"}
{"java": "static String process ( String part ) { while ( part . length ( ) < 4 ) { part = '0' + part ; } return part ; }", "python": "def _ip_ ( ipv6 ) :\n    l = 7 - ( len ( ipv6 ) - len ( ipv6 . replace ( \" : \" , \" \" , ) ) )\n    ipv6 = ipv6 . replace ( \" : : \" , \" : \" * ( l + 2 ) )\n    list = ipv6 . split ( \" : \" , )\n    ip = [ \" \" , \" \" , \" \" , \" \" , \" \" , \" \" , \" \" , \" \" ]\n    for i in range ( 0 , 8 ) :\n        t = list [ i ]\n        while len ( t ) != 4 :\n            t = \"0\" + t\n        ip [ i ] = t\n    t = \" \"\n    for i in range ( 0 , 8 ) :\n        t += ip [ i ] + \" : \"\n    print ( t [ : len ( t ) - 1 : ] )\n"}
{"java": "static int maxNormalSubString ( char [ ] P , char [ ] Q , int K , int N ) { if ( K == 0 ) return 0 ; int count = 0 ; int left = 0 , right = 0 ; int ans = 0 ; while ( right < N ) { while ( right < N && count <= K ) { int pos = P [ right ] - ' a ' ; if ( Q [ pos ] == '0' ) { if ( count + 1 > K ) break ; else count ++ ; } right ++ ; if ( count <= K ) ans = Math . max ( ans , right - left ) ; } while ( left < right ) { int pos = P [ left ] - ' a ' ; left ++ ; if ( Q [ pos ] == '0' ) count -- ; if ( count < K ) break ; } } return ans ; }", "python": "def maxNormalSubstring ( P , Q , K , N ) :\n    if ( K == 0 ) :\n        return 0\n    count = 0\n    left , right = 0 , 0\n    ans = 0\n    while ( right < N ) :\n        while ( right < N and count <= K ) :\n            pos = ord ( P [ right ] ) - ord ( ' a ' )\n            if ( Q [ pos ] == '0' ) :\n                if ( count + 1 > K ) :\n                    break\n                else :\n                    count += 1\n            right += 1\n            if ( count <= K ) :\n                ans = max ( ans , right - left )\n        while ( left < right ) :\n            pos = ord ( P [ left ] ) - ord ( ' a ' )\n            left += 1\n            if ( Q [ pos ] == '0' ) :\n                count -= 1\n            if ( count < K ) :\n                break\n    return ans\n"}
{"java": "public static void go ( int root , int arr [ ] ) { if ( vis [ root ] ) { arr [ root ] = counter ; return ; } vis [ root ] = true ; counter ++ ; for ( int i = 0 ; i < graph [ root ] . size ( ) ; i ++ ) { int child = graph [ root ] . get ( i ) ; go ( child , arr ) ; arr [ child ] = counter ; } }", "python": "def get_ints ( ) : return map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) )\nt = int ( input ( ) )\nwhile t :\n    t -= 1\n    n , k = get_ints ( )\n    a = list ( map ( int , input ( ) . split ( ) ) )\n    cntodd = 0\n    for i in range ( 0 , len ( a ) ) :\n        if a [ i ] % 2 == 1 :\n            cntodd += 1\n    if k > cntodd :\n        print ( ' NO ' )\n    else :\n        if ( cntodd - k ) % 2 == 1 :\n            print ( ' NO ' )\n        else :\n            print ( ' YES ' )\n            inds = [ ]\n            ans = [ ]\n            for i in range ( 0 , len ( a ) ) :\n                if a [ i ] % 2 == 1 :\n                    inds . append ( int ( i ) )\n            for i in range ( cntodd - k , len ( inds ) - 1 ) :\n                print ( inds [ i ] + 1 , end = ' \u2581 ' )\n            print ( n )\n"}
{"java": "static int nthTerm ( int N ) { int nth = 0 ; if ( N % 2 == 1 ) nth = ( N * N ) + 1 ; else nth = ( N * N ) - 1 ; return nth ; }", "python": "def nthTerm ( N ) :\n    nth = 0 ;\n    if ( N % 2 == 1 ) :\n        nth = ( N * N ) + 1 ;\n    else :\n        nth = ( N * N ) - 1 ;\n    return nth ;\n"}
{"java": "public static int nthTerm ( int N ) { int nth = 0 ; nth = ( N * N * ( N + 1 ) ) / 2 ; return nth ; }", "python": "def nthTerm ( N ) :\n    nth = 0\n    nth = ( N * N * ( N + 1 ) ) // 2\n    return nth\n"}
{"java": "public static int [ ] getMin ( char [ ] [ ] grid , boolean forCol ) { int n = grid . length ; int m = grid [ 0 ] . length ; int [ ] ans ; if ( ! forCol ) { ans = new int [ n ] ; int i = 0 ; for ( char [ ] row : grid ) { int currAns = m ; for ( char c : row ) { if ( c == ' * ' ) -- currAns ; } ans [ i ] = currAns ; ++ i ; } } else { ans = new int [ m ] ; for ( int j = 0 ; j < m ; j ++ ) { int currAns = n ; for ( char [ ] chars : grid ) { if ( chars [ j ] == ' * ' ) -- currAns ; } ans [ j ] = currAns ; } } return ans ; }", "python": "def hi ( ) :\n    n = int ( input ( ) )\n    print ( s [ n - 1 ] )\n"}
{"java": "static void printRequiredMatrix ( int n ) { if ( n == 1 ) { System . out . println ( \"1\" ) ; } else if ( n % 2 != 0 ) { System . out . println ( \" - 1\" ) ; } else { for ( int i = 0 ; i < n ; i ++ ) { matrix [ i ] [ i ] = n ; } int u = n - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { matrix [ i ] [ u ] = i + 1 ; for ( int j = 1 ; j < n / 2 ; j ++ ) { int a = ( i + j ) % ( n - 1 ) ; int b = ( i - j + n - 1 ) % ( n - 1 ) ; if ( a < b ) { int temp = a ; a = b ; b = temp ; } matrix [ b ] [ a ] = i + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) matrix [ i ] [ j ] = matrix [ j ] [ i ] + n ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) System . out . print ( matrix [ i ] [ j ] + \" \u2581 \" ) ; System . out . println ( ) ; } } System . out . println ( ) ; }", "python": "def printRequiredMatrix ( n ) :\n    if ( n == 1 ) :\n        print ( \"1\" ) ;\n    elif ( n % 2 != 0 ) :\n        print ( \" - 1\" ) ;\n    else :\n        for i in range ( n ) :\n            matrix [ i ] [ i ] = n ;\n        u = n - 1 ;\n        for i in range ( n - 1 ) :\n            matrix [ i ] [ u ] = i + 1 ;\n            for j in range ( 1 , n // 2 ) :\n                a = ( i + j ) % ( n - 1 ) ;\n                b = ( i - j + n - 1 ) % ( n - 1 ) ;\n                if ( a < b ) :\n                    a , b = b , a\n                matrix [ b ] [ a ] = i + 1 ;\n        for i in range ( n ) :\n            for j in range ( i ) :\n                matrix [ i ] [ j ] = matrix [ j ] [ i ] + n ;\n        for i in range ( n ) :\n            for j in range ( n ) :\n                print ( matrix [ i ] [ j ] , end = \" \u2581 \" ) ;\n            print ( ) ;\n    print ( )\n"}
{"java": "static int maxSum ( int arr1 [ ] , int arr2 [ ] , int n ) { int initialParity = 0 , finalParity = 0 ; int sum = 0 , minPositive = Integer . MAX_VALUE , maxNegative = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { initialParity += arr2 [ i ] ; if ( arr1 [ i ] >= 0 ) { finalParity += 1 ; sum += arr1 [ i ] ; minPositive = Math . min ( minPositive , arr1 [ i ] ) ; } else { maxNegative = Math . max ( maxNegative , arr1 [ i ] ) ; } } if ( initialParity % 2 == finalParity % 2 ) { return sum ; } else { if ( minPositive + maxNegative >= 0 ) { return sum + maxNegative ; } else { return sum - minPositive ; } } }", "python": "def maxSum ( arr1 , arr2 , n ) :\n    initialParity , finalParity = 0 , 0\n    sum = 0\n    minPositive = sys . maxsize\n    maxNegative = - sys . maxsize - 1\n    for i in range ( n ) :\n        initialParity += arr2 [ i ] ;\n        if ( arr1 [ i ] >= 0 ) :\n            finalParity += 1\n            sum += arr1 [ i ]\n            minPositive = min ( minPositive , arr1 [ i ] )\n        else :\n            maxNegative = max ( maxNegative , arr1 [ i ] )\n    if ( initialParity % 2 == finalParity % 2 ) :\n        return sum\n    else :\n        if ( minPositive + maxNegative >= 0 ) :\n            return sum + maxNegative\n        else :\n            return sum - minPositive\n"}
{"java": "static boolean isPossible ( float x , float y , float z ) { float a = x * x + y * y + z * z ; if ( Math . ceil ( a ) == 1 && Math . floor ( a ) == 1 ) return true ; return false ; }", "python": "def isPossible ( x , y , z ) :\n    a = x * x + y * y + z * z\n    a = round ( a , 8 )\n    if ( ceil ( a ) == 1 & floor ( a ) == 1 ) :\n        return True\n    return False\n"}
{"java": "static void getElements ( int a , int arr [ ] , int n ) { int elements [ ] = new int [ n + 1 ] ; elements [ 0 ] = a ; for ( int i = 0 ; i < n ; i ++ ) { elements [ i + 1 ] = arr [ i ] ^ elements [ i ] ; } for ( int i = 0 ; i < n + 1 ; i ++ ) System . out . print ( elements [ i ] + \" \u2581 \" ) ; }", "python": "def getElements ( a , arr , n ) :\n    elements = [ 1 for i in range ( n + 1 ) ]\n    elements [ 0 ] = a\n    for i in range ( n ) :\n        elements [ i + 1 ] = arr [ i ] ^ elements [ i ]\n    for i in range ( n + 1 ) :\n        print ( elements [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; 1 << i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { int num = ( 1 << i ) + ( 1 << j ) ; if ( num <= n ) sum += num ; } } return sum ; }", "python": "def findSum ( n ) :\n    sum = 0\n    i = 1\n    while ( ( 1 << i ) < n ) :\n        for j in range ( 0 , i ) :\n            num = ( 1 << i ) + ( 1 << j )\n            if ( num <= n ) :\n                sum += num\n        i += 1\n    return sum\n"}
{"java": "static boolean isPrime ( int a [ ] , int lower , int upper ) { int n = 0 ; for ( int i = lower - 1 ; i <= upper - 1 ; i ++ ) n += a [ i ] ; if ( n <= 1 ) return false ; for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }", "python": "def isPrime ( a , lower , upper ) :\n    n = 0\n    for i in range ( lower - 1 , upper ) :\n        n = n + a [ i ]\n    if ( n <= 1 ) :\n        return False\n    for i in range ( 2 , n ) :\n        if ( n % i == 0 ) :\n            return False\n    return True\n"}
{"java": "static void solve ( int A , int B ) { int count = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { if ( ( ( A >> i ) & 1 ) != ( ( B >> i ) & 1 ) ) { count ++ ; } } System . out . println ( \" Number \u2581 of \u2581 different \u2581 bits \u2581 : \u2581 \" + count ) ; }", "python": "def solve ( A , B ) :\n    count = 0\n    for i in range ( 0 , 32 ) :\n        if ( ( ( A >> i ) & 1 ) != ( ( B >> i ) & 1 ) ) :\n            count = count + 1\n    print ( \" Number \u2581 of \u2581 different \u2581 bits \u2581 : \" , count )\n"}
{"java": "static void minAdjDifference ( int arr [ ] , int n ) { if ( n < 2 ) return ; int res = Math . abs ( arr [ 1 ] - arr [ 0 ] ) ; for ( int i = 2 ; i < n ; i ++ ) res = Math . min ( res , Math . abs ( arr [ i ] - arr [ i - 1 ] ) ) ; res = Math . min ( res , Math . abs ( arr [ n - 1 ] - arr [ 0 ] ) ) ; System . out . print ( \" Min \u2581 Difference \u2581 = \u2581 \" + res ) ; }", "python": "def minAdjDifference ( arr , n ) :\n    if ( n < 2 ) : return\n    res = abs ( arr [ 1 ] - arr [ 0 ] )\n    for i in range ( 2 , n ) :\n        res = min ( res , abs ( arr [ i ] - arr [ i - 1 ] ) )\n    res = min ( res , abs ( arr [ n - 1 ] - arr [ 0 ] ) )\n    print ( \" Min \u2581 Difference \u2581 = \u2581 \" , res )\n"}
{"java": "static int setBitNumber ( int n ) { if ( n == 0 ) return 0 ; int msb = 0 ; while ( n != 0 ) { n = n / 2 ; msb ++ ; } return ( 1 << msb ) ; }", "python": "def setBitNumber ( n ) :\n    if ( n == 0 ) :\n        return 0 ;\n    msb = 0 ;\n    while ( n > 0 ) :\n        n = int ( n / 2 ) ;\n        msb += 1 ;\n    return ( 1 << msb ) ;\n"}
{"java": "static int maxGCD ( int N , int P ) { int ans = 1 ; Map < Integer , Integer > prime_factors = new HashMap < Integer , Integer > ( ) ; for ( int i = 2 ; i * i <= P ; i ++ ) { while ( P % i == 0 ) { if ( prime_factors . get ( i ) == null ) prime_factors . put ( i , 1 ) ; else prime_factors . put ( i , ( prime_factors . get ( i ) + 1 ) ) ; P /= i ; } } if ( P != 1 ) if ( prime_factors . get ( P ) == null ) prime_factors . put ( P , 1 ) ; else prime_factors . put ( P , ( prime_factors . get ( P ) + 1 ) ) ; Set < Map . Entry < Integer , Integer > > st = prime_factors . entrySet ( ) ; for ( Map . Entry < Integer , Integer > me : st ) { ans *= Math . pow ( me . getKey ( ) , me . getValue ( ) / N ) ; } return ans ; }", "python": "def maxGCD ( N , P ) :\n    ans = 1\n    prime_factors = { }\n    for i in range ( 2 , int ( sqrt ( P ) + 1 ) ) :\n        while ( P % i == 0 ) :\n            if i not in prime_factors :\n                prime_factors [ i ] = 0\n            prime_factors [ i ] += 1\n            P //= i\n    if ( P != 1 ) :\n        prime_factors [ P ] += 1\n    for key , value in prime_factors . items ( ) :\n        ans *= pow ( key , value // N )\n    return ans\n"}
{"java": "static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j * j <= i ; ++ j ) { if ( i % j == 0 ) { if ( i / j == j ) sum += j ; else sum += j + i / j ; } } } return sum ; }", "python": "def divisorSum ( n ) :\n    sum = 0\n    for i in range ( 1 , n + 1 ) :\n        j = 1\n        while j * j <= i :\n            if i % j == 0 :\n                if i / j == j :\n                    sum += j\n                else :\n                    sum += j + i / j\n            j = j + 1\n    return int ( sum )\n"}
{"java": "static int number_of_ways ( int arr [ ] , int n , int k ) { if ( k == 1 ) return 1 ; int dp [ ] = new int [ k + 1 ] ; int i ; for ( i = 0 ; i < k + 1 ; i ++ ) dp [ i ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) dp [ arr [ i ] ] = 0 ; dp [ 0 ] = 1 ; dp [ 1 ] = ( dp [ 1 ] == - 1 ) ? 1 : dp [ 1 ] ; for ( i = 2 ; i <= k ; ++ i ) { if ( dp [ i ] == 0 ) continue ; dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ; dp [ i ] %= MOD ; } return dp [ k ] ; }", "python": "def number_of_ways ( arr , n , k ) :\n    if ( k == 1 ) :\n        return 1 ;\n    dp = [ - 1 ] * ( k + 1 ) ;\n    for i in range ( n ) :\n        dp [ arr [ i ] ] = 0 ;\n    dp [ 0 ] = 1 ;\n    dp [ 1 ] = 1 if ( dp [ 1 ] == - 1 ) else dp [ 1 ] ;\n    for i in range ( 2 , k + 1 ) :\n        if ( dp [ i ] == 0 ) :\n            continue ;\n        dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;\n        dp [ i ] %= MOD ;\n    return dp [ k ] ;\n"}
{"java": "static long kBitDifferencePairs ( int arr [ ] , int n , int k ) { int MAX = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; long [ ] count = new long [ MAX + 1 ] ; Arrays . fill ( count , 0 ) ; for ( int i = 0 ; i < n ; ++ i ) ++ count [ arr [ i ] ] ; long ans = 0 ; if ( k == 0 ) { for ( int i = 0 ; i <= MAX ; ++ i ) ans += ( count [ i ] * ( count [ i ] - 1 ) ) / 2 ; return ans ; } for ( int i = 0 ; i <= MAX ; ++ i ) { if ( count [ i ] == 0 ) continue ; for ( int j = i + 1 ; j <= MAX ; ++ j ) { if ( Integer . bitCount ( i ^ j ) == k ) ans += count [ i ] * count [ j ] ; } } return ans ; }", "python": "def kBitDifferencePairs ( arr , n , k ) :\n    MAX = max ( arr )\n    count = [ 0 for i in range ( MAX + 1 ) ]\n    for i in range ( n ) :\n        count [ arr [ i ] ] += 1\n    ans = 0\n    if ( k == 0 ) :\n        for i in range ( MAX + 1 ) :\n            ans += ( count [ i ] * ( count [ i ] - 1 ) ) // 2\n        return ans\n    for i in range ( MAX + 1 ) :\n        if ( count [ i ] == 0 ) :\n            continue\n        for j in range ( i + 1 , MAX + 1 ) :\n            if ( bin ( i ^ j ) . count ( '1' ) == k ) :\n                ans += count [ i ] * count [ j ]\n    return ans\n"}
{"java": "static void updateArray ( int arr [ ] , int n ) { for ( int i = n - 1 ; i > 0 ; i -- ) arr [ i ] = arr [ i - 1 ] ; arr [ 0 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def updateArray ( arr , n ) :\n    i = n - 1\n    while ( i > 0 ) :\n        arr [ i ] = arr [ i - 1 ]\n        i -= 1\n    arr [ 0 ] = - 1\n    for i in range ( 0 , n , 1 ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int getMinimumSum ( int arr [ ] , int n ) { int fMin = Integer . MAX_VALUE , sMin = Integer . MAX_VALUE , tMin = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < fMin ) { tMin = sMin ; sMin = fMin ; fMin = arr [ i ] ; } else if ( arr [ i ] < sMin ) { tMin = sMin ; sMin = arr [ i ] ; } else if ( arr [ i ] < tMin ) { tMin = arr [ i ] ; } } return ( fMin + sMin + tMin ) ; }", "python": "def getMinimumSum ( arr , n ) :\n    fMin = sys . maxsize ;\n    sMin = sys . maxsize ;\n    tMin = sys . maxsize ;\n    for i in range ( n ) :\n        if ( arr [ i ] < fMin ) :\n            tMin = sMin ;\n            sMin = fMin ;\n            fMin = arr [ i ] ;\n        elif ( arr [ i ] < sMin ) :\n            tMin = sMin ;\n            sMin = arr [ i ] ;\n        elif ( arr [ i ] < tMin ) :\n            tMin = arr [ i ] ;\n    return ( fMin + sMin + tMin ) ;\n"}
{"java": "static double circle_inscribed ( int a ) { return PI * ( a * a ) / 12 ; }", "python": "def circle_inscribed ( a ) :\n    return pi * ( a * a ) / 12\n"}
{"java": "public static long combination ( int n , int r ) { long numerator = ( long ) n * ( n - 1 ) ; long denominator = 2 ; return numerator / denominator ; }", "python": "def main ( ) :\n    n = int ( input ( ) ) ;\n    linhas = [ 0 for i in range ( n ) ] ;\n    colunas = [ 0 for i in range ( n ) ] ;\n    pares = 0 ;\n    for i in range ( n ) :\n        entrada = input ( ) ;\n        for j in range ( n ) :\n            if ( entrada [ j ] == ' C ' ) :\n                linhas [ i ] += 1 ;\n                colunas [ j ] += 1 ;\n    for i in range ( n ) :\n        pares += ( linhas [ i ] * ( linhas [ i ] - 1 ) ) / 2 ;\n        pares += ( colunas [ i ] * ( colunas [ i ] - 1 ) ) / 2 ;\n    print ( int ( pares ) ) ;\n"}
{"java": "public static void solve ( ) { int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; if ( a == b ) { System . out . println ( 0 ) ; } else { int reminder = Math . abs ( a - b ) , answer = 0 ; answer += reminder / 5 ; reminder = reminder % 5 ; answer += reminder / 2 ; reminder = reminder % 2 ; answer += reminder ; System . out . println ( answer ) ; } }", "python": "def _input ( ) : return map ( int , input ( ) . split ( ) )\ndef _list ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef solves ( ) :\n    n , m = _input ( )\n    ans = abs ( ( m - n ) ) // 5\n    k = abs ( ( m - n ) ) % 5\n    ans += k // 2\n    k = k % 2\n    ans += k\n    print ( ans )\n"}
{"java": "static long fifthPowerSum ( int n ) { return ( ( 2 * n * n * n * n * n * n ) + ( 6 * n * n * n * n * n ) + ( 5 * n * n * n * n ) - ( n * n ) ) / 12 ; }", "python": "def fifthPowerSum ( n ) :\n    return ( ( 2 * n * n * n * n * n * n ) + ( 6 * n * n * n * n * n ) + ( 5 * n * n * n * n ) - ( n * n ) ) // 12\n"}
{"java": "static boolean isValidNesbitt ( double a , double b , double c ) { double A = a / ( b + c ) ; double B = b / ( a + c ) ; double C = c / ( a + b ) ; double inequality = A + B + C ; return ( inequality >= 1.5 ) ; }", "python": "def isValidNesbitt ( a , b , c ) :\n    A = a / ( b + c ) ;\n    B = b / ( a + c ) ;\n    C = c / ( a + b ) ;\n    inequality = A + B + C ;\n    return ( inequality >= 1.5 ) ;\n"}
{"java": "static void ReplaceElements ( int arr [ ] , int n ) { int max_ele = arr [ 0 ] ; arr [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( max_ele > arr [ i ] ) arr [ i ] = max_ele ; else if ( max_ele <= arr [ i ] ) { int temp = arr [ i ] ; arr [ i ] = max_ele ; max_ele = temp ; } } }", "python": "def ReplaceElements ( arr , n ) :\n    max_ele = arr [ 0 ]\n    arr [ 0 ] = - 1\n    for i in range ( 1 , n ) :\n        if ( max_ele > arr [ i ] ) :\n            arr [ i ] = max_ele\n        elif ( max_ele <= arr [ i ] ) :\n            temp = arr [ i ]\n            arr [ i ] = max_ele\n            max_ele = temp\n"}
{"java": "static boolean isRectangle ( int a , int b , int c , int d ) { if ( a == b && a == c && a == d && c == d && b == c && b == d ) return true ; else if ( a == b && c == d ) return true ; else if ( a == d && c == b ) return true ; else if ( a == c && d == b ) return true ; else return false ; }", "python": "def isRectangle ( a , b , c , d ) :\n    if a == b == c == d :\n        return True\n    elif a == b and c == d :\n        return True\n    elif a == d and c == b :\n        return True\n    elif a == c and d == b :\n        return True\n    return False\n"}
{"java": "static boolean canBeEqual ( char [ ] a , char [ ] b , int n ) { Vector < Character > A = new Vector < > ( ) ; Vector < Character > B = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) { A . add ( a [ i ] ) ; B . add ( b [ i ] ) ; } } if ( A . size ( ) == B . size ( ) && B . size ( ) == 0 ) return true ; if ( A . size ( ) == B . size ( ) && B . size ( ) == 2 ) { if ( A . get ( 0 ) == A . get ( 1 ) && B . get ( 0 ) == B . get ( 1 ) ) return true ; } return false ; }", "python": "def canBeEqual ( a , b , n ) :\n    A = [ ]\n    B = [ ]\n    for i in range ( n ) :\n        if a [ i ] != b [ i ] :\n            A . append ( a [ i ] )\n            B . append ( b [ i ] )\n    if len ( A ) == len ( B ) == 0 :\n        return True\n    if len ( A ) == len ( B ) == 2 :\n        if A [ 0 ] == A [ 1 ] and B [ 0 ] == B [ 1 ] :\n            return True\n    return False\n"}
{"java": "static boolean findPattern ( int n ) { int prev = n % 2 ; n = n / 2 ; while ( n > 0 ) { int curr = n % 2 ; if ( curr == prev ) return false ; prev = curr ; n = n / 2 ; } return true ; }", "python": "def findPattern ( n ) :\n    prev = n % 2\n    n = n // 2\n    while ( n > 0 ) :\n        curr = n % 2\n        if ( curr == prev ) :\n            return False\n        prev = curr\n        n = n // 2\n    return True\n"}
{"java": "static void swapOperations ( char [ ] a , char [ ] b , char [ ] c ) { int l = a . length ; int i = 0 ; int total_swaps = 0 ; char temp ; for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] == b [ i ] ) continue ; if ( a [ i ] == c [ i ] ) { temp = b [ i ] ; b [ i ] = c [ i ] ; c [ i ] = temp ; total_swaps ++ ; continue ; } if ( b [ i ] == c [ i ] ) { temp = a [ i ] ; a [ i ] = c [ i ] ; c [ i ] = temp ; total_swaps ++ ; continue ; } break ; } if ( i == l ) System . out . println ( total_swaps ) ; else System . out . println ( - 1 ) ; }", "python": "def swapOperations ( a , b , c ) :\n    l = len ( a ) ;\n    i = 0 ;\n    total_swaps = 0 ;\n    for i in range ( l ) :\n        if ( a [ i ] == b [ i ] ) :\n            continue ;\n        if ( a [ i ] == c [ i ] ) :\n            b [ i ] , c [ i ] = c [ i ] , b [ i ] ;\n            total_swaps += 1 ;\n            continue ;\n        if ( b [ i ] == c [ i ] ) :\n            a [ i ] , c [ i ] = c [ i ] , a [ i ] ;\n            total_swaps += 1 ;\n            continue ;\n        break ;\n    i += 1 ;\n    if ( i == l ) :\n        print ( total_swaps ) ;\n    else :\n        print ( - 1 ) ;\n"}
{"java": "static int check ( int A [ ] , int B [ ] , int N ) { PriorityQueue < Integer > pq1 = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ; PriorityQueue < Integer > pq2 = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) { pq1 . add ( A [ i ] ) ; } for ( int i = 0 ; i < N ; i ++ ) { pq2 . add ( B [ i ] ) ; } int c = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( pq1 . peek ( ) . compareTo ( pq2 . peek ( ) ) == 1 ) { c ++ ; pq1 . poll ( ) ; pq2 . poll ( ) ; } else { if ( pq2 . size ( ) == 0 ) { break ; } pq2 . poll ( ) ; } } return ( c ) ; }", "python": "def check ( A , B , N ) :\n    pq1 = [ ]\n    pq2 = [ ]\n    for i in range ( N ) :\n        heapq . heappush ( pq1 , - A [ i ] )\n    for i in range ( N ) :\n        heapq . heappush ( pq2 , - B [ i ] )\n    c = 0\n    for i in range ( N ) :\n        if - pq1 [ 0 ] > - pq2 [ 0 ] :\n            c += 1\n            heapq . heappop ( pq1 )\n            heapq . heappop ( pq2 )\n        else :\n            if len ( pq2 ) == 0 :\n                break\n            heapq . heappop ( pq2 )\n    return ( c )\n"}
{"java": "static int findEqualPoint ( int arr [ ] , int n ) { int distArr [ ] = new int [ n ] ; int i = 0 , di = 0 ; while ( i < n ) { distArr [ di ++ ] = i ++ ; while ( i < n && arr [ i ] == arr [ i - 1 ] ) i ++ ; } return ( di & 1 ) != 0 ? distArr [ di >> 1 ] : - 1 ; }", "python": "def findEqualPoint ( arr , n ) :\n    distArr = [ 0 ] * n\n    i = 0\n    di = 0\n    while ( i < n ) :\n        distArr [ di ] = i\n        di += 1\n        i += 1\n        while ( i < n and arr [ i ] == arr [ i - 1 ] ) :\n            i += 1\n    return distArr [ di >> 1 ] if ( di & 1 ) else - 1\n"}
{"java": "public static int findMaximumPieces ( int n ) { int x = n / 2 ; return ( ( x + 1 ) * ( n - x + 1 ) ) ; }", "python": "def findMaximumPieces ( n ) :\n    x = n // 2\n    return ( ( x + 1 ) * ( n - x + 1 ) )\n"}
{"java": "static int countPiles ( int n , int [ ] a ) { HashMap < Integer , Integer > occ = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) occ . put ( a [ i ] , occ . get ( a [ i ] ) == null ? 1 : occ . get ( a [ i ] ) + 1 ) ; int pile = 0 ; while ( ! occ . isEmpty ( ) ) { pile ++ ; int size = 0 ; HashSet < Integer > toRemove = new HashSet < > ( ) ; for ( HashMap . Entry < Integer , Integer > tm : occ . entrySet ( ) ) { int mx = tm . getKey ( ) ; int ct = tm . getValue ( ) ; int use = Math . min ( ct , mx - size + 1 ) ; occ . put ( mx , occ . get ( mx ) - use ) ; size += use ; if ( occ . get ( mx ) == 0 ) toRemove . add ( mx ) ; } for ( int tm : toRemove ) occ . remove ( tm ) ; } return pile ; }", "python": "def countPiles ( n , a ) :\n    occ = dict ( )\n    for i in a :\n        if i in occ . keys ( ) :\n            occ [ i ] += 1\n        else :\n            occ [ i ] = 1\n    pile = 0\n    while ( len ( occ ) > 0 ) :\n        pile += 1\n        size = 0\n        toRemove = dict ( )\n        for tm in occ :\n            mx = tm\n            ct = occ [ tm ]\n            use = min ( ct , mx - size + 1 )\n            occ [ mx ] -= use\n            size += use\n            if ( occ [ mx ] == 0 ) :\n                toRemove [ mx ] = 1\n        for tm in toRemove :\n            del occ [ tm ]\n    return pile\n"}
{"java": "static void sum ( int mat [ ] [ ] , int r , int c ) { int i , j ; int upper_sum = 0 ; int lower_sum = 0 ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < c ; j ++ ) { if ( i <= j ) { upper_sum += mat [ i ] [ j ] ; } } System . out . println ( \" Upper \u2581 sum \u2581 is \u2581 \" + upper_sum ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < c ; j ++ ) { if ( j <= i ) { lower_sum += mat [ i ] [ j ] ; } } System . out . print ( \" Lower \u2581 sum \u2581 is \u2581 \" + lower_sum ) ; }", "python": "def Sum ( mat , r , c ) :\n    i , j = 0 , 0 ;\n    upper_sum = 0 ;\n    lower_sum = 0 ;\n    for i in range ( r ) :\n        for j in range ( c ) :\n            if ( i <= j ) :\n                upper_sum += mat [ i ] [ j ] ;\n    print ( \" Upper \u2581 sum \u2581 is \u2581 \" , upper_sum ) ;\n    for i in range ( r ) :\n        for j in range ( c ) :\n            if ( j <= i ) :\n                lower_sum += mat [ i ] [ j ] ;\n    print ( \" Lower \u2581 sum \u2581 is \u2581 \" , lower_sum ) ;\n"}
{"java": "static int bitwiseAndOdd ( int n ) { int result = 1 ; for ( int i = 3 ; i <= n ; i = i + 2 ) { result = ( result & i ) ; } return result ; }", "python": "def bitwiseAndOdd ( n ) :\n    result = 1 ;\n    for i in range ( 3 , n + 1 , 2 ) :\n        result = ( result & i ) ;\n    return result ;\n"}
{"java": "static int maxval ( int [ ] a , int n ) { if ( n < 2 ) { System . out . print ( \" Invalid \u2581 Input \" ) ; return - 9999 ; } int max1 = 0 , max2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] + i ; if ( x > max1 ) { max2 = max1 ; max1 = x ; } else if ( x > max2 & x != max1 ) { max2 = x ; } } return ( max1 * max2 ) ; }", "python": "def maxval ( a , n ) :\n    if ( n < 2 ) :\n        print ( \" Invalid \u2581 Input \" )\n        return - 9999\n    ( max1 , max2 ) = ( 0 , 0 )\n    for i in range ( n ) :\n        x = a [ i ] + i\n        if ( x > max1 ) :\n            max2 = max1\n            max1 = x\n        elif ( x > max2 and x != max1 ) :\n            max2 = x\n    return ( max1 * max2 )\n"}
{"java": "static long difference ( long M , long N ) { return M + N ; }", "python": "def difference ( M , N ) :\n    return M + N\n"}
{"java": "static int sumofseries ( int n ) { return ( n * ( n + 1 ) * ( n + 2 ) * ( n + 3 ) / 4 ) ; }", "python": "def sumofseries ( n ) :\n    return int ( n * ( n + 1 ) * ( n + 2 ) * ( n + 3 ) / 4 )\n"}
{"java": "static long maxProd ( int arr [ ] , int n , int k ) { long product = 1 ; HashMap < Integer , Integer > s = new HashMap < Integer , Integer > ( ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . containsKey ( arr [ i ] ) == false ) { product = product * arr [ i ] ; s . put ( arr [ i ] , 1 ) ; } else s . put ( arr [ i ] , s . get ( arr [ i ] ) + 1 ) ; } for ( int j = n - 1 ; j >= 0 && k > 0 ; j -- ) { if ( ( k > ( s . get ( arr [ j ] ) - 1 ) ) && ( ( s . get ( arr [ j ] ) - 1 ) > 0 ) ) { product *= Math . pow ( arr [ j ] , s . get ( arr [ j ] ) - 1 ) ; k = k - s . get ( arr [ j ] ) + 1 ; s . put ( arr [ j ] , 0 ) ; } if ( k <= ( s . get ( arr [ j ] ) - 1 ) && ( ( s . get ( arr [ j ] ) - 1 ) > 0 ) ) { product *= Math . pow ( arr [ j ] , k ) ; break ; } } return product ; }", "python": "def maxProd ( arr , n , k ) :\n    product = 1 ;\n    s = dict . fromkeys ( arr , 0 ) ;\n    arr . sort ( ) ;\n    for i in range ( n ) :\n        if ( s [ arr [ i ] ] == 0 ) :\n            product = product * arr [ i ] ;\n        s [ arr [ i ] ] = s [ arr [ i ] ] + 1 ;\n    j = n - 1 ;\n    while ( j >= 0 and k > 0 ) :\n        if ( ( k > ( s [ arr [ j ] ] - 1 ) ) and ( ( s [ arr [ j ] ] - 1 ) > 0 ) ) :\n            product *= pow ( arr [ j ] , s [ arr [ j ] ] - 1 ) ;\n            k = k - s [ arr [ j ] ] + 1 ;\n            s [ arr [ j ] ] = 0 ;\n        if ( k <= ( s [ arr [ j ] ] - 1 ) and ( ( s [ arr [ j ] ] - 1 ) > 0 ) ) :\n            product *= pow ( arr [ j ] , k ) ;\n            break ;\n        j -= 1\n    return product ;\n"}
{"java": "static int countNum ( int N , int arr [ ] ) { int sum = 0 , count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( ( sum - arr [ i ] ) % arr [ i ] == 0 ) { count ++ ; } } return count ; }", "python": "def countNum ( N , arr ) :\n    Sum , count = 0 , 0\n    for i in range ( N ) :\n        Sum += arr [ i ]\n    for i in range ( N ) :\n        if ( ( Sum - arr [ i ] ) % arr [ i ] == 0 ) :\n            count += 1\n    return count\n"}
{"java": "static int smallestIndexsum ( int arr [ ] , int n ) { int i = n - 1 ; while ( i >= 0 && arr [ i ] % 2 == 1 ) i -- ; int sum = 0 ; for ( int j = 0 ; j <= i ; j ++ ) sum += arr [ j ] ; return sum ; }", "python": "def smallestIndexsum ( arr , n ) :\n    i = n - 1 ;\n    while ( i >= 0 and arr [ i ] % 2 == 1 ) :\n        i -= 1 ;\n    sum = 0 ;\n    for j in range ( 0 , i + 1 ) :\n        sum += arr [ j ] ;\n    return sum ;\n"}
{"java": "static int getPairs ( int a [ ] ) { int n = a . length ; int count = ( n * ( n - 1 ) ) / 2 ; return count ; }", "python": "def getPairs ( a ) :\n    n = len ( a )\n    count = ( n * ( n - 1 ) ) // 2\n    return count\n"}
{"java": "static int countWays ( int [ ] arr , int n ) { int max_val = 0 ; for ( int i = 0 ; i < n ; i ++ ) max_val = Math . max ( max_val , arr [ i ] ) ; int [ ] freq = new int [ max_val + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; int ans = 0 ; ans += freq [ 0 ] * ( freq [ 0 ] - 1 ) * ( freq [ 0 ] - 2 ) / 6 ; for ( int i = 1 ; i <= max_val ; i ++ ) ans += freq [ 0 ] * freq [ i ] * ( freq [ i ] - 1 ) / 2 ; for ( int i = 1 ; 2 * i <= max_val ; i ++ ) ans += freq [ i ] * ( freq [ i ] - 1 ) / 2 * freq [ 2 * i ] ; for ( int i = 1 ; i <= max_val ; i ++ ) { for ( int j = i + 1 ; i + j <= max_val ; j ++ ) ans += freq [ i ] * freq [ j ] * freq [ i + j ] ; } return ans ; }", "python": "def countWays ( arr , n ) :\n    max_val = 0\n    for i in range ( n ) :\n        max_val = max ( max_val , arr [ i ] )\n    freq = [ 0 for i in range ( max_val + 1 ) ]\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    ans = 0\n    ans += ( freq [ 0 ] * ( freq [ 0 ] - 1 ) * ( freq [ 0 ] - 2 ) // 6 )\n    for i in range ( 1 , max_val + 1 ) :\n        ans += ( freq [ 0 ] * freq [ i ] * ( freq [ i ] - 1 ) // 2 )\n    for i in range ( 1 , ( max_val + 1 ) // 2 ) :\n        ans += ( freq [ i ] * ( freq [ i ] - 1 ) // 2 * freq [ 2 * i ] )\n    for i in range ( 1 , max_val + 1 ) :\n        for j in range ( i + 1 , max_val - i + 1 ) :\n            ans += freq [ i ] * freq [ j ] * freq [ i + j ]\n    return ans\n"}
{"java": "static int bridge_length ( int trainLength , int Speed , int Time ) { return ( ( Time * Speed ) - trainLength ) ; }", "python": "def bridge_length ( trainLength , Speed , Time ) :\n    return ( ( Time * Speed ) - trainLength )\n"}
{"java": "static int findStarNum ( int n ) { return ( 6 * n * ( n - 1 ) + 1 ) ; }", "python": "def findStarNum ( n ) :\n    return ( 6 * n * ( n - 1 ) + 1 )\n"}
{"java": "static int solve ( int A [ ] , int B [ ] , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( Integer . bitCount ( A [ i ] & A [ j ] ) == B [ j ] ) { cnt ++ ; } } } return cnt ; }", "python": "def solve ( A , B , n ) :\n    cnt = 0 ;\n    for i in range ( n ) :\n        for j in range ( i , n ) :\n            c = A [ i ] & A [ j ]\n            if ( bin ( c ) . count ( '1' ) == B [ j ] ) :\n                cnt += 1 ;\n    return cnt ;\n"}
{"java": "static int solve ( int A [ ] , int B [ ] , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) if ( Integer . bitCount ( A [ i ] | A [ j ] ) == B [ j ] ) { cnt ++ ; } return cnt ; }", "python": "def solve ( A , B , n ) :\n    cnt = 0 ;\n    for i in range ( n ) :\n        for j in range ( i , n ) :\n            if ( bin ( A [ i ] | A [ j ] ) . count ( '1' ) == B [ j ] ) :\n                cnt += 1 ;\n    return cnt\n"}
{"java": "static long subarrayXor ( int arr [ ] , int n , int m ) { long ans = 0 ; int [ ] xorArr = new int [ n ] ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; xorArr [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) xorArr [ i ] = xorArr [ i - 1 ] ^ arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = m ^ xorArr [ i ] ; ans = ans + ( mp . containsKey ( tmp ) == false ? 0 : ( ( long ) mp . get ( tmp ) ) ) ; if ( xorArr [ i ] == m ) ans ++ ; if ( mp . containsKey ( xorArr [ i ] ) ) mp . put ( xorArr [ i ] , mp . get ( xorArr [ i ] ) + 1 ) ; else mp . put ( xorArr [ i ] , 1 ) ; } return ans ; }", "python": "def subarrayXor ( arr , n , m ) :\n    ans = 0\n    xorArr = [ 0 for _ in range ( n ) ]\n    mp = dict ( )\n    xorArr [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        xorArr [ i ] = xorArr [ i - 1 ] ^ arr [ i ]\n    for i in range ( n ) :\n        tmp = m ^ xorArr [ i ]\n        if tmp in mp . keys ( ) :\n            ans = ans + ( mp [ tmp ] )\n        if ( xorArr [ i ] == m ) :\n            ans += 1\n        mp [ xorArr [ i ] ] = mp . get ( xorArr [ i ] , 0 ) + 1\n    return ans\n"}
{"java": "static int countSubStr ( String str , int len ) { int ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == '0' ) ans += ( i + 1 ) ; } return ans ; }", "python": "def countSubStr ( strr , lenn ) :\n    ans = 0\n    for i in range ( lenn ) :\n        if ( strr [ i ] == '0' ) :\n            ans += ( i + 1 )\n    return ans\n"}
{"java": "static long solve ( ) { long M = sc . nextLong ( ) ; int rd = sc . nextInt ( ) ; int rr = sc . nextInt ( ) ; long cd = sc . nextLong ( ) ; long cr = sc . nextLong ( ) ; long minD = ( cd * 100 + rd - 1 ) / rd ; long minR = ( cr * 100 + rr - 1 ) / rr ; if ( M < minD + minR ) return - 1 ; long ans = 0 ; for ( int i = 0 ; i < 100 ; ++ i ) { long yd = minD + i ; long md = yd * rd / 100 ; for ( int j = 0 ; j < 100 ; ++ j ) { long yr = minR + j ; if ( M < yd + yr ) break ; long mc = yr * rr / 100 ; long rem = M - yd - yr ; rem += ( md - cd ) * 100 / rd ; rem += ( mc - cr ) * 100 / rr ; ans = Math . max ( ans , rem ) ; } } return ans ; }", "python": "def f ( a , b , c ) :\n    return a * b < 100 * c\n"}
{"java": "static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int R = sc . nextInt ( ) , G = sc . nextInt ( ) ; System . out . println ( ( 2 * G ) - R ) ; sc . close ( ) ; }", "python": "def ABC_76_A ( ) :\n    R = int ( input ( ) )\n    G = int ( input ( ) )\n    print ( 2 * G - R )\n"}
{"java": "static void solve ( ) { Scanner sc = new Scanner ( System . in ) ; System . out . println ( ( sc . nextInt ( ) - 1 ) * ( sc . nextInt ( ) - 1 ) ) ; sc . close ( ) ; }", "python": "def main ( ) :\n    line = stdin . readline ( )\n    parts = line . split ( )\n    a = int ( parts [ 0 ] )\n    b = int ( parts [ 1 ] )\n    stdout . write ( str ( ( a - 1 ) * ( b - 1 ) ) )\n"}
{"java": "static int longestSubarray ( int a [ ] , int n ) { int hash [ ] [ ] = new int [ n ] [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; while ( num != 0 ) { hash [ i ] [ num % 10 ] = 1 ; num /= 10 ; } } int longest = Integer . MIN_VALUE ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int j ; for ( j = 0 ; j < 10 ; j ++ ) { if ( hash [ i ] [ j ] == 1 & hash [ i + 1 ] [ j ] == 1 ) { count ++ ; break ; } } if ( j == 10 ) { longest = Math . max ( longest , count + 1 ) ; count = 0 ; } } longest = Math . max ( longest , count + 1 ) ; return longest ; }", "python": "def longestSubarray ( a , n ) :\n    hash = [ [ 0 for i in range ( 10 ) ] for j in range ( n ) ]\n    for i in range ( n ) :\n        num = a [ i ]\n        while ( num ) :\n            hash [ i ] [ num % 10 ] = 1\n            num = int ( num / 10 )\n    longest = - sys . maxsize - 1\n    count = 0\n    for i in range ( n - 1 ) :\n        for j in range ( 10 ) :\n            if ( hash [ i ] [ j ] and hash [ i + 1 ] [ j ] ) :\n                count += 1\n                break\n        if ( j == 10 ) :\n            longest = max ( longest , count + 1 )\n            count = 0\n    longest = max ( longest , count + 1 )\n    return longest\n"}
{"java": "static boolean doesContainB ( int a , int b , int c ) { if ( a == b ) { return true ; } if ( ( b - a ) * c > 0 && ( b - a ) % c == 0 ) { return true ; } return false ; }", "python": "def doesContainB ( a , b , c ) :\n    if ( a == b ) :\n        return True\n    if ( ( b - a ) * c > 0 and ( b - a ) % c == 0 ) :\n        return True\n    return False\n"}
{"java": "public static int stopping_station ( int p , int n ) { int num = 1 , dem = 1 , s = p ; while ( p != 1 ) { dem *= p ; p -- ; } int t = n - s + 1 ; while ( t != ( n - 2 * s + 1 ) ) { num *= t ; t -- ; } if ( ( n - s + 1 ) >= s ) System . out . print ( num / dem ) ; else System . out . print ( \" not \u2581 possible \" ) ; return 0 ; }", "python": "def stopping_station ( p , n ) :\n    num = 1\n    dem = 1\n    s = p\n    while p != 1 :\n        dem *= p\n        p -= 1\n    t = n - s + 1\n    while t != ( n - 2 * s + 1 ) :\n        num *= t\n        t -= 1\n    if ( n - s + 1 ) >= s :\n        return int ( num / dem )\n    else :\n        return - 1\n"}
{"java": "static String minInt ( String str ) { String s = \" \" ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) >= '5' ) { s += ( char ) ( ( '9' - str . charAt ( i ) ) + '0' ) ; } else { s += str . charAt ( i ) ; } } if ( str . charAt ( 0 ) == '0' ) s += '9' ; return s ; }", "python": "def minInt ( str1 ) :\n    for i in range ( len ( str1 ) ) :\n        if ( str1 [ i ] >= 5 ) :\n            str1 [ i ] = ( 9 - str1 [ i ] )\n    if ( str1 [ 0 ] == 0 ) :\n        str1 [ 0 ] = 9\n    temp = \" \"\n    for i in str1 :\n        temp += str ( i )\n    return temp\n"}
{"java": "static boolean isPerfectSquare ( int [ ] arr , int n ) { HashMap < Integer , Integer > umap = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( umap . containsKey ( arr [ i ] ) ) umap . put ( arr [ i ] , umap . get ( arr [ i ] ) + 1 ) ; else umap . put ( arr [ i ] , 1 ) ; } Iterator < Map . Entry < Integer , Integer > > iterator = umap . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < Integer , Integer > entry = iterator . next ( ) ; if ( entry . getValue ( ) % 2 == 1 ) return false ; } return true ; }", "python": "def isPerfectSquare ( arr , n ) :\n    umap = dict . fromkeys ( arr , n ) ;\n    for key in arr :\n        umap [ key ] += 1 ;\n    for key in arr :\n        if ( umap [ key ] % 2 == 1 ) :\n            return False ;\n    return True ;\n"}
{"java": "static boolean isPower ( int n ) { for ( int x = 2 ; x <= Math . sqrt ( n ) ; x ++ ) { int p = x ; while ( p <= n ) { p = p * x ; if ( p == n ) return true ; } } return false ; }", "python": "def isPower ( n ) :\n    if ( n <= 1 ) :\n        return True\n    for x in range ( 2 , ( int ) ( math . sqrt ( n ) ) + 1 ) :\n        p = x\n        while ( p <= n ) :\n            p = p * x\n            if ( p == n ) :\n                return True\n    return False\n"}
{"java": "static boolean isPower ( int n ) { for ( int x = 2 ; x <= Math . sqrt ( n ) ; x ++ ) { int y = 2 ; double p = Math . pow ( x , y ) ; while ( p <= n && p > 0 ) { if ( p == n ) return true ; y ++ ; p = Math . pow ( x , y ) ; } } return false ; }", "python": "def isPower ( n ) :\n    if ( n == 1 ) :\n        return True\n    for x in range ( 2 , ( int ) ( math . sqrt ( n ) ) + 1 ) :\n        y = 2\n        p = ( int ) ( math . pow ( x , y ) )\n        while ( p <= n and p > 0 ) :\n            if ( p == n ) :\n                return True\n            y = y + 1\n            p = math . pow ( x , y )\n    return False\n"}
{"java": "static int minimalLength ( int a [ ] , int n ) { int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; int [ ] dp1 = new int [ n ] ; int i , j , k ; for ( i = 0 ; i < n + 1 ; i ++ ) { for ( j = 0 ; j < n + 1 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } for ( int size = 1 ; size <= n ; size ++ ) { for ( i = 0 ; i < n - size + 1 ; i ++ ) { j = i + size - 1 ; if ( i == j ) dp [ i ] [ j ] = a [ i ] ; else { for ( k = i ; k < j ; k ++ ) { if ( dp [ i ] [ k ] != - 1 && dp [ i ] [ k ] == dp [ k + 1 ] [ j ] ) dp [ i ] [ j ] = dp [ i ] [ k ] + 1 ; } } } } for ( i = 0 ; i < n ; i ++ ) dp1 [ i ] = ( int ) 1e7 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( dp [ j ] [ i ] != - 1 ) { if ( j == 0 ) dp1 [ i ] = 1 ; else dp1 [ i ] = Math . min ( dp1 [ i ] , dp1 [ j - 1 ] + 1 ) ; } } } return dp1 [ n - 1 ] ; }", "python": "def minimalLength ( a , n ) :\n    dp = np . ones ( ( n + 1 , n + 1 ) ) * - 1 ;\n    dp1 = [ 0 ] * n ;\n    for size in range ( 1 , n + 1 ) :\n        for i in range ( n - size + 1 ) :\n            j = i + size - 1 ;\n            if ( i == j ) :\n                dp [ i ] [ j ] = a [ i ] ;\n            else :\n                for k in range ( i , j ) :\n                    if ( dp [ i ] [ k ] != - 1 and dp [ i ] [ k ] == dp [ k + 1 ] [ j ] ) :\n                        dp [ i ] [ j ] = dp [ i ] [ k ] + 1 ;\n    for i in range ( n ) :\n        dp1 [ i ] = int ( 1e7 ) ;\n    for i in range ( n ) :\n        for j in range ( i + 1 ) :\n            if ( dp [ j ] [ i ] != - 1 ) :\n                if ( j == 0 ) :\n                    dp1 [ i ] = 1 ;\n                else :\n                    dp1 [ i ] = min ( dp1 [ i ] , dp1 [ j - 1 ] + 1 ) ;\n    return dp1 [ n - 1 ] ;\n"}
{"java": "static float rectanglearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; return 2 * a * b ; }", "python": "def rectanglearea ( a , b ) :\n    if a < 0 or b < 0 :\n        return - 1\n    return 2 * a * b\n"}
{"java": "static float trianglearea ( float r ) { if ( r < 0 ) return - 1 ; return r * r ; }", "python": "def trianglearea ( r ) :\n    if r < 0 :\n        return - 1\n    return r * r\n"}
{"java": "static int longestSubarray ( int a [ ] , int n , int x ) { int count = 0 ; int length = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) { count += 1 ; } else { length = Math . max ( length , count ) ; count = 0 ; } } if ( count > 0 ) length = Math . max ( length , count ) ; return length ; }", "python": "def longestSubarray ( a , n , x ) :\n    count = 0\n    length = 0\n    for i in range ( n ) :\n        if ( a [ i ] > x ) :\n            count += 1\n        else :\n            length = max ( length , count )\n            count = 0\n    if ( count > 0 ) :\n        length = max ( length , count )\n    return length\n"}
{"java": "static int dayOfYear ( String date ) { int year = Integer . parseInt ( date . substring ( 0 , 4 ) ) ; int month = Integer . parseInt ( date . substring ( 5 , 7 ) ) ; int day = Integer . parseInt ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( -- month > 0 ) { day = day + days [ month - 1 ] ; } return day ; }", "python": "def dayOfYear ( date ) :\n    year = ( int ) ( date [ 0 : 4 ] ) ;\n    month = ( int ) ( date [ 5 : 7 ] ) ;\n    day = ( int ) ( date [ 8 : ] ) ;\n    if ( month > 2 and year % 4 == 0 and ( year % 100 != 0 or year % 400 == 0 ) ) :\n        day += 1 ;\n    month -= 1 ;\n    while ( month > 0 ) :\n        day = day + days [ month - 1 ] ;\n        month -= 1 ;\n    return day ;\n"}
{"java": "static void findAllTriplets ( int arr [ ] , int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { for ( int j = i - 1 , k = i + 1 ; j >= 0 && k < n ; ) { if ( arr [ j ] + arr [ k ] == 2 * arr [ i ] ) { System . out . println ( arr [ j ] + \" \u2581 \" + arr [ i ] + \" \u2581 \" + arr [ k ] ) ; k ++ ; j -- ; } else if ( arr [ j ] + arr [ k ] < 2 * arr [ i ] ) k ++ ; else j -- ; } } }", "python": "def printAllAPTriplets ( arr , n ) :\n    for i in range ( 1 , n - 1 ) :\n        j = i - 1\n        k = i + 1\n        while ( j >= 0 and k < n ) :\n            if ( arr [ j ] + arr [ k ] == 2 * arr [ i ] ) :\n                print ( arr [ j ] , \" \" , arr [ i ] , \" \" , arr [ k ] )\n                k += 1\n                j -= 1\n            elif ( arr [ j ] + arr [ k ] < 2 * arr [ i ] ) :\n                k += 1\n            else :\n                j -= 1\n"}
{"java": "static void factors ( int n , int i ) { if ( i <= n ) { if ( n % i == 0 ) { System . out . print ( i + \" \u2581 \" ) ; } factors ( n , i + 1 ) ; } }", "python": "def factors ( n , i ) :\n    if ( i <= n ) :\n        if ( n % i == 0 ) :\n            print ( i , end = \" \u2581 \" ) ;\n        factors ( n , i + 1 ) ;\n"}
{"java": "static int countPairsWithProductK ( int arr [ ] , int n , int k ) { int count = 0 ; int i ; boolean hashmap [ ] = new boolean [ MAX ] ; for ( i = 0 ; i < n ; i ++ ) hashmap [ arr [ i ] ] = true ; for ( i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; double index = 1.0 * k / arr [ i ] ; if ( index >= 0 && ( ( index - ( int ) ( index ) ) == 0 ) && hashmap [ k / x ] ) count ++ ; hashmap [ x ] = false ; } return count ; }", "python": "def countPairsWithProductK ( arr , n , k ) :\n    count = 0 ;\n    hashmap = [ False ] * MAX ;\n    for i in range ( n ) :\n        hashmap [ arr [ i ] ] = True ;\n    for i in range ( n ) :\n        x = arr [ i ] ;\n        index = 1.0 * k / arr [ i ] ;\n        if ( index >= 0 and ( ( index - int ( index ) ) == 0 ) and hashmap [ k // x ] ) :\n            count += 1 ;\n        hashmap [ x ] = False ;\n    return count ;\n"}
{"java": "static void printPattern ( char [ ] s , int n ) { System . out . println ( s ) ; int i = 0 , j = n - 1 ; while ( i < j ) { char c = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = c ; i ++ ; j -- ; } i = 0 ; j = n - 1 ; while ( j - i > 1 ) { s [ i ] = s [ j ] = ' * ' ; System . out . println ( s ) ; i ++ ; j -- ; } }", "python": "def printPattern ( s , n ) :\n    print ( ' ' . join ( s ) )\n    i , j = 0 , n - 1\n    while i < j :\n        s [ i ] , s [ j ] = s [ j ] , s [ i ]\n        i += 1\n        j -= 1\n    i , j = 0 , n - 1\n    while j - i > 1 :\n        s [ i ] , s [ j ] = ' * ' , ' * '\n        print ( ' ' . join ( s ) )\n        i += 1\n        j -= 1\n"}
{"java": "public static int sumOfPairs ( int n ) { ArrayList < Integer > v = new ArrayList < Integer > ( ) ; int sum = 0 ; while ( n > 0 ) { v . add ( n % 2 ) ; n = n / 2 ; } Collections . reverse ( v ) ; for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ ) { for ( int j = i + 1 ; j < v . size ( ) ; j ++ ) { if ( v . get ( i ) == 0 && v . get ( j ) == 1 ) sum += 1 ; if ( v . get ( i ) == 1 && v . get ( j ) == 1 ) sum += 3 ; if ( v . get ( i ) == 1 && v . get ( j ) == 0 ) sum += 2 ; } } return sum ; }", "python": "def sumofPairs ( n ) :\n    v = [ ]\n    sum = 0\n    while n > 0 :\n        v . append ( n % 2 )\n        n = n // 2\n    v . reverse ( )\n    for i in range ( len ( v ) - 1 ) :\n        for j in range ( i + 1 , len ( v ) ) :\n            if v [ i ] == 0 and v [ j ] == 1 :\n                sum += 1\n            if v [ i ] == 1 and v [ j ] == 1 :\n                sum += 3\n            if v [ i ] == 1 and v [ j ] == 0 :\n                sum += 2\n    return sum\n"}
{"java": "static float kPresentProbability ( int a [ ] , int n , int k ) { float count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == k ) count ++ ; return count / n ; }", "python": "def kPresentProbability ( a , n , k ) :\n    count = a . count ( k )\n    return round ( count / n , 2 )\n"}
{"java": "static boolean divisibleBy36 ( String num ) { int l = num . length ( ) ; if ( l == 0 ) return false ; if ( l == 1 && num . charAt ( 0 ) != '0' ) return false ; int two_digit_num = ( num . charAt ( l - 2 ) - '0' ) * 10 + ( num . charAt ( l - 1 ) - '0' ) ; if ( two_digit_num % 4 != 0 ) return false ; int sum = 0 ; for ( int i = 0 ; i < l ; i ++ ) sum += ( num . charAt ( i ) - '0' ) ; if ( sum % 9 != 0 ) return false ; return true ; }", "python": "def divisibleBy36 ( num ) :\n    l = len ( num )\n    if ( l == 0 ) :\n        return ( \" No \" )\n    if ( l == 1 and num [ 0 ] != '0' ) :\n        return ( \" No \" )\n    two_digit_num = ( ( ( int ) ( num [ l - 2 ] ) ) * 10 + ( int ) ( num [ l - 1 ] ) )\n    if ( two_digit_num % 4 != 0 ) :\n        return \" No \"\n    sm = 0\n    for i in range ( 0 , l ) :\n        sm = sm + ( int ) ( num [ i ] )\n    if ( sm % 9 != 0 ) :\n        return ( \" No \" )\n    return ( \" Yes \" )\n"}
{"java": "static int getPosition ( int a [ ] , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = ( a [ i ] / m + ( a [ i ] % m ) ) ; } int ans = - 1 , max = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( max < a [ i ] ) { max = a [ i ] ; ans = i ; } } return ans + 1 ; }", "python": "def getPosition ( a , n , m ) :\n    for i in range ( n ) :\n        a [ i ] = ( a [ i ] // m + ( a [ i ] % m != 0 ) )\n    ans , maxx = - 1 , - 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( maxx < a [ i ] ) :\n            maxx = a [ i ]\n            ans = i\n    return ans + 1\n"}
{"java": "static int evenSum ( int n ) { return ( n * ( n + 1 ) ) ; }", "python": "def evensum ( n ) :\n    return n * ( n + 1 )\n"}
{"java": "static boolean check ( String s , int l ) { Vector < Integer > pos = new Vector < Integer > ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) == '1' ) pos . add ( i ) ; } int t = pos . size ( ) ; for ( int i = 1 ; i < t ; i ++ ) { if ( ( pos . get ( i ) - pos . get ( i - 1 ) ) != ( pos . get ( 1 ) - pos . get ( 0 ) ) ) return false ; } return true ; }", "python": "def check ( s , l ) :\n    pos = [ ]\n    for i in range ( l ) :\n        if ( s [ i ] == '1' ) :\n            pos . append ( i )\n    t = len ( pos )\n    for i in range ( 1 , t ) :\n        if ( ( pos [ i ] - pos [ i - 1 ] ) != ( pos [ 1 ] - pos [ 0 ] ) ) :\n            return False\n    return True\n"}
{"java": "static int sumOddOccurring ( int arr [ ] [ ] ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( mp . containsKey ( arr [ i ] [ j ] ) ) { mp . put ( arr [ i ] [ j ] , mp . get ( arr [ i ] [ j ] ) + 1 ) ; } else { mp . put ( arr [ i ] [ j ] , 1 ) ; } } } int sum = 0 ; for ( Map . Entry < Integer , Integer > itr : mp . entrySet ( ) ) { if ( itr . getValue ( ) % 2 != 0 ) { sum += ( itr . getKey ( ) ) * ( itr . getValue ( ) ) ; } } return sum ; }", "python": "def sumOddOccurring ( mat ) :\n    mp = { }\n    n , m = len ( mat ) , len ( mat [ 0 ] )\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if mat [ i ] [ j ] in mp :\n                mp [ mat [ i ] [ j ] ] = mp . get ( mat [ i ] [ j ] ) + 1\n            else :\n                mp [ mat [ i ] [ j ] ] = 1\n    _sum = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if mp . get ( mat [ i ] [ j ] ) % 2 == 1 :\n                _sum += mat [ i ] [ j ]\n    return _sum\n"}
{"java": "static int sumMaxOccurring ( int arr [ ] [ ] ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( mp . containsKey ( arr [ i ] [ j ] ) ) { mp . put ( arr [ i ] [ j ] , mp . get ( arr [ i ] [ j ] ) + 1 ) ; } else { mp . put ( arr [ i ] [ j ] , 1 ) ; } } } int sum = 0 ; int maxFreq = Integer . MIN_VALUE ; for ( Map . Entry < Integer , Integer > itr : mp . entrySet ( ) ) { if ( itr . getValue ( ) > maxFreq ) { maxFreq = itr . getValue ( ) ; } } for ( Map . Entry < Integer , Integer > itr : mp . entrySet ( ) ) { if ( itr . getValue ( ) == maxFreq ) { sum += ( itr . getKey ( ) ) * ( itr . getValue ( ) ) ; } } return sum ; }", "python": "def sumMaxOccuring ( arr ) :\n    mp = dict ( )\n    for i in range ( N ) :\n        for j in range ( M ) :\n            if arr [ i ] [ j ] in mp :\n                mp [ arr [ i ] [ j ] ] += 1\n            else :\n                mp [ arr [ i ] [ j ] ] = 1\n    s = 0\n    maxFreq = - sys . maxsize\n    for i in mp :\n        if mp [ i ] > maxFreq :\n            maxFreq = mp [ i ]\n    for i in mp :\n        if mp [ i ] == maxFreq :\n            s += i * mp [ i ]\n    return s\n"}
{"java": "static int CommomSubsequencesCount ( String s , String t ) { int n1 = s . length ( ) ; int n2 = t . length ( ) ; int dp [ ] [ ] = new int [ n1 + 1 ] [ n2 + 1 ] ; char ch1 , ch2 ; for ( int i = 0 ; i <= n1 ; i ++ ) { for ( int j = 0 ; j <= n2 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 1 ; i <= n1 ; i ++ ) { for ( int j = 1 ; j <= n2 ; j ++ ) { ch1 = s . charAt ( i - 1 ) ; ch2 = t . charAt ( j - 1 ) ; if ( ch1 == ch2 ) dp [ i ] [ j ] = 1 + dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j ] - dp [ i - 1 ] [ j - 1 ] ; } } return dp [ n1 ] [ n2 ] ; }", "python": "def CommomSubsequencesCount ( s , t ) :\n    n1 = len ( s )\n    n2 = len ( t )\n    dp = [ [ 0 for i in range ( n2 + 1 ) ] for i in range ( n1 + 1 ) ]\n    for i in range ( 1 , n1 + 1 ) :\n        for j in range ( 1 , n2 + 1 ) :\n            if ( s [ i - 1 ] == t [ j - 1 ] ) :\n                dp [ i ] [ j ] = ( 1 + dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j ] - dp [ i - 1 ] [ j - 1 ] )\n    return dp [ n1 ] [ n2 ]\n"}
{"java": "static int maxDigit ( int number ) { int max = 0 ; while ( number != 0 ) { int digit = number % 10 ; number /= 10 ; max = Math . max ( max , digit ) ; } return max ; }", "python": "def nti ( a , x ) :\n    r = ' '\n    u = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ '\n    while a > 0 :\n        r += u [ a % x ]\n        a = a // x\n    if r == ' ' : r = '0'\n    return r [ : : - 1 ]\n"}
{"java": "static int log_a_to_base_b ( int a , int b ) { int rslt = ( a > b - 1 ) ? 1 + log_a_to_base_b ( a / b , b ) : 0 ; return rslt ; }", "python": "def log_a_to_base_b ( a , b ) :\n    rslt = ( 1 + log_a_to_base_b ( a // b , b ) ) if ( a > ( b - 1 ) ) else 0 ;\n    return rslt ;\n"}
{"java": "static boolean canBeSumofConsec ( int n ) { return ( ( ( n & ( n - 1 ) ) != 0 ) && n != 0 ) ; }", "python": "def canBeSumofConsec ( n ) :\n    return ( ( n & ( n - 1 ) ) and n )\n"}
{"java": "static int ccw ( int [ ] p1 , int [ ] p2 , int [ ] p3 ) { int a1 , b1 ; int a2 , b2 ; a1 = p2 [ 0 ] - p1 [ 0 ] ; b1 = p2 [ 1 ] - p1 [ 1 ] ; a2 = p3 [ 0 ] - p2 [ 0 ] ; b2 = p3 [ 1 ] - p2 [ 1 ] ; return a1 * b2 - a2 * b1 ; }", "python": "def is_convex ( P ) :\n    N = len ( P )\n    prods = [ ]\n    for k in range ( N ) :\n        x0 , y0 = P [ k ]\n        x1 , y1 = P [ ( k + 1 ) % N ]\n        x2 , y2 = P [ ( k + 2 ) % N ]\n        dx1 = x1 - x0\n        dy1 = y1 - y0\n        dx2 = x2 - x1\n        dy2 = y2 - y1\n        cross = dx1 * dy2 - dy1 * dx2\n        prods . append ( cross )\n    prods = sorted ( prods )\n    return prods [ 0 ] * prods [ - 1 ] >= 0\n"}
{"java": "static int minSum ( int arr [ ] , int n ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] ++ ; } int k = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = 0 ; j < freq [ i ] ; j ++ ) { arr [ k ++ ] = i ; } } int num1 = 0 ; int num2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) num1 = num1 * MAX + arr [ i ] ; else num2 = num2 * MAX + arr [ i ] ; } return num1 + num2 ; }", "python": "def minSum ( arr , n ) :\n    MAX = 10\n    freq = [ 0 ] * MAX\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    k = 0\n    for i in range ( MAX ) :\n        for j in range ( 0 , freq [ i ] ) :\n            arr [ k ] = i\n            k += 1\n    num1 = 0\n    num2 = 0\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            num1 = num1 * MAX + arr [ i ]\n        else :\n            num2 = num2 * MAX + arr [ i ]\n    return num1 + num2\n"}
{"java": "static boolean isPossible ( int arr [ ] , int p , int n , int m ) { int sum = 0 ; for ( int i = 0 ; i < p ; i ++ ) sum += arr [ i ] ; if ( sum == ( n * m ) ) return true ; return false ; }", "python": "def isPossible ( arr , p , n , m ) :\n    sum = 0 ;\n    for i in range ( p ) :\n        sum += arr [ i ] ;\n    if ( sum == ( n * m ) ) :\n        return True ;\n    return False ;\n"}
{"java": "static double findSum ( long n ) { return Math . sqrt ( 3 ) * ( n * ( n + 1 ) / 2 ) ; }", "python": "def findSum ( n ) :\n    return math . sqrt ( 3 ) * ( n * ( n + 1 ) / 2 )\n"}
{"java": "static int getMinimumSum ( int arr [ ] , int n ) { int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { ans = Math . min ( ans , arr [ i ] + arr [ j ] + arr [ k ] ) ; } } } return ans ; }", "python": "def getMinimumSum ( arr , n ) :\n    ans = sys . maxsize ;\n    for i in range ( n - 2 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                ans = min ( ans , arr [ i ] + arr [ j ] + arr [ k ] ) ;\n    return ans ;\n"}
{"java": "static int findMin ( int a [ ] , int n ) { double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += Math . log ( a [ i ] ) ; int x = ( int ) Math . exp ( sum / n ) ; return x + 1 ; }", "python": "def findMin ( a , n ) :\n    _sum = 0\n    for i in range ( n ) :\n        _sum += m . log ( a [ i ] )\n    x = m . exp ( _sum / n )\n    return int ( x + 1 )\n"}
{"java": "static int countXorPair ( int arr [ ] , int n ) { int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } return odd * even ; }", "python": "def countXorPair ( arr , n ) :\n    odd = 0\n    even = 0\n    for i in range ( n ) :\n        if arr [ i ] % 2 == 0 :\n            even += 1\n        else :\n            odd += 1\n    return odd * even\n"}
{"java": "static void generateString ( int A , int B ) { String rt = \" \" ; while ( 0 < A || 0 < B ) { if ( A < B ) { if ( 0 < B -- ) { rt += ( ' b ' ) ; } if ( 0 < B -- ) { rt += ( ' b ' ) ; } if ( 0 < A -- ) { rt += ( ' a ' ) ; } } else if ( B < A ) { if ( 0 < A -- ) { rt += ( ' a ' ) ; } if ( 0 < A -- ) { rt += ( ' a ' ) ; } if ( 0 < B -- ) { rt += ( ' b ' ) ; } } else { if ( 0 < A -- ) { rt += ( ' a ' ) ; } if ( 0 < B -- ) { rt += ( ' b ' ) ; } } } System . out . println ( rt ) ; }", "python": "def generateString ( A , B ) :\n    rt = \" \"\n    while ( 0 < A or 0 < B ) :\n        if ( A < B ) :\n            if ( 0 < B ) :\n                rt = rt + ' b '\n                B -= 1\n            if ( 0 < B ) :\n                rt += ' b '\n                B -= 1\n            if ( 0 < A ) :\n                rt += ' a '\n                A -= 1\n        elif ( B < A ) :\n            if ( 0 < A ) :\n                rt += ' a '\n                A -= 1\n            if ( 0 < A ) :\n                rt += ' a '\n                A -= 1\n            if ( 0 < B ) :\n                rt += ' b '\n                B -= 1\n        else :\n            if ( 0 < A ) :\n                rt += ' a '\n                A -= 1\n            if ( 0 < B ) :\n                rt += ' b '\n                B -= 1\n    print ( rt )\n"}
{"java": "static String smallestStr ( char [ ] str , int n ) { int i , j = 0 ; int [ ] chk = new int [ MAX ] ; for ( i = 0 ; i < MAX ; i ++ ) chk [ i ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( chk [ str [ i ] - ' a ' ] == - 1 ) chk [ str [ i ] - ' a ' ] = i ; } for ( i = 0 ; i < n ; i ++ ) { boolean flag = false ; for ( j = 0 ; j < str [ i ] - ' a ' ; j ++ ) { if ( chk [ j ] > chk [ str [ i ] - ' a ' ] ) { flag = true ; break ; } } if ( flag ) break ; } if ( i < n ) { char ch1 = str [ i ] ; char ch2 = ( char ) ( j + ' a ' ) ; for ( i = 0 ; i < n ; i ++ ) { if ( str [ i ] == ch1 ) str [ i ] = ch2 ; else if ( str [ i ] == ch2 ) str [ i ] = ch1 ; } } return String . valueOf ( str ) ; }", "python": "def smallestStr ( str , n ) :\n    i , j = 0 , 0\n    chk = [ 0 for i in range ( MAX ) ]\n    for i in range ( MAX ) :\n        chk [ i ] = - 1\n    for i in range ( n ) :\n        if ( chk [ ord ( str [ i ] ) ] == - 1 ) :\n            chk [ ord ( str [ i ] ) ] = i\n    for i in range ( n ) :\n        flag = False\n        for j in range ( ord ( str [ i ] ) ) :\n            if ( chk [ j ] > chk [ ord ( str [ i ] ) ] ) :\n                flag = True\n                break\n        if ( flag ) :\n            break\n    if ( i < n ) :\n        ch1 = ( str [ i ] )\n        ch2 = chr ( j )\n        for i in range ( n ) :\n            if ( str [ i ] == ch1 ) :\n                str [ i ] = ch2\n            elif ( str [ i ] == ch2 ) :\n                str [ i ] = ch1\n    return \" \" . join ( str )\n"}
{"java": "public static int solve ( int low , int high , int T ) { while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( ( mid * ( mid + 1 ) ) == T ) return mid ; if ( mid > 0 && ( mid * ( mid + 1 ) ) > T && ( mid * ( mid - 1 ) ) <= T ) return mid - 1 ; if ( ( mid * ( mid + 1 ) ) > T ) high = mid - 1 ; else low = mid + 1 ; } return - 1 ; }", "python": "def solve ( low , high , T ) :\n    while low <= high :\n        mid = int ( ( low + high ) / 2 )\n        if ( mid * ( mid + 1 ) ) == T :\n            return mid\n        if ( mid > 0 and ( mid * ( mid + 1 ) ) > T and ( mid * ( mid - 1 ) ) <= T ) :\n            return mid - 1\n        if ( mid * ( mid + 1 ) ) > T :\n            high = mid - 1 ;\n        else :\n            low = mid + 1\n    return - 1\n"}
{"java": "static int MaximumDivisors ( int X , int Y ) { int [ ] arr = new int [ Y - X + 1 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) arr [ i ] = 0 ; int mx = 0 ; int cnt = 0 ; for ( int i = 1 ; i * i <= Y ; i ++ ) { int sq = i * i ; int first_divisible ; if ( ( X / i ) * i >= X ) first_divisible = ( X / i ) * i ; else first_divisible = ( X / i + 1 ) * i ; for ( int j = first_divisible ; j <= Y ; j += i ) { if ( j < sq ) continue ; else if ( j == sq ) arr [ j - X ] ++ ; else arr [ j - X ] += 2 ; } } for ( int i = X ; i <= Y ; i ++ ) { if ( arr [ i - X ] > mx ) { cnt = 1 ; mx = arr [ i - X ] ; } else if ( arr [ i - X ] == mx ) cnt ++ ; } return cnt ; }", "python": "def MaximumDivisors ( X , Y ) :\n    arr = [ 0 ] * ( Y - X + 1 )\n    mx = 0\n    cnt = 0\n    i = 1\n    while i * i <= Y :\n        sq = i * i\n        if ( ( X // i ) * i >= X ) :\n            first_divisible = ( X // i ) * i\n        else :\n            first_divisible = ( X // i + 1 ) * i\n        for j in range ( first_divisible , Y + 1 , i ) :\n            if j < sq :\n                continue\n            elif j == sq :\n                arr [ j - X ] += 1\n            else :\n                arr [ j - X ] += 2\n        i += 1\n    for i in range ( X , Y + 1 ) :\n        if arr [ i - X ] > mx :\n            cnt = 1\n            mx = arr [ i - X ]\n        elif arr [ i - X ] == mx :\n            cnt += 1\n    return cnt\n"}
{"java": "static int max_sum ( int a [ ] , int n ) { int [ ] dp = new int [ n ] ; if ( n == 1 ) { dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; } else if ( n == 2 ) { dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; dp [ 1 ] = Math . max ( a [ 1 ] , dp [ 0 ] ) ; } else if ( n >= 3 ) { dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; dp [ 1 ] = Math . max ( a [ 1 ] , Math . max ( 0 , a [ 0 ] ) ) ; dp [ 2 ] = Math . max ( a [ 2 ] , Math . max ( a [ 1 ] , Math . max ( 0 , a [ 0 ] ) ) ) ; int i = 3 ; while ( i < n ) { dp [ i ] = Math . max ( dp [ i - 1 ] , a [ i ] + dp [ i - 3 ] ) ; i ++ ; } } return dp [ n - 1 ] ; }", "python": "def max_sum ( a , n ) :\n    dp = [ 0 ] * n ;\n    if ( n == 1 ) :\n        dp [ 0 ] = max ( 0 , a [ 0 ] ) ;\n    elif ( n == 2 ) :\n        dp [ 0 ] = max ( 0 , a [ 0 ] ) ;\n        dp [ 1 ] = max ( a [ 1 ] , dp [ 0 ] ) ;\n    elif ( n >= 3 ) :\n        dp [ 0 ] = max ( 0 , a [ 0 ] ) ;\n        dp [ 1 ] = max ( a [ 1 ] , max ( 0 , a [ 0 ] ) ) ;\n        dp [ 2 ] = max ( a [ 2 ] , max ( a [ 1 ] , max ( 0 , a [ 0 ] ) ) ) ;\n        i = 3 ;\n        while ( i < n ) :\n            dp [ i ] = max ( dp [ i - 1 ] , a [ i ] + dp [ i - 3 ] ) ;\n            i += 1 ;\n    return dp [ n - 1 ] ;\n"}
{"java": "static boolean isPerfectSquare ( double x ) { double sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; }", "python": "def isPerfectSquare ( x ) :\n    sr = math . sqrt ( x )\n    return ( ( sr - math . floor ( sr ) ) == 0 )\n"}
{"java": "static int find_sum ( int n , int k ) { int total_sum = ( n * ( n + 1 ) ) / 2 ; int power = k ; while ( power <= n ) { total_sum -= power ; power *= k ; } return total_sum ; }", "python": "def find_sum ( n , k ) :\n    total_sum = ( n * ( n + 1 ) ) // 2\n    power = k\n    while power <= n :\n        total_sum -= power\n        power *= k\n    return total_sum\n"}
{"java": "static void check ( int n , int m ) { if ( n == 2 || m == 2 || n % m == 0 ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } }", "python": "def check ( n , m ) :\n    if ( n == 2 or m == 2 or n % m == 0 ) :\n        print ( \" Yes \" )\n    else :\n        print ( \" No \" )\n"}
{"java": "private static long make ( String s ) { return Long . parseLong ( s , 2 ) ; }", "python": "def reader ( f ) :\n    f = open ( f )\n    for line in f :\n        yield line . strip ( )\n    f . close ( )\n"}
{"java": "static double sumOfSeries ( double a , double n ) { double res = 0 , prev = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { prev *= ( a / i ) ; res = res + prev ; } return ( res ) ; }", "python": "def sumOfSeries ( a , num ) :\n    res = 0\n    prev = 1\n    for i in range ( 1 , n + 1 ) :\n        prev *= ( a / i )\n        res = res + prev\n    return res\n"}
{"java": "static void radius ( double n , double d ) { System . out . print ( \" The \u2581 side \u2581 of \u2581 each \u2581 square \u2581 is \u2581 \" + d / ( ( n - 1 ) * Math . sqrt ( 2 ) ) ) ; }", "python": "def radius ( n , d ) :\n    print ( \" The \u2581 side \u2581 of \u2581 each \u2581 square \u2581 is \u2581 \" , d / ( ( n - 1 ) * ( 2 ** ( 1 / 2 ) ) ) ) ;\n"}
{"java": "static int maxCount ( int A [ ] , int N , int K ) { int maximum = 0 ; int i = 0 , j = 0 ; int start = 0 ; int end = 0 ; Arrays . sort ( A ) ; for ( i = 0 ; i < N ; i ++ ) { while ( j < N && A [ j ] <= A [ i ] + K ) j ++ ; if ( maximum < ( j - i ) ) { maximum = ( j - i ) ; start = i ; end = j ; } } return maximum ; }", "python": "def maxCount ( A , N , K ) :\n    maximum = 0\n    start = 0\n    end = 0\n    j = 0\n    A . sort ( )\n    for i in range ( 0 , N ) :\n        while ( j < N and A [ j ] <= A [ i ] + K ) :\n            j += 1\n        if maximum < ( j - i ) :\n            maximum = ( j - i )\n            start = i ;\n            end = j ;\n    return maximum\n"}
{"java": "static boolean isPossible ( int w , int h , int x , int y ) { if ( x * 2 == w && y * 2 == h ) return true ; return false ; }", "python": "def isPossible ( w , h , x , y ) :\n    if ( x * 2 == w and y * 2 == h ) :\n        return True\n    return False\n"}
{"java": "static float find_Area ( float a ) { float R = a * ( float ) ( 2.0 - Math . sqrt ( 2 ) ) ; float area = ( float ) ( ( 3.14 * R * R ) / 2.0 ) ; return area ; }", "python": "def find_Area ( a ) :\n    R = a * ( 2.0 - sqrt ( 2 ) ) ;\n    area = 3.14 * R * R / 2.0 ;\n    return area ;\n"}
{"java": "static int sum_even_and_even_index ( int arr [ ] , int n ) { int i = 0 , sum = 0 ; for ( i = 0 ; i < n ; i += 2 ) { if ( arr [ i ] % 2 == 0 ) { sum += arr [ i ] ; } } return sum ; }", "python": "def sum_even_and_even_index ( arr , n ) :\n    i = 0\n    sum = 0\n    for i in range ( 0 , n , 2 ) :\n        if ( arr [ i ] % 2 == 0 ) :\n            sum += arr [ i ]\n    return sum\n"}
{"java": "static int maximumXOR ( int n , int l , int r ) { int x = 0 ; for ( int i = ( int ) ( Math . log ( r ) / Math . log ( 2 ) ) ; i >= 0 ; -- i ) { if ( ( n & ( 1 << i ) ) > 0 ) { if ( ( x > r ) || ( x + ( 1 << i ) - 1 < l ) ) x ^= ( 1 << i ) ; } else { if ( ( x ^ ( 1 << i ) ) <= r ) x ^= ( 1 << i ) ; } } return n ^ x ; }", "python": "def maximumXOR ( n , l , r ) :\n    x = 0\n    for i in range ( int ( math . log2 ( r ) ) , - 1 , - 1 ) :\n        if ( n & ( 1 << i ) ) :\n            if ( x > r ) or ( x + ( 1 << i ) - 1 < l ) :\n                x ^= ( 1 << i )\n        else :\n            if ( x ^ ( 1 << i ) ) <= r :\n                x ^= ( 1 << i )\n    return n ^ x\n"}
{"java": "static int minimumChar ( String S1 , String S2 ) { int n = S1 . length ( ) ; int m = S2 . length ( ) ; int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < m - n + 1 ; i ++ ) { int minRemovedChar = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( S1 . charAt ( j ) != S2 . charAt ( i + j ) ) { minRemovedChar ++ ; } } ans = Math . min ( minRemovedChar , ans ) ; } return ans ; }", "python": "def minimumChar ( S1 , S2 ) :\n    n , m = len ( S1 ) , len ( S2 )\n    ans = sys . maxsize\n    for i in range ( m - n + 1 ) :\n        minRemovedChar = 0\n        for j in range ( n ) :\n            if ( S1 [ j ] != S2 [ i + j ] ) :\n                minRemovedChar += 1\n        ans = min ( minRemovedChar , ans )\n    return ans\n"}
{"java": "static int nthTerm ( int N ) { int nth = 0 , first_term = 4 ; int pi = 1 , po = 1 ; int n = N ; while ( n > 1 ) { pi *= n - 1 ; n -- ; po *= 2 ; } nth = ( first_term * pi ) / po ; return nth ; }", "python": "def nthTerm ( N ) :\n    nth = 0 ; first_term = 4 ;\n    pi = 1 ; po = 1 ;\n    n = N ;\n    while ( n > 1 ) :\n        pi *= n - 1 ;\n        n -= 1 ;\n        po *= 2 ;\n    nth = ( first_term * pi ) // po ;\n    return nth ;\n"}
{"java": "static void printPermutation ( int N , int K ) { Vector < Integer > res = new Vector < > ( ) ; int l = 1 , r = N , flag = 0 ; for ( int i = 0 ; i < K ; i ++ ) { if ( flag == 0 ) { res . add ( l ) ; l ++ ; } else { res . add ( r ) ; r -- ; } flag ^= 1 ; } if ( flag != 1 ) { for ( int i = r ; i >= l ; i -- ) { res . add ( i ) ; } } else { for ( int i = l ; i <= r ; i ++ ) { res . add ( i ) ; } } for ( Integer i : res ) { System . out . print ( i + \" \u2581 \" ) ; } }", "python": "def printPermutation ( N , K ) :\n    res = list ( ) ;\n    l , r , flag = 1 , N , 0\n    for i in range ( K ) :\n        if flag == False :\n            res . append ( l )\n            l += 1\n        else :\n            res . append ( r ) ;\n            r -= 1 ;\n        flag = flag ^ 1 ;\n    if flag == False :\n        for i in range ( r , 2 , - 1 ) :\n            res . append ( i )\n    else :\n        for i in range ( l , r ) :\n            res . append ( i )\n    for i in res :\n        print ( i , end = \" \u2581 \" )\n"}
{"java": "static void printWords ( int h , int m ) { String nums [ ] = { \" zero \" , \" one \" , \" two \" , \" three \" , \" four \" , \" five \" , \" six \" , \" seven \" , \" eight \" , \" nine \" , \" ten \" , \" eleven \" , \" twelve \" , \" thirteen \" , \" fourteen \" , \" fifteen \" , \" sixteen \" , \" seventeen \" , \" eighteen \" , \" nineteen \" , \" twenty \" , \" twenty \u2581 one \" , \" twenty \u2581 two \" , \" twenty \u2581 three \" , \" twenty \u2581 four \" , \" twenty \u2581 five \" , \" twenty \u2581 six \" , \" twenty \u2581 seven \" , \" twenty \u2581 eight \" , \" twenty \u2581 nine \" , } ; if ( m == 0 ) System . out . println ( nums [ h ] + \" \u2581 o ' \u2581 clock \u2581 \" ) ; else if ( m == 1 ) System . out . println ( \" one \u2581 minute \u2581 past \u2581 \" + nums [ h ] ) ; else if ( m == 59 ) System . out . println ( \" one \u2581 minute \u2581 to \u2581 \" + nums [ ( h % 12 ) + 1 ] ) ; else if ( m == 15 ) System . out . println ( \" quarter \u2581 past \u2581 \" + nums [ h ] ) ; else if ( m == 30 ) System . out . println ( \" half \u2581 past \u2581 \" + nums [ h ] ) ; else if ( m == 45 ) System . out . println ( \" quarter \u2581 to \u2581 \" + nums [ ( h % 12 ) + 1 ] ) ; else if ( m <= 30 ) System . out . println ( nums [ m ] + \" \u2581 minutes \u2581 past \u2581 \" + nums [ h ] ) ; else if ( m > 30 ) System . out . println ( nums [ 60 - m ] + \" \u2581 minutes \u2581 to \u2581 \" + nums [ ( h % 12 ) + 1 ] ) ; }", "python": "def printWords ( h , m ) :\n    nums = [ \" zero \" , \" one \" , \" two \" , \" three \" , \" four \" , \" five \" , \" six \" , \" seven \" , \" eight \" , \" nine \" , \" ten \" , \" eleven \" , \" twelve \" , \" thirteen \" , \" fourteen \" , \" fifteen \" , \" sixteen \" , \" seventeen \" , \" eighteen \" , \" nineteen \" , \" twenty \" , \" twenty \u2581 one \" , \" twenty \u2581 two \" , \" twenty \u2581 three \" , \" twenty \u2581 four \" , \" twenty \u2581 five \" , \" twenty \u2581 six \" , \" twenty \u2581 seven \" , \" twenty \u2581 eight \" , \" twenty \u2581 nine \" ] ;\n    if ( m == 0 ) :\n        print ( nums [ h ] , \" o ' \u2581 clock \" ) ;\n    elif ( m == 1 ) :\n        print ( \" one \u2581 minute \u2581 past \" , nums [ h ] ) ;\n    elif ( m == 59 ) :\n        print ( \" one \u2581 minute \u2581 to \" , nums [ ( h % 12 ) + 1 ] ) ;\n    elif ( m == 15 ) :\n        print ( \" quarter \u2581 past \" , nums [ h ] ) ;\n    elif ( m == 30 ) :\n        print ( \" half \u2581 past \" , nums [ h ] ) ;\n    elif ( m == 45 ) :\n        print ( \" quarter \u2581 to \" , ( nums [ ( h % 12 ) + 1 ] ) ) ;\n    elif ( m <= 30 ) :\n        print ( nums [ m ] , \" minutes \u2581 past \" , nums [ h ] ) ;\n    elif ( m > 30 ) :\n        print ( nums [ 60 - m ] , \" minutes \u2581 to \" , nums [ ( h % 12 ) + 1 ] ) ;\n"}
{"java": "static int numberOfDistinct ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { ans ++ ; if ( ( n / i ) != i ) ans ++ ; } } return ans ; }", "python": "def numberOfDistinct ( n ) :\n    ans = 0\n    for i in range ( 1 , int ( math . sqrt ( n ) ) + 1 ) :\n        if ( n % i == 0 ) :\n            ans += 1\n            if ( ( n // i ) != i ) :\n                ans += 1\n    return ans\n"}
{"java": "static void middleProduct ( int mat [ ] [ ] , int n ) { int row_prod = 1 , col_prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { row_prod *= mat [ n / 2 ] [ i ] ; col_prod *= mat [ i ] [ n / 2 ] ; } System . out . print ( \" Product \u2581 of \u2581 middle \u2581 row \u2581 = \u2581 \" + row_prod ) ; System . out . print ( \" Product \u2581 of \u2581 middle \u2581 column \u2581 = \u2581 \" + col_prod ) ; }", "python": "def middleProduct ( mat , n ) :\n    row_prod = 1\n    col_prod = 1\n    for i in range ( n ) :\n        row_prod *= mat [ n // 2 ] [ i ]\n        col_prod *= mat [ i ] [ n // 2 ]\n    print ( \" Product \u2581 of \u2581 middle \u2581 row \u2581 = \u2581 \" , row_prod )\n    print ( \" Product \u2581 of \u2581 middle \u2581 column \u2581 = \u2581 \" , col_prod )\n"}
{"java": "static void replace_elements ( int arr [ ] , int n ) { int pos = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ pos ++ ] = arr [ i ] ; while ( pos > 1 && arr [ pos - 2 ] == arr [ pos - 1 ] ) { pos -- ; arr [ pos - 1 ] ++ ; } } for ( int i = 0 ; i < pos ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def replace_elements ( arr , n ) :\n    pos = 0\n    for i in range ( 0 , n ) :\n        arr [ pos ] = arr [ i ]\n        pos = pos + 1\n        while ( pos > 1 and arr [ pos - 2 ] == arr [ pos - 1 ] ) :\n            pos -= 1\n            arr [ pos - 1 ] += 1\n    for i in range ( 0 , pos ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static void findNumbers ( int n ) { String ans = \" \" ; for ( int i = 0 ; i < n - 1 ; i ++ ) ans += '7' ; String even = ans + '6' ; String odd = ans + '7' ; System . out . println ( \" Even \u2581 : \u2581 \" + even ) ; System . out . println ( \" Odd \u2581 : \u2581 \" + odd ) ; }", "python": "def findNumbers ( N ) :\n    ans = '7' * ( N - 1 )\n    even = ans + '6' ;\n    odd = ans + '7' ;\n    print ( \" Even \u2581 : \u2581 \" , even ) ;\n    print ( \" Odd \u2581 : \u2581 \" , odd ) ;\n"}
{"java": "public static boolean is_possible ( String s ) { int l = s . length ( ) ; int one = 0 , zero = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) == '0' ) zero ++ ; else one ++ ; } if ( l % 2 == 0 ) return ( one == zero ) ; else return ( Math . abs ( one - zero ) == 1 ) ; }", "python": "def is_possible ( s ) :\n    l = len ( s )\n    one = 0\n    zero = 0\n    for i in range ( 0 , l ) :\n        if ( s [ i ] == '0' ) :\n            zero += 1\n        else :\n            one += 1\n    if ( l % 2 == 0 ) :\n        return ( one == zero )\n    else :\n        return ( abs ( one - zero ) == 1 )\n"}
{"java": "static int findNthOccur ( String str , char ch , int N ) { int occur = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ch ) { occur += 1 ; } if ( occur == N ) return i ; } return - 1 ; }", "python": "def findNthOccur ( string , ch , N ) :\n    occur = 0 ;\n    for i in range ( len ( string ) ) :\n        if ( string [ i ] == ch ) :\n            occur += 1 ;\n        if ( occur == N ) :\n            return i ;\n    return - 1 ;\n"}
{"java": "static int maxProduct ( int a [ ] , int n ) { int [ ] product = new int [ n ] ; int maxA [ ] = new int [ n ] ; int maxProd = 0 ; int maxArr = 0 ; for ( int i = 0 ; i < n ; i ++ ) { product [ i ] = a [ ( i + 1 ) % n ] * a [ ( i + ( n - 1 ) ) % n ] ; if ( maxProd < product [ i ] ) { maxProd = product [ i ] ; } } return maxProd ; }", "python": "def maxProduct ( a , n ) :\n    product = [ 0 ] * n ;\n    maxA = [ 0 ] * n ;\n    maxProd = 0 ;\n    maxArr = 0 ;\n    for i in range ( n ) :\n        product [ i ] = a [ ( i + 1 ) % n ] * a [ ( i + ( n - 1 ) ) % n ] ;\n        if ( maxProd < product [ i ] ) :\n            maxProd = product [ i ] ;\n    return maxProd ;\n"}
{"java": "static float trapezoidarea ( float r ) { if ( r < 0 ) return - 1 ; float a = ( 3 * ( float ) Math . sqrt ( 3 ) * ( float ) Math . pow ( r , 2 ) ) / 4 ; return a ; }", "python": "def trapezoidarea ( r ) :\n    if r < 0 :\n        return - 1\n    a = ( 3 * sqrt ( 3 ) * pow ( r , 2 ) ) / 4\n    return a\n"}
{"java": "static int maxCount ( int n , int a [ ] ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( freq . containsKey ( a [ i ] ) ) freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; else freq . put ( a [ i ] , 1 ) ; } int ans = 0 ; for ( Integer key : freq . keySet ( ) ) { if ( freq . containsKey ( key + 1 ) ) ans = Math . max ( ans , freq . get ( key ) + freq . get ( key + 1 ) ) ; } return ans ; }", "python": "def maxCount ( a ) :\n    freq = { }\n    for i in range ( n ) :\n        if ( a [ i ] in freq ) :\n            freq [ a [ i ] ] += 1\n        else :\n            freq [ a [ i ] ] = 1\n    ans = 0\n    for key , value in freq . items ( ) :\n        if ( key + 1 in freq ) :\n            ans = max ( ans , freq [ key ] + freq [ key + 1 ] )\n    return ans\n"}
{"java": "static void printPattern ( int n ) { int var1 , var = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) { var = var + i - 1 ; for ( int j = 1 ; j <= i ; j ++ ) { if ( j == 1 ) { System . out . print ( var ) ; } else System . out . print ( \" * \" + var ) ; var ++ ; } } else { var1 = var + i - 1 ; for ( int j = 1 ; j <= i ; j ++ ) { if ( j == 1 ) { System . out . print ( var1 ) ; } else { System . out . print ( \" * \" + var1 ) ; } var1 -- ; } } System . out . print ( \" \\n \" ) ; } }", "python": "def printPattern ( n ) :\n    var = 0\n    var = 1\n    for i in range ( 1 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            var = var + i - 1\n            for j in range ( 1 , i + 1 ) :\n                if ( j == 1 ) :\n                    print ( var , end = \" \" )\n                else :\n                    print ( \" * \" , end = \" \" )\n                    print ( var , end = \" \" )\n                var += 1\n        else :\n            var1 = var + i - 1\n            for j in range ( 1 , i + 1 ) :\n                if ( j == 1 ) :\n                    print ( var1 , end = \" \" )\n                else :\n                    print ( \" * \" , end = \" \" )\n                    print ( var1 , end = \" \" )\n                var1 -= 1\n        print ( )\n"}
{"java": "static void solve ( String s , int k ) { int count = 0 , length = 0 , pos = 0 ; HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; else m . put ( s . charAt ( i ) , 1 ) ; length ++ ; if ( length > k ) { m . put ( s . charAt ( pos ) , m . get ( s . charAt ( pos ) ) - 1 ) ; pos ++ ; length -- ; } if ( length == k && m . get ( s . charAt ( i ) ) == length ) count ++ ; } System . out . println ( count ) ; }", "python": "def solve ( s , k ) :\n    count , length , pos = 0 , 0 , 0\n    m = dict . fromkeys ( s , 0 )\n    for i in range ( len ( s ) ) :\n        m [ s [ i ] ] += 1\n        length += 1\n        if length > k :\n            m [ s [ pos ] ] -= 1\n            pos += 1\n            length -= 1\n        if length == k and m [ s [ i ] ] == length :\n            count += 1\n    print ( count )\n"}
{"java": "static int maxDiff ( int arr [ ] , int n ) { int maxDiff = - 1 ; int maxRight = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] > maxRight ) maxRight = arr [ i ] ; else { int diff = maxRight - arr [ i ] ; if ( diff > maxDiff ) { maxDiff = diff ; } } } return maxDiff ; }", "python": "def maxDiff ( arr , n ) :\n    maxDiff = - 1\n    maxRight = arr [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] > maxRight ) :\n            maxRight = arr [ i ]\n        else :\n            diff = maxRight - arr [ i ]\n            if ( diff > maxDiff ) :\n                maxDiff = diff\n    return maxDiff\n"}
{"java": "static boolean makeAndCheckString ( Vector < String > words , String str ) { int n = words . size ( ) ; boolean first = false , second = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( words . get ( i ) == str ) return true ; if ( str . charAt ( 0 ) == words . get ( i ) . charAt ( 1 ) ) first = true ; if ( str . charAt ( 1 ) == words . get ( i ) . charAt ( 0 ) ) second = true ; if ( first && second ) return true ; } return false ; }", "python": "def makeAndCheckString ( words , str ) :\n    n = len ( words )\n    first = second = False\n    for i in range ( n ) :\n        if words [ i ] == str :\n            return True\n        if str [ 0 ] == words [ i ] [ 1 ] :\n            first = True\n        if str [ 1 ] == words [ i ] [ 0 ] :\n            second = True\n        if first and second :\n            return True\n    return False\n"}
{"java": "static void printCoins ( int arr [ ] , int n ) { int oddSum = 0 ; for ( int i = 0 ; i < n ; i += 2 ) oddSum += arr [ i ] ; int evenSum = 0 ; for ( int i = 1 ; i < n ; i += 2 ) evenSum += arr [ i ] ; int start = ( ( oddSum > evenSum ) ? 0 : 1 ) ; for ( int i = start ; i < n ; i += 2 ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def printCoins ( arr , n ) :\n    oddSum = 0\n    for i in range ( 0 , n , 2 ) :\n        oddSum += arr [ i ]\n    evenSum = 0\n    for i in range ( 1 , n , 2 ) :\n        evenSum += arr [ i ]\n    if oddSum > evenSum :\n        start = 0\n    else :\n        start = 1\n    for i in range ( start , n , 2 ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static void split ( int x , int n ) { if ( x < n ) System . out . print ( \" - 1 \u2581 \" ) ; else if ( x % n == 0 ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( ( x / n ) + \" \u2581 \" ) ; } else { int zp = n - ( x % n ) ; int pp = x / n ; for ( int i = 0 ; i < n ; i ++ ) { if ( i >= zp ) System . out . print ( ( pp + 1 ) + \" \u2581 \" ) ; else System . out . print ( pp + \" \u2581 \" ) ; } } }", "python": "def split ( x , n ) :\n    if ( x < n ) :\n        print ( - 1 )\n    elif ( x % n == 0 ) :\n        for i in range ( n ) :\n            print ( x // n , end = \" \u2581 \" )\n    else :\n        zp = n - ( x % n )\n        pp = x // n\n        for i in range ( n ) :\n            if ( i >= zp ) :\n                print ( pp + 1 , end = \" \u2581 \" )\n            else :\n                print ( pp , end = \" \u2581 \" )\n"}
{"java": "static int getValueOfF ( int n ) { if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; int cnt = 0 ; while ( n % 2 == 0 ) { cnt += 1 ; n /= 2 ; } return 2 * cnt ; }", "python": "def getValueOfF ( n ) :\n    if ( n == 1 ) :\n        return 0\n    if ( n == 2 ) :\n        return 1\n    cnt = 0\n    while ( n % 2 == 0 ) :\n        cnt += 1\n        n /= 2\n    return 2 * cnt\n"}
{"java": "public static void print ( int ans ) { if ( ans == 0 ) ans = 3 ; System . out . println ( ans ) ; }", "python": "def find_color ( n , ai , bi ) :\n    color = ( 3 , 1 , 2 )\n    if n % 2 != 0 :\n        if ai > int ( ( n + 1 ) / 2 ) :\n            ai = int ( ( n + 1 ) / 2 ) - ( ai - int ( ( n + 1 ) / 2 ) )\n        if bi > int ( ( n + 1 ) / 2 ) :\n            bi = int ( ( n + 1 ) / 2 ) - ( bi - int ( ( n + 1 ) / 2 ) )\n    else :\n        if ai > int ( n / 2 ) :\n            ai = int ( n / 2 ) - ( ai - int ( n / 2 ) ) + 1\n        if bi > int ( n / 2 ) :\n            bi = int ( n / 2 ) - ( bi - int ( n / 2 ) ) + 1\n    if bi >= ai and bi <= n - ai :\n        return color [ ai % 3 ]\n    else :\n        return color [ bi % 3 ]\n"}
{"java": "static void segregate0and1 ( int arr [ ] ) { int type0 = 0 ; int type1 = arr . length - 1 ; while ( type0 < type1 ) { if ( arr [ type0 ] == 1 ) { arr [ type1 ] = arr [ type1 ] + arr [ type0 ] ; arr [ type0 ] = arr [ type1 ] - arr [ type0 ] ; arr [ type1 ] = arr [ type1 ] - arr [ type0 ] ; type1 -- ; } else { type0 ++ ; } } }", "python": "def segregate0and1 ( arr , size ) :\n    type0 = 0\n    type1 = size - 1\n    while ( type0 < type1 ) :\n        if ( arr [ type0 ] == 1 ) :\n            ( arr [ type0 ] , arr [ type1 ] ) = ( arr [ type1 ] , arr [ type0 ] )\n            type1 -= 1\n        else :\n            type0 += 1\n"}
{"java": "static int countOp ( int arr [ ] , int n , int k ) { int operations = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i - 1 ] ) > k ) { int absDiff = Math . abs ( arr [ i ] - arr [ i - 1 ] ) ; int currOp = absDiff - k ; if ( arr [ i ] < arr [ i - 1 ] ) arr [ i ] += currOp ; else arr [ i ] -= currOp ; operations += currOp ; } } return operations ; }", "python": "def countOp ( arr , n , k ) :\n    operations = 0 ;\n    for i in range ( 1 , n ) :\n        if ( abs ( arr [ i ] - arr [ i - 1 ] ) > k ) :\n            absDiff = abs ( arr [ i ] - arr [ i - 1 ] ) ;\n            currOp = absDiff - k ;\n            if ( arr [ i ] < arr [ i - 1 ] ) :\n                arr [ i ] += currOp ;\n            else :\n                arr [ i ] -= currOp ;\n            operations += currOp ;\n    return operations ;\n"}
{"java": "static int findCount ( int d ) { return 9 * ( ( int ) ( Math . pow ( 10 , d - 1 ) ) - ( int ) ( Math . pow ( 9 , d - 1 ) ) ) ; }", "python": "def findCount ( d ) :\n    return 9 * ( ( int ) ( math . pow ( 10 , d - 1 ) ) - ( int ) ( math . pow ( 9 , d - 1 ) ) ) ;\n"}
{"java": "static int solve ( int [ ] a ) { Map < Integer , Integer > remainToMoveNum = new HashMap < > ( ) ; for ( int ai : a ) { int remain = ai ; int moveNum = 0 ; while ( remain % 2 == 0 ) { remain /= 2 ; moveNum ++ ; } remainToMoveNum . put ( remain , Math . max ( remainToMoveNum . getOrDefault ( remain , 0 ) , moveNum ) ) ; } return remainToMoveNum . values ( ) . stream ( ) . mapToInt ( x -> x ) . sum ( ) ; }", "python": "def primeFactors ( n ) :\n    c = 0\n    while n % 2 == 0 :\n        c += 1\n        n = n / 2\n    return ( [ c , int ( n ) ] )\n"}
{"java": "static long findSmallestNonZeroY ( long A_num ) { String A_binary = Long . toBinaryString ( A_num ) ; long B = 1 ; int len = A_binary . length ( ) ; int no_ones = Long . bitCount ( A_num ) ; if ( len == no_ones ) { return A_num + 1 ; } for ( int i = 0 ; i < len ; i ++ ) { char ch = A_binary . charAt ( len - i - 1 ) ; if ( ch == '0' ) { B = ( long ) Math . pow ( 2.0 , ( double ) i ) ; break ; } } return B ; }", "python": "def findSmallestNonZeroY ( A_num ) :\n    A_binary = bin ( A_num )\n    B = 1\n    length = len ( A_binary ) ;\n    no_ones = ( A_binary ) . count ( '1' ) ;\n    if length == no_ones :\n        return A_num + 1 ;\n    for i in range ( length ) :\n        ch = A_binary [ length - i - 1 ] ;\n        if ( ch == '0' ) :\n            B = pow ( 2.0 , i ) ;\n            break ;\n    return B ;\n"}
{"java": "static int longestFibonacciSubarray ( int n , int a [ ] ) { if ( n <= 2 ) return n ; int len = 2 ; int mx = Integer . MIN_VALUE ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) len ++ ; else len = 2 ; mx = Math . max ( mx , len ) ; } return mx ; }", "python": "def longestFibonacciSubarray ( n , a ) :\n    if ( n <= 2 ) :\n        return n\n    Len = 2\n    mx = - 10 ** 9\n    for i in range ( 2 , n ) :\n        if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) :\n            Len += 1\n        else :\n            Len = 2\n        mx = max ( mx , Len )\n    return mx\n"}
{"java": "static int [ ] [ ] createTrainGraph ( char [ ] input ) { int [ ] [ ] train = new int [ 26 ] [ 2 ] ; for ( int i = 0 ; i < train . length ; i ++ ) { for ( int j = 0 ; j < train [ 0 ] . length ; j ++ ) { train [ i ] [ j ] = NO_CONNECTION ; } } boolean front = false ; int before = input [ 0 ] ; for ( int i = 1 ; i < input . length ; i ++ ) { int current = input [ i ] ; if ( ' a ' <= current && current <= ' z ' ) { if ( front ) { train [ before - ' a ' ] [ FRONT ] = current - ' a ' ; train [ current - ' a ' ] [ REAR ] = before - ' a ' ; } else { train [ before - ' a ' ] [ REAR ] = current - ' a ' ; train [ current - ' a ' ] [ FRONT ] = before - ' a ' ; } before = current ; } else if ( current == ' > ' ) { front = false ; } else if ( current == ' < ' ) { front = true ; } } return train ; }", "python": "def proc ( i ) :\n    l = len ( i )\n    o = [ i [ 0 ] ]\n    io = 1\n    ii = 1\n    while ii < l :\n        if i [ ii : ii + 2 ] == \" < - \" :\n            io -= 1\n        else :\n            io += 1\n        if ( io == 0 ) :\n            o . insert ( io , i [ ii + 2 ] )\n            io += 1\n        elif ( io == len ( o ) + 1 ) :\n            o . insert ( io , i [ ii + 2 ] )\n        else :\n            if i [ ii + 2 ] != o [ io - 1 ] :\n                raise untimeError ( \" error \" )\n        ii += 3\n    s = \" \"\n    for c in o :\n        s += c\n    return s\n"}
{"java": "static void precomputation ( int arr [ ] , int n ) { for ( int i = 1 ; i < max_Element ; i ++ ) for ( int j = i ; j < max_Element ; j += i ) sum1 [ j ] += i ; for ( int i = 1 ; i < max_Element ; i ++ ) for ( int j = i ; j < max_Element ; j += i ) sum2 [ j ] += ( sum1 [ j ] - i ) * i ; for ( int i = 1 ; i < max_Element ; i ++ ) sum2 [ i ] /= 2 ; for ( int i = 1 ; i < max_Element ; i ++ ) for ( int j = i ; j < max_Element ; j += i ) sum3 [ j ] += i * ( sum2 [ j ] - i * ( sum1 [ j ] - i ) ) ; for ( int i = 1 ; i < max_Element ; i ++ ) sum3 [ i ] /= 3 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( sum3 [ arr [ i ] ] + \" \u2581 \" ) ; }", "python": "def precomputation ( arr , n ) :\n    for i in range ( 1 , max_Element , 1 ) :\n        for j in range ( i , max_Element , i ) :\n            sum1 [ j ] += i\n    for i in range ( 1 , max_Element , 1 ) :\n        for j in range ( i , max_Element , i ) :\n            sum2 [ j ] += ( sum1 [ j ] - i ) * i\n    for i in range ( 1 , max_Element , 1 ) :\n        sum2 [ i ] = int ( sum2 [ i ] / 2 )\n    for i in range ( 1 , max_Element , 1 ) :\n        for j in range ( i , max_Element , i ) :\n            sum3 [ j ] += i * ( sum2 [ j ] - i * ( sum1 [ j ] - i ) )\n    for i in range ( 1 , max_Element , 1 ) :\n        sum3 [ i ] = int ( sum3 [ i ] / 3 )\n    for i in range ( n ) :\n        print ( sum3 [ arr [ i ] ] , end = \" \u2581 \" )\n"}
{"java": "static void findPermutation ( int n ) { Vector < Integer > res = new Vector < Integer > ( ) ; int en = 2 , on = 1 ; if ( n % 2 == 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { res . add ( en ) ; en += 2 ; } else { res . add ( on ) ; on += 2 ; } } } else { for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( i % 2 == 0 ) { res . add ( en ) ; en += 2 ; } else { res . add ( on ) ; on += 2 ; } } res . add ( n ) ; res . add ( n - 2 ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( res . get ( i ) + \" \u2581 \" ) ; } System . out . println ( \" \" ) ; }", "python": "def findPermutation ( n ) :\n    res = [ ]\n    en , on = 2 , 1\n    if ( n % 2 == 0 ) :\n        for i in range ( n ) :\n            if ( i % 2 == 0 ) :\n                res . append ( en )\n                en += 2\n            else :\n                res . append ( on )\n                on += 2\n    else :\n        for i in range ( n - 2 ) :\n            if ( i % 2 == 0 ) :\n                res . append ( en )\n                en += 2\n            else :\n                res . append ( on )\n                on += 2\n        res . append ( n )\n        res . append ( n - 2 )\n    for i in range ( n ) :\n        print ( res [ i ] , end = \" \u2581 \" )\n    print ( )\n"}
{"java": "static int distinctCount ( int arr [ ] , int n ) { int count = n ; int i = 0 , j = n - 1 , sum = 0 ; while ( i < j ) { while ( i != j && arr [ i ] == arr [ i + 1 ] ) { count -- ; i ++ ; } while ( i != j && arr [ j ] == arr [ j - 1 ] ) { count -- ; j -- ; } if ( i == j ) break ; sum = arr [ i ] + arr [ j ] ; if ( sum == 0 ) { count -- ; i ++ ; j -- ; } else if ( sum < 0 ) i ++ ; else j -- ; } return count ; }", "python": "def distinctCount ( arr , n ) :\n    count = n ;\n    i = 0 ; j = n - 1 ; sum = 0 ;\n    while ( i < j ) :\n        while ( i != j and arr [ i ] == arr [ i + 1 ] ) :\n            count = count - 1 ;\n            i = i + 1 ;\n        while ( i != j and arr [ j ] == arr [ j - 1 ] ) :\n            count = count - 1 ;\n            j = j - 1 ;\n        if ( i == j ) :\n            break ;\n        sum = arr [ i ] + arr [ j ] ;\n        if ( sum == 0 ) :\n            count = count - 1 ;\n            i = i + 1 ;\n            j = j - 1 ;\n        elif ( sum < 0 ) :\n            i = i + 1 ;\n        else :\n            j = j - 1 ;\n    return count ;\n"}
{"java": "public static int findNumbers ( int N ) { ArrayList < Integer > v = new ArrayList < Integer > ( ) ; while ( N > 0 ) { int n = N , m = 0 , p = 1 ; while ( n > 0 ) { if ( n % 10 != 0 ) m += p ; n /= 10 ; p *= 10 ; } v . add ( m ) ; N -= m ; } for ( int i = 0 ; i < v . size ( ) ; i ++ ) System . out . print ( \" \u2581 \" + v . get ( i ) ) ; return 0 ; }", "python": "def findNumbers ( N ) :\n    v = [ ] ;\n    while ( N ) :\n        n , m , p = N , 0 , 1\n        while ( n ) :\n            if ( n % 10 ) :\n                m += p\n            n //= 10\n            p *= 10\n        v . append ( m ) ;\n        N -= m\n    for i in range ( len ( v ) ) :\n        print ( v [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int countIncreasing ( int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( arr [ i + 1 ] > arr [ i ] ) len ++ ; else { cnt += ( ( ( len - 1 ) * len ) / 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) / 2 ) ; return cnt ; }", "python": "def countIncreasing ( arr , n ) :\n    cnt = 0\n    len = 1\n    for i in range ( 0 , n - 1 ) :\n        if arr [ i + 1 ] > arr [ i ] :\n            len += 1\n        else :\n            cnt += ( ( ( len - 1 ) * len ) / 2 )\n            len = 1\n    if len > 1 :\n        cnt += ( ( ( len - 1 ) * len ) / 2 )\n    return cnt\n"}
{"java": "static int changeTax ( int x , int p ) { double d = ( double ) ( p * ( 100 + x ) ) / 100 ; return ( int ) Math . floor ( d ) ; }", "python": "def inpl ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef inpl_str ( ) : return list ( input ( ) . split ( ) )\ndef calc ( p , x ) :\n    return p * ( 100 + x ) // 100\n"}
{"java": "public static int findMajority ( int arr [ ] , int n ) { return arr [ n / 2 ] ; }", "python": "def findMajority ( arr , n ) :\n    return arr [ int ( n / 2 ) ]\n"}
{"java": "static boolean checkPandigital ( int b , String n ) { if ( n . length ( ) < b ) return false ; boolean hash [ ] = new boolean [ b ] ; Arrays . fill ( hash , false ) ; for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) >= '0' && n . charAt ( i ) <= '9' ) hash [ n . charAt ( i ) - '0' ] = true ; else if ( n . charAt ( i ) - ' A ' <= b - 11 ) hash [ n . charAt ( i ) - ' A ' + 10 ] = true ; } for ( int i = 0 ; i < b ; i ++ ) if ( hash [ i ] == false ) return false ; return true ; }", "python": "def checkPandigital ( b , n ) :\n    if ( len ( n ) < b ) :\n        return 0 ;\n    hash = [ 0 ] * b ;\n    for i in range ( len ( n ) ) :\n        if ( n [ i ] >= '0' and n [ i ] <= '9' ) :\n            hash [ ord ( n [ i ] ) - ord ( '0' ) ] = 1 ;\n        elif ( ord ( n [ i ] ) - ord ( ' A ' ) <= b - 11 ) :\n            hash [ ord ( n [ i ] ) - ord ( ' A ' ) + 10 ] = 1 ;\n    for i in range ( b ) :\n        if ( hash [ i ] == 0 ) :\n            return 0 ;\n    return 1 ;\n"}
{"java": "static float geometricMean ( int arr [ ] , int n ) { float product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product = product * arr [ i ] ; float gm = ( float ) Math . pow ( product , ( float ) 1 / n ) ; return gm ; }", "python": "def geometricMean ( arr , n ) :\n    product = 1\n    for i in range ( 0 , n ) :\n        product = product * arr [ i ]\n    gm = ( float ) ( math . pow ( product , ( 1 / n ) ) )\n    return ( float ) ( gm )\n"}
{"java": "static int anagram_pairs ( String [ ] s , int n ) { Map < String , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char [ ] chArr = s [ i ] . toCharArray ( ) ; Arrays . sort ( chArr ) ; s [ i ] = new String ( chArr ) ; if ( mp . containsKey ( s [ i ] ) ) { mp . put ( s [ i ] , mp . get ( s [ i ] ) + 1 ) ; } else { mp . put ( s [ i ] , 1 ) ; } } int ans = 0 ; for ( Map . Entry < String , Integer > i : mp . entrySet ( ) ) { int k = i . getValue ( ) ; ans += ( k * ( k - 1 ) ) / 2 ; } return ans ; }", "python": "def anagram_pairs ( s , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        temp_str = \" \" . join ( sorted ( s [ i ] ) )\n        if temp_str in mp :\n            mp [ temp_str ] += 1\n        else :\n            mp [ temp_str ] = 1\n    ans = 0\n    for k in mp . values ( ) :\n        ans += ( k * ( k - 1 ) ) // 2\n    return ans\n"}
{"java": "static void findNthRoot ( double x , int n ) { double low , high ; if ( x >= 0 && x <= 1 ) { low = x ; high = 1 ; } else { low = 1 ; high = x ; } double epsilon = 0.00000001 ; double guess = ( low + high ) / 2 ; while ( Math . abs ( ( Math . pow ( guess , n ) ) - x ) >= epsilon ) { if ( Math . pow ( guess , n ) > x ) { high = guess ; } else { low = guess ; } guess = ( low + high ) / 2 ; } System . out . println ( guess ) ; }", "python": "def findNthRoot ( x , n ) :\n    x = float ( x )\n    n = int ( n )\n    if ( x >= 0 and x <= 1 ) :\n        low = x\n        high = 1\n    else :\n        low = 1\n        high = x\n    epsilon = 0.00000001\n    guess = ( low + high ) / 2\n    while abs ( guess ** n - x ) >= epsilon :\n        if guess ** n > x :\n            high = guess\n        else :\n            low = guess\n        guess = ( low + high ) / 2\n    print ( guess )\n"}
{"java": "static int getMaxLength ( int arr [ ] , int n ) { int start = 0 ; int preCnt = 0 ; while ( start < n && arr [ start ] == 1 ) { preCnt ++ ; start ++ ; } int end = n - 1 ; int suffCnt = 0 ; while ( end >= 0 && arr [ end ] == 1 ) { suffCnt ++ ; end -- ; } if ( start > end ) return n ; int midCnt = 0 ; int result = 0 ; for ( int i = start ; i <= end ; i ++ ) { if ( arr [ i ] == 1 ) { midCnt ++ ; result = Math . max ( result , midCnt ) ; } else { midCnt = 0 ; } } return Math . max ( result , preCnt + suffCnt ) ; }", "python": "def getMaxLength ( arr , n ) :\n    start = 0\n    preCnt = 0\n    while ( start < n and arr [ start ] == 1 ) :\n        preCnt = preCnt + 1\n        start = start + 1\n    end = n - 1\n    suffCnt = 0\n    while ( end >= 0 and arr [ end ] == 1 ) :\n        suffCnt = suffCnt + 1\n        end = end - 1\n    if ( start > end ) :\n        return n\n    midCnt = 0\n    i = start\n    result = 0\n    while ( i <= end ) :\n        if ( arr [ i ] == 1 ) :\n            midCnt = midCnt + 1\n            result = max ( result , midCnt )\n        else :\n            midCnt = 0\n        i = i + 1\n    return max ( result , preCnt + suffCnt )\n"}
{"java": "static int countOfSubarrays ( int [ ] arr , int n ) { int count = 0 ; int [ ] v = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) v [ arr [ i ] ] = i ; int maximum = Integer . MIN_VALUE ; int minimum = Integer . MAX_VALUE ; for ( int i = 1 ; i <= n ; i ++ ) { maximum = Math . max ( maximum , v [ i ] ) ; minimum = Math . min ( minimum , v [ i ] ) ; if ( maximum - minimum < i ) count = count + 1 ; } return count ; }", "python": "def countOfSubarrays ( arr , n ) :\n    count = 0 ;\n    v = [ 0 ] * ( n + 1 ) ;\n    for i in range ( n ) :\n        v [ arr [ i ] ] = i ;\n    maximum = INT_MIN ;\n    minimum = INT_MAX ;\n    for i in range ( 1 , n + 1 ) :\n        maximum = max ( maximum , v [ i ] ) ;\n        minimum = min ( minimum , v [ i ] ) ;\n        if ( maximum - minimum < i ) :\n            count = count + 1 ;\n    return count ;\n"}
{"java": "static int findMinCost ( int arr [ ] , int n , int choc_cost ) { int choc_buy = arr [ 0 ] ; int curr_choc = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int choc = arr [ i ] - arr [ i + 1 ] ; curr_choc += choc ; if ( curr_choc < 0 ) { choc_buy += Math . abs ( curr_choc ) ; curr_choc = 0 ; } } return choc_buy * choc_cost ; }", "python": "def findMinCost ( arr , n , choc_cost ) :\n    choc_buy = arr [ 0 ]\n    curr_choc = 0\n    for i in range ( 0 , n - 1 ) :\n        choc = arr [ i ] - arr [ i + 1 ]\n        curr_choc += choc\n        if ( curr_choc < 0 ) :\n            choc_buy += abs ( curr_choc )\n            curr_choc = 0\n    return choc_buy * choc_cost\n"}
{"java": "public static String solution ( ArrayList < Integer > x , ArrayList < Integer > y , ArrayList < Integer > z ) { int xtotal = 0 ; int ytotal = 0 ; int ztotal = 0 ; for ( int i = 0 ; i < x . size ( ) ; i ++ ) { xtotal += x . get ( i ) ; } for ( int i = 0 ; i < y . size ( ) ; i ++ ) { ytotal += y . get ( i ) ; } for ( int i = 0 ; i < z . size ( ) ; i ++ ) { ztotal += z . get ( i ) ; } if ( xtotal == 0 && ytotal == 0 && ztotal == 0 ) return \" YES \" ; else return \" NO \" ; }", "python": "def main ( ) :\n    n = int ( input ( ) )\n    X , Y , Z = 0 , 0 , 0\n    for _ in range ( n ) :\n        x , y , z = list ( map ( int , input ( ) . split ( ) ) )\n        X += x\n        Y += y\n        Z += z\n    if X == Y == Z == 0 :\n        print ( \" YES \" )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static int highestPowerOf2 ( int n ) { return ( n & ( ~ ( n - 1 ) ) ) ; }", "python": "def highestPowerOf2 ( n ) :\n    return ( n & ( ~ ( n - 1 ) ) )\n"}
{"java": "static int getMod ( String str , int n , int k ) { int pwrTwo [ ] = new int [ n ] ; pwrTwo [ 0 ] = 1 % k ; for ( int i = 1 ; i < n ; i ++ ) { pwrTwo [ i ] = pwrTwo [ i - 1 ] * ( 2 % k ) ; pwrTwo [ i ] %= k ; } int res = 0 ; int i = 0 , j = n - 1 ; while ( i < n ) { if ( str . charAt ( j ) == '1' ) { res += ( pwrTwo [ i ] ) ; res %= k ; } i ++ ; j -- ; } return res ; }", "python": "def getMod ( _str , n , k ) :\n    pwrTwo = [ 0 ] * n\n    pwrTwo [ 0 ] = 1 % k\n    for i in range ( 1 , n ) :\n        pwrTwo [ i ] = pwrTwo [ i - 1 ] * ( 2 % k )\n        pwrTwo [ i ] %= k\n    res = 0\n    i = 0\n    j = n - 1\n    while ( i < n ) :\n        if ( _str [ j ] == '1' ) :\n            res += ( pwrTwo [ i ] )\n            res %= k\n        i += 1\n        j -= 1\n    return res\n"}
{"java": "static void result ( int N ) { for ( int num = 0 ; num < N ; num ++ ) { if ( num % 3 == 0 && num % 5 == 0 ) System . out . print ( num + \" \u2581 \" ) ; } }", "python": "def result ( N ) :\n    for num in range ( N ) :\n        if num % 3 == 0 and num % 5 == 0 :\n            print ( str ( num ) + \" \u2581 \" , end = \" \" )\n        else :\n            pass\n"}
{"java": "static int getMaxNum ( int a , int b , int c ) { if ( b % c == 0 ) return b ; int x = ( ( b / c ) * c ) ; if ( x >= a && x <= b ) return x ; else return - 1 ; }", "python": "def getMaxNum ( a , b , c ) :\n    if ( b % c == 0 ) :\n        return b\n    x = ( ( b // c ) * c )\n    if ( x >= a and x <= b ) :\n        return x\n    else :\n        return - 1\n"}
{"java": "static int gcd ( int a , int b ) { if ( a < b ) { int t = a ; a = b ; b = t ; } if ( a % b == 0 ) { return b ; } return gcd ( a , a % b ) ; }", "python": "def divisor_list ( n ) :\n    ret = [ ]\n    for k in range ( 1 , int ( n ** 0.5 ) + 1 ) :\n        if n % k == 0 :\n            ret . append ( k )\n            if k != n // k :\n                ret . append ( n // k )\n    return list ( sorted ( ret , reverse = True ) )\n"}
{"java": "static int invertBits ( int n ) { int x = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; int m = 1 << x ; m = m | m - 1 ; n = n ^ m ; return n ; }", "python": "def invertBits ( n ) :\n    x = int ( math . log ( n , 2 ) )\n    m = 1 << x\n    m = m | m - 1\n    n = n ^ m\n    return n\n"}
{"java": "static void ReplaceElements ( int arr [ ] , int n ) { int min_ele = arr [ 0 ] ; arr [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( min_ele < arr [ i ] ) { arr [ i ] = min_ele ; } else if ( min_ele >= arr [ i ] ) { int temp = arr [ i ] ; arr [ i ] = min_ele ; min_ele = temp ; } } }", "python": "def ReplaceElements ( arr , n ) :\n    min_ele = arr [ 0 ]\n    arr [ 0 ] = - 1\n    for i in range ( 1 , n ) :\n        if ( min_ele < arr [ i ] ) :\n            arr [ i ] = min_ele\n        elif ( min_ele >= arr [ i ] ) :\n            temp = arr [ i ]\n            arr [ i ] = min_ele\n            min_ele = temp\n"}
{"java": "static void sortMultiples ( int arr [ ] , int n , int x ) { Vector < Integer > v = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) { v . add ( arr [ i ] ) ; } } Collections . sort ( v ) ; int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) { arr [ i ] = v . get ( j ++ ) ; } } }", "python": "def sortMultiples ( arr , n , x ) :\n    v = [ ]\n    for i in range ( 0 , n , 1 ) :\n        if ( arr [ i ] % x == 0 ) :\n            v . append ( arr [ i ] )\n    v . sort ( reverse = False )\n    j = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( arr [ i ] % x == 0 ) :\n            arr [ i ] = v [ j ]\n            j += 1\n"}
{"java": "static void Loss ( int SP , int P ) { float loss = 0 ; loss = ( float ) ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) ; System . out . println ( \" Loss \u2581 = \u2581 \" + loss ) ; }", "python": "def Loss ( SP , P ) :\n    loss = 0\n    loss = ( ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) )\n    print ( \" Loss \u2581 = \" , round ( loss , 3 ) )\n"}
{"java": "static void printSubArrays ( int [ ] arr , int start , int end ) { if ( end == arr . length ) return ; else if ( start > end ) printSubArrays ( arr , 0 , end + 1 ) ; else { System . out . print ( \" [ \" ) ; for ( int i = start ; i < end ; i ++ ) { System . out . print ( arr [ i ] + \" , \u2581 \" ) ; } System . out . println ( arr [ end ] + \" ] \" ) ; printSubArrays ( arr , start + 1 , end ) ; } return ; }", "python": "def printSubArrays ( arr , start , end ) :\n    if end == len ( arr ) :\n        return\n    elif start > end :\n        return printSubArrays ( arr , 0 , end + 1 )\n    else :\n        print ( arr [ start : end + 1 ] )\n        return printSubArrays ( arr , start + 1 , end )\n"}
{"java": "static boolean isPlusPossible ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } boolean foundModOne = false ; for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) { int element = x . getKey ( ) ; int frequency = x . getValue ( ) ; if ( frequency % 4 == 0 ) continue ; if ( frequency % 4 == 1 ) { if ( foundModOne ) return false ; foundModOne = true ; } else return false ; } return true ; }", "python": "def isPlusPossible ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] = mp . get ( arr [ i ] , 0 ) + 1\n    foundModOne = False\n    for x in mp :\n        element = x\n        frequency = mp [ x ]\n        if ( frequency % 4 == 0 ) :\n            continue\n        if ( frequency % 4 == 1 ) :\n            if ( foundModOne == True ) :\n                return False\n            foundModOne = True\n        else :\n            return False\n    return True\n"}
{"java": "static int majorityInMatrix ( int arr [ ] [ ] ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( mp . containsKey ( arr [ i ] [ j ] ) ) mp . put ( arr [ i ] [ j ] , mp . get ( arr [ i ] [ j ] ) + 1 ) ; else mp . put ( arr [ i ] [ j ] , 1 ) ; } } int countMajority = 0 ; Iterator < HashMap . Entry < Integer , Integer > > itr = mp . entrySet ( ) . iterator ( ) ; while ( itr . hasNext ( ) ) { HashMap . Entry < Integer , Integer > entry = itr . next ( ) ; if ( entry . getValue ( ) >= ( ( N * M ) / 2 ) ) { countMajority ++ ; } } return countMajority ; }", "python": "def majorityInMatrix ( arr ) :\n    mp = { i : 0 for i in range ( 7 ) }\n    for i in range ( len ( arr ) ) :\n        for j in range ( len ( arr ) ) :\n            mp [ arr [ i ] [ j ] ] += 1\n    countMajority = 0\n    for key , value in mp . items ( ) :\n        if ( value >= ( int ( ( N * M ) / 2 ) ) ) :\n            countMajority += 1\n    return countMajority\n"}
{"java": "static int sameSetBits ( int arr [ ] , int n ) { Vector < Integer > v = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int count = Integer . bitCount ( arr [ i ] ) ; v . add ( count ) ; } int current_count = 1 , max_count = 1 ; for ( int i = 1 ; i < v . size ( ) - 1 ; i ++ ) { if ( v . get ( i + 1 ) == v . get ( i ) ) current_count ++ ; else current_count = 1 ; max_count = Math . max ( max_count , current_count ) ; } return max_count ; }", "python": "def sameSetBits ( arr , n ) :\n    v = [ ]\n    for i in range ( 0 , n , 1 ) :\n        v . append ( bin ( arr [ i ] ) . count ( '1' ) )\n    current_count = 1\n    max_count = 1\n    for i in range ( 1 , len ( v ) - 1 , 1 ) :\n        if ( v [ i + 1 ] == v [ i ] ) :\n            current_count += 1\n        else :\n            current_count = 1\n        max_count = max ( max_count , current_count )\n    return max_count\n"}
{"java": "static int sum ( int a , int b ) { int sum = 0 ; for ( int i = 1 ; i <= Math . min ( a , b ) ; i ++ ) if ( a % i == 0 && b % i == 0 ) sum += i ; return sum ; }", "python": "def sum ( a , b ) :\n    sum = 0\n    for i in range ( 1 , min ( a , b ) ) :\n        if ( a % i == 0 and b % i == 0 ) :\n            sum += i\n    return sum\n"}
{"java": "static void PrintBothArrays ( int a [ ] , int n ) { Vector < Integer > v1 = new Vector < Integer > ( ) , v2 = new Vector < Integer > ( ) ; HashMap < Integer , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mpp . put ( a [ i ] , ( mpp . get ( a [ i ] ) == null ? 0 : mpp . get ( a [ i ] ) ) + 1 ) ; if ( mpp . get ( a [ i ] ) == 1 ) v1 . add ( a [ i ] ) ; else if ( mpp . get ( a [ i ] ) == 2 ) v2 . add ( a [ i ] ) ; else { System . out . println ( \" Not \u2581 possible \" ) ; return ; } } Collections . sort ( v1 ) ; System . out . println ( \" Strictly \u2581 increasing \u2581 array \u2581 is : \" ) ; for ( int i = 0 ; i < v1 . size ( ) ; i ++ ) System . out . print ( v1 . get ( i ) + \" \u2581 \" ) ; Collections . sort ( v2 ) ; Collections . reverse ( v2 ) ; System . out . println ( \" \\n Strictly \u2581 decreasing \u2581 array \u2581 is : \" ) ; for ( int i = 0 ; i < v2 . size ( ) ; i ++ ) System . out . print ( v2 . get ( i ) + \" \u2581 \" ) ; }", "python": "def PrintBothArrays ( a , n ) :\n    v1 , v2 = [ ] , [ ] ;\n    mpp = dict . fromkeys ( a , 0 ) ;\n    for i in range ( n ) :\n        mpp [ a [ i ] ] += 1 ;\n        if ( mpp [ a [ i ] ] == 1 ) :\n            v1 . append ( a [ i ] ) ;\n        elif ( mpp [ a [ i ] ] == 2 ) :\n            v2 . append ( a [ i ] ) ;\n        else :\n            print ( \" Not \u2581 possible \" ) ;\n            return ;\n    v1 . sort ( ) ;\n    print ( \" Strictly \u2581 increasing \u2581 array \u2581 is : \" ) ;\n    for it in v1 :\n        print ( it , end = \" \u2581 \" ) ;\n    v2 . sort ( reverse = True ) ;\n    print ( \" \\n Strictly \u2581 decreasing \u2581 array \u2581 is : \" ) ;\n    for it in v2 :\n        print ( it , end = \" \u2581 \" )\n"}
{"java": "static double findsolution ( double d , double h , double m , double n ) { double k = ( 4 * m ) / ( pie * d * d ) ; if ( n > k ) return - 1 ; double ans = ( h / ( k - n ) ) ; return ans ; }", "python": "def findsolution ( d , h , m , n ) :\n    k = ( 4 * m ) / ( pie * d * d )\n    if ( n > k ) :\n        return - 1\n    ans = ( h / ( k - n ) )\n    return round ( ans , 5 )\n"}
{"java": "public static int lenoflongestnonpalindrome ( String s ) { int max1 = 1 , len = 0 ; char [ ] new_str = s . toCharArray ( ) ; for ( int i = 0 ; i < new_str . length - 1 ; i ++ ) { if ( new_str [ i ] == new_str [ i + 1 ] ) len = 0 ; else if ( i > 0 && ( new_str [ i + 1 ] == new_str [ i - 1 ] ) ) len = 1 ; else len ++ ; max1 = Math . max ( max1 , len + 1 ) ; } if ( max1 == 1 ) return 0 ; else return max1 ; }", "python": "def lenoflongestnonpalindrome ( s ) :\n    max1 , length = 1 , 0\n    for i in range ( 0 , len ( s ) - 1 ) :\n        if s [ i ] == s [ i + 1 ] :\n            length = 0\n        elif s [ i + 1 ] == s [ i - 1 ] and i > 0 :\n            length = 1\n        else :\n            length += 1\n        max1 = max ( max1 , length + 1 )\n    if max1 == 1 :\n        return 0\n    else :\n        return max1\n"}
{"java": "public static int fun ( String str , String qaq , int i , int j , int arr [ ] [ ] ) { if ( qaq . length ( ) == j ) { return 1 ; } if ( str . length ( ) == i ) { return 0 ; } if ( arr [ i ] [ j ] != - 1 ) { return arr [ i ] [ j ] ; } if ( str . charAt ( i ) == qaq . charAt ( j ) ) { int x = fun ( str , qaq , i + 1 , j + 1 , arr ) ; int y = fun ( str , qaq , i + 1 , j , arr ) ; arr [ i ] [ j ] = x + y ; return x + y ; } else { int y = fun ( str , qaq , i + 1 , j , arr ) ; arr [ i ] [ j ] = y ; return y ; } }", "python": "def su ( s ) :\n    n = len ( s )\n    cnt = 0\n    for i in range ( 0 , n - 2 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if s [ i ] == \" Q \" and s [ j ] == \" A \" and s [ k ] == \" Q \" :\n                    cnt += 1\n    return cnt\n"}
{"java": "public static int indexOfFirstOne ( int arr [ ] , int low , int high ) { while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == 1 && ( mid == 0 || arr [ mid - 1 ] == 0 ) ) return mid ; else if ( arr [ mid ] == 1 ) high = mid - 1 ; else low = mid + 1 ; } return - 1 ; }", "python": "def indexOfFirstOne ( arr , low , high ) :\n    while ( low <= high ) :\n        mid = int ( ( low + high ) / 2 )\n        if ( arr [ mid ] == 1 and ( mid == 0 or arr [ mid - 1 ] == 0 ) ) :\n            return mid\n        elif ( arr [ mid ] == 1 ) :\n            high = mid - 1\n        else :\n            low = mid + 1\n    return - 1 ;\n"}
{"java": "static void printPalindrome ( int n ) { if ( n == 1 ) { System . out . println ( \" Smallest \u2581 Palindrome : \u2581 0\" ) ; System . out . println ( \" Largest \u2581 Palindrome : \u2581 9\" ) ; } else { System . out . println ( \" Smallest \u2581 Palindrome : \u2581 \" + ( int ) ( Math . pow ( 10 , n - 1 ) ) + 1 ) ; System . out . println ( \" Largest \u2581 Palindrome : \u2581 \" + ( ( int ) ( Math . pow ( 10 , n ) ) - 1 ) ) ; } }", "python": "def printPalindrome ( n ) :\n    if ( n == 1 ) :\n        print ( \" Smallest \u2581 Palindrome : \u2581 0\" )\n        print ( \" Largest \u2581 Palindrome : \u2581 9\" )\n    else :\n        print ( \" Smallest \u2581 Palindrome : \" , int ( pow ( 10 , n - 1 ) ) + 1 )\n        print ( \" Largest \u2581 Palindrome : \" , int ( pow ( 10 , n ) ) - 1 )\n"}
{"java": "public static int countOrderedPairs ( int [ ] A , int n ) { int orderedPairs = 0 ; HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . get ( A [ i ] ) == null ) m . put ( A [ i ] , 1 ) ; else { int a = m . get ( A [ i ] ) ; m . put ( A [ i ] , ++ a ) ; } } for ( int entry : m . keySet ( ) ) { int X = entry ; int Y = m . get ( entry ) ; for ( int j = 1 ; j <= Y ; j ++ ) { if ( m . get ( j ) >= X ) orderedPairs ++ ; } } return orderedPairs ; }", "python": "def countOrderedPairs ( A , n ) :\n    orderedPairs = 0\n    m = defaultdict ( lambda : 0 )\n    for i in range ( 0 , n ) :\n        m [ A [ i ] ] += 1\n    for X , Y in m . items ( ) :\n        for j in range ( 1 , Y + 1 ) :\n            if m [ j ] >= X :\n                orderedPairs += 1\n    return orderedPairs\n"}
{"java": "static int getNumber ( int n , int k ) { int [ ] arr = new int [ n ] ; int i = 0 ; int odd = 1 ; while ( odd <= n ) { arr [ i ++ ] = odd ; odd += 2 ; } int even = 2 ; while ( even <= n ) { arr [ i ++ ] = even ; even += 2 ; } return arr [ k - 1 ] ; }", "python": "def getNumber ( n , k ) :\n    arr = [ 0 ] * n ;\n    i = 0 ;\n    odd = 1 ;\n    while ( odd <= n ) :\n        arr [ i ] = odd ;\n        i += 1 ;\n        odd += 2 ;\n    even = 2 ;\n    while ( even <= n ) :\n        arr [ i ] = even ;\n        i += 1 ;\n        even += 2 ;\n    return arr [ k - 1 ] ;\n"}
{"java": "static int traverseMatrix ( int arr [ ] [ ] , int current_row , int current_col ) { if ( current_col >= M ) return 0 ; if ( current_row >= N ) return 1 ; System . out . print ( arr [ current_row ] [ current_col ] + \" , \u2581 \" ) ; if ( traverseMatrix ( arr , current_row , current_col + 1 ) == 1 ) return 1 ; return traverseMatrix ( arr , current_row + 1 , 0 ) ; }", "python": "def traverseMatrix ( arr , current_row , current_col ) :\n    if ( current_col >= M ) :\n        return 0 ;\n    if ( current_row >= N ) :\n        return 1 ;\n    print ( arr [ current_row ] [ current_col ] , end = \" , \u2581 \" ) ;\n    if ( traverseMatrix ( arr , current_row , current_col + 1 ) == 1 ) :\n        return 1 ;\n    return traverseMatrix ( arr , current_row + 1 , 0 ) ;\n"}
{"java": "static double area_of_circle ( int m , int n ) { int square_of_radius = ( m * n ) / 4 ; double area = ( 3.141 * square_of_radius ) ; return area ; }", "python": "def area_of_circle ( m , n ) :\n    square_of_radius = ( m * n ) / 4\n    area = ( 3.141 * square_of_radius )\n    return area\n"}
{"java": "static boolean isAlphabaticOrder ( String s ) { int n = s . length ( ) ; char c [ ] = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = s . charAt ( i ) ; } Arrays . sort ( c ) ; for ( int i = 0 ; i < n ; i ++ ) if ( c [ i ] != s . charAt ( i ) ) return false ; return true ; }", "python": "def isAlphabaticOrder ( s ) :\n    n = len ( s )\n    c = [ s [ i ] for i in range ( len ( s ) ) ]\n    c . sort ( reverse = False )\n    for i in range ( n ) :\n        if ( c [ i ] != s [ i ] ) :\n            return False\n    return True\n"}
{"java": "static int maxElement ( int a [ ] , int n ) { if ( n < 3 ) return - 1 ; int maxElement = a [ 0 ] ; int maxProd = a [ n - 1 ] * a [ 1 ] ; for ( int i = 1 ; i < n ; i ++ ) { int currProd = a [ i - 1 ] * a [ ( i + 1 ) % n ] ; if ( currProd > maxProd ) { maxProd = currProd ; maxElement = a [ i ] ; } else if ( currProd == maxProd ) { maxElement = Math . max ( maxElement , a [ i ] ) ; } } return maxElement ; }", "python": "def maxElement ( a , n ) :\n    if n < 3 :\n        return - 1\n    maxElement = a [ 0 ]\n    maxProd = a [ n - 1 ] * a [ 1 ]\n    for i in range ( 1 , n ) :\n        currprod = a [ i - 1 ] * a [ ( i + 1 ) % n ]\n        if currprod > maxProd :\n            maxProd = currprod\n            maxElement = a [ i ]\n        elif currprod == maxProd :\n            maxElement = max ( maxElement , a [ i ] )\n    return maxElement\n"}
{"java": "static int maxXORInRange ( int L , int R ) { int LXR = L ^ R ; int msbPos = 0 ; while ( LXR > 0 ) { msbPos ++ ; LXR >>= 1 ; } int maxXOR = 0 ; int two = 1 ; while ( msbPos -- > 0 ) { maxXOR += two ; two <<= 1 ; } return maxXOR ; }", "python": "def maxXORInRange ( L , R ) :\n    LXR = L ^ R\n    msbPos = 0\n    while ( LXR ) :\n        msbPos += 1\n        LXR >>= 1\n    maxXOR , two = 0 , 1\n    while ( msbPos ) :\n        maxXOR += two\n        two <<= 1\n        msbPos -= 1\n    return maxXOR\n"}
{"java": "static int countNum ( int N , int arr [ ] ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( i == j ) continue ; else sum += arr [ j ] ; } if ( sum % arr [ i ] == 0 ) count ++ ; } return count ; }", "python": "def countNum ( N , arr ) :\n    count = 0\n    for i in range ( N ) :\n        Sum = 0\n        for j in range ( N ) :\n            if ( i == j ) :\n                continue\n            else :\n                Sum += arr [ j ]\n        if ( Sum % arr [ i ] == 0 ) :\n            count += 1\n    return count\n"}
{"java": "static boolean checkBisymmetric ( int m [ ] [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( m [ i ] [ j ] != m [ j ] [ i ] ) return false ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n - i ; j ++ ) if ( m [ i ] [ j ] != m [ n - j - 1 ] [ n - i - 1 ] ) return false ; return true ; }", "python": "def checkBisymmetric ( m , n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , i ) :\n            if ( m [ i ] [ j ] != m [ j ] [ i ] ) :\n                return false\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n - i ) :\n            if ( m [ i ] [ j ] != m [ n - j - 1 ] [ n - i - 1 ] ) :\n                return False\n    return True ;\n"}
{"java": "static int modulo_13 ( String s , int n ) { long [ ] [ ] dp = new long [ n + 1 ] [ 13 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { int nxt = s . charAt ( i ) - '0' ; if ( s . charAt ( i ) == ' ? ' ) nxt = j ; for ( int k = 0 ; k < 13 ; k ++ ) { int rem = ( 10 * k + nxt ) % 13 ; dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] ; dp [ i + 1 ] [ rem ] %= MOD ; } if ( s . charAt ( i ) != ' ? ' ) break ; } } return ( int ) dp [ n ] [ 5 ] ; }", "python": "def modulo_13 ( s , n ) :\n    dp = np . zeros ( ( n + 1 , 13 ) ) ;\n    dp [ 0 ] [ 0 ] = 1 ;\n    for i in range ( n ) :\n        for j in range ( 10 ) :\n            nxt = ord ( s [ i ] ) - ord ( '0' ) ;\n            if ( s [ i ] == ' ? ' ) :\n                nxt = j ;\n            for k in range ( 13 ) :\n                rem = ( 10 * k + nxt ) % 13 ;\n                dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] ;\n                dp [ i + 1 ] [ rem ] %= MOD ;\n            if ( s [ i ] != ' ? ' ) :\n                break ;\n    return int ( dp [ n ] [ 5 ] ) ;\n"}
{"java": "static int findK ( int n , int k ) { ArrayList < Integer > a = new ArrayList < Integer > ( n ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 1 ) a . add ( i ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 0 ) a . add ( i ) ; return ( a . get ( k - 1 ) ) ; }", "python": "def findK ( n , k ) :\n    a = list ( )\n    i = 1\n    while i < n :\n        a . append ( i )\n        i = i + 2\n    i = 2\n    while i < n :\n        a . append ( i )\n        i = i + 2\n    return ( a [ k - 1 ] )\n"}
{"java": "static int findOptimalSolution ( int [ ] a , int N ) { Arrays . sort ( a ) ; int points = 0 ; for ( int i = 0 ; i < N ; i ++ ) { points += a [ i ] * i ; } return points ; }", "python": "def findOptimalSolution ( a , N ) :\n    a . sort ( )\n    points = 0\n    for i in range ( 0 , N ) :\n        points += a [ i ] * i\n    return points\n"}
{"java": "static String removeDuplicate ( char str [ ] , int n ) { int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < i ; j ++ ) { if ( str [ i ] == str [ j ] ) { break ; } } if ( j == i ) { str [ index ++ ] = str [ i ] ; } } return String . valueOf ( Arrays . copyOf ( str , index ) ) ; }", "python": "def removeDuplicate ( str , n ) :\n    index = 0\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , i + 1 ) :\n            if ( str [ i ] == str [ j ] ) :\n                break\n        if ( j == i ) :\n            str [ index ] = str [ i ]\n            index += 1\n    return \" \" . join ( str [ : index ] )\n"}
{"java": "public static int countOccurence ( int n , int [ ] arr , int k ) { int ans = 0 ; HashMap < Integer , Boolean > hash = new HashMap < > ( ) ; HashMap < Integer , Integer > occurence = new HashMap < > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( hash . get ( arr [ i ] ) != null && hash . get ( arr [ i ] ) == true ) continue ; if ( occurence . get ( arr [ i ] ) != null && occurence . get ( arr [ i ] ) >= k ) { ans ++ ; hash . put ( arr [ i ] , true ) ; } else { if ( occurence . get ( arr [ i ] ) == null ) occurence . put ( arr [ i ] , 1 ) ; else { int temp = occurence . get ( arr [ i ] ) ; occurence . put ( arr [ i ] , ++ temp ) ; } } } return ans ; }", "python": "def countOccurrence ( n , arr , k ) :\n    ans = 0 ;\n    hash = dict . fromkeys ( arr , 0 ) ;\n    occurrence = dict . fromkeys ( arr , 0 ) ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if ( hash [ arr [ i ] ] == True ) :\n            continue ;\n        if ( occurrence [ arr [ i ] ] >= k ) :\n            ans += 1 ;\n            hash [ arr [ i ] ] = True ;\n        else :\n            occurrence [ arr [ i ] ] += 1 ;\n    return ans ;\n"}
{"java": "static int numberOfSolutions ( int n ) { int c = 0 ; while ( n > 0 ) { c += n % 2 ; n /= 2 ; } return ( int ) Math . pow ( 2 , c ) ; }", "python": "def numberOfSolutions ( n ) :\n    c = 0\n    while ( n ) :\n        c += n % 2\n        n //= 2\n    return int ( pow ( 2 , c ) )\n"}
{"java": "static int getPairs ( int a [ ] ) { int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { for ( int j = 0 ; j < a . length ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; }", "python": "def getPairs ( a ) :\n    count = 0\n    for i in range ( len ( a ) ) :\n        for j in range ( len ( a ) ) :\n            if ( a [ i ] < a [ j ] ) :\n                count += 1\n    return count\n"}
{"java": "public static void digit_product_Sum ( int N ) { int a [ ] = new int [ N + 1 ] ; int product = 1 ; a [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { product = a [ i - 1 ] / 10 ; if ( product == 0 ) product = 1 ; else product = a [ i - 1 ] % 10 ; int val = a [ i - 1 ] / 10 ; if ( val == 0 ) val = a [ i - 1 ] ; a [ i ] = a [ i - 1 ] + ( val * product ) ; } for ( int i = 0 ; i < N ; i ++ ) System . out . print ( a [ i ] + \" \u2581 \" ) ; }", "python": "def digit_product_Sum ( N ) :\n    a = [ 0 ] * ( N + 1 ) ;\n    product = 1 ;\n    a [ 0 ] = 1 ;\n    for i in range ( 1 , N + 1 ) :\n        product = int ( a [ i - 1 ] / 10 ) ;\n        if ( product == 0 ) :\n            product = 1 ;\n        else :\n            product = a [ i - 1 ] % 10 ;\n        val = int ( a [ i - 1 ] / 10 ) ;\n        if ( val == 0 ) :\n            val = a [ i - 1 ] ;\n        a [ i ] = a [ i - 1 ] + ( val * product ) ;\n    for i in range ( N ) :\n        print ( a [ i ] , end = \" \u2581 \" ) ;\n"}
{"java": "static boolean isSubArray ( int A [ ] , int B [ ] , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( A [ i ] == B [ j ] ) { i ++ ; j ++ ; if ( j == m ) return true ; } else { i = i - j + 1 ; j = 0 ; } } return false ; }", "python": "def isSubArray ( A , B , n , m ) :\n    i = 0 ; j = 0 ;\n    while ( i < n and j < m ) :\n        if ( A [ i ] == B [ j ] ) :\n            i += 1 ;\n            j += 1 ;\n            if ( j == m ) :\n                return True ;\n        else :\n            i = i - j + 1 ;\n            j = 0 ;\n    return False ;\n"}
{"java": "static boolean isDivisibleby17 ( int n ) { if ( n == 0 || n == 17 ) return true ; if ( n < 17 ) return false ; return isDivisibleby17 ( ( int ) ( n >> 4 ) - ( int ) ( n & 15 ) ) ; }", "python": "def isDivisibleby17 ( n ) :\n    if ( n == 0 or n == 17 ) :\n        return True\n    if ( n < 17 ) :\n        return False\n    return isDivisibleby17 ( ( int ) ( n >> 4 ) - ( int ) ( n & 15 ) )\n"}
{"java": "static int count9s ( String number ) { int count = 0 ; int n = number . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int sum = number . charAt ( i ) - '0' ; if ( number . charAt ( i ) == '9' ) count ++ ; for ( int j = i + 1 ; j < n ; j ++ ) { sum = ( sum + number . charAt ( j ) - '0' ) % 9 ; if ( sum == 0 ) count ++ ; } } return count ; }", "python": "def count9s ( number ) :\n    count = 0\n    n = len ( number )\n    for i in range ( n ) :\n        sum = ord ( number [ i ] ) - ord ( '0' )\n        if ( number [ i ] == '9' ) :\n            count += 1\n        for j in range ( i + 1 , n ) :\n            sum = ( sum + ord ( number [ j ] ) - ord ( '0' ) ) % 9\n            if ( sum == 0 ) :\n                count += 1\n    return count\n"}
{"java": "static void findDivisors ( int n ) { int [ ] div = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j * i <= n ; j ++ ) div [ i * j ] ++ ; } for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( div [ i ] + \" \u2581 \" ) ; }", "python": "def findDivisors ( n ) :\n    div = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if j * i <= n :\n                div [ i * j ] += 1\n    for i in range ( 1 , n + 1 ) :\n        print ( div [ i ] , end = \" \u2581 \" )\n"}
{"java": "static void originalArray ( int greater [ ] , int n ) { Vector < Integer > temp = new Vector < Integer > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) temp . add ( i ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int k = n - greater [ i ] - i ; arr [ i ] = temp . get ( k ) ; temp . remove ( k ) ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \u2581 \" ) ; }", "python": "def originalArray ( greater , n ) :\n    temp = [ ]\n    for i in range ( n + 1 ) :\n        temp . append ( i )\n    arr = [ 0 for i in range ( n ) ]\n    for i in range ( n ) :\n        k = n - greater [ i ] - i\n        arr [ i ] = temp [ k ]\n        del temp [ k ]\n    for i in range ( n ) :\n        print ( arr [ i ] , end = \" \u2581 \" )\n"}
{"java": "static int findMinimumDeletion ( int l , int r , int dp [ ] [ ] , String s ) { if ( l > r ) { return 0 ; } if ( l == r ) { return 1 ; } if ( dp [ l ] [ r ] != - 1 ) { return dp [ l ] [ r ] ; } int res = 1 + findMinimumDeletion ( l + 1 , r , dp , s ) ; for ( int i = l + 1 ; i <= r ; ++ i ) { if ( s . charAt ( l ) == s . charAt ( i ) ) { res = Math . min ( res , findMinimumDeletion ( l + 1 , i - 1 , dp , s ) + findMinimumDeletion ( i , r , dp , s ) ) ; } } return dp [ l ] [ r ] = res ; }", "python": "def findMinimumDeletion ( l , r , dp , s ) :\n    if l > r :\n        return 0\n    if l == r :\n        return 1\n    if dp [ l ] [ r ] != - 1 :\n        return dp [ l ] [ r ]\n    res = 1 + findMinimumDeletion ( l + 1 , r , dp , s )\n    for i in range ( l + 1 , r + 1 ) :\n        if s [ l ] == s [ i ] :\n            res = min ( res , findMinimumDeletion ( l + 1 , i - 1 , dp , s ) + findMinimumDeletion ( i , r , dp , s ) )\n    dp [ l ] [ r ] = res\n    return res\n"}
{"java": "static int getMaximum ( int [ ] cardList ) { int maximum = 0 ; int maximumIndex = 0 ; for ( int index = 0 ; index < cardList . length ; index ++ ) { int temp = cardList [ index ] ; if ( temp > maximum ) { maximum = temp ; maximumIndex = index ; } } cardList [ maximumIndex ] = 0 ; return maximum ; }", "python": "def lcm ( a , b ) : return a * b / gcd ( a , b )\ndef LI ( ) : return list ( map ( int , sys . stdin . buffer . readline ( ) . split ( ) ) )\ndef I ( ) : return int ( sys . stdin . buffer . readline ( ) )\ndef LS ( ) : return sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( ' utf - 8' ) . split ( )\ndef S ( ) : return sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( ' utf - 8' )\ndef IR ( n ) : return [ I ( ) for i in range ( n ) ]\ndef LIR ( n ) : return [ LI ( ) for i in range ( n ) ]\ndef SR ( n ) : return [ S ( ) for i in range ( n ) ]\ndef LSR ( n ) : return [ LS ( ) for i in range ( n ) ]\ndef SRL ( n ) : return [ list ( S ( ) ) for i in range ( n ) ]\ndef main ( ) :\n    n = I ( )\n    a = sorted ( LI ( ) , reverse = True )\n    alice = 0\n    for i in range ( 0 , n , 2 ) :\n        alice += a [ i ]\n    print ( 2 * alice - sum ( a ) )\n"}
{"java": "static void printNumbers ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int A = arr [ n - 1 ] , B = - 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( A % arr [ i ] != 0 ) { B = arr [ i ] ; break ; } if ( i - 1 >= 0 && arr [ i ] == arr [ i - 1 ] ) { B = arr [ i ] ; break ; } } System . out . print ( \" A \u2581 = \u2581 \" + A + \" , \u2581 B \u2581 = \u2581 \" + B ) ; }", "python": "def printNumbers ( arr , n ) :\n    arr . sort ( )\n    A , B = arr [ n - 1 ] , - 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if A % arr [ i ] != 0 :\n            B = arr [ i ]\n            break\n        if i - 1 >= 0 and arr [ i ] == arr [ i - 1 ] :\n            B = arr [ i ]\n            break\n    print ( \" A \u2581 = \" , A , \" , \u2581 B \u2581 = \" , B )\n"}
{"java": "static double MinimumMail ( int n , int k , int x ) { double m = ( n - 1 ) + Math . ceil ( ( n - 1 ) * 1.0 / x ) * ( n - 1 ) + Math . ceil ( n * 1.0 / x ) * ( k - n ) ; return m ; }", "python": "def MinimumMail ( n , k , x ) :\n    m = ( ( n - 1 ) + int ( math . ceil ( ( n - 1 ) * 1.0 / x ) * ( n - 1 ) + math . ceil ( n * 1.0 / x ) * ( k - n ) ) ) ;\n    return m ;\n"}
{"java": "static void display ( int n ) { int i , j , k ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 , k = i ; j <= i ; j ++ , k -- ) { if ( k % 2 == 0 ) { System . out . print ( j ) ; } else { System . out . print ( \" * \" ) ; } } System . out . print ( \" \\n \" ) ; } }", "python": "def display ( n ) :\n    for i in range ( 1 , n + 1 ) :\n        k = i\n        for j in range ( 1 , i + 1 ) :\n            if k % 2 == 0 :\n                print ( j , end = ' ' )\n            else :\n                print ( ' * ' , end = ' ' )\n            k -= 1\n        print ( )\n"}
{"java": "static int findMaxCock ( int ar [ ] [ ] ) { if ( R < 3 || C < 3 ) return - 1 ; int max_sum = Integer . MIN_VALUE ; for ( int i = 0 ; i < R - 2 ; i ++ ) { for ( int j = 0 ; j < C - 2 ; j ++ ) { int sum = ( ar [ i ] [ j ] + ar [ i ] [ j + 2 ] ) + ( ar [ i + 1 ] [ j + 1 ] ) + ( ar [ i + 2 ] [ j ] + ar [ i + 2 ] [ j + 1 ] + ar [ i + 2 ] [ j + 2 ] ) ; max_sum = Math . max ( max_sum , sum ) ; } } return max_sum ; }", "python": "def findMaxCock ( ar ) :\n    if ( R < 3 or C < 3 ) :\n        return - 1\n    max_sum = - sys . maxsize - 1\n    for i in range ( R - 2 ) :\n        for j in range ( C - 2 ) :\n            sum = ( ( ar [ i ] [ j ] + ar [ i ] [ j + 2 ] ) + ( ar [ i + 1 ] [ j + 1 ] ) + ( ar [ i + 2 ] [ j ] + ar [ i + 2 ] [ j + 1 ] + ar [ i + 2 ] [ j + 2 ] ) )\n            max_sum = max ( max_sum , sum )\n    return max_sum ;\n"}
{"java": "static double hexDiagonal ( float a ) { if ( a < 0 ) return - 1 ; double d = ( double ) 1.73 * a ; return d ; }", "python": "def hexDiagonal ( a ) :\n    if ( a < 0 ) :\n        return - 1 ;\n    d = 1.73 * a ;\n    return d ;\n"}
{"java": "static int cal ( int n ) { double res = Math . pow ( Math . ceil ( ( Math . pow ( Math . pow ( 10 , ( n - 1 ) ) , 1 / 4 ) ) ) , 4 ) ; return ( int ) res ; }", "python": "def cal ( n ) :\n    res = pow ( ceil ( ( pow ( pow ( 10 , ( n - 1 ) ) , 1 / 4 ) ) ) , 4 )\n    return int ( res )\n"}
{"java": "static int get_last_two_digit ( long N ) { if ( N <= 10 ) { long ans = 0 , fac = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { fac = fac * i ; ans += fac ; } return ( int ) ans % 100 ; } else return 13 ; }", "python": "def get_last_two_digit ( N ) :\n    if N <= 10 :\n        ans = 0\n        fac = 1\n        for i in range ( 1 , N + 1 ) :\n            fac = fac * i\n            ans += fac\n        ans = ans % 100\n        return ans\n    else :\n        return 13\n"}
{"java": "public static int countPairs ( int n ) { int num = ( ( n / 2 ) + 1 ) ; int max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( ( n % i ) % j ) % n ; if ( val == max ) count ++ ; } } return count ; }", "python": "def countPairs ( n ) :\n    num = ( ( n // 2 ) + 1 )\n    Max = n % num\n    count = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            val = ( ( n % i ) % j ) % n\n            if ( val == Max ) :\n                count += 1\n    return count\n"}
{"java": "static String getString ( char [ ] str , int n ) { Map < Character , Character > uMap = new HashMap < > ( ) ; for ( int i = 0 ; i < MAX ; i ++ ) { uMap . put ( CHARS . charAt ( i ) , CHARS . charAt ( ( i + 1 ) % MAX ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { str [ i ] = uMap . get ( str [ i ] ) ; } return String . valueOf ( str ) ; }", "python": "def getString ( string , n ) :\n    string = list ( string ) ;\n    uMap = { } ;\n    for i in range ( MAX ) :\n        uMap [ CHARS [ i ] ] = CHARS [ ( i + 1 ) % MAX ] ;\n    for i in range ( n ) :\n        string [ i ] = uMap [ string [ i ] ] ;\n    return \" \" . join ( string ) ;\n"}
{"java": "public static char [ ] sortArrays ( char [ ] arr ) { int length = arr . length ; for ( int j = 0 ; j < arr . length - 1 ; j ++ ) { int d1 = arr [ j ] ; int d2 = arr [ j + 1 ] ; if ( d1 > d2 ) { char temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; j = - 1 ; } } return arr ; }", "python": "def sortArrays ( arr , length ) :\n    j = 0\n    while ( j < length - 1 ) :\n        d1 = arr [ j ]\n        d2 = arr [ j + 1 ]\n        if ( d1 > d2 ) :\n            temp = arr [ j ]\n            arr [ j ] = arr [ j + 1 ]\n            arr [ j + 1 ] = temp\n            j = - 1\n        j += 1\n    return arr\n"}
{"java": "static int rev ( int n , int temp ) { if ( n == 0 ) return temp ; temp = ( temp * 10 ) + ( n % 10 ) ; return rev ( n / 10 , temp ) ; }", "python": "def rev ( n , temp ) :\n    if ( n == 0 ) :\n        return temp ;\n    temp = ( temp * 10 ) + ( n % 10 ) ;\n    return rev ( n / 10 , temp ) ;\n"}
{"java": "static int minimumSets ( int arr [ ] , int n , int key ) { int i , j ; Arrays . sort ( arr ) ; for ( i = 0 , j = n - 1 ; i <= j ; ++ i ) if ( arr [ i ] + arr [ j ] <= key ) j -- ; return i ; }", "python": "def minimumSets ( arr , n , key ) :\n    arr . sort ( reverse = False )\n    j = n - 1\n    for i in range ( 0 , j + 1 , 1 ) :\n        if ( arr [ i ] + arr [ j ] <= key ) :\n            j -= 1\n    return i + 1\n"}
{"java": "static long numbers ( int n ) { return ( long ) ( Math . pow ( 2 , n + 1 ) ) - 2 ; }", "python": "def numbers ( n ) :\n    return pow ( 2 , n + 1 ) - 2\n"}
{"java": "static int vowel_calc ( String s ) { int n = s . length ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) arr [ i ] = n ; else arr [ i ] = ( n - i ) + arr [ i - 1 ] - i ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) sum += arr [ i ] ; } return sum ; }", "python": "def sumVowel ( string ) :\n    n = len ( string )\n    sum = 0\n    string = string . lower ( )\n    for i in range ( 0 , n ) :\n        s = string [ i ]\n        if ( s == \" a \" or s == \" e \" or s == \" i \" or s == \" o \" or s == \" u \" ) :\n            sum += ( ( n - i ) * ( i + 1 ) )\n    return sum\n"}
{"java": "static Vector < Integer > createSemiPrimeSieve ( int n ) { int v [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { v [ i ] = i ; } int countDivision [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { countDivision [ i ] = 2 ; } for ( int i = 2 ; i <= n ; i ++ ) { if ( v [ i ] == i && countDivision [ i ] == 2 ) { for ( int j = 2 * i ; j <= n ; j += i ) { if ( countDivision [ j ] > 0 ) { v [ j ] = v [ j ] / i ; countDivision [ j ] -- ; } } } } Vector < Integer > res = new Vector < > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( v [ i ] == 1 && countDivision [ i ] == 0 ) { res . add ( i ) ; } } return res ; }", "python": "def createSemiPrimeSieve ( n ) :\n    v = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        v [ i ] = i\n    countDivision = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        countDivision [ i ] = 2\n    for i in range ( 2 , n + 1 , 1 ) :\n        if ( v [ i ] == i and countDivision [ i ] == 2 ) :\n            for j in range ( 2 * i , n + 1 , i ) :\n                if ( countDivision [ j ] > 0 ) :\n                    v [ j ] = int ( v [ j ] / i )\n                    countDivision [ j ] -= 1\n    res = [ ]\n    for i in range ( 2 , n + 1 , 1 ) :\n        if ( v [ i ] == 1 and countDivision [ i ] == 0 ) :\n            res . append ( i )\n    return res\n"}
{"java": "static int sumofseries ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) res += ( i ) * ( i + 1 ) * ( i + 2 ) ; return res ; }", "python": "def sumofseries ( n ) :\n    res = 0\n    for i in range ( 1 , n + 1 ) :\n        res += ( i ) * ( i + 1 ) * ( i + 2 )\n    return res\n"}
{"java": "static int nth_group ( int n ) { return n * ( 2 * ( int ) Math . pow ( n , 2 ) + 1 ) ; }", "python": "def nth_group ( n ) :\n    return n * ( 2 * pow ( n , 2 ) + 1 )\n"}
{"java": "static int findPermutation ( int n ) { int len = ( int ) Math . ceil ( Math . log10 ( n ) ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( n % 2 != 0 ) { return n ; } else { n = ( n / 10 ) + ( n % 10 ) * ( int ) Math . pow ( 10 , len - i - 1 ) ; continue ; } } return - 1 ; }", "python": "def findPermutation ( n ) :\n    len = ceil ( log10 ( n ) )\n    for i in range ( 0 , len , 1 ) :\n        if n % 2 != 0 :\n            return n\n        else :\n            n = ( ( n / 10 ) + ( n % 10 ) * pow ( 10 , len - i - 1 ) )\n            continue\n    return - 1\n"}
{"java": "static int numberOfCells ( int mat [ ] [ ] ) { boolean [ ] [ ] row = new boolean [ N ] [ N ] ; boolean [ ] [ ] col = new boolean [ N ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = N - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] == 1 ) { row [ i ] [ j ] = ( j + 1 < N ) ? row [ i ] [ j + 1 ] : true ; } else { row [ i ] [ j ] = false ; } } } for ( int j = 0 ; j < N ; j ++ ) { for ( int i = N - 1 ; i >= 0 ; i -- ) { if ( mat [ i ] [ j ] == 1 ) { col [ i ] [ j ] = ( i + 1 < N ) ? col [ i + 1 ] [ j ] : true ; } else { col [ i ] [ j ] = false ; } } } int cnt = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { for ( int j = 0 ; j < N - 1 ; j ++ ) { if ( row [ i ] [ j ] && col [ i ] [ j ] ) { cnt ++ ; } } } for ( int i = 0 ; i < N ; i ++ ) { if ( col [ i ] [ N - 1 ] ) cnt ++ ; } for ( int j = 0 ; j < N - 1 ; j ++ ) { if ( row [ N - 1 ] [ j ] ) cnt ++ ; } return cnt ; }", "python": "def numberOfCells ( mat ) :\n    row = [ [ False for i in range ( N ) ] for i in range ( N ) ]\n    col = [ [ False for i in range ( N ) ] for i in range ( N ) ]\n    for i in range ( N ) :\n        for j in range ( N - 1 , - 1 , - 1 ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                if j + 1 < N :\n                    row [ i ] [ j ] = row [ i ] [ j + 1 ]\n                else :\n                    row [ i ] [ j ] = True\n            else :\n                row [ i ] [ j ] = False\n    for j in range ( N ) :\n        for i in range ( N - 1 , - 1 , - 1 ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                if i + 1 < N :\n                    col [ i ] [ j ] = col [ i + 1 ] [ j ]\n                else :\n                    col [ i ] [ j ] = True\n            else :\n                col [ i ] [ j ] = False\n    cnt = 0\n    for i in range ( N - 1 ) :\n        for j in range ( N - 1 ) :\n            if ( row [ i ] [ j ] and col [ i ] [ j ] ) :\n                cnt += 1\n    for i in range ( N ) :\n        if ( col [ i ] [ N - 1 ] ) :\n            cnt += 1\n    for j in range ( N - 1 ) :\n        if ( row [ N - 1 ] [ j ] ) :\n            cnt += 1\n    return cnt\n"}
{"java": "static int calculateSum ( int n ) { int a1 = 1 , a2 = 2 ; int r = 2 ; int d = 1 ; return ( n ) * ( 2 * a1 + ( n - 1 ) * d ) / 2 + a2 * ( int ) ( Math . pow ( r , n ) - 1 ) / ( r - 1 ) ; }", "python": "def calculateSum ( n ) :\n    a1 = 1 ;\n    a2 = 2 ;\n    r = 2 ;\n    d = 1 ;\n    return ( ( n ) * ( 2 * a1 + ( n - 1 ) * d ) / 2 + a2 * ( pow ( r , n ) - 1 ) / ( r - 1 ) ) ;\n"}
{"java": "public static void precisionCompute ( int x , int y , int n ) { if ( y == 0 ) { System . out . print ( \" Infinite \" ) ; return ; } if ( x == 0 ) { System . out . print ( \"0\" ) ; return ; } if ( n <= 0 ) { System . out . print ( x / y ) ; return ; } if ( ( ( x > 0 ) && ( y < 0 ) ) || ( ( x < 0 ) && ( y > 0 ) ) ) { System . out . print ( \" - \" ) ; x = x > 0 ? x : - x ; y = y > 0 ? y : - y ; } int d = x / y ; for ( int i = 0 ; i <= n ; i ++ ) { System . out . print ( d ) ; x = x - ( y * d ) ; if ( x == 0 ) break ; x = x * 10 ; d = x / y ; if ( i == 0 ) System . out . print ( \" . \" ) ; } }", "python": "def precisionCompute ( x , y , n ) :\n    if y == 0 :\n        print ( \" Infinite \" ) ;\n        return ;\n    if x == 0 :\n        print ( 0 ) ;\n        return ;\n    if n <= 0 :\n        print ( x / y ) ;\n        return ;\n    if ( ( ( x > 0 ) and ( y < 0 ) ) or ( ( x < 0 ) and ( y > 0 ) ) ) :\n        print ( \" - \" , end = \" \" ) ;\n        if x < 0 :\n            x = - x ;\n        if y < 0 :\n            y = - y ;\n    d = x / y ;\n    for i in range ( 0 , n + 1 ) :\n        print ( d ) ;\n        x = x - ( y * d ) ;\n        if x == 0 :\n            break ;\n        x = x * 10 ;\n        d = x / y ;\n        if ( i == 0 ) :\n            print ( \" . \" , end = \" \" ) ;\n"}
{"java": "static boolean isSellingPossible ( int n , int a [ ] ) { int i , c25 = 0 , c50 = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 25 ) c25 ++ ; else if ( a [ i ] == 50 ) { c50 ++ ; if ( c25 == 0 ) break ; c25 -- ; } else { if ( c50 > 0 && c25 > 0 ) { c50 -- ; c25 -- ; } else if ( c25 >= 3 ) c25 -= 3 ; else break ; } } if ( i == n ) return true ; else return false ; }", "python": "def isSellingPossible ( n , a ) :\n    c25 = 0 ;\n    c50 = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        if ( a [ i ] == 25 ) :\n            c25 += 1 ;\n        elif ( a [ i ] == 50 ) :\n            c50 += 1 ;\n            if ( c25 == 0 ) :\n                break ;\n            c25 -= 1 ;\n        else :\n            if ( c50 > 0 and c25 > 0 ) :\n                c50 -= 1 ;\n                c25 -= 1 ;\n            elif ( c25 >= 3 ) :\n                c25 -= 3 ;\n            else :\n                break ;\n        i += 1 ;\n    if ( i == n ) :\n        return True ;\n    else :\n        return False ;\n"}
{"java": "private static int interceptedMessage ( int [ ] firstFiles , int [ ] secondFiles ) { int maxFiles = 0 ; int firstPointer = 0 ; int secondPointer = 0 ; boolean hasFinished = false ; int tempFirstNumber = 0 ; int tempSecondNumber = 0 ; while ( ! hasFinished ) { if ( firstPointer == 0 && secondPointer == 0 ) { tempFirstNumber += firstFiles [ firstPointer ] ; tempSecondNumber += secondFiles [ secondPointer ] ; } if ( tempFirstNumber == tempSecondNumber ) { maxFiles ++ ; firstPointer ++ ; secondPointer ++ ; if ( firstPointer > firstFiles . length - 1 && secondPointer > secondFiles . length - 1 ) { break ; } tempFirstNumber = firstFiles [ firstPointer ] ; tempSecondNumber = secondFiles [ secondPointer ] ; } else if ( tempFirstNumber < tempSecondNumber ) { firstPointer ++ ; tempFirstNumber += firstFiles [ firstPointer ] ; } else { secondPointer ++ ; tempSecondNumber += secondFiles [ secondPointer ] ; } } return maxFiles ; }", "python": "def solve ( n , m , blocks_1 , blocks_2 ) :\n    blocks_1 = deque ( blocks_1 )\n    blocks_2 = deque ( blocks_2 )\n    sum_1 = blocks_1 . popleft ( )\n    sum_2 = 0\n    ans = 0\n    while len ( blocks_1 ) > 0 and len ( blocks_2 ) > 0 :\n        if sum_1 < sum_2 :\n            sum_1 += blocks_1 . popleft ( )\n        else :\n            sum_2 += blocks_2 . popleft ( )\n        if sum_1 == sum_2 :\n            ans += 1\n    if len ( blocks_1 ) + len ( blocks_2 ) > 0 :\n        ans += 1\n    return ans\n"}
{"java": "static void lastFiveDigits ( int n ) { n = ( n / 10000 ) * 10000 + ( ( n / 100 ) % 10 ) * 1000 + ( n % 10 ) * 100 + ( ( n / 10 ) % 10 ) * 10 + ( n / 1000 ) % 10 ; int ans = 1 ; for ( int i = 0 ; i < 5 ; i ++ ) { ans *= n ; ans %= 100000 ; } System . out . println ( ans ) ; }", "python": "def lastFiveDigits ( n ) :\n    n = ( ( int ) ( n / 10000 ) * 10000 + ( ( int ) ( n / 100 ) % 10 ) * 1000 + ( n % 10 ) * 100 + ( ( int ) ( n / 10 ) % 10 ) * 10 + ( int ) ( n / 1000 ) % 10 )\n    ans = 1\n    for i in range ( 5 ) :\n        ans *= n\n        ans %= 100000\n    print ( ans )\n"}
{"java": "static int nthTerm ( int N ) { return ( 2 * N + 3 ) * ( 2 * N + 3 ) - 2 * N ; }", "python": "def nthTerm ( N ) :\n    return ( ( 2 * N + 3 ) * ( 2 * N + 3 ) - 2 * N ) ;\n"}
{"java": "public static int nthTerm ( int N ) { return N * N + ( N + 1 ) * ( N + 1 ) ; }", "python": "def nthTerm ( N ) :\n    return N * N + ( N + 1 ) * ( N + 1 )\n"}
{"java": "private static void print ( int n , int k , int base ) { if ( n < k * base ) { System . out . println ( \" NO \" ) ; return ; } System . out . println ( \" YES \" ) ; StringBuilder stringBuilder = new StringBuilder ( ) ; for ( int j = 0 ; j < k - 1 ; j ++ ) { if ( stringBuilder . length ( ) > 0 ) stringBuilder . append ( \" \u2581 \" ) ; stringBuilder . append ( base ) ; } if ( stringBuilder . length ( ) > 0 ) stringBuilder . append ( \" \u2581 \" ) ; stringBuilder . append ( n - ( k - 1 ) * base ) ; System . out . println ( stringBuilder ) ; }", "python": "def solve ( ) :\n    n , k = list ( map ( int , input ( ) . split ( \" \u2581 \" ) ) )\n    a = 0\n    if n % 2 == 0 and k % 2 == 1 :\n        a = 2 ;\n    else :\n        a = 1 ;\n    l2 = [ ]\n    l2 += [ a ] * ( k - 1 )\n    c = n - sum ( l2 )\n    if c > 0 and c % 2 == a % 2 :\n        print ( \" YES \" )\n        print ( * l2 , c )\n    else :\n        print ( \" NO \" )\n"}
{"java": "static void last_digit ( int X , int Y ) { System . out . print ( X % Y ) ; }", "python": "def last_digit ( X , Y ) :\n    print ( X % Y ) ;\n"}
{"java": "static String isEvenOrOdd ( int L , int R ) { int oddCount = ( R - L ) / 2 ; if ( R % 2 == 1 || L % 2 == 1 ) oddCount ++ ; if ( oddCount % 2 == 0 ) return \" Even \" ; else return \" Odd \" ; }", "python": "def isEvenOrOdd ( L , R ) :\n    oddCount = ( R - L ) / 2\n    if ( R % 2 == 1 or L % 2 == 1 ) :\n        oddCount = oddCount + 1\n    if ( oddCount % 2 == 0 ) :\n        return \" Even \"\n    else :\n        return \" Odd \"\n"}
{"java": "static void printThreeParts ( int N ) { if ( N % 3 == 0 ) System . out . println ( \" x \u2581 = \u2581 1 , \u2581 y \u2581 = \u2581 1 , \u2581 z \u2581 = \u2581 \" + ( N - 2 ) ) ; else System . out . println ( \" \u2581 x \u2581 = \u2581 1 , \u2581 y \u2581 = \u2581 2 , \u2581 z \u2581 = \u2581 \" + ( N - 3 ) ) ; }", "python": "def printThreeParts ( N ) :\n    if ( N % 3 == 0 ) :\n        print ( \" \u2581 x \u2581 = \u2581 1 , \u2581 y \u2581 = \u2581 1 , \u2581 z \u2581 = \u2581 \" , N - 2 )\n    else :\n        print ( \" \u2581 x \u2581 = \u2581 1 , \u2581 y \u2581 = \u2581 2 , \u2581 z \u2581 = \u2581 \" , N - 3 )\n"}
{"java": "static int countWays ( int n ) { int count = 0 ; for ( int i = 1 ; i * i < n ; i ++ ) if ( n % i == 0 ) count ++ ; return count ; }", "python": "def countWays ( n ) :\n    count = 0\n    i = 1\n    while ( ( i * i ) < n ) :\n        if ( n % i == 0 ) :\n            count += 1\n        i += 1\n    return count\n"}
{"java": "static int search ( int i , int j ) { int count = 0 ; if ( j == in2 . length ) return 1 ; if ( i == in1 . length ) return 0 ; if ( dp [ i ] [ j ] != - 1 ) { return dp [ i ] [ j ] ; } else if ( in1 [ i ] == in2 [ j ] ) { count = search ( i + 1 , j + 1 ) % BIG_PRIME + search ( i + 1 , j ) % BIG_PRIME ; } else { count = search ( i + 1 , j ) % BIG_PRIME ; } return dp [ i ] [ j ] = count ; }", "python": "def main ( ) :\n    MOD = 1000000007\n    s , t = input ( ) , input ( )\n    n , m = len ( s ) , len ( t )\n    dp = [ [ 0 for i in range ( m + 1 ) ] for j in range ( n + 1 ) ]\n    dp [ 0 ] [ 0 ] = 1\n    for i in range ( n ) :\n        for j in range ( m - 1 , - 1 , - 1 ) :\n            dp [ i + 1 ] [ j ] += dp [ i ] [ j ]\n            dp [ i + 1 ] [ j ] %= MOD\n            if s [ i ] == t [ j ] :\n                dp [ i + 1 ] [ j + 1 ] += dp [ i ] [ j ]\n                dp [ i + 1 ] [ j + 1 ] %= MOD\n    sum = 0\n    for i in range ( n + 1 ) :\n        sum += dp [ i ] [ m ]\n    print ( sum % MOD )\n"}
{"java": "static int series ( int n ) { return ( 8 * n * n ) + 1 ; }", "python": "def series ( n ) :\n    print ( ( 8 * n ** 2 ) + 1 )\n"}
{"java": "static int findSumofEle ( int [ ] arr1 , int m , int [ ] arr2 , int n , int k ) { float arraySum = 0 ; for ( int i = 0 ; i < n ; i ++ ) arraySum += arr2 [ i ] ; float mean = arraySum / n ; int sumOfElements = 0 ; float difference = 0 ; for ( int i = 0 ; i < m ; i ++ ) { difference = arr1 [ i ] - mean ; if ( ( difference < 0 ) && ( k > ( - 1 ) * difference ) ) { sumOfElements += arr1 [ i ] ; } if ( ( difference >= 0 ) && ( k > difference ) ) { sumOfElements += arr1 [ i ] ; } } return sumOfElements ; }", "python": "def findSumofEle ( arr1 , m , arr2 , n , k ) :\n    arraySum = 0\n    for i in range ( n ) :\n        arraySum += arr2 [ i ]\n    mean = arraySum / n\n    sumOfElements = 0\n    difference = 0\n    for i in range ( m ) :\n        difference = arr1 [ i ] - mean\n        if ( ( difference < 0 ) and ( k > ( - 1 ) * difference ) ) :\n            sumOfElements += arr1 [ i ]\n        if ( ( difference >= 0 ) and ( k > difference ) ) :\n            sumOfElements += arr1 [ i ]\n    return sumOfElements\n"}
{"java": "static int findNumberOfTimes ( String str1 , String str2 ) { int freq [ ] = new int [ 26 ] ; int l1 = str1 . length ( ) ; for ( int i = 0 ; i < l1 ; i ++ ) { freq [ str1 . charAt ( i ) - ' a ' ] += 1 ; } int l2 = str2 . length ( ) ; int count = Integer . MAX_VALUE ; for ( int i = 0 ; i < l2 ; i ++ ) { count = Math . min ( count , freq [ str2 . charAt ( i ) - ' a ' ] ) ; } return count ; }", "python": "def findNumberOfTimes ( str1 , str2 ) :\n    freq = [ 0 ] * 26\n    l1 = len ( str1 )\n    for i in range ( l1 ) :\n        freq [ ord ( str1 [ i ] ) - ord ( \" a \" ) ] += 1\n    l2 = len ( str2 )\n    count = sys . maxsize\n    for i in range ( l2 ) :\n        count = min ( count , freq [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] )\n    return count\n"}
{"java": "static int sumOfTheSeries ( int n ) { int sum_n = ( n * ( n + 1 ) / 2 ) ; int sum_sq_n = ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ; return ( sum_n + sum_sq_n ) ; }", "python": "def sumOfTheSeries ( n ) :\n    sum_n = int ( ( n * ( n + 1 ) / 2 ) ) ;\n    sum_sq_n = int ( ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 )\n    return ( sum_n + sum_sq_n ) ;\n"}
{"java": "static boolean isToOne ( int n ) { return ( n > 0 ) ; }", "python": "def isToOne ( n ) :\n    return ( n > 0 )\n"}
{"java": "static int maxPathSum ( int tri [ ] [ ] ) { int ans = 0 ; for ( int i = N - 2 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < N - i ; j ++ ) { if ( j - 1 >= 0 ) tri [ i ] [ j ] += Math . max ( tri [ i + 1 ] [ j ] , tri [ i + 1 ] [ j - 1 ] ) ; else tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ; ans = Math . max ( ans , tri [ i ] [ j ] ) ; } } return ans ; }", "python": "def maxPathSum ( tri ) :\n    ans = 0 ;\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        for j in range ( 0 , N - i ) :\n            if ( j - 1 >= 0 ) :\n                tri [ i ] [ j ] += max ( tri [ i + 1 ] [ j ] , tri [ i + 1 ] [ j - 1 ] ) ;\n            else :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ;\n            ans = max ( ans , tri [ i ] [ j ] ) ;\n    return ans\n"}
{"java": "public static double maxEdges ( double N ) { double edges = 0 ; edges = Math . floor ( ( N * N ) / 4 ) ; return edges ; }", "python": "def maxEdges ( N ) :\n    edges = 0 ;\n    edges = ( N * N ) // 4 ;\n    return edges ;\n"}
{"java": "static int Max_Xor ( int arr [ ] , int n , int k ) { int maxXor = Integer . MIN_VALUE ; for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { if ( Integer . bitCount ( i ) == k ) { int cur_xor = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) == 0 ) cur_xor = cur_xor ^ arr [ j ] ; } maxXor = Math . max ( maxXor , cur_xor ) ; } } return maxXor ; }", "python": "def Max_Xor ( arr , i , j , mask , n ) :\n    if ( i >= n ) :\n        if ( j == 0 ) :\n            return mask\n        else :\n            return 0\n    if ( dp [ i ] [ j ] [ mask ] != - 1 ) :\n        return dp [ i ] [ j ] [ mask ]\n    ans = 0\n    if ( j > 0 ) :\n        ans = Max_Xor ( arr , i + 1 , j - 1 , mask ^ arr [ i ] , n )\n    ans = max ( ans , Max_Xor ( arr , i + 1 , j , mask , n ) )\n    dp [ i ] [ j ] [ mask ] = ans\n    return ans\n"}
{"java": "static void pre_process ( String substrings [ ] , String s ) { int n = s . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String dup = \" \" ; for ( int j = i ; j < n ; j ++ ) { dup += s . charAt ( j ) ; substrings [ count ++ ] = dup ; } } int size = substrings . length ; for ( int i = 0 ; i < size - 1 ; i ++ ) { for ( int j = i + 1 ; j < substrings . length ; j ++ ) { if ( substrings [ i ] . compareTo ( substrings [ j ] ) > 0 ) { String temp = substrings [ i ] ; substrings [ i ] = substrings [ j ] ; substrings [ j ] = temp ; } } } }", "python": "def pre_process ( substrings , s ) :\n    n = len ( s ) ;\n    for i in range ( n ) :\n        dup = \" \" ;\n        for j in range ( i , n ) :\n            dup += s [ j ] ;\n            substrings . append ( dup ) ;\n    substrings . sort ( ) ;\n    return substrings ;\n"}
{"java": "static boolean checkForElement ( int array [ ] , int n ) { Set < Integer > s = new LinkedHashSet < > ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += array [ i ] ; s . add ( array [ i ] ) ; } if ( sum % 2 == 0 && s . contains ( sum / 2 ) && ( sum / 2 ) == s . stream ( ) . skip ( s . size ( ) - 1 ) . findFirst ( ) . get ( ) ) { return true ; } else { return false ; } }", "python": "def checkForElement ( array , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += array [ i ]\n        s . add ( array [ i ] )\n    f = int ( sum / 2 )\n    if ( sum % 2 == 0 and f in s ) :\n        return True\n    else :\n        return False\n"}
{"java": "static long findF_N ( long n ) { long ans = 0 ; for ( long i = 0 ; i < n ; ++ i ) ans += ( i + 1 ) * ( n - i - 1 ) ; return ans ; }", "python": "def findF_N ( n ) :\n    ans = 0\n    for i in range ( n ) :\n        ans = ans + ( i + 1 ) * ( n - i - 1 )\n    return ans\n"}
{"java": "static boolean f ( Map < Integer , Integer > map ) { int s = map . size ( ) ; int [ ] [ ] a = new int [ s ] [ 2 ] ; int i = 0 ; for ( Map . Entry < Integer , Integer > entry : map . entrySet ( ) ) { a [ i ] [ 0 ] = entry . getKey ( ) ; a [ i ++ ] [ 1 ] = entry . getValue ( ) ; } if ( s > 3 ) { return false ; } Arrays . sort ( a , Comparator . comparingInt ( array -> array [ 0 ] ) ) ; if ( s == 1 ) { return a [ 0 ] [ 0 ] == 0 ; } else if ( s == 2 ) { return a [ 0 ] [ 0 ] == 0 && a [ 0 ] [ 1 ] * 2 == a [ 1 ] [ 1 ] ; } else { return a [ 0 ] [ 1 ] == a [ 1 ] [ 1 ] && a [ 1 ] [ 1 ] == a [ 2 ] [ 1 ] && ( a [ 0 ] [ 0 ] ^ a [ 1 ] [ 0 ] ^ a [ 2 ] [ 0 ] ) == 0 ; } }", "python": "def f ( ) :\n    if len ( d ) == 3 :\n        xor = 0\n        for key in d :\n            xor ^= key\n        if xor == 0 :\n            lsit_d = list ( d . keys ( ) )\n            if d [ lsit_d [ 0 ] ] == d [ lsit_d [ 1 ] ] and d [ lsit_d [ 0 ] ] == d [ lsit_d [ 2 ] ] :\n                return ' Yes '\n            else :\n                return ' No '\n        else :\n            return ' No '\n    if len ( d ) == 1 :\n        lsit_d = list ( d . keys ( ) )\n        if lsit_d [ 0 ] == 0 :\n            return ' Yes '\n    if len ( d ) == 2 :\n        if d [ 0 ] * 2 == N - d [ 0 ] :\n            return ' Yes '\n    return ' No '\n"}
{"java": "static void maxSum ( int [ ] a , int n ) { Vector < Integer > l = new Vector < Integer > ( ) ; int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s += Math . abs ( a [ i ] ) ; if ( a [ i ] >= 0 ) continue ; if ( i == 0 ) l . add ( i + 1 ) ; else { l . add ( i + 1 ) ; l . add ( i ) ; } } System . out . println ( s ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) System . out . print ( l . get ( i ) + \" \u2581 \" ) ; }", "python": "def maxSum ( arr , n ) :\n    s = 0\n    l = [ ]\n    for i in range ( len ( a ) ) :\n        s += abs ( a [ i ] )\n        if ( a [ i ] >= 0 ) :\n            continue\n        if ( i == 0 ) :\n            l . append ( i + 1 )\n        else :\n            l . append ( i + 1 )\n            l . append ( i )\n    print ( s )\n    print ( * l )\n"}
{"java": "static int solution ( Vector < Integer > arr , int x ) { Collections . sort ( arr ) ; int closestSum = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . size ( ) - 2 ; i ++ ) { int ptr1 = i + 1 , ptr2 = arr . size ( ) - 1 ; while ( ptr1 < ptr2 ) { int sum = arr . get ( i ) + arr . get ( ptr1 ) + arr . get ( ptr2 ) ; if ( abs ( x - sum ) < abs ( x - closestSum ) ) { closestSum = sum ; } if ( sum > x ) { ptr2 -- ; } else { ptr1 ++ ; } } } return closestSum ; }", "python": "def solution ( arr , x ) :\n    arr . sort ( ) ;\n    closestSum = sys . maxsize ;\n    for i in range ( len ( arr ) - 2 ) :\n        ptr1 = i + 1 ; ptr2 = len ( arr ) - 1 ;\n        while ( ptr1 < ptr2 ) :\n            sum = arr [ i ] + arr [ ptr1 ] + arr [ ptr2 ] ;\n            if ( abs ( x - sum ) < abs ( x - closestSum ) ) :\n                closestSum = sum ;\n            if ( sum > x ) :\n                ptr2 -= 1 ;\n            else :\n                ptr1 += 1 ;\n    return closestSum ;\n"}
{"java": "public static int [ ] fix ( int [ ] A ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) { s . add ( A [ i ] ) ; } for ( int i = 0 ; i < A . length ; i ++ ) { if ( s . contains ( i ) ) A [ i ] = i ; else A [ i ] = - 1 ; } return A ; }", "python": "def fix ( A ) :\n    s = set ( )\n    for i in range ( len ( A ) ) :\n        s . add ( A [ i ] )\n    for i in range ( len ( A ) ) :\n        if i in s :\n            A [ i ] = i\n        else :\n            A [ i ] = - 1\n    return A\n"}
{"java": "static int minSwaps ( int arr [ ] , int n ) { int numberOfOnes = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) numberOfOnes ++ ; } int x = numberOfOnes ; int count_ones = 0 , maxOnes ; for ( int i = 0 ; i < x ; i ++ ) { if ( arr [ i ] == 1 ) count_ones ++ ; } maxOnes = count_ones ; for ( int i = 1 ; i <= n - x ; i ++ ) { if ( arr [ i - 1 ] == 1 ) count_ones -- ; if ( arr [ i + x - 1 ] == 1 ) count_ones ++ ; if ( maxOnes < count_ones ) maxOnes = count_ones ; } int numberOfZeroes = x - maxOnes ; return numberOfZeroes ; }", "python": "def minSwaps ( arr , n ) :\n    numberOfOnes = 0\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 1 ) :\n            numberOfOnes = numberOfOnes + 1\n    x = numberOfOnes\n    count_ones = 0\n    maxOnes = 0\n    for i in range ( 0 , x ) :\n        if ( arr [ i ] == 1 ) :\n            count_ones = count_ones + 1\n    maxOnes = count_ones\n    for i in range ( 1 , ( n - x + 1 ) ) :\n        if ( arr [ i - 1 ] == 1 ) :\n            count_ones = count_ones - 1\n        if ( arr [ i + x - 1 ] == 1 ) :\n            count_ones = count_ones + 1\n        if ( maxOnes < count_ones ) :\n            maxOnes = count_ones\n    numberOfZeroes = x - maxOnes\n    return numberOfZeroes\n"}
{"java": "static boolean canBeBalanced ( String s , int n ) { int count = 0 , count_1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ( ' ) count ++ ; else count -- ; count_1 = Math . min ( count_1 , count ) ; } if ( count_1 >= - 1 && count == 0 ) return true ; return false ; }", "python": "def canBeBalanced ( s , n ) :\n    count = 0\n    count_1 = 0\n    for i in range ( n ) :\n        if ( s [ i ] == ' ( ' ) :\n            count += 1\n        else :\n            count -= 1\n        count_1 = min ( count_1 , count )\n    if ( count_1 >= - 1 and count == 0 ) :\n        return True\n    return False\n"}
{"java": "static String largestPalinSub ( String s ) { String res = \" \" ; char mx = s . charAt ( 0 ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) mx = ( char ) Math . max ( ( int ) mx , ( int ) s . charAt ( i ) ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) == mx ) res += s . charAt ( i ) ; return res ; }", "python": "def largestPalinSub ( s ) :\n    res = \" \"\n    mx = s [ 0 ]\n    for i in range ( 1 , len ( s ) ) :\n        mx = max ( mx , s [ i ] )\n    for i in range ( 0 , len ( s ) ) :\n        if s [ i ] == mx :\n            res += s [ i ]\n    return res\n"}
{"java": "static int MinDeletion ( int a [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( a [ i ] ) ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } else { mp . put ( a [ i ] , 1 ) ; } } int ans = 0 ; for ( Map . Entry < Integer , Integer > i : mp . entrySet ( ) ) { int x = i . getKey ( ) ; int frequency = i . getValue ( ) ; if ( x <= frequency ) { ans += ( frequency - x ) ; } else ans += frequency ; } return ans ; }", "python": "def MinDeletion ( a , n ) :\n    map = dict . fromkeys ( a , 0 ) ;\n    for i in range ( n ) :\n        map [ a [ i ] ] += 1 ;\n    ans = 0 ;\n    for key , value in map . items ( ) :\n        x = key ;\n        frequency = value ;\n        if ( x <= frequency ) :\n            ans += ( frequency - x ) ;\n        else :\n            ans += frequency ;\n    return ans ;\n"}
{"java": "static void makearrayequal ( int arr [ ] , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x += ( arr [ i ] & 1 ) ; } System . out . println ( Math . min ( x , n - x ) ) ; }", "python": "def makearrayequal ( arr , n ) :\n    x = 0 ;\n    for i in range ( n ) :\n        x += arr [ i ] & 1 ;\n    print ( min ( x , n - x ) ) ;\n"}
{"java": "public static int countIdenticalRows ( int mat [ ] [ ] ) { int count = 0 ; for ( int i = 0 ; i < mat . length ; i ++ ) { int first = mat [ i ] [ 0 ] ; boolean allSame = true ; for ( int j = 1 ; j < mat [ i ] . length ; j ++ ) { if ( mat [ i ] [ j ] != first ) { allSame = false ; break ; } } if ( allSame ) count ++ ; } return count ; }", "python": "def countIdenticalRows ( mat ) :\n    count = 0\n    for i in range ( len ( mat ) ) :\n        first = mat [ i ] [ 0 ]\n        allSame = True\n        for j in range ( 1 , len ( mat [ i ] ) ) :\n            if ( mat [ i ] [ j ] != first ) :\n                allSame = False\n                break\n        if ( allSame ) :\n            count += 1\n    return count\n"}
{"java": "static void printPattern ( int n ) { if ( n == 0 || n < 0 ) { System . out . print ( n + \" \u2581 \" ) ; return ; } System . out . print ( n + \" \u2581 \" ) ; printPattern ( n - 5 ) ; System . out . print ( n + \" \u2581 \" ) ; }", "python": "def printPattern ( n ) :\n    if ( n == 0 or n < 0 ) :\n        print ( n , end = \" , \u2581 \" )\n        return\n    print ( n , end = \" , \u2581 \" )\n    printPattern ( n - 5 )\n    print ( n , end = \" , \u2581 \" )\n"}
{"java": "public static void booblesSort ( int [ ] arr ) { for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 1 ; j < arr . length - i ; j ++ ) { if ( arr [ j ] < arr [ j - 1 ] ) { int actual = arr [ j ] ; int anterior = arr [ j - 1 ] ; arr [ j - 1 ] = actual ; arr [ j ] = anterior ; } } } }", "python": "def _input ( ) : return map ( int , input ( ) . split ( ) )\ndef _list ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef _int ( ) : return int ( input ( ) )\ndef solves ( ) :\n    n = _int ( )\n    lst = _list ( )\n    lst = list ( filter ( lambda x : x > 0 , lst ) )\n    c = list ( Counter ( lst ) . values ( ) )\n    if any ( [ i > 2 for i in c ] ) :\n        print ( - 1 )\n    else :\n        print ( c . count ( 2 ) )\n"}
{"java": "static int findMinimumK ( int a [ ] , int n , int s ) { int maximum = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { maximum = Math . max ( maximum , a [ i ] ) ; } int low = 1 , high = maximum + 1 ; int ans = high ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ( int ) ( a [ i ] / mid ) ; } if ( sum > s ) low = mid + 1 ; else { ans = Math . min ( ans , mid ) ; high = mid - 1 ; } } return ans ; }", "python": "def findMinimumK ( a , n , s ) :\n    maximum = a [ 0 ]\n    for i in range ( n ) :\n        maximum = max ( maximum , a [ i ] )\n    low = 1\n    high = maximum + 1\n    ans = high\n    while ( low <= high ) :\n        mid = ( low + high ) // 2\n        sum = 0\n        for i in range ( n ) :\n            sum += ( a [ i ] // mid )\n        if ( sum > s ) :\n            low = mid + 1\n        else :\n            ans = min ( ans , mid )\n            high = mid - 1\n    return ans\n"}
{"java": "static boolean isHeterogram ( String s , int n ) { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' \u2581 ' ) { if ( hash [ s . charAt ( i ) - ' a ' ] == 0 ) hash [ s . charAt ( i ) - ' a ' ] = 1 ; else return false ; } } return true ; }", "python": "def isHeterogram ( s , n ) :\n    hash = [ 0 ] * 26\n    for i in range ( n ) :\n        if s [ i ] != ' \u2581 ' :\n            if hash [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 0 :\n                hash [ ord ( s [ i ] ) - ord ( ' a ' ) ] = 1\n            else :\n                return False\n    return True\n"}
{"java": "static int maxPrimefactorNum ( int N ) { boolean arr [ ] = new boolean [ N + 5 ] ; for ( int i = 3 ; i * i <= N ; i += 2 ) { if ( ! arr [ i ] ) { for ( int j = i * i ; j <= N ; j += i ) { arr [ j ] = true ; } } } Vector < Integer > prime = new Vector < > ( ) ; prime . add ( prime . size ( ) , 2 ) ; for ( int i = 3 ; i <= N ; i += 2 ) { if ( ! arr [ i ] ) { prime . add ( prime . size ( ) , i ) ; } } int i = 0 , ans = 1 ; while ( ans * prime . get ( i ) <= N && i < prime . size ( ) ) { ans *= prime . get ( i ) ; i ++ ; } return ans ; }", "python": "def maxPrimefactorNum ( N ) :\n    arr = [ True ] * ( N + 5 ) ;\n    i = 3 ;\n    while ( i * i <= N ) :\n        if ( arr [ i ] ) :\n            for j in range ( i * i , N + 1 , i ) :\n                arr [ j ] = False ;\n        i += 2 ;\n    prime = [ ] ;\n    prime . append ( 2 ) ;\n    for i in range ( 3 , N + 1 , 2 ) :\n        if ( arr [ i ] ) :\n            prime . append ( i ) ;\n    i = 0 ;\n    ans = 1 ;\n    while ( ans * prime [ i ] <= N and i < len ( prime ) ) :\n        ans *= prime [ i ] ;\n        i += 1 ;\n    return ans ;\n"}
{"java": "static int getCount ( int l , int r , int p ) { int cnt = 0 ; int val = p ; while ( true ) { int a = r / val ; int b = ( l - 1 ) / val ; val *= p ; if ( ( a - b ) > 0 ) { cnt += ( a - b ) ; } else break ; } return cnt ; }", "python": "def getCount ( l , r , p ) :\n    cnt = 0 ;\n    val = p ;\n    while ( True ) :\n        a = r // val ;\n        b = ( l - 1 ) // val ;\n        val *= p ;\n        if ( a - b ) :\n            cnt += ( a - b ) ;\n        else :\n            break ;\n    return int ( cnt ) ;\n"}
{"java": "static int countUnsetBits ( int n ) { int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int temp = i ; while ( temp > 0 ) { if ( temp % 2 == 0 ) { cnt = cnt + 1 ; } temp = temp / 2 ; } } return cnt ; }", "python": "def countUnsetBits ( n ) :\n    cnt = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        temp = i ;\n        while ( temp ) :\n            if ( temp % 2 == 0 ) :\n                cnt += 1 ;\n            temp = temp // 2 ;\n    return cnt ;\n"}
{"java": "static void findSubArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) >= 2 ) { System . out . print ( arr [ i ] + \" \u2581 \" + arr [ i + 1 ] ) ; return ; } } System . out . print ( - 1 ) ; }", "python": "def findSubArr ( arr , n ) :\n    for i in range ( n - 1 ) :\n        if ( abs ( arr [ i ] - arr [ i + 1 ] ) >= 2 ) :\n            print ( arr [ i ] , arr [ i + 1 ] , end = \" \" ) ;\n            return ;\n    print ( - 1 ) ;\n"}
{"java": "static int maxZeros ( int n ) { if ( n == 0 || ( n & ( n - 1 ) ) == 0 ) { return - 1 ; } byte b = 4 ; int setBit = 1 , prev = 0 , i ; for ( i = 1 ; i <= b * 8 ; i ++ ) { prev ++ ; if ( ( n & setBit ) == setBit ) { setBit = setBit << 1 ; break ; } setBit = setBit << 1 ; } int max0 = Integer . MIN_VALUE , cur = prev ; for ( int j = i + 1 ; j <= b * 8 ; j ++ ) { cur ++ ; if ( ( n & setBit ) == setBit ) { if ( max0 < ( cur - prev - 1 ) ) { max0 = cur - prev - 1 ; } prev = cur ; } setBit = setBit << 1 ; } return max0 ; }", "python": "def maxZeros ( n ) :\n    if ( n == 0 or ( n & ( n - 1 ) ) == 0 ) :\n        return - 1\n    setBit = 1\n    prev = 0\n    i = 1\n    while ( i < 33 ) :\n        prev += 1\n        if ( ( n & setBit ) == setBit ) :\n            setBit = setBit << 1\n            break\n        setBit = setBit << 1\n    max0 = - 10 ** 9\n    cur = prev\n    for j in range ( i + 1 , 33 ) :\n        cur += 1\n        if ( ( n & setBit ) == setBit ) :\n            if ( max0 < ( cur - prev - 1 ) ) :\n                max0 = cur - prev - 1\n            prev = cur\n        setBit = setBit << 1\n    return max0\n"}
{"java": "static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { ans += b / n ; ans += ( i % n + b % n ) >= n ? 1 : 0 ; } return ans ; }", "python": "def findCountOfPairs ( a , b , n ) :\n    ans = 0\n    for i in range ( 1 , a + 1 ) :\n        ans += b // n\n        ans += 1 if ( i % n + b % n ) >= n else 0\n    return ans\n"}
{"java": "static String reverse ( char [ ] str , int len , int l , int r ) { if ( l < 0 || r >= len || l > r ) return \" Invalid \u2581 range ! \" ; while ( l < r ) { char c = str [ l ] ; str [ l ] = str [ r ] ; str [ r ] = c ; l ++ ; r -- ; } String string = new String ( str ) ; return string ; }", "python": "def reverse ( string , length , l , r ) :\n    if ( l < 0 or r >= length or l > r ) :\n        return string ;\n    string = list ( string )\n    while ( l < r ) :\n        c = string [ l ] ;\n        string [ l ] = string [ r ] ;\n        string [ r ] = c ;\n        l += 1 ;\n        r -= 1 ;\n    return \" \" . join ( string ) ;\n"}
{"java": "static int maxPrimefactorNum ( int N ) { if ( N < 2 ) return 0 ; boolean [ ] arr = new boolean [ N + 1 ] ; int prod = 1 , res = 0 ; for ( int p = 2 ; p * p <= N ; p ++ ) { if ( arr [ p ] == false ) { for ( int i = p * 2 ; i <= N ; i += p ) arr [ i ] = true ; prod *= p ; if ( prod > N ) return res ; res ++ ; } } return res ; }", "python": "def maxPrimefactorNum ( N ) :\n    if ( N < 2 ) :\n        return 0 ;\n    arr = [ True ] * ( N + 1 ) ;\n    prod = 1 ;\n    res = 0 ;\n    p = 2 ;\n    while ( p * p <= N ) :\n        if ( arr [ p ] == True ) :\n            for i in range ( p * 2 , N + 1 , p ) :\n                arr [ i ] = False ;\n            prod *= p ;\n            if ( prod > N ) :\n                return res ;\n            res += 1 ;\n        p += 1 ;\n    return res ;\n"}
{"java": "static void alternate ( int a , int b , int x ) { x = a + b - x ; System . out . println ( \" After \u2581 change \" + \" \\n \" + \" \u2581 x \u2581 is \u2581 : \u2581 \" + x ) ; }", "python": "def alternate ( a , b , x ) :\n    x = a + b - x\n    print ( \" After \u2581 change \u2581 x \u2581 is : \" , x )\n"}
{"java": "static int NotParallel ( int p [ ] [ ] , int n ) { HashMap < Integer , Integer > x_axis = new HashMap < Integer , Integer > ( ) ; HashMap < Integer , Integer > y_axis = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( x_axis . containsKey ( p [ i ] [ 0 ] ) ) x_axis . put ( p [ i ] [ 0 ] , x_axis . get ( p [ i ] [ 0 ] ) + 1 ) ; else x_axis . put ( p [ i ] [ 0 ] , 1 ) ; if ( y_axis . containsKey ( p [ i ] [ 1 ] ) ) y_axis . put ( p [ i ] [ 1 ] , y_axis . get ( p [ i ] [ 1 ] ) + 1 ) ; else y_axis . put ( p [ i ] [ 1 ] , 1 ) ; } int total = ( n * ( n - 1 ) ) / 2 ; for ( Map . Entry < Integer , Integer > i : x_axis . entrySet ( ) ) { int c = i . getValue ( ) ; total -= ( c * ( c - 1 ) ) / 2 ; } for ( Map . Entry < Integer , Integer > i : y_axis . entrySet ( ) ) { int c = i . getValue ( ) ; total -= ( c * ( c - 1 ) ) / 2 ; } return total ; }", "python": "def NotParallel ( p , n ) :\n    x_axis = { } ; y_axis = { } ;\n    for i in range ( n ) :\n        if p [ i ] [ 0 ] not in x_axis :\n            x_axis [ p [ i ] [ 0 ] ] = 0 ;\n        x_axis [ p [ i ] [ 0 ] ] += 1 ;\n        if p [ i ] [ 1 ] not in y_axis :\n            y_axis [ p [ i ] [ 1 ] ] = 0 ;\n        y_axis [ p [ i ] [ 1 ] ] += 1 ;\n    total = ( n * ( n - 1 ) ) // 2 ;\n    for i in x_axis :\n        c = x_axis [ i ] ;\n        total -= ( c * ( c - 1 ) ) // 2 ;\n    for i in y_axis :\n        c = y_axis [ i ] ;\n        total -= ( c * ( c - 1 ) ) // 2 ;\n    return total ;\n"}
{"java": "static void charCheck ( char input_char ) { if ( ( input_char >= 65 && input_char <= 90 ) || ( input_char >= 97 && input_char <= 122 ) ) System . out . println ( \" \u2581 Alphabet \u2581 \" ) ; else if ( input_char >= 48 && input_char <= 57 ) System . out . println ( \" \u2581 Digit \u2581 \" ) ; else System . out . println ( \" \u2581 Special \u2581 Character \u2581 \" ) ; }", "python": "def charCheck ( input_char ) :\n    if ( ( int ( ord ( input_char ) ) >= 65 and int ( ord ( input_char ) ) <= 90 ) or ( int ( ord ( input_char ) ) >= 97 and int ( ord ( input_char ) ) <= 122 ) ) :\n        print ( \" \u2581 Alphabet \u2581 \" )\n    elif ( int ( ord ( input_char ) ) >= 48 and int ( ord ( input_char ) ) <= 57 ) :\n        print ( \" \u2581 Digit \u2581 \" )\n    else :\n        print ( \" \u2581 Special \u2581 Character \u2581 \" )\n"}
{"java": "static boolean sackRace ( int p1 , int s1 , int p2 , int s2 ) { return ( ( s1 > s2 && ( p2 - p1 ) % ( s1 - s2 ) == 0 ) || ( s2 > s1 && ( p1 - p2 ) % ( s2 - s1 ) == 0 ) ) ; }", "python": "def sackRace ( p1 , s1 , p2 , s2 ) :\n    return ( ( s1 > s2 and ( p2 - p1 ) % ( s1 - s2 ) == 0 ) or ( s2 > s1 and ( p1 - p2 ) % ( s2 - s1 ) == 0 ) )\n"}
{"java": "static int no_of_ways ( int a [ ] , int n ) { int count_0 = 0 , count_1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) count_0 ++ ; else count_1 ++ ; } if ( count_1 % 2 == 0 ) return count_0 ; else return count_1 ; }", "python": "def no_of_ways ( a , n ) :\n    count_0 = 0\n    count_1 = 0\n    for i in range ( 0 , n ) :\n        if ( a [ i ] == 0 ) :\n            count_0 += 1\n        else :\n            count_1 += 1\n    if ( count_1 % 2 == 0 ) :\n        return count_0\n    else :\n        return count_1\n"}
{"java": "static int cntSubArrays ( int [ ] arr , int n , int k ) { int res = 0 ; int i = 0 ; while ( i < n ) { int j = i + 1 ; while ( j < n && arr [ j ] >= arr [ j - 1 ] ) j ++ ; res += Math . max ( j - i - k + 1 , 0 ) ; i = j ; } return res ; }", "python": "def cntSubArrays ( arr , n , k ) :\n    res = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        j = i + 1 ;\n        while ( j < n and arr [ j ] >= arr [ j - 1 ] ) :\n            j += 1 ;\n        res += max ( j - i - k + 1 , 0 ) ;\n        i = j ;\n    return res ;\n"}
{"java": "public static int countDe ( int arr [ ] , int n ) { int v [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) v [ i ] = arr [ i ] ; Arrays . sort ( arr ) ; int count1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != v [ i ] ) count1 ++ ; Collections . reverse ( Arrays . asList ( arr ) ) ; int count2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != v [ i ] ) count2 ++ ; return ( Math . min ( count1 , count2 ) ) ; }", "python": "def countDe ( arr , n ) :\n    i = 0\n    v = arr . copy ( )\n    arr . sort ( )\n    count1 = 0\n    i = 0\n    while ( i < n ) :\n        if ( arr [ i ] != v [ i ] ) :\n            count1 = count1 + 1\n        i = i + 1\n    arr . sort ( reverse = True )\n    count2 = 0\n    i = 0\n    while ( i < n ) :\n        if ( arr [ i ] != v [ i ] ) :\n            count2 = count2 + 1\n        i = i + 1\n    return ( min ( count1 , count2 ) )\n"}
{"java": "static int countOperations ( int n ) { int i = 2 ; while ( ( i * i ) < n && ( n % i ) > 0 ) i += 1 ; if ( ( i * i ) > n ) i = n ; return ( 1 + ( n - i ) / 2 ) ; }", "python": "def countOperations ( n ) :\n    i = 2\n    while ( ( i * i ) < n and ( n % i ) ) :\n        i += 1\n    if ( ( i * i ) > n ) :\n        i = n\n    return ( 1 + ( n - i ) // 2 )\n"}
{"java": "static void printMaxValPair ( Vector < Long > v , int n ) { Collections . sort ( v ) ; long N = v . get ( ( int ) n - 1 ) ; if ( N % 2 == 1 ) { long first_maxima = N / 2 ; long second_maxima = first_maxima + 1 ; long ans1 = ( long ) 3e18 , ans2 = ( long ) 3e18 ; long from_left = - 1 , from_right = - 1 ; long from = - 1 ; for ( long i = 0 ; i < n ; ++ i ) { if ( v . get ( ( int ) i ) > first_maxima ) { from = i ; break ; } else { long diff = first_maxima - v . get ( ( int ) i ) ; if ( diff < ans1 ) { ans1 = diff ; from_left = v . get ( ( int ) i ) ; } } } from_right = v . get ( ( int ) from ) ; long diff1 = first_maxima - from_left ; long diff2 = from_right - second_maxima ; if ( diff1 < diff2 ) System . out . println ( N + \" \u2581 \" + from_left ) ; else System . out . println ( N + \" \u2581 \" + from_right ) ; } else { long maxima = N / 2 ; long ans1 = ( int ) 3e18 ; long R = - 1 ; for ( long i = 0 ; i < n - 1 ; ++ i ) { long diff = Math . abs ( v . get ( ( int ) i ) - maxima ) ; if ( diff < ans1 ) { ans1 = diff ; R = v . get ( ( int ) i ) ; } } System . out . println ( N + \" \u2581 \" + R ) ; } }", "python": "def printMaxValPair ( v , n ) :\n    v . sort ( )\n    N = v [ n - 1 ]\n    if N % 2 == 1 :\n        first_maxima = N // 2\n        second_maxima = first_maxima + 1\n        ans1 , ans2 = 3 * ( 10 ** 18 ) , 3 * ( 10 ** 18 )\n        from_left , from_right = - 1 , - 1\n        _from = - 1\n        for i in range ( 0 , n ) :\n            if v [ i ] > first_maxima :\n                _from = i\n                break\n            else :\n                diff = first_maxima - v [ i ]\n                if diff < ans1 :\n                    ans1 = diff\n                    from_left = v [ i ]\n        from_right = v [ _from ]\n        diff1 = first_maxima - from_left\n        diff2 = from_right - second_maxima\n        if diff1 < diff2 :\n            print ( N , from_left )\n        else :\n            print ( N , from_right )\n    else :\n        maxima = N // 2\n        ans1 = 3 * ( 10 ** 18 )\n        R = - 1\n        for i in range ( 0 , n - 1 ) :\n            diff = abs ( v [ i ] - maxima )\n            if diff < ans1 :\n                ans1 = diff\n                R = v [ i ]\n        print ( N , R )\n"}
{"java": "static boolean isCyclic ( long N ) { long num = N ; int count = 0 ; int digit = ( int ) ( num % 10 ) ; boolean allSame = true ; while ( num > 0 ) { count ++ ; if ( num % 10 != digit ) allSame = false ; num = num / 10 ; } if ( allSame == true ) return false ; if ( count % 2 == 0 ) { long halfPower = ( long ) Math . pow ( 10 , count / 2 ) ; long firstHalf = N % halfPower ; long secondHalf = N / halfPower ; if ( firstHalf == firstHalf && isCyclic ( firstHalf ) ) return false ; } num = N ; while ( true ) { long rem = num % 10 ; long div = num / 10 ; num = ( long ) ( Math . pow ( 10 , count - 1 ) ) * rem + div ; if ( num == N ) break ; if ( num % N != 0 ) return false ; } return true ; }", "python": "def isCyclic ( N ) :\n    num = N\n    count = 0\n    digit = ( num % 10 )\n    allSame = True\n    while ( num > 0 ) :\n        count += 1\n        if ( num % 10 != digit ) :\n            allSame = False\n        num = num // 10\n    if ( allSame == True ) :\n        return False\n    if ( count % 2 == 0 ) :\n        halfPower = pow ( 10 , count // 2 )\n        firstHalf = N % halfPower\n        secondHalf = N / halfPower\n        if ( firstHalf == firstHalf and isCyclic ( firstHalf ) ) :\n            return False\n    num = N\n    while ( True ) :\n        rem = num % 10\n        div = num // 10\n        num = pow ( 10 , count - 1 ) * rem + div\n        if ( num == N ) :\n            break\n        if ( num % N != 0 ) :\n            return False\n    return True\n"}
{"java": "static int [ ] numberOfLines ( String S , int [ ] widths ) { if ( S . isEmpty ( ) ) return new int [ ] { 0 , 0 } ; int lines = 1 , width = 0 ; for ( char character : S . toCharArray ( ) ) { int w = widths [ character - ' a ' ] ; width += w ; if ( width >= 10 ) { lines ++ ; width = w ; } } return new int [ ] { lines , width } ; }", "python": "def numberOfLines ( S , widths ) :\n    if ( S == \" \" ) :\n        return 0 , 0\n    lines , width = 1 , 0\n    for c in S :\n        w = widths [ ord ( c ) - ord ( ' a ' ) ]\n        width += w\n        if width > 10 :\n            lines += 1\n            width = w\n    return lines , width\n"}
{"java": "static int cntRotations ( String s , int n ) { String str = s + s ; int pre [ ] = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( str . charAt ( i ) == ' a ' || str . charAt ( i ) == ' e ' || str . charAt ( i ) == ' i ' || str . charAt ( i ) == ' o ' || str . charAt ( i ) == ' u ' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) x1 -= pre [ l ] ; r = i - n / 2 ; int left = pre [ r ] ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; }", "python": "def cntRotations ( s , n ) :\n    str = s + s ;\n    pre = [ 0 ] * ( 2 * n ) ;\n    for i in range ( 2 * n ) :\n        if ( i != 0 ) :\n            pre [ i ] += pre [ i - 1 ] ;\n        if ( str [ i ] == ' a ' or str [ i ] == ' e ' or str [ i ] == ' i ' or str [ i ] == ' o ' or str [ i ] == ' u ' ) :\n            pre [ i ] += 1 ;\n    ans = 0 ;\n    for i in range ( n - 1 , 2 * n - 1 , 1 ) :\n        r = i ; l = i - n ;\n        x1 = pre [ r ] ;\n        if ( l >= 0 ) :\n            x1 -= pre [ l ] ;\n        r = ( int ) ( i - n / 2 ) ;\n        left = pre [ r ] ;\n        if ( l >= 0 ) :\n            left -= pre [ l ] ;\n        right = x1 - left ;\n        if ( left > right ) :\n            ans += 1 ;\n    return ans ;\n"}
{"java": "public static void floorAndCeil ( int arr [ ] , int x ) { int n = arr . length ; int fInd = - 1 , cInd = - 1 ; int fDist = Integer . MAX_VALUE , cDist = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= x && cDist > ( arr [ i ] - x ) ) { cInd = i ; cDist = arr [ i ] - x ; } if ( arr [ i ] <= x && fDist > ( x - arr [ i ] ) ) { fInd = i ; fDist = x - arr [ i ] ; } } if ( fDist == Integer . MAX_VALUE ) System . out . println ( \" Floor \u2581 doesn ' t \u2581 exist \u2581 \" ) ; else System . out . println ( \" Floor \u2581 is \u2581 \" + arr [ fInd ] ) ; if ( cDist == Integer . MAX_VALUE ) System . out . println ( \" Ceil \u2581 doesn ' t \u2581 exist \u2581 \" ) ; else System . out . println ( \" Ceil \u2581 is \u2581 \u2581 \" + arr [ cInd ] ) ; }", "python": "def floorAndCeil ( arr , n , x ) :\n    fDist = sys . maxsize\n    cDist = sys . maxsize\n    for i in range ( n ) :\n        if ( arr [ i ] >= x and cDist > ( arr [ i ] - x ) ) :\n            cInd = i\n            cDist = arr [ i ] - x\n        if ( arr [ i ] <= x and fDist > ( x - arr [ i ] ) ) :\n            fInd = i\n            fDist = x - arr [ i ]\n    if ( fDist == sys . maxsize ) :\n        print ( \" Floor \u2581 doesn ' t \u2581 exist \u2581 \" )\n    else :\n        print ( \" Floor \u2581 is \u2581 \" + str ( arr [ fInd ] ) )\n    if ( cDist == sys . maxsize ) :\n        print ( \" Ceil \u2581 doesn ' t \u2581 exist \u2581 \" )\n    else :\n        print ( \" Ceil \u2581 is \u2581 \" + str ( arr [ cInd ] ) )\n"}
{"java": "public static int countUnvisited ( int n , int m ) { int X = ( m * n ) - m - n ; Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( X ) ; int count = 0 ; while ( ! queue . isEmpty ( ) ) { int curr = queue . poll ( ) ; count ++ ; if ( curr - m > 0 ) queue . add ( curr - m ) ; if ( curr - n > 0 ) queue . add ( curr - n ) ; } return count ; }", "python": "def countUnvisited ( n , m ) :\n    i = 0\n    X = ( m * n ) - m - n\n    queue = [ ]\n    queue . append ( X )\n    count = 0\n    while ( len ( queue ) > 0 ) :\n        curr = queue [ 0 ]\n        queue . remove ( queue [ 0 ] )\n        count += 1\n        if ( curr - m > 0 ) :\n            queue . append ( curr - m )\n        if ( curr - n > 0 ) :\n            queue . append ( curr - n )\n    return count\n"}
{"java": "static int countNumbers ( int n ) { if ( n % 2 == 1 ) return 0 ; return ( 9 * ( int ) Math . pow ( 10 , n / 2 - 1 ) ) ; }", "python": "def countNumbers ( n ) :\n    if n % 2 == 1 :\n        return 0\n    return ( 9 * pow ( 10 , n // 2 - 1 ) )\n"}
{"java": "static String K_String ( String s , int k ) { int n = s . length ( ) ; int fre [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) fre [ s . charAt ( i ) - ' a ' ] ++ ; String str = \" \" ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( fre [ i ] % k == 0 ) { int x = fre [ i ] / k ; while ( x != 0 ) { str += ( char ) ( i + ' a ' ) ; x -- ; } } else { return \" - 1\" ; } } return str ; }", "python": "def K_String ( s , k ) :\n    n = len ( s )\n    fre = [ 0 ] * 26\n    for i in range ( n ) :\n        fre [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1\n    str = \" \"\n    for i in range ( 26 ) :\n        if ( fre [ i ] % k == 0 ) :\n            x = fre [ i ] // k\n            while ( x ) :\n                str += chr ( i + ord ( ' a ' ) )\n                x -= 1\n        else :\n            return \" - 1\"\n    return str\n"}
{"java": "static double calTime ( double arr [ ] , int n ) { double work = 0 ; for ( int i = 0 ; i < n ; i ++ ) work += 1 / arr [ i ] ; return 1 / work ; }", "python": "def calTime ( arr , n ) :\n    work = 0\n    for i in range ( n ) :\n        work += 1 / arr [ i ]\n    return 1 / work\n"}
{"java": "static void checkEVENodd ( int arr [ ] , int n , int l , int r ) { if ( arr [ r ] == 1 ) System . out . println ( \" odd \" ) ; else System . out . println ( \" even \" ) ; }", "python": "def checkEVENodd ( arr , n , l , r ) :\n    if ( arr [ r ] == 1 ) :\n        print ( \" odd \" )\n    else :\n        print ( \" even \" )\n"}
{"java": "static int minimumAdjacentDifference ( int a [ ] , int n , int k ) { int minDiff = Integer . MAX_VALUE ; for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { int cnt = Integer . bitCount ( i ) ; if ( cnt == n - k ) { Vector < Integer > temp = new Vector < Integer > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) temp . add ( a [ j ] ) ; } int maxDiff = Integer . MIN_VALUE ; for ( int j = 0 ; j < temp . size ( ) - 1 ; j ++ ) { maxDiff = Math . max ( maxDiff , temp . get ( j + 1 ) - temp . get ( j ) ) ; } minDiff = Math . min ( minDiff , maxDiff ) ; } } return minDiff ; }", "python": "def minimumAdjacentDifference ( a , n , k ) :\n    minDiff = INT_MAX ;\n    for i in range ( 1 << n ) :\n        cnt = bin ( i ) . count ( '1' ) ;\n        if ( cnt == n - k ) :\n            temp = [ ] ;\n            for j in range ( n ) :\n                if ( ( i & ( 1 << j ) ) != 0 ) :\n                    temp . append ( a [ j ] ) ;\n            maxDiff = INT_MIN ;\n            for j in range ( len ( temp ) - 1 ) :\n                maxDiff = max ( maxDiff , temp [ j + 1 ] - temp [ j ] ) ;\n            minDiff = min ( minDiff , maxDiff ) ;\n    return minDiff ;\n"}
{"java": "static void findNonPalinString ( char s [ ] ) { int freq [ ] = new int [ 26 ] ; int flag = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] != s [ 0 ] ) flag = 1 ; freq [ s [ i ] - ' a ' ] ++ ; } if ( flag == 0 ) System . out . println ( \" - 1\" ) ; else { for ( int i = 0 ; i < 26 ; i ++ ) for ( int j = 0 ; j < freq [ i ] ; j ++ ) System . out . print ( ( char ) ( ' a ' + i ) ) ; } }", "python": "def findNonPalinString ( s ) :\n    freq = [ 0 ] * ( 26 )\n    flag = 0\n    for i in range ( 0 , len ( s ) ) :\n        if s [ i ] != s [ 0 ] :\n            flag = 1\n        freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1\n    if not flag :\n        print ( \" - 1\" )\n    else :\n        for i in range ( 0 , 26 ) :\n            for j in range ( 0 , freq [ i ] ) :\n                print ( chr ( ord ( ' a ' ) + i ) , end = \" \" )\n"}
{"java": "static boolean isValidSeq ( int [ ] a , int n ) { int nodes = n + 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < 1 || a [ i ] > nodes ) return false ; } return true ; }", "python": "def isValidSeq ( a , n ) :\n    nodes = n + 2 ;\n    for i in range ( n ) :\n        if ( a [ i ] < 1 or a [ i ] > nodes ) :\n            return False ;\n    return True ;\n"}
{"java": "static long evenPowerSum ( int n ) { return ( 8 * n * ( n + 1 ) * ( 2 * n + 1 ) * ( 3 * n * n + 3 * n - 1 ) ) / 15 ; }", "python": "def evenPowerSum ( n ) :\n    return ( 8 * n * ( n + 1 ) * ( 2 * n + 1 ) * ( 3 * n * n + 3 * n - 1 ) ) / 15 ;\n"}
{"java": "static long getTrailingZeroes ( long n ) { long count = 0 ; long val , powerTwo = 2 ; do { val = n / powerTwo ; count += val ; powerTwo *= 2 ; } while ( val != 0 ) ; return ( count / 4 ) ; }", "python": "def getTrailingZeroes ( n ) :\n    count = 0\n    val , powerTwo = 1 , 2\n    while ( val != 0 ) :\n        val = n // powerTwo\n        count += val\n        powerTwo *= 2\n    return ( count // 4 )\n"}
{"java": "static void printUncommon ( String str1 , String str2 ) { int a1 = 0 , a2 = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { int ch = ( str1 . charAt ( i ) ) - ' a ' ; a1 = a1 | ( 1 << ch ) ; } for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) { int ch = ( str2 . charAt ( i ) ) - ' a ' ; a2 = a2 | ( 1 << ch ) ; } int ans = a1 ^ a2 ; int i = 0 ; while ( i < 26 ) { if ( ans % 2 == 1 ) { System . out . print ( ( char ) ( ' a ' + i ) ) ; } ans = ans / 2 ; i ++ ; } }", "python": "def printUncommon ( str1 , str2 ) :\n    a1 = 0 ; a2 = 0 ;\n    for i in range ( len ( str1 ) ) :\n        ch = ord ( str1 [ i ] ) - ord ( ' a ' ) ;\n        a1 = a1 | ( 1 << ch ) ;\n    for i in range ( len ( str2 ) ) :\n        ch = ord ( str2 [ i ] ) - ord ( ' a ' ) ;\n        a2 = a2 | ( 1 << ch ) ;\n    ans = a1 ^ a2 ;\n    i = 0 ;\n    while ( i < 26 ) :\n        if ( ans % 2 == 1 ) :\n            print ( chr ( ord ( ' a ' ) + i ) , end = \" \" ) ;\n        ans = ans // 2 ;\n        i += 1 ;\n"}
{"java": "static int countSubString ( String s , char c , int k ) { int leftCount = 0 , rightCount = 0 ; int left = 0 , right = 0 ; int freq = 0 ; int result = 0 , len = s . length ( ) ; while ( s . charAt ( left ) != c && left < len ) { left ++ ; leftCount ++ ; } right = left + 1 ; while ( freq != ( k - 1 ) && ( right - 1 ) < len ) { if ( s . charAt ( right ) == c ) { freq ++ ; } right ++ ; } while ( left < len && ( right - 1 ) < len ) { while ( s . charAt ( left ) != c && left < len ) { left ++ ; leftCount ++ ; } while ( right < len && s . charAt ( right ) != c ) { if ( s . charAt ( right ) == c ) { freq ++ ; } right ++ ; rightCount ++ ; } result = result + ( leftCount + 1 ) * ( rightCount + 1 ) ; freq = k - 1 ; leftCount = 0 ; rightCount = 0 ; left ++ ; right ++ ; } return result ; }", "python": "def countSubString ( s , c , k ) :\n    leftCount = 0\n    rightCount = 0\n    left = 0\n    right = 0\n    freq = 0\n    result = 0\n    Len = len ( s )\n    while ( s [ left ] != c and left < Len ) :\n        left += 1\n        leftCount += 1\n    right = left + 1\n    while ( freq != ( k - 1 ) and ( right - 1 ) < Len ) :\n        if ( s [ right ] == c ) :\n            freq += 1\n        right += 1\n    while ( left < Len and ( right - 1 ) < Len ) :\n        while ( s [ left ] != c and left < Len ) :\n            left += 1\n            leftCount += 1\n        while ( right < Len and s [ right ] != c ) :\n            if ( s [ right ] == c ) :\n                freq += 1\n            right += 1\n            rightCount += 1\n        result = ( result + ( leftCount + 1 ) * ( rightCount + 1 ) )\n        freq = k - 1\n        leftCount = 0\n        rightCount = 0\n        left += 1\n        right += 1\n    return result\n"}
{"java": "static int solve ( int arr [ ] , int n ) { int ans = Integer . MIN_VALUE ; if ( n == 1 ) { return 0 ; } int max = Integer . MIN_VALUE , min = Integer . MAX_VALUE ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } ans = Math . max ( max - arr [ 0 ] , ans ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } ans = Math . max ( ans , arr [ n - 1 ] - min ) ; ans = Math . max ( ans , arr [ n - 1 ] - arr [ 0 ] ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { ans = Math . max ( ans , arr [ i ] - arr [ i + 1 ] ) ; } return ans ; }", "python": "def main ( t ) :\n    n = int ( input ( ) )\n    arr = list ( map ( int , input ( ) . split ( ) ) )\n    if n == 1 :\n        print ( 0 )\n        return\n    num1 = arr [ n - 1 ] - min ( arr [ : n - 1 ] )\n    num2 = max ( arr [ 1 : ] ) - arr [ 0 ]\n    num3 = max ( [ arr [ i ] - arr [ i + 1 ] for i in range ( n - 1 ) ] )\n    print ( max ( num1 , num2 , num3 ) )\n"}
{"java": "static String getNumber ( String s ) { int number_of_digits = s . length ( ) ; int freq [ ] = new int [ 10 ] ; for ( int i = 0 ; i < number_of_digits ; i ++ ) { if ( s . charAt ( i ) == '1' || s . charAt ( i ) == '2' || s . charAt ( i ) == '3' || s . charAt ( i ) == '5' || s . charAt ( i ) == '7' ) { freq [ s . charAt ( i ) - 48 ] += 1 ; } if ( s . charAt ( i ) == '4' ) { freq [ 2 ] += 2 ; freq [ 3 ] ++ ; } if ( s . charAt ( i ) == '6' ) { freq [ 5 ] ++ ; freq [ 3 ] ++ ; } if ( s . charAt ( i ) == '8' ) { freq [ 7 ] ++ ; freq [ 2 ] += 3 ; } if ( s . charAt ( i ) == '9' ) { freq [ 7 ] ++ ; freq [ 3 ] += 2 ; freq [ 2 ] ++ ; } } String t = \" \" ; if ( freq [ 1 ] == number_of_digits || freq [ 0 ] == number_of_digits || ( freq [ 0 ] + freq [ 1 ] ) == number_of_digits ) { return s ; } else { for ( int i = 9 ; i >= 2 ; i -- ) { int ctr = freq [ i ] ; while ( ( ctr -- ) > 0 ) { t += ( char ) ( i + 48 ) ; } } return t ; } }", "python": "def getNumber ( s ) :\n    number_of_digits = len ( s ) ;\n    freq = [ 0 ] * 10 ;\n    for i in range ( number_of_digits ) :\n        if ( s [ i ] == '1' or s [ i ] == '2' or s [ i ] == '3' or s [ i ] == '5' or s [ i ] == '7' ) :\n            freq [ ord ( s [ i ] ) - 48 ] += 1 ;\n        if ( s [ i ] == '4' ) :\n            freq [ 2 ] += 2 ;\n            freq [ 3 ] += 1 ;\n        if ( s [ i ] == '6' ) :\n            freq [ 5 ] += 1 ;\n            freq [ 3 ] += 1 ;\n        if ( s [ i ] == '8' ) :\n            freq [ 7 ] += 1 ;\n            freq [ 2 ] += 3 ;\n        if ( s [ i ] == '9' ) :\n            freq [ 7 ] += 1 ;\n            freq [ 3 ] += 2 ;\n            freq [ 2 ] += 1 ;\n    t = \" \" ;\n    if ( freq [ 1 ] == number_of_digits or freq [ 0 ] == number_of_digits or ( freq [ 0 ] + freq [ 1 ] ) == number_of_digits ) :\n        return s ;\n    else :\n        for i in range ( 9 , 1 , - 1 ) :\n            ctr = freq [ i ] ;\n            while ( ctr > 0 ) :\n                t += chr ( i + 48 ) ;\n                ctr -= 1 ;\n        return t ;\n"}
{"java": "public static void solve ( long a , long b , long ta , long fa , long tb , long fb ) { long steps = 0 ; long floor ; if ( fa == fb && ta == tb ) { System . out . println ( 0 ) ; return ; } if ( ta == tb ) { System . out . println ( Math . abs ( fb - fa ) ) ; return ; } steps += Math . abs ( tb - ta ) ; if ( a <= fa && fa <= b || b <= fb && fb <= b ) { steps += Math . abs ( fb - fa ) ; System . out . println ( steps ) ; return ; } if ( Math . abs ( a - fa ) < Math . abs ( b - fa ) ) { steps += Math . abs ( a - fa ) ; floor = a ; } else { steps += Math . abs ( b - fa ) ; floor = b ; } steps += Math . abs ( fb - floor ) ; System . out . println ( steps ) ; }", "python": "def main ( ) :\n    n , h , a , b , k = map ( int , input ( ) . split ( ) )\n    for i in range ( k ) :\n        ta , fa , tb , fb = map ( int , input ( ) . split ( ) )\n        if ta == tb :\n            ans = abs ( fa - fb )\n        else :\n            ans = abs ( tb - ta )\n            if fa < a and fb < a :\n                ans += a - fa + a - fb\n            elif fa > b and fb > b :\n                ans += fa - b + fb - b\n            else :\n                ans += abs ( fa - fb )\n        print ( ans )\n"}
{"java": "static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * ( a / n ) * ( b / n ) ; ans += ( a / n ) * ( b % n ) ; ans += ( a % n ) * ( b / n ) ; ans += ( ( a % n ) + ( b % n ) ) / n ; return ans ; }", "python": "def findCountOfPairs ( a , b , n ) :\n    ans = 0\n    ans += n * int ( a / n ) * int ( b / n )\n    ans += int ( a / n ) * ( b % n )\n    ans += ( a % n ) * int ( b / n )\n    ans += int ( ( ( a % n ) + ( b % n ) ) / n ) ;\n    return ans\n"}
{"java": "static void solve ( ) { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; int T = stdIn . nextInt ( ) ; int A = stdIn . nextInt ( ) ; int [ ] H = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { H [ i ] = stdIn . nextInt ( ) ; } int answer = 1 ; double near_A = Math . abs ( A - ( T - ( H [ 0 ] * 0.006 ) ) ) ; for ( int i = 1 ; i < N ; i ++ ) { if ( near_A > Math . abs ( A - ( T - ( H [ i ] * 0.006 ) ) ) ) { answer = i + 1 ; near_A = Math . abs ( A - ( T - ( H [ i ] * 0.006 ) ) ) ; } } System . out . println ( answer ) ; }", "python": "def I ( ) : return int ( input ( ) )\ndef MI ( ) : return map ( int , input ( ) . split ( ) )\ndef LI ( ) : return list ( map ( int , input ( ) . split ( ) ) )\ndef LI2 ( ) : return [ int ( input ( ) ) for i in range ( n ) ]\ndef MXI ( ) : return [ [ LI ( ) ] for i in range ( n ) ]\ninf = 10 ** 17\nmod = 10 ** 9 + 7\nn = I ( )\nt , a = MI ( )\nhs = LI ( )\nu = [ ]\nmini = inf\nfor i in range ( n ) :\n    k = abs ( t - a - hs [ i ] * 0.006 )\n    if k < mini :\n        mini = k\n        num = i\n"}
{"java": "static int countEvenOdd ( int n ) { int even_count = 0 ; int odd_count = 0 ; while ( n > 0 ) { int rem = n % 10 ; if ( rem % 2 == 0 ) even_count ++ ; else odd_count ++ ; n = n / 10 ; } System . out . println ( \" Even \u2581 count \u2581 : \u2581 \" + even_count ) ; System . out . println ( \" Odd \u2581 count \u2581 : \u2581 \" + odd_count ) ; if ( even_count % 2 == 0 && odd_count % 2 != 0 ) return 1 ; else return 0 ; }", "python": "def countEvenOdd ( n ) :\n    even_count = 0\n    odd_count = 0\n    while ( n > 0 ) :\n        rem = n % 10\n        if ( rem % 2 == 0 ) :\n            even_count += 1\n        else :\n            odd_count += 1\n        n = int ( n / 10 )\n    print ( \" Even \u2581 count \u2581 : \u2581 \" , even_count )\n    print ( \" \\n Odd \u2581 count \u2581 : \u2581 \" , odd_count )\n    if ( even_count % 2 == 0 and odd_count % 2 != 0 ) :\n        return 1\n    else :\n        return 0\n"}
{"java": "static int primeProduct ( int arr [ ] , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; Vector < Boolean > prime = new Vector < Boolean > ( max_val + 1 ) ; for ( int i = 0 ; i < max_val + 1 ; i ++ ) prime . add ( i , Boolean . TRUE ) ; prime . add ( 0 , Boolean . FALSE ) ; prime . add ( 1 , Boolean . FALSE ) ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime . get ( p ) == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime . add ( i , Boolean . FALSE ) ; } } int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( prime . get ( arr [ i ] ) ) prod *= arr [ i ] ; return prod ; }", "python": "def primeProduct ( arr , n ) :\n    max_val = max ( arr )\n    prime = [ True for i in range ( max_val + 1 ) ]\n    prime [ 0 ] = False\n    prime [ 1 ] = False\n    for p in range ( mt . ceil ( mt . sqrt ( max_val ) ) ) :\n        if prime [ p ] :\n            for i in range ( p * 2 , max_val + 1 , p ) :\n                prime [ i ] = False\n    prod = 1\n    for i in range ( n ) :\n        if prime [ arr [ i ] ] :\n            prod *= arr [ i ]\n    return prod\n"}
{"java": "static void LeadingZeros ( int x , int y ) { if ( ( x ^ y ) <= ( x & y ) ) System . out . print ( \" \\n Equal \" ) ; else if ( ( x & ( ~ y ) ) > y ) System . out . print ( y ) ; else System . out . print ( x ) ; }", "python": "def LeadingZeros ( x , y ) :\n    if ( ( x ^ y ) <= ( x & y ) ) :\n        print ( \" Equal \" )\n    elif ( ( x & ( ~ y ) ) > y ) :\n        print ( y )\n    else :\n        print ( x )\n"}
{"java": "static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = i ; j < N ; j ++ ) for ( int k = i ; k <= j ; k ++ ) res = res ^ arr [ k ] ; return res ; }", "python": "def getTotalXorOfSubarrayXors ( arr , N ) :\n    res = 0\n    for i in range ( 0 , N ) :\n        for j in range ( i , N ) :\n            for k in range ( i , j + 1 ) :\n                res = res ^ arr [ k ]\n    return res\n"}
{"java": "static String getWinner ( String str , int len ) { int total = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == ' S ' ) { total ++ ; } } if ( ( total % 2 ) == 1 ) return \" First \" ; return \" Second \" ; }", "python": "def getWinner ( string , length ) :\n    total = 0 ;\n    for i in range ( length ) :\n        if ( string [ i ] == ' S ' ) :\n            total += 1 ;\n    if ( ( total % 2 ) == 1 ) :\n        return \" First \" ;\n    return \" Second \" ;\n"}
{"java": "static int minimumChanges ( int n , int a [ ] ) { int i ; int [ ] sf = new int [ n + 1 ] ; sf [ n ] = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { sf [ i ] = sf [ i + 1 ] ; if ( a [ i ] <= 0 ) sf [ i ] ++ ; } int pos = 0 ; int mn = n ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] >= 0 ) pos ++ ; mn = Math . min ( mn , pos + sf [ i + 1 ] ) ; } return mn ; }", "python": "def minimumChanges ( n , a ) :\n    sf = [ 0 ] * ( n + 1 )\n    sf [ n ] = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        sf [ i ] = sf [ i + 1 ]\n        if ( a [ i ] <= 0 ) :\n            sf [ i ] += 1\n    pos = 0\n    mn = n\n    for i in range ( n - 1 ) :\n        if ( a [ i ] >= 0 ) :\n            pos += 1\n        mn = min ( mn , pos + sf [ i + 1 ] )\n    return mn\n"}
{"java": "static void printAnagramAndChanges ( char [ ] X , char [ ] Y ) { int countx [ ] = new int [ MAX ] , county [ ] = new int [ MAX ] , ctrx [ ] = new int [ MAX ] , ctry [ ] = new int [ MAX ] ; int change = 0 ; int l = X . length ; for ( int i = 0 ; i < l ; i ++ ) { countx [ X [ i ] - ' A ' ] ++ ; county [ Y [ i ] - ' A ' ] ++ ; } for ( int i = 0 ; i < MAX ; i ++ ) { if ( countx [ i ] > county [ i ] ) { ctrx [ i ] += ( countx [ i ] - county [ i ] ) ; } else if ( countx [ i ] < county [ i ] ) { ctry [ i ] += ( county [ i ] - countx [ i ] ) ; } change += Math . abs ( county [ i ] - countx [ i ] ) ; } for ( int i = 0 ; i < l ; i ++ ) { if ( ctrx [ X [ i ] - ' A ' ] == 0 ) { continue ; } int j ; for ( j = 0 ; j < MAX ; j ++ ) { if ( ( ctry [ j ] ) > 0 ) { break ; } } if ( countx [ X [ i ] - ' A ' ] == ctrx [ X [ i ] - ' A ' ] || X [ i ] - ' A ' > j ) { countx [ X [ i ] - ' A ' ] -- ; ctrx [ X [ i ] - ' A ' ] -- ; ctry [ j ] -- ; X [ i ] = ( char ) ( ' A ' + j ) ; } else { countx [ X [ i ] - ' A ' ] -- ; } } System . out . println ( \" Anagram \u2581 : \u2581 \" + String . valueOf ( X ) ) ; System . out . println ( \" Number \u2581 of \u2581 changes \u2581 made \u2581 : \u2581 \" + change / 2 ) ; }", "python": "def printAnagramAndChanges ( x , y ) :\n    x = list ( x )\n    y = list ( y )\n    countx , county = [ 0 ] * MAX , [ 0 ] * MAX\n    ctrx , ctry = [ 0 ] * MAX , [ 0 ] * MAX\n    change = 0\n    l = len ( x )\n    for i in range ( l ) :\n        countx [ ord ( x [ i ] ) - ord ( ' A ' ) ] += 1\n        county [ ord ( y [ i ] ) - ord ( ' A ' ) ] += 1\n    for i in range ( MAX ) :\n        if countx [ i ] > county [ i ] :\n            ctrx [ i ] += ( countx [ i ] - county [ i ] )\n        elif countx [ i ] < county [ i ] :\n            ctry [ i ] += ( county [ i ] - countx [ i ] )\n        change += abs ( county [ i ] - countx [ i ] )\n    for i in range ( l ) :\n        if ctrx [ ord ( x [ i ] ) - ord ( ' A ' ) ] == 0 :\n            continue\n        j = 0\n        for j in range ( MAX ) :\n            if ctry [ j ] > 0 :\n                break\n        if countx [ ord ( x [ i ] ) - ord ( ' A ' ) ] == ctrx [ ord ( x [ i ] ) - ord ( ' A ' ) ] or ord ( x [ i ] ) - ord ( ' A ' ) > j :\n            countx [ ord ( x [ i ] ) - ord ( ' A ' ) ] -= 1\n            ctrx [ ord ( x [ i ] ) - ord ( ' A ' ) ] -= 1\n            ctry [ j ] -= 1\n            x [ i ] = chr ( ord ( ' A ' ) + j )\n        else :\n            countx [ ord ( x [ i ] ) - ord ( ' A ' ) ] -= 1\n    print ( \" Anagram \u2581 : \" , ' ' . join ( x ) )\n    print ( \" Number \u2581 of \u2581 changes \u2581 made \u2581 : \" , change // 2 )\n"}
{"java": "private static int parseNum ( ) { try { int buf = 0 ; int num = 0 ; int mns = 0 ; int skp = 1 ; while ( true ) { buf = System . in . read ( ) ; if ( buf == ' - ' ) { mns = 1 ; skp = 0 ; } else if ( buf >= '0' && buf <= '9' ) { num = num * 10 + ( buf - '0' ) ; skp = 0 ; } else if ( skp == 0 ) { return ( mns == 0 ) ? num : num * ( - 1 ) ; } } } catch ( IOException e ) { } return - 1 ; }", "python": "def getans ( l , r , cards ) :\n    if ( memo [ l ] [ r ] == - 1 ) :\n        if ( l + 1 == r ) :\n            memo [ l ] [ r ] = 0\n        else :\n            ans = 1 << 32\n            for m in range ( l + 1 , r ) :\n                cost = cards [ l ] [ 0 ] * cards [ m - 1 ] [ 1 ] * cards [ m ] [ 0 ] * cards [ r - 1 ] [ 1 ] + getans ( l , m , cards ) + getans ( m , r , cards )\n                ans = min ( ans , cost )\n            memo [ l ] [ r ] = ans\n    return memo [ l ] [ r ]\n"}
{"java": "static int longestsubarray ( int arr [ ] , int n , int k ) { int current_count = 0 ; int max_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) current_count ++ ; else current_count = 0 ; max_count = Math . max ( current_count , max_count ) ; } return max_count ; }", "python": "def longestsubarray ( arr , n , k ) :\n    current_count = 0\n    max_count = 0\n    for i in range ( 0 , n , 1 ) :\n        if ( arr [ i ] % k == 0 ) :\n            current_count += 1\n        else :\n            current_count = 0\n        max_count = max ( current_count , max_count )\n    return max_count\n"}
{"java": "static int distribution ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) count ++ ; return Math . min ( count , n / 2 ) ; }", "python": "def distribution ( arr , n ) :\n    arr . sort ( reverse = False )\n    count = 1\n    for i in range ( 1 , n , 1 ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            count += 1\n    return min ( count , n / 2 )\n"}
{"java": "static long func ( int n , int prev , int s ) { if ( s >= 0 && n >= 0 ) if ( counts [ n ] [ prev + 1 ] [ s ] != - 1 ) { return counts [ n ] [ prev + 1 ] [ s ] ; } if ( n == 0 && s == 0 ) { return 1 ; } if ( s < 0 || n <= 0 ) { return 0 ; } long _count = 0 ; for ( int i = prev + 1 ; i <= 100 - ( n ) + 1 ; i ++ ) { _count += func ( n - 1 , i , s - i ) ; } counts [ n ] [ prev + 1 ] [ s ] = _count ; return _count ; }", "python": "def main ( ) :\n    ans = make_number_of_combination ( )\n    for line in stdin :\n        n , s = ( int ( s ) for s in line . split ( ) )\n        if not n and not s :\n            exit ( )\n        print ( ans [ s ] [ n - 1 ] )\n"}
{"java": "public static int countSubArrays ( int arr [ ] , int x ) { int count = 0 ; int start = - 1 , end = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] < x ) { if ( start == - 1 ) { start = i ; end = i ; } else { end = i ; } } else { if ( start != - 1 && end != - 1 ) { int length = end - start + 1 ; count = count + ( ( length * ( length + 1 ) ) / 2 ) ; } start = - 1 ; end = - 1 ; } } if ( start != - 1 && end != - 1 ) { int length = end - start + 1 ; count = count + ( ( length * ( length + 1 ) ) / 2 ) ; } return count ; }", "python": "def countSubArrays ( arr , x , n ) :\n    count = 0 ;\n    start = - 1 ; end = - 1 ;\n    for i in range ( n ) :\n        if ( arr [ i ] < x ) :\n            if ( start == - 1 ) :\n                start = i ;\n                end = i ;\n            else :\n                end = i ;\n        else :\n            if ( start != - 1 and end != - 1 ) :\n                length = end - start + 1 ;\n                count = count + ( ( length * ( length + 1 ) ) / 2 ) ;\n            start = - 1 ;\n            end = - 1 ;\n    if ( start != - 1 and end != - 1 ) :\n        length = end - start + 1 ;\n        count = count + ( ( length * ( length + 1 ) ) / 2 ) ;\n    return count ;\n"}
{"java": "static boolean permutation ( int [ ] arr , int n ) { Set < Integer > hash = new HashSet < Integer > ( ) ; int maxEle = 0 ; for ( int i = 0 ; i < n ; i ++ ) { hash . add ( arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } if ( maxEle != n ) return false ; if ( hash . size ( ) == n ) return true ; return false ; }", "python": "def permutation ( arr , n ) :\n    s = set ( )\n    maxEle = 0 ;\n    for i in range ( n ) :\n        s . add ( arr [ i ] ) ;\n        maxEle = max ( maxEle , arr [ i ] ) ;\n    if ( maxEle != n ) :\n        return False\n    if ( len ( s ) == n ) :\n        return True ;\n    return False ;\n"}
{"java": "public static void findPairs ( int n , int m ) { long max = n - m ; max = ( 1 + max ) * max / 2 ; long l = n % m ; long min = ( n - m ) / m ; min = ( 1 + min ) * min / 2 * m ; if ( l != 0 ) { min += ( ( n - m ) / m + 1 ) * l ; } System . out . printf ( \" % d \u2581 % d % n \" , min , max ) ; }", "python": "def value ( v ) :\n    return v * ( v - 1 ) // 2\n"}
{"java": "static int findElement ( int arr [ ] , int size ) { int right_mul = 1 , left_mul = 1 ; for ( int i = 1 ; i < size ; i ++ ) right_mul *= arr [ i ] ; for ( int i = 0 , j = 1 ; j < size ; i ++ , j ++ ) { right_mul /= arr [ j ] ; left_mul *= arr [ i ] ; if ( left_mul == right_mul ) return arr [ i + 1 ] ; } return - 1 ; }", "python": "def findElement ( arr , size ) :\n    right_mul = 1 ;\n    left_mul = 1 ;\n    for i in range ( 1 , size ) :\n        right_mul = right_mul * arr [ i ] ;\n    for i , j in zip ( range ( 0 , size ) , range ( 1 , size , 1 ) ) :\n        right_mul = right_mul / arr [ j ] ;\n        left_mul = left_mul * arr [ i ] ;\n        if ( left_mul == right_mul ) :\n            return arr [ i + 1 ] ;\n    return - 1 ;\n"}
{"java": "static void doit ( String [ ] args , InputStream in , PrintStream out ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ; int n = Integer . parseInt ( reader . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String line = reader . readLine ( ) ; String [ ] values = line . split ( \" \u2581 \" ) ; double x1 = Double . parseDouble ( values [ 0 ] ) ; double y1 = Double . parseDouble ( values [ 1 ] ) ; double x2 = Double . parseDouble ( values [ 2 ] ) ; double y2 = Double . parseDouble ( values [ 3 ] ) ; double x3 = Double . parseDouble ( values [ 4 ] ) ; double y3 = Double . parseDouble ( values [ 5 ] ) ; double x4 = Double . parseDouble ( values [ 6 ] ) ; double y4 = Double . parseDouble ( values [ 7 ] ) ; double det = ( x2 - x1 ) * ( y4 - y3 ) - ( y2 - y1 ) * ( x4 - x3 ) ; out . println ( det == 0.0 ? \" YES \" : \" NO \" ) ; } }", "python": "def sroap ( x1 , y1 , x2 , y2 ) :\n    if x2 - x1 == 0 :\n        return float ( \" inf \" )\n    else :\n        return Fraction ( y2 - y1 , x2 - x1 )\n"}
{"java": "static void Alphabet_N_Pattern ( int N ) { int index , side_index , size ; int Right = 1 , Left = 1 , Diagonal = 2 ; for ( index = 0 ; index < N ; index ++ ) { System . out . print ( Left ++ ) ; for ( side_index = 0 ; side_index < 2 * ( index ) ; side_index ++ ) System . out . print ( \" \u2581 \" ) ; if ( index != 0 && index != N - 1 ) System . out . print ( Diagonal ++ ) ; else System . out . print ( \" \u2581 \" ) ; for ( side_index = 0 ; side_index < 2 * ( N - index - 1 ) ; side_index ++ ) System . out . print ( \" \u2581 \" ) ; System . out . print ( Right ++ ) ; System . out . println ( ) ; } }", "python": "def Alphabet_N_Pattern ( N ) :\n    Right = 1\n    Left = 1\n    Diagonal = 2\n    for index in range ( N ) :\n        print ( Left , end = \" \" )\n        Left += 1\n        for side_index in range ( 0 , 2 * ( index ) , 1 ) :\n            print ( \" \u2581 \" , end = \" \" )\n        if ( index != 0 and index != N - 1 ) :\n            print ( Diagonal , end = \" \" )\n            Diagonal += 1\n        else :\n            print ( \" \u2581 \" , end = \" \" )\n        for side_index in range ( 0 , 2 * ( N - index - 1 ) , 1 ) :\n            print ( \" \u2581 \" , end = \" \" )\n        print ( Right , end = \" \" )\n        Right += 1\n        print ( \" \\n \" , end = \" \" )\n"}
{"java": "static long countOfMultiples ( long n ) { return ( n / 3 + n / 5 - n / 15 ) ; }", "python": "def countOfMultiples ( n ) :\n    return ( int ( n / 3 ) + int ( n / 5 ) - int ( n / 15 ) ) ;\n"}
{"java": "static int findProduct ( int arr [ ] , int n , int k ) { int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { prod *= arr [ i ] ; } } return prod ; }", "python": "def findProduct ( arr , n , k ) :\n    prod = 1\n    for i in range ( n ) :\n        if ( arr [ i ] % k == 0 ) :\n            prod *= arr [ i ]\n    return prod\n"}
{"java": "static int findSubsequence ( int arr [ ] , int n ) { int len = 1 ; int tmp ; int i , j , d ; int [ ] [ ] dp = new int [ n ] [ 10 ] ; int [ ] cnt = new int [ 10 ] ; int locMax ; tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ 0 ] [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; locMax = 1 ; for ( int x = 0 ; x < 10 ; x ++ ) cnt [ x ] = 0 ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( d = 0 ; d <= 9 ; d ++ ) { if ( cnt [ d ] > 0 ) { dp [ i ] [ d ] = 1 ; for ( j = 0 ; j < i ; j ++ ) { dp [ i ] [ d ] = Math . max ( dp [ i ] [ d ] , dp [ j ] [ d ] + 1 ) ; locMax = Math . max ( dp [ i ] [ d ] , locMax ) ; } } } for ( d = 0 ; d <= 9 ; d ++ ) { if ( cnt [ d ] > 0 ) { dp [ i ] [ d ] = locMax ; } } len = Math . max ( len , locMax ) ; } return len ; }", "python": "def findSubsequence ( arr , n ) :\n    Len = 1\n    tmp = 0\n    i , j , d = 0 , 0 , 0\n    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n ) ]\n    cnt = [ 0 for i in range ( 10 ) ]\n    locMax = 0\n    tmp = arr [ 0 ]\n    while ( tmp > 0 ) :\n        dp [ 0 ] [ tmp % 10 ] = 1\n        tmp //= 10\n    for i in range ( 1 , n ) :\n        tmp = arr [ i ]\n        locMax = 1\n        cnt = [ 0 for i in range ( 10 ) ]\n        while ( tmp > 0 ) :\n            cnt [ tmp % 10 ] = 1\n            tmp //= 10\n        for d in range ( 10 ) :\n            if ( cnt [ d ] ) :\n                dp [ i ] [ d ] = 1\n                for j in range ( i ) :\n                    dp [ i ] [ d ] = max ( dp [ i ] [ d ] , dp [ j ] [ d ] + 1 )\n                    locMax = max ( dp [ i ] [ d ] , locMax )\n        for d in range ( 10 ) :\n            if ( cnt [ d ] ) :\n                dp [ i ] [ d ] = locMax\n        Len = max ( Len , locMax )\n    return Len\n"}
{"java": "static void PossibleValues ( int b , int x , int n ) { int leastdivisible = ( b / x + 1 ) * x ; int flag = 1 ; while ( leastdivisible <= n ) { if ( leastdivisible - b >= 1 ) { System . out . print ( leastdivisible - b + \" \u2581 \" ) ; leastdivisible += x ; flag = 0 ; } else break ; } if ( flag > 0 ) System . out . println ( - 1 ) ; }", "python": "def PossibleValues ( b , x , n ) :\n    leastdivisible = int ( b / x + 1 ) * x\n    flag = 1\n    while ( leastdivisible <= n ) :\n        if ( leastdivisible - b >= 1 ) :\n            print ( leastdivisible - b , end = \" \u2581 \" )\n            leastdivisible += x\n            flag = 0\n        else :\n            break\n    if ( flag != 0 ) :\n        print ( - 1 )\n"}
{"java": "static void asciiToSentence ( String str , int len ) { int num = 0 ; for ( int i = 0 ; i < len ; i ++ ) { num = num * 10 + ( str . charAt ( i ) - '0' ) ; if ( num >= 32 && num <= 122 ) { char ch = ( char ) num ; System . out . print ( ch ) ; num = 0 ; } } }", "python": "def asciiToSentence ( string , length ) :\n    num = 0 ;\n    for i in range ( length ) :\n        num = num * 10 + ( ord ( string [ i ] ) - ord ( '0' ) ) ;\n        if ( num >= 32 and num <= 122 ) :\n            ch = chr ( num ) ;\n            print ( ch , end = \" \" ) ;\n            num = 0 ;\n"}
{"java": "static int Series ( int Arr [ ] , int N , int K ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( Arr [ i ] == 1 ) count ++ ; if ( K >= ( N - count ) ) return 1 ; else return 0 ; }", "python": "def Series ( Arr , N , K ) :\n    count = 0\n    for i in range ( N ) :\n        if Arr [ i ] == 1 :\n            count += 1\n    if K >= ( N - count ) :\n        return 1\n    return 0\n"}
{"java": "static int LIS ( int a [ ] , int n ) { int dp [ ] = new int [ N ] , d [ ] = new int [ N ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { dp [ a [ i ] ] = 1 ; for ( int j = 2 ; j * j <= a [ i ] ; j ++ ) { if ( a [ i ] % j == 0 ) { dp [ a [ i ] ] = Math . max ( dp [ a [ i ] ] , dp [ d [ j ] ] + 1 ) ; dp [ a [ i ] ] = Math . max ( dp [ a [ i ] ] , dp [ d [ a [ i ] / j ] ] + 1 ) ; d [ j ] = a [ i ] ; d [ a [ i ] / j ] = a [ i ] ; } } ans = Math . max ( ans , dp [ a [ i ] ] ) ; d [ a [ i ] ] = a [ i ] ; } return ans ; }", "python": "def LIS ( a , n ) :\n    dp = [ 0 for i in range ( N ) ]\n    d = [ 0 for i in range ( N ) ]\n    ans = 0\n    for i in range ( n ) :\n        dp [ a [ i ] ] = 1\n        for j in range ( 2 , a [ i ] ) :\n            if j * j > a [ i ] :\n                break\n            if ( a [ i ] % j == 0 ) :\n                dp [ a [ i ] ] = max ( dp [ a [ i ] ] , dp [ d [ j ] ] + 1 )\n                dp [ a [ i ] ] = max ( dp [ a [ i ] ] , dp [ d [ a [ i ] // j ] ] + 1 )\n                d [ j ] = a [ i ]\n                d [ a [ i ] // j ] = a [ i ]\n        ans = max ( ans , dp [ a [ i ] ] )\n        d [ a [ i ] ] = a [ i ]\n    return ans\n"}
{"java": "static long hexadecagonalNum ( long n ) { return ( ( 14 * n * n ) - 12 * n ) / 2 ; }", "python": "def hexadecagonalNum ( n ) :\n    return ( ( 14 * n * n ) - 12 * n ) // 2\n"}
{"java": "static int Max_Sum ( int a [ ] , int n ) { int [ ] b = new int [ n ] ; int S = 0 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = res ; res += a [ i ] ; S += a [ i ] ; res = Math . max ( res , - S ) ; } int ans = S ; ans = Math . max ( ans , res ) ; int g = 0 ; for ( int i = n - 1 ; i >= 0 ; -- i ) { g -= a [ i ] ; ans = Math . max ( ans , g + b [ i ] ) ; } return ans ; }", "python": "def Max_Sum ( a , n ) :\n    b = [ 0 for i in range ( n ) ]\n    S = 0\n    res = 0\n    for i in range ( n ) :\n        b [ i ] = res\n        res += a [ i ]\n        S += a [ i ]\n        res = max ( res , - S )\n    ans = S\n    ans = max ( ans , res )\n    g = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        g -= a [ i ]\n        ans = max ( ans , g + b [ i ] )\n    return ans\n"}
{"java": "public static int logicOfSequence ( int N ) { if ( N % 2 == 0 ) N = N * N ; else N = N * N * N ; return N ; }", "python": "def logicOfSequence ( N ) :\n    if ( N % 2 == 0 ) :\n        N = N * N\n    else :\n        N = N * N * N\n    return N\n"}
{"java": "static int countSC ( int N ) { int res = ( int ) Math . sqrt ( N ) + ( int ) Math . cbrt ( N ) - ( int ) ( Math . sqrt ( Math . cbrt ( N ) ) ) ; return res ; }", "python": "def countSC ( N ) :\n    res = ( int ( math . sqrt ( N ) ) + int ( N ** ( 1 / 3 ) ) - int ( math . sqrt ( N ** ( 1 / 3 ) ) ) )\n    return res\n"}
{"java": "static int getMaxLength ( boolean arr [ ] , int n ) { int count = 0 ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == false ) count = 0 ; else { count ++ ; result = Math . max ( result , count ) ; } } return result ; }", "python": "def getMaxLength ( arr , n ) :\n    count = 0\n    result = 0\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            count = 0\n        else :\n            count += 1\n            result = max ( result , count )\n    return result\n"}
{"java": "static int findBitonicity ( int [ ] arr , int n ) { int bt = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) bt ++ ; else if ( arr [ i ] < arr [ i - 1 ] ) bt -- ; } return bt ; }", "python": "def findBitonicity ( arr , n ) :\n    bt = 0\n    for i in range ( 1 , n , 1 ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            bt += 1\n        elif ( arr [ i ] < arr [ i - 1 ] ) :\n            bt -= 1\n    return bt\n"}
{"java": "public static int dfs ( int index , int depth ) { if ( p [ index ] == - 1 ) { return depth ; } else { return dfs ( p [ index ] , depth + 1 ) ; } }", "python": "def checkchild ( a , i ) :\n    value = 0\n    while ( a [ i ] != - 1 ) :\n        value += 1\n        i = a [ i ]\n    return value\n"}
{"java": "static boolean check ( String s ) { for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) return true ; return false ; }", "python": "def check ( s ) :\n    for i in range ( 0 , len ( s ) ) :\n        if ( s [ i ] == s [ i + 1 ] ) :\n            return True\n    return False\n"}
{"java": "static float Conversion ( float n ) { return ( n - 32.0f ) * 5.0f / 9.0f ; }", "python": "def Conversion ( n ) :\n    return ( n - 32.0 ) * 5.0 / 9.0\n"}
{"java": "public static double answer ( double X , double K ) { double i = 10 ; double MAX = Math . pow ( i , K ) - 1 ; return ( MAX - ( MAX % X ) ) ; }", "python": "def answer ( X , K ) :\n    MAX = pow ( 10 , K ) - 1\n    return ( MAX - ( MAX % X ) )\n"}
{"java": "static int minSubarray ( int A [ ] , int n ) { int minValue = A [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( A [ i ] < minValue ) minValue = A [ i ] ; } int maxValue = A [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( A [ i ] > maxValue ) maxValue = A [ i ] ; } int pos_min = - 1 , pos_max = - 1 , ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( A [ i ] == minValue ) pos_min = i ; if ( A [ i ] == maxValue ) pos_max = i ; if ( pos_max != - 1 && pos_min != - 1 ) ans = Math . min ( ans , Math . abs ( pos_min - pos_max ) + 1 ) ; } return ans ; }", "python": "def minSubarray ( A , n ) :\n    minValue = min ( A )\n    maxValue = max ( A )\n    pos_min , pos_max , ans = - 1 , - 1 , sys . maxsize\n    for i in range ( 0 , n ) :\n        if A [ i ] == minValue :\n            pos_min = i\n        if A [ i ] == maxValue :\n            pos_max = i\n        if pos_max != - 1 and pos_min != - 1 :\n            ans = min ( ans , abs ( pos_min - pos_max ) + 1 )\n    return ans\n"}
{"java": "static void printModulus ( int X , int Y ) { int n = Math . max ( X , Y ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( X % i == Y % i ) System . out . print ( i + \" \u2581 \" ) ; } }", "python": "def printModulus ( X , Y ) :\n    n = max ( X , Y )\n    for i in range ( 1 , n + 1 ) :\n        if ( X % i == Y % i ) :\n            print ( i , end = \" \u2581 \" )\n"}
{"java": "static String solve ( int l , int r ) { return ( l * 2 <= r ) ? String . format ( \" % d \u2581 % d \" , l , l * 2 ) : \" - 1 \u2581 - 1\" ; }", "python": "def lcm ( l , r ) :\n    num1 = l\n    num2 = r\n    while r != 0 :\n        temp = l % r\n        l = r\n        r = temp\n    return ( num1 * num2 ) / l\n"}
{"java": "static void findFactors ( int a , int b ) { int c ; c = a + b - 1 ; System . out . print ( c ) ; }", "python": "def findFactors ( a , b ) :\n    c = a + b - 1\n    print ( c )\n"}
{"java": "static float sph ( float r , float R , float h ) { if ( r < 0 && R < 0 && h < 0 ) return - 1 ; float x = r ; float V = ( float ) ( 4 * 3.14f * Math . pow ( r , 3 ) ) / 3 ; return V ; }", "python": "def sph ( r , R , h ) :\n    if ( r < 0 and R < 0 and h < 0 ) :\n        return - 1\n    x = r\n    V = ( 4 * 3.14 * pow ( r , 3 ) ) / 3\n    return V\n"}
{"java": "static void powerSet ( String str , int index , String curr ) { int n = str . length ( ) ; if ( index == n ) { return ; } System . out . println ( curr ) ; for ( int i = index + 1 ; i < n ; i ++ ) { curr += str . charAt ( i ) ; powerSet ( str , i , curr ) ; curr = curr . substring ( 0 , curr . length ( ) - 1 ) ; } }", "python": "def powerSet ( str1 , index , curr ) :\n    n = len ( str1 )\n    if ( index == n ) :\n        return\n    print ( curr )\n    for i in range ( index + 1 , n ) :\n        curr += str1 [ i ]\n        powerSet ( str1 , i , curr )\n        curr = curr . replace ( curr [ len ( curr ) - 1 ] , \" \" )\n    return\n"}
{"java": "static int findMinSum ( int arr [ ] , int n ) { int occ = n - 1 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] * ( int ) Math . pow ( 2 , occ ) ; occ -- ; } return sum ; }", "python": "def findMinSum ( arr , n ) :\n    occ = n - 1\n    Sum = 0\n    for i in range ( n ) :\n        Sum += arr [ i ] * pow ( 2 , occ )\n        occ -= 1\n    return Sum\n"}
{"java": "static String getCount ( int N ) { if ( N % 2 == 1 ) return \"0\" ; String result = \"9\" ; for ( int i = 1 ; i <= N / 2 - 1 ; i ++ ) result += \"0\" ; return result ; }", "python": "def getCount ( N ) :\n    if ( N % 2 == 1 ) :\n        return \"0\"\n    result = \"9\"\n    for i in range ( 1 , N // 2 ) :\n        result = result + \"0\"\n    return result\n"}
{"java": "static float knapSack ( int W , float wt [ ] , float val [ ] , int n ) { float maxratio = Integer . MIN_VALUE ; int maxindex = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( val [ i ] / wt [ i ] ) > maxratio ) { maxratio = ( val [ i ] / wt [ i ] ) ; maxindex = i ; } } return ( W * maxratio ) ; }", "python": "def knapSack ( W , wt , val , n ) :\n    maxratio = - sys . maxsize - 1 ;\n    maxindex = 0 ;\n    for i in range ( n ) :\n        if ( ( val [ i ] / wt [ i ] ) > maxratio ) :\n            maxratio = ( val [ i ] / wt [ i ] ) ;\n            maxindex = i ;\n    return ( W * maxratio ) ;\n"}
{"java": "static void printDuplicates ( int arr [ ] , int n ) { int i ; int fl = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ arr [ i ] % n ] >= n ) { if ( arr [ arr [ i ] % n ] < 2 * n ) { System . out . print ( arr [ i ] % n + \" \u2581 \" ) ; fl = 1 ; } } arr [ arr [ i ] % n ] += n ; } if ( ! ( fl > 0 ) ) System . out . println ( \" - 1\" ) ; }", "python": "def printDuplicates ( arr , n ) :\n    fl = 0 ;\n    for i in range ( 0 , n ) :\n        if ( arr [ arr [ i ] % n ] >= n ) :\n            if ( arr [ arr [ i ] % n ] < 2 * n ) :\n                print ( arr [ i ] % n , end = \" \u2581 \" )\n                fl = 1 ;\n        arr [ arr [ i ] % n ] += n ;\n    if ( fl == 0 ) :\n        print ( \" - 1\" )\n"}
{"java": "static int usingBinarySearch ( int start , int end , int N , int S ) { if ( start >= end ) return start ; int mid = start + ( end - start ) / 2 ; int totalSum = ( N * ( N + 1 ) ) / 2 ; int midSum = ( mid * ( mid + 1 ) ) / 2 ; if ( ( totalSum - midSum ) <= S ) { return usingBinarySearch ( start , mid , N , S ) ; } return usingBinarySearch ( mid + 1 , end , N , S ) ; }", "python": "def usingBinarySearch ( start , end , N , S ) :\n    if ( start >= end ) :\n        return start ;\n    mid = start + ( end - start ) // 2 ;\n    totalSum = ( N * ( N + 1 ) ) // 2 ;\n    midSum = ( mid * ( mid + 1 ) ) // 2 ;\n    if ( ( totalSum - midSum ) <= S ) :\n        return usingBinarySearch ( start , mid , N , S ) ;\n    return usingBinarySearch ( mid + 1 , end , N , S ) ;\n"}
{"java": "static int findMaxNum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int num = arr [ 0 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { num = num * 10 + arr [ i ] ; } return num ; }", "python": "def findMaxNum ( arr , n ) :\n    arr . sort ( reverse = True )\n    num = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        num = num * 10 + arr [ i ]\n    return num\n"}
{"java": "static int minSum ( int arr [ ] , int n ) { Vector < Integer > evenArr = new Vector < > ( ) ; Vector < Integer > oddArr = new Vector < > ( ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < n / 2 ) { oddArr . add ( arr [ i ] ) ; } else { evenArr . add ( arr [ i ] ) ; } } Comparator comparator = Collections . reverseOrder ( ) ; Collections . sort ( evenArr , comparator ) ; int i = 0 , sum = 0 ; for ( int j = 0 ; j < evenArr . size ( ) ; j ++ ) { arr [ i ++ ] = evenArr . get ( j ) ; arr [ i ++ ] = oddArr . get ( j ) ; sum += evenArr . get ( j ) * oddArr . get ( j ) ; } return sum ; }", "python": "def minSum ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    arr . sort ( )\n    for i in range ( n ) :\n        if ( i < n // 2 ) :\n            oddArr . append ( arr [ i ] )\n        else :\n            evenArr . append ( arr [ i ] )\n    evenArr . sort ( reverse = True )\n    i = 0\n    sum = 0\n    for j in range ( len ( evenArr ) ) :\n        arr [ i ] = evenArr [ j ]\n        i += 1\n        arr [ i ] = oddArr [ j ]\n        i += 1\n        sum += evenArr [ j ] * oddArr [ j ]\n    return sum\n"}
{"java": "static int solve ( int idx ) { if ( idx == nums . length ) { int a = nums [ 3 ] * 100 + ( nums [ 1 ] + nums [ 4 ] ) * 10 + nums [ 0 ] + nums [ 2 ] + nums [ 5 ] ; int b = nums [ 6 ] * 100 + nums [ 7 ] * 10 + nums [ 8 ] ; if ( a == b ) return 1 ; else return 0 ; } int ret = 0 ; if ( nums [ idx ] == - 1 ) { for ( int k = 1 ; k <= 9 ; k ++ ) { if ( ! used [ k ] ) { nums [ idx ] = k ; used [ k ] = true ; ret += solve ( idx + 1 ) ; nums [ idx ] = - 1 ; used [ k ] = false ; } } } else { ret = solve ( idx + 1 ) ; } return ret ; }", "python": "def make_list ( X ) :\n    if X != - 1 :\n        x_list = [ X ]\n    else :\n        x_list = [ i for i in range ( 1 , 10 ) ]\n    return x_list\n"}
{"java": "public static boolean solve ( String n , int l ) { if ( l < 3 ) { if ( Integer . parseInt ( n ) % 8 == 0 ) return true ; n = new String ( ( new StringBuilder ( ) ) . append ( n ) . reverse ( ) ) ; if ( Integer . parseInt ( n ) % 8 == 0 ) return true ; return false ; } int [ ] hash = new int [ 10 ] ; for ( int i = 0 ; i < l ; i ++ ) hash [ n . charAt ( i ) - '0' ] ++ ; for ( int i = 104 ; i < 1000 ; i += 8 ) { int dup = i ; int [ ] freq = new int [ 10 ] ; freq [ dup % 10 ] ++ ; dup = dup / 10 ; freq [ dup % 10 ] ++ ; dup = dup / 10 ; freq [ dup % 10 ] ++ ; dup = i ; if ( freq [ dup % 10 ] > hash [ dup % 10 ] ) continue ; dup = dup / 10 ; if ( freq [ dup % 10 ] > hash [ dup % 10 ] ) continue ; dup = dup / 10 ; if ( freq [ dup % 10 ] > hash [ dup % 10 ] ) continue ; return true ; } return false ; }", "python": "def solve ( n , l ) :\n    if l < 3 :\n        if int ( n ) % 8 == 0 :\n            return True\n        n = n [ : : - 1 ]\n        if int ( n ) % 8 == 0 :\n            return True\n        return False\n    hash = 10 * [ 0 ]\n    for i in range ( 0 , l ) :\n        hash [ int ( n [ i ] ) - 0 ] += 1 ;\n    for i in range ( 104 , 1000 , 8 ) :\n        dup = i\n        freq = 10 * [ 0 ]\n        freq [ int ( dup % 10 ) ] += 1 ;\n        dup = dup / 10\n        freq [ int ( dup % 10 ) ] += 1 ;\n        dup = dup / 10\n        freq [ int ( dup % 10 ) ] += 1 ;\n        dup = i\n        if ( freq [ int ( dup % 10 ) ] > hash [ int ( dup % 10 ) ] ) :\n            continue ;\n        dup = dup / 10 ;\n        if ( freq [ int ( dup % 10 ) ] > hash [ int ( dup % 10 ) ] ) :\n            continue ;\n        dup = dup / 10\n        if ( freq [ int ( dup % 10 ) ] > hash [ int ( dup % 10 ) ] ) :\n            continue ;\n        return True\n    return False\n"}
{"java": "static boolean strmatch ( String str , String pattern , int n , int m ) { if ( m == 0 ) return ( n == 0 ) ; boolean [ ] [ ] lookup = new boolean [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) Arrays . fill ( lookup [ i ] , false ) ; lookup [ 0 ] [ 0 ] = true ; for ( int j = 1 ; j <= m ; j ++ ) if ( pattern . charAt ( j - 1 ) == ' * ' ) lookup [ 0 ] [ j ] = lookup [ 0 ] [ j - 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( pattern . charAt ( j - 1 ) == ' * ' ) lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] || lookup [ i - 1 ] [ j ] ; else if ( pattern . charAt ( j - 1 ) == ' ? ' || str . charAt ( i - 1 ) == pattern . charAt ( j - 1 ) ) lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] ; else lookup [ i ] [ j ] = false ; } } return lookup [ n ] [ m ] ; }", "python": "def strrmatch ( strr , pattern , n , m ) :\n    if ( m == 0 ) :\n        return ( n == 0 )\n    lookup = [ [ False for i in range ( m + 1 ) ] for j in range ( n + 1 ) ]\n    lookup [ 0 ] [ 0 ] = True\n    for j in range ( 1 , m + 1 ) :\n        if ( pattern [ j - 1 ] == ' * ' ) :\n            lookup [ 0 ] [ j ] = lookup [ 0 ] [ j - 1 ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , m + 1 ) :\n            if ( pattern [ j - 1 ] == ' * ' ) :\n                lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] or lookup [ i - 1 ] [ j ]\n            elif ( pattern [ j - 1 ] == ' ? ' or strr [ i - 1 ] == pattern [ j - 1 ] ) :\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ]\n            else :\n                lookup [ i ] [ j ] = False\n    return lookup [ n ] [ m ]\n"}
{"java": "static int countWays ( int N ) { int E = ( N * ( N - 1 ) ) / 2 ; if ( N == 1 ) return 0 ; return ( int ) Math . pow ( 2 , E - 1 ) ; }", "python": "def countWays ( N ) :\n    E = ( N * ( N - 1 ) ) / 2\n    if ( N == 1 ) :\n        return 0\n    return int ( pow ( 2 , E - 1 ) )\n"}
{"java": "static long ceil ( long a , long b ) { return a % b == 0 ? a / b : a / b + 1 ; }", "python": "def nextpt ( ratio1 , ratio2 , pt ) :\n    if ratio1 [ 0 ] * ratio2 [ 1 ] - ratio1 [ 1 ] * ratio2 [ 0 ] > 0 :\n        pt [ 0 ] = pt [ 0 ] + ( ( - 1 ) * pt [ 0 ] ) % ratio2 [ 0 ]\n        pt [ 1 ] = pt [ 0 ] * ratio2 [ 1 ] // ratio2 [ 0 ]\n    else :\n        pt [ 1 ] = pt [ 1 ] + ( ( - 1 ) * pt [ 1 ] ) % ratio2 [ 1 ]\n        pt [ 0 ] = pt [ 1 ] * ratio2 [ 0 ] // ratio2 [ 1 ]\n    return pt\n"}
{"java": "static int disc ( int a , int b , int c ) { int dis = ( int ) Math . pow ( b , 2 ) - ( 4 * a * c ) ; return dis ; }", "python": "def discriminant ( a , b , c ) :\n    discriminant = ( b ** 2 ) - ( 4 * a * c )\n    if discriminant > 0 :\n        print ( ' Discriminant \u2581 is ' , discriminant , \" which \u2581 is \u2581 Positive \" )\n        print ( ' Hence \u2581 Two \u2581 Solutions ' )\n    elif discriminant == 0 :\n        print ( ' Discriminant \u2581 is ' , discriminant , \" which \u2581 is \u2581 Zero \" )\n        print ( ' Hence \u2581 One \u2581 Solution ' )\n    elif discriminant < 0 :\n        print ( ' Discriminant \u2581 is ' , discriminant , \" which \u2581 is \u2581 Negative \" )\n        print ( ' Hence \u2581 No \u2581 Real \u2581 Solutions ' )\n"}
{"java": "static int count_pairs ( String s1 [ ] , String s2 [ ] , int n1 , int n2 ) { HashMap < String , Integer > mp = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < n1 ; i ++ ) mp . put ( s1 [ i ] , 0 ) ; for ( int i = 0 ; i < n1 ; i ++ ) mp . put ( s1 [ i ] , mp . get ( s1 [ i ] ) + 1 ) ; int cnt = 0 ; for ( int i = 0 ; i < n2 ; i ++ ) { if ( mp . get ( s2 [ i ] ) > 0 ) { cnt ++ ; mp . put ( s2 [ i ] , mp . get ( s2 [ i ] ) - 1 ) ; } } return cnt ; }", "python": "def count_pairs ( s1 , s2 , n1 , n2 ) :\n    mp = { s1 [ i ] : 0 for i in range ( len ( s1 ) ) }\n    for i in range ( n1 ) :\n        mp [ s1 [ i ] ] += 1\n    cnt = 0\n    for i in range ( n2 ) :\n        if ( mp [ s2 [ i ] ] > 0 ) :\n            cnt += 1\n            mp [ s2 [ i ] ] -= 1\n    return cnt\n"}
{"java": "static int maxBitElement ( int arr [ ] , int n ) { int num = 0 , max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int cnt = Integer . bitCount ( arr [ i ] ) ; if ( cnt > max ) { max = cnt ; num = arr [ i ] ; } } return num ; }", "python": "def maxBitElement ( arr , n ) :\n    num = 0\n    max = - 1\n    for i in range ( n ) :\n        cnt = bin ( arr [ i ] ) . count ( '1' )\n        if ( cnt > max ) :\n            max = cnt\n            num = arr [ i ]\n    return num\n"}
{"java": "static float areaOfKite ( int a , int b , double angle ) { angle = angle * PI ; double area = a * b * Math . sin ( angle ) ; return ( float ) area ; }", "python": "def areaOfKite ( a , b , angle ) :\n    angle = angle * PI ;\n    area = a * b * math . sin ( angle ) ;\n    return area ;\n"}
{"java": "static int sum ( int k , int n ) { int sum = ( int ) ( Math . pow ( k , n + 1 ) - Math . pow ( k - 1 , n + 1 ) ) ; return sum ; }", "python": "def sum ( k , n ) :\n    sum = ( pow ( k , n + 1 ) - pow ( k - 1 , n + 1 ) ) ;\n    return sum ;\n"}
{"java": "static void ReplaceElements ( int arr [ ] , int n ) { int prod = 1 ; for ( int i = 0 ; i < n ; ++ i ) { prod *= arr [ i ] ; } for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = prod / arr [ i ] ; } }", "python": "def ReplaceElements ( arr , n ) :\n    prod = 1\n    for i in range ( n ) :\n        prod *= arr [ i ]\n    for i in range ( n ) :\n        arr [ i ] = prod // arr [ i ]\n"}
{"java": "static void printString ( char [ ] str , int n ) { int ones = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( str [ i ] == '1' ) ones ++ ; boolean used = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ] == '2' && ! used ) { used = true ; for ( int j = 0 ; j < ones ; j ++ ) System . out . print ( \"1\" ) ; } if ( str [ i ] != '1' ) System . out . print ( str [ i ] ) ; } if ( ! used ) for ( int j = 0 ; j < ones ; j ++ ) System . out . print ( \"1\" ) ; }", "python": "def printString ( Str1 , n ) :\n    ones = 0\n    for i in range ( n ) :\n        if ( Str1 [ i ] == '1' ) :\n            ones += 1\n    used = False\n    for i in range ( n ) :\n        if ( Str1 [ i ] == '2' and used == False ) :\n            used = 1\n            for j in range ( ones ) :\n                print ( \"1\" , end = \" \" )\n        if ( Str1 [ i ] != '1' ) :\n            print ( Str1 [ i ] , end = \" \" )\n    if ( used == False ) :\n        for j in range ( ones ) :\n            print ( \"1\" , end = \" \" )\n"}
{"java": "static void printNumbers ( int a [ ] , int n ) { Map < Integer , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; for ( int j = 1 ; j * j <= num ; j ++ ) { if ( num % j == 0 ) { if ( j != 1 ) { if ( mpp . containsKey ( j ) ) { mpp . put ( j , mpp . get ( j ) + 1 ) ; } else { mpp . put ( j , 1 ) ; } } if ( ( num / j ) != j ) { if ( mpp . containsKey ( num / j ) ) { mpp . put ( num / j , mpp . get ( num / j ) + 1 ) ; } else { mpp . put ( num / j , 1 ) ; } } } } } int maxi = 0 ; for ( Map . Entry < Integer , Integer > it : mpp . entrySet ( ) ) { maxi = Math . max ( it . getValue ( ) , maxi ) ; } for ( Map . Entry < Integer , Integer > it : mpp . entrySet ( ) ) { if ( it . getValue ( ) == maxi ) System . out . print ( it . getKey ( ) + \" \u2581 \" ) ; } }", "python": "def printNumbers ( a , n ) :\n    mpp = dict ( )\n    for i in range ( n ) :\n        num = a [ i ]\n        for j in range ( 1 , num + 1 ) :\n            if j * j > num :\n                break\n            if ( num % j == 0 ) :\n                if ( j != 1 ) :\n                    mpp [ j ] = mpp . get ( j , 0 ) + 1\n                if ( ( num // j ) != j ) :\n                    mpp [ num // j ] = mpp . get ( num // j , 0 ) + 1\n    maxi = 0\n    for it in mpp :\n        maxi = max ( mpp [ it ] , maxi )\n    for it in mpp :\n        if ( mpp [ it ] == maxi ) :\n            print ( it , end = \" \u2581 \" )\n"}
{"java": "private static int cal ( char s , char t ) { if ( s > t ) return Math . min ( s - t , t - ( s - 26 ) ) ; else return Math . min ( t - s , s - ( t - 26 ) ) ; }", "python": "def sdist2 ( l ) :\n    su = [ 0 , 2 , 19 , 6 ]\n    alp = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n    diff = [ ]\n    for i in range ( 4 ) :\n        x = alp . index ( l [ i ] )\n        y = su [ i ]\n        if y > x :\n            y , x = x , y\n        aa = x - y\n        bb = ( 26 + y ) - x\n        if ( 0 <= aa <= 26 ) and ( 0 <= bb <= 26 ) :\n            diff . append ( min ( aa , bb ) )\n    return sum ( diff )\n"}
{"java": "static int countBits ( int number ) { return ( int ) ( Math . log ( number ) / Math . log ( 2 ) + 1 ) ; }", "python": "def countBits ( number ) :\n    return int ( ( math . log ( number ) / math . log ( 2 ) ) + 1 ) ;\n"}
{"java": "public static int findMaxValue ( ) { int res = 2 ; long fact = 2 ; while ( true ) { if ( fact < 0 ) break ; res ++ ; fact = fact * res ; } return res - 1 ; }", "python": "def findMaxValue ( ) :\n    res = 2 ;\n    fact = 2 ;\n    while ( True ) :\n        if ( fact < 0 or fact > sys . maxsize ) :\n            break ;\n        res += 1 ;\n        fact = fact * res ;\n    return res - 1 ;\n"}
{"java": "static boolean checkCentrosymmetricted ( int n , int m [ ] [ ] ) { int mid_row ; if ( ( n & 1 ) > 0 ) mid_row = n / 2 + 1 ; else mid_row = n / 2 ; for ( int i = 0 ; i < mid_row ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( m [ i ] [ j ] != m [ n - i - 1 ] [ n - j - 1 ] ) return false ; } } return true ; }", "python": "def checkCentrosymmetricted ( n , m ) :\n    mid_row = 0 ;\n    if ( ( n & 1 ) > 0 ) :\n        mid_row = n / 2 + 1 ;\n    else :\n        mid_row = n / 2 ;\n    for i in range ( int ( mid_row ) ) :\n        for j in range ( n ) :\n            if ( m [ i ] [ j ] != m [ n - i - 1 ] [ n - j - 1 ] ) :\n                return False ;\n    return True ;\n"}
{"java": "static int GIF ( double n ) { return ( int ) Math . floor ( n ) ; }", "python": "def GIF ( n ) :\n    return int ( math . floor ( n ) ) ;\n"}
{"java": "static int countPairs ( int arr [ ] , int n ) { HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) map . put ( arr [ i ] - i , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) map . put ( arr [ i ] - i , map . get ( arr [ i ] - i ) + 1 ) ; int res = 0 ; for ( int x : map . values ( ) ) { int cnt = x ; res += ( ( cnt * ( cnt - 1 ) ) / 2 ) ; } return res ; }", "python": "def countPairs ( arr , n ) :\n    map = dict ( )\n    for i in range ( n ) :\n        map [ arr [ i ] - i ] = map . get ( arr [ i ] - i , 0 ) + 1\n    res = 0\n    for x in map :\n        cnt = map [ x ]\n        res += ( ( cnt * ( cnt - 1 ) ) // 2 )\n    return res\n"}
{"java": "static int findMinSwaps ( String s , int k ) { int ans = 0 ; int c_one = 0 , c_zero = 0 ; for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '1' ) c_one ++ ; if ( s . charAt ( i ) == '0' ) { c_zero ++ ; ans += c_one ; } if ( c_zero == k ) break ; } if ( c_zero < k ) return - 1 ; return ans ; }", "python": "def findMinSwaps ( s , k ) :\n    ans = 0 ;\n    c_one = 0 ; c_zero = 0 ;\n    for i in range ( len ( s ) - 1 , - 1 , - 1 ) :\n        if ( s [ i ] == '1' ) :\n            c_one += 1 ;\n        if ( s [ i ] == '0' ) :\n            c_zero += 1 ;\n            ans += c_one ;\n        if ( c_zero == k ) :\n            break ;\n    if ( c_zero < k ) :\n        return - 1 ;\n    return ans ;\n"}
{"java": "static void CountPair ( int L , int R ) { int x = ( R - L + 1 ) ; System . out . println ( x / 2 + \" \\n \" ) ; }", "python": "def CountPair ( L , R ) :\n    x = ( R - L + 1 )\n    print ( x // 2 )\n"}
{"java": "static int max_xor ( int arr [ ] , int n ) { int maxx = 0 , mask = 0 ; HashSet < Integer > se = new HashSet < Integer > ( ) ; for ( int i = 30 ; i >= 0 ; i -- ) { mask |= ( 1 << i ) ; for ( int j = 0 ; j < n ; ++ j ) { se . add ( arr [ j ] & mask ) ; } int newMaxx = maxx | ( 1 << i ) ; for ( int prefix : se ) { if ( se . contains ( newMaxx ^ prefix ) ) { maxx = newMaxx ; break ; } } se . clear ( ) ; } return maxx ; }", "python": "def max_xor ( arr , n ) :\n    maxx = 0\n    mask = 0 ;\n    se = set ( )\n    for i in range ( 30 , - 1 , - 1 ) :\n        mask |= ( 1 << i )\n        newMaxx = maxx | ( 1 << i )\n        for i in range ( n ) :\n            se . add ( arr [ i ] & mask )\n        for prefix in se :\n            if ( newMaxx ^ prefix ) in se :\n                maxx = newMaxx\n                break\n        se . clear ( )\n    return maxx\n"}
{"java": "static String isFibonacci ( String s ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) == null ? 1 : m . get ( s . charAt ( i ) ) + 1 ) ; Vector < Integer > v = new Vector < > ( ) ; int n = m . size ( ) ; int a = 1 , b = 1 ; int c ; v . add ( a ) ; v . add ( b ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { v . add ( a + b ) ; c = a + b ; a = b ; b = c ; } int flag = 1 ; int i = 0 ; for ( HashMap . Entry < Character , Integer > entry : m . entrySet ( ) ) { if ( entry . getValue ( ) != v . elementAt ( i ) ) { flag = 1 ; break ; } i ++ ; } if ( flag == 1 ) return \" YES \" ; else return \" NO \" ; }", "python": "def isFibonacci ( s ) :\n    m = defaultdict ( lambda : 0 )\n    for i in range ( 0 , len ( s ) ) :\n        m [ s [ i ] ] += 1\n    v = [ ]\n    n = len ( m )\n    a = b = 1\n    v . append ( a )\n    v . append ( b )\n    for i in range ( 0 , n - 2 ) :\n        v . append ( a + b )\n        c = a + b\n        a , b = b , c\n    flag , i = 1 , 0\n    for itr in sorted ( m ) :\n        if m [ itr ] != v [ i ] :\n            flag = 0\n            break\n        i += 1\n    if flag == 1 :\n        return \" YES \"\n    else :\n        return \" NO \"\n"}
{"java": "static long count ( int arr [ ] , int n , int x ) { if ( x == 1 ) { long ans = ( long ) Math . pow ( 2 , n ) - 1 ; return ans ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) count ++ ; } long ans = ( long ) Math . pow ( 2 , count ) - 1 ; return ans ; }", "python": "def count ( arr , n , x ) :\n    if ( x == 1 ) :\n        ans = pow ( 2 , n ) - 1\n        return ans ;\n    count = 0\n    for i in range ( n ) :\n        if ( arr [ i ] % x == 0 ) :\n            count += 1\n    ans = pow ( 2 , count ) - 1\n    return ans\n"}
{"java": "static long minOperations ( long n ) { long count = 0 ; long d = 0 ; if ( n == 1 ) return 0 ; while ( n > 9 ) { d = Math . max ( n % 10 , d ) ; n /= 10 ; count += 10 ; } d = Math . max ( d , n - 1 ) ; count += Math . abs ( d ) ; return count - 1 ; }", "python": "def minOperations ( n ) :\n    count = 0\n    d = 0\n    if ( n == 1 ) :\n        return 0\n    while ( n > 9 ) :\n        d = max ( n % 10 , d )\n        n //= 10\n        count += 10\n    d = max ( d , n - 1 )\n    count += abs ( d )\n    return count - 1\n"}
{"java": "static long nextFibonacci ( int n ) { double a = n * ( 1 + Math . sqrt ( 5 ) ) / 2.0 ; return Math . round ( a ) ; }", "python": "def nextFibonacci ( n ) :\n    a = n * ( 1 + sqrt ( 5 ) ) / 2.0\n    return round ( a )\n"}
{"java": "static int minOperations ( int N ) { double x = Math . log ( N ) / Math . log ( 2 ) ; int ans = ( int ) ( Math . ceil ( x ) ) ; return ans ; }", "python": "def minOperations ( N ) :\n    x = log2 ( N )\n    ans = ceil ( x )\n    return ans\n"}
{"java": "static int deleteElement ( int A [ ] , int L , int R , int N ) { int i , j = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( i <= L || i >= R ) { A [ j ] = A [ i ] ; j ++ ; } } return j ; }", "python": "def deleteElement ( A , L , R , N ) :\n    j = 0\n    for i in range ( N ) :\n        if i <= L or i >= R :\n            A [ j ] = A [ i ]\n            j += 1\n    return j\n"}
{"java": "static long val ( int h , int w ) { int n = h + w ; int r = h ; long l = ( ( ( fact [ n ] * factinv [ r ] ) % p ) * factinv [ n - r ] ) % p ; if ( l < 0 ) l += p ; return l ; }", "python": "def inpl ( ) : return [ int ( i ) for i in input ( ) . split ( ) ]\nmod = 10 ** 9 + 7\nH , W , A , B = inpl ( )\nfac = [ 1 for _ in range ( H + W - 1 ) ]\nfor i in range ( H + W - 2 ) :\n    fac [ i + 1 ] = ( i + 1 ) * fac [ i ] % mod\n"}
{"java": "static int countIntervals ( int [ ] [ ] arr , int V , int N ) { int min = Integer . MAX_VALUE , max = Integer . MIN_VALUE ; int li , ri ; int [ ] freq = new int [ MAX_VAL ] ; for ( int i = 0 ; i < N ; i ++ ) { li = arr [ i ] [ 0 ] ; freq [ li ] = freq [ li ] + 1 ; ri = arr [ i ] [ 1 ] ; freq [ ri + 1 ] = freq [ ri + 1 ] - 1 ; if ( li < min ) min = li ; if ( ri > max ) max = ri ; } for ( int i = min ; i <= max ; i ++ ) freq [ i ] = freq [ i ] + freq [ i - 1 ] ; return freq [ V ] ; }", "python": "def countIntervals ( arr , V , N ) :\n    minimum = float ( \" inf \" )\n    maximum = 0\n    freq = [ 0 ] * ( MAX_VAL )\n    for i in range ( 0 , N ) :\n        li = arr [ i ] [ 0 ]\n        freq [ li ] = freq [ li ] + 1\n        ri = arr [ i ] [ 1 ]\n        freq [ ri + 1 ] = freq [ ri + 1 ] - 1\n        if li < minimum :\n            minimum = li\n        if ri > maximum :\n            maximum = ri\n    for i in range ( minimum , maximum + 1 ) :\n        freq [ i ] = freq [ i ] + freq [ i - 1 ]\n    return freq [ V ]\n"}
{"java": "static boolean pointIsOnLine ( int m , int c , int x , int y ) { if ( y == ( ( m * x ) + c ) ) return true ; return false ; }", "python": "def pointIsOnLine ( m , c , x , y ) :\n    if ( y == ( ( m * x ) + c ) ) :\n        return True ;\n    return False ;\n"}
{"java": "static int findMinDifference ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int diff1 = arr [ n - 1 ] - arr [ 1 ] ; int diff2 = arr [ n - 2 ] - arr [ 0 ] ; return Math . min ( diff1 , diff2 ) ; }", "python": "def findMinDifference ( arr , n ) :\n    arr . sort ( )\n    diff1 = arr [ n - 1 ] - arr [ 1 ]\n    diff2 = arr [ n - 2 ] - arr [ 0 ]\n    return min ( diff1 , diff2 )\n"}
{"java": "static int maxlenAP ( int a [ ] , int n , int d ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; int maxt = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( a [ i ] - i * d ) ) { int freq = m . get ( a [ i ] - i * d ) ; freq ++ ; m . put ( a [ i ] - i * d , freq ) ; } else { m . put ( a [ i ] - i * d , 1 ) ; } } for ( Entry < Integer , Integer > val : m . entrySet ( ) ) { if ( maxt < val . getValue ( ) ) maxt = val . getValue ( ) ; } return maxt ; }", "python": "def maxlenAP ( a , n , d ) :\n    m = dict ( )\n    maxt = 1\n    for i in range ( n ) :\n        if ( a [ i ] - i * d ) in m :\n            m [ a [ i ] - i * d ] += 1\n        else :\n            m [ a [ i ] - i * d ] = 1\n    for it in m :\n        if m [ it ] > maxt :\n            maxt = m [ it ]\n    return maxt\n"}
{"java": "static int minSum ( int arr [ ] , int n , int x ) { int sum = 0 ; int largestDivisible = - 1 , minimum = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( arr [ i ] % x == 0 && largestDivisible < arr [ i ] ) largestDivisible = arr [ i ] ; if ( arr [ i ] < minimum ) minimum = arr [ i ] ; } if ( largestDivisible == - 1 ) return sum ; int sumAfterOperation = sum - minimum - largestDivisible + ( x * minimum ) + ( largestDivisible / x ) ; return Math . min ( sum , sumAfterOperation ) ; }", "python": "def minSum ( arr , n , x ) :\n    Sum = 0\n    largestDivisible , minimum = - 1 , arr [ 0 ]\n    for i in range ( 0 , n ) :\n        Sum += arr [ i ]\n        if ( arr [ i ] % x == 0 and largestDivisible < arr [ i ] ) :\n            largestDivisible = arr [ i ]\n        if arr [ i ] < minimum :\n            minimum = arr [ i ]\n    if largestDivisible == - 1 :\n        return Sum\n    sumAfterOperation = ( Sum - minimum - largestDivisible + ( x * minimum ) + ( largestDivisible // x ) )\n    return min ( Sum , sumAfterOperation )\n"}
{"java": "static int largestSquareFactor ( int num ) { int answer = 1 ; for ( int i = 2 ; i < Math . sqrt ( num ) ; ++ i ) { int cnt = 0 ; int j = i ; while ( num % j == 0 ) { cnt ++ ; j *= i ; } if ( ( cnt & 1 ) != 0 ) { cnt -- ; answer *= Math . pow ( i , cnt ) ; } else { answer *= Math . pow ( i , cnt ) ; } } return answer ; }", "python": "def largestSquareFactor ( num ) :\n    answer = 1\n    for i in range ( 2 , int ( math . sqrt ( num ) ) ) :\n        cnt = 0\n        j = i\n        while ( num % j == 0 ) :\n            cnt += 1\n            j *= i\n        if ( cnt & 1 ) :\n            cnt -= 1\n            answer *= pow ( i , cnt )\n        else :\n            answer *= pow ( i , cnt )\n    return answer\n"}
{"java": "public static double floatError ( double no ) { double sum = 0.0 ; for ( int i = 0 ; i < 10 ; i ++ ) { sum = sum + no ; } return sum ; }", "python": "def floatError ( no ) :\n    sum = 0.0\n    for i in range ( 10 ) :\n        sum = sum + no\n    return sum\n"}
{"java": "static int CntcontSubs ( int a [ ] , int n ) { int c = 0 , d = 0 , i , sum = 1 , j ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 != 0 || a [ i ] % 4 == 0 ) d ++ ; sum = a [ i ] ; for ( j = i + 1 ; j < n ; j ++ ) { sum = sum * a [ j ] ; if ( sum % 2 != 0 || sum % 4 == 0 ) c ++ ; } sum = 1 ; } return c + d ; }", "python": "def CntcontSubs ( a , n ) :\n    c = 0\n    d = 0\n    sum = 1\n    for i in range ( n ) :\n        if ( a [ i ] % 2 != 0 or a [ i ] % 4 == 0 ) :\n            d += 1\n        sum = a [ i ]\n        for j in range ( i + 1 , n ) :\n            sum = sum * a [ j ]\n            if ( sum % 2 != 0 or sum % 4 == 0 ) :\n                c += 1\n        sum = 1\n    return c + d\n"}
{"java": "static void run ( ) { int n , firstPriceTmp , priceTmp ; int minPrice , maxPrice ; int maxBenefit , benefit ; maxBenefit = - ( 1000000000 - 1 ) ; minPrice = 1000000000 ; maxPrice = 1 ; n = scan . nextInt ( ) ; firstPriceTmp = scan . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) { priceTmp = scan . nextInt ( ) ; minPrice = Math . min ( minPrice , firstPriceTmp ) ; firstPriceTmp = priceTmp ; benefit = priceTmp - minPrice ; maxBenefit = Math . max ( benefit , maxBenefit ) ; } System . out . println ( maxBenefit ) ; }", "python": "def main ( ) :\n    inputs = int ( sys . stdin . readline ( ) . rstrip ( ) )\n    maxv = - 100000000000\n    minv = int ( sys . stdin . readline ( ) . rstrip ( ) )\n    for i in range ( 1 , inputs ) :\n        compv = int ( sys . stdin . readline ( ) )\n        if compv - minv > maxv :\n            maxv = compv - minv\n        if compv < minv :\n            minv = compv\n    bigprice = maxv\n    print ( bigprice )\n"}
{"java": "static int trace ( int n , int m ) { int A [ ] [ ] = new int [ n ] [ m ] ; int B [ ] [ ] = new int [ n ] [ m ] ; int C [ ] [ ] = new int [ n ] [ m ] ; int cnt = 1 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) { A [ i ] [ j ] = cnt ; cnt ++ ; } cnt = 1 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) { B [ j ] [ i ] = cnt ; cnt ++ ; } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) if ( i == j ) sum += C [ i ] [ j ] ; return sum ; }", "python": "def trace ( n , m ) :\n    A = [ [ 0 for x in range ( m ) ] for y in range ( n ) ] ;\n    B = [ [ 0 for x in range ( m ) ] for y in range ( n ) ] ;\n    C = [ [ 0 for x in range ( m ) ] for y in range ( n ) ] ;\n    cnt = 1 ;\n    for i in range ( n ) :\n        for j in range ( m ) :\n            A [ i ] [ j ] = cnt ;\n            cnt += 1 ;\n    cnt = 1 ;\n    for i in range ( n ) :\n        for j in range ( m ) :\n            B [ j ] [ i ] = cnt ;\n            cnt += 1 ;\n    for i in range ( n ) :\n        for j in range ( m ) :\n            C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;\n    sum = 0 ;\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( i == j ) :\n                sum += C [ i ] [ j ] ;\n    return sum ;\n"}
{"java": "static void printQueries ( int n , int a [ ] , int q , int qry [ ] ) { HashSet < Integer > occ = new HashSet < > ( ) ; int [ ] suffixCount = new int [ n + 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { occ . add ( a [ i ] ) ; suffixCount [ i + 1 ] = occ . size ( ) ; } for ( int i = 0 ; i < q ; i ++ ) System . out . println ( suffixCount [ qry [ i ] ] ) ; }", "python": "def printQueries ( n , a , q , qry ) :\n    occ = dict ( )\n    suffixCount = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        occ [ a [ i ] ] = 1\n        suffixCount [ i + 1 ] = len ( occ )\n    for i in range ( q ) :\n        print ( suffixCount [ qry [ i ] ] )\n"}
{"java": "static void CheckSubarray ( int arr [ ] , int N ) { int [ ] presum = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i += 1 ) { presum [ i ] = presum [ i - 1 ] + arr [ i - 1 ] ; } Vector < Integer > [ ] moduloclass = new Vector [ N ] ; for ( int i = 0 ; i < N ; i += 1 ) { moduloclass [ i ] = new Vector < > ( ) ; } for ( int i = 1 ; i <= N ; i += 1 ) { moduloclass [ presum [ i ] % N ] . add ( i - 1 ) ; } if ( moduloclass [ 0 ] . size ( ) > 0 ) { System . out . print ( 0 + \" \u2581 \" + moduloclass [ 0 ] . get ( 0 ) ) ; return ; } for ( int i = 1 ; i < N ; i += 1 ) { if ( moduloclass [ i ] . size ( ) >= 2 ) { System . out . print ( moduloclass [ i ] . get ( 0 ) + 1 + \" \u2581 \" + moduloclass [ i ] . get ( 1 ) ) ; return ; } } }", "python": "def CheckSubarray ( arr , N ) :\n    presum = [ 0 for i in range ( N + 1 ) ]\n    for i in range ( 1 , N + 1 ) :\n        presum [ i ] = presum [ i - 1 ] + arr [ i - 1 ]\n    moduloclass = [ [ ] ] * N\n    for i in range ( 1 , N + 1 , 1 ) :\n        moduloclass [ presum [ i ] % N ] . append ( i - 1 )\n    if ( len ( moduloclass [ 0 ] ) > 0 ) :\n        print ( 0 + 1 , moduloclass [ 0 ] [ 0 ] + 2 )\n        return\n    for i in range ( 1 , N ) :\n        if ( len ( moduloclass [ i ] ) >= 2 ) :\n            print ( moduloclass [ i ] [ 0 ] + 1 , moduloclass [ i ] [ 1 ] )\n            return\n"}
{"java": "public static void solve ( BufferedReader br , PrintWriter pr ) throws IOException { int n = Integer . parseInt ( br . readLine ( ) ) ; String s = br . readLine ( ) ; StringBuffer sBuffer = new StringBuffer ( s ) ; int k = 1 ; String res = s ; sBuffer = new StringBuffer ( s ) ; for ( int i = 0 ; i < n ; i ++ ) { int tempK = i + 1 ; String first = s . substring ( tempK - 1 , n ) ; StringBuffer second = new StringBuffer ( s . substring ( 0 , tempK - 1 ) ) ; if ( tempK % 2 == n % 2 ) { second = second . reverse ( ) ; String sec = second . toString ( ) ; String temp = first + sec ; if ( temp . compareTo ( res ) < 0 ) { k = tempK ; res = temp ; } } else { String sec = second . toString ( ) ; String temp = first + sec ; if ( temp . compareTo ( res ) < 0 ) { k = tempK ; res = temp ; } } } StringBuffer total = new StringBuffer ( s ) ; total = total . reverse ( ) ; if ( total . toString ( ) . compareTo ( res ) < 0 ) { res = total . toString ( ) ; k = n ; } pr . println ( res ) ; pr . println ( k ) ; }", "python": "def get_ints ( ) : return map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) )\ndef get_arr ( ) : return list ( map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) ) )\ndef get_string ( ) : return sys . stdin . readline ( ) . strip ( )\nt = int ( input ( ) )\nwhile t :\n    t -= 1\n    n = int ( input ( ) )\n    s = get_string ( )\n    s1 = s\n    s2 = s\n    ans = 0\n    for i in range ( 0 , n ) :\n        if ( n - i ) % 2 == 0 :\n            s3 = s1 [ 0 : i ]\n            s4 = s [ i : n ] + s3\n            if s4 < s2 :\n                ans = i\n            s2 = min ( s2 , s4 )\n        else :\n            s3 = s1 [ 0 : i ]\n            s4 = s [ i : n ] + s3 [ : : - 1 ]\n            if s4 < s2 :\n                ans = i\n            s2 = min ( s2 , s4 )\n    print ( s2 )\n    print ( ans + 1 )\n"}
